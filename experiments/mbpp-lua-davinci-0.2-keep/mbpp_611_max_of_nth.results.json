{
  "name": "mbpp_611_max_of_nth",
  "language": "lua",
  "prompt": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = -math.huge\n    for i = 1, #test_list do\n        local val = test_list[i][N]\n        if val > max then\n            max = val\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifhndv0q.lua:16: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpifhndv0q.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 1, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsx3yxi4.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpdsx3yxi4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n\tlocal max = test_list[1][N]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][N] > max then\n\t\t\tmax = test_list[i][N]\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk44yrkg1.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpk44yrkg1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = 0\n    for i = 1, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdmy0e5d.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpbdmy0e5d.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max_value = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max_value then\n            max_value = test_list[i][N]\n        end\n    end\n    return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwj7dht7p.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpwj7dht7p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = 0\n    for i, v in ipairs(test_list) do\n        if v[N] > max then\n            max = v[N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxcds0g5_.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpxcds0g5_.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 1, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsx3yxi4.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpdsx3yxi4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n\tlocal max = test_list[1][N]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][N] > max then\n\t\t\tmax = test_list[i][N]\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk44yrkg1.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpk44yrkg1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n\tlocal max = test_list[1][N]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][N] > max then\n\t\t\tmax = test_list[i][N]\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk44yrkg1.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpk44yrkg1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = 0\n    for i = 1, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdmy0e5d.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpbdmy0e5d.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = -math.huge\n    for i, v in ipairs(test_list) do\n        if v[N] > max then\n            max = v[N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbv7e50g8.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpbv7e50g8.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for _, row in ipairs(test_list) do\n        if row[N] > max then\n            max = row[N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_92pe2tz.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp_92pe2tz.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = -math.huge\n    for i = 1, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua8psx2m.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpua8psx2m.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = 0\n    for i = 1, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdmy0e5d.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpbdmy0e5d.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = 0\n    for i = 1, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdmy0e5d.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpbdmy0e5d.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = 0\n  for i, v in ipairs(test_list) do\n    if v[N] > max then\n      max = v[N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7vvdir9.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpt7vvdir9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = 0\n  for i = 1, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t6kvkeh.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp3t6kvkeh.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = -math.huge\n    for i = 1, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua8psx2m.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpua8psx2m.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 1, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8jwfy1g.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp_8jwfy1g.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = 0\n  for i, v in ipairs(test_list) do\n    if v[N] > max then\n      max = v[N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7vvdir9.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpt7vvdir9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n\tlocal max = test_list[1][N]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][N] > max then\n\t\t\tmax = test_list[i][N]\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk44yrkg1.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpk44yrkg1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = 0\n    for i = 1, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdmy0e5d.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpbdmy0e5d.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = -math.huge\n    for i = 1, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua8psx2m.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpua8psx2m.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n\tlocal max = test_list[1][N]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][N] > max then\n\t\t\tmax = test_list[i][N]\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk44yrkg1.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpk44yrkg1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n\tlocal max = test_list[1][N]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][N] > max then\n\t\t\tmax = test_list[i][N]\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk44yrkg1.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpk44yrkg1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n  local max = test_list[1][N]\n  for i = 2, #test_list do\n    if test_list[i][N] > max then\n      max = test_list[i][N]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_y28to.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmp6b_y28to.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 2, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_edegxo.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpa_edegxo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max = test_list[1][N]\n    for i = 1, #test_list do\n        if test_list[i][N] > max then\n            max = test_list[i][N]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509919,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsx3yxi4.lua:15: expected: 19, actual: 9\nstack traceback:\n\t/tmp/tmpdsx3yxi4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}