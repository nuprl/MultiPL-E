{
  "name": "mbpp_265_list_split",
  "language": "lua",
  "prompt": "-- Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nlocal function list_split(S, step)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = list_split\n    lu.assertEquals(candidate({'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'}, 3), {{'a', 'd', 'g', 'j', 'm'}, {'b', 'e', 'h', 'k', 'n'}, {'c', 'f', 'i', 'l'}})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, 3), {{1, 4, 7, 10, 13}, {2, 5, 8, 11, 14}, {3, 6, 9, 12}})\n    lu.assertEquals(candidate({'python', 'java', 'C', 'C++', 'DBMS', 'SQL'}, 2), {{'python', 'C', 'DBMS'}, {'java', 'C++', 'SQL'}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "  local result = {}\n  local i = 1\n  while i <= #S do\n    table.insert(result, table.concat(S, \"\", i, math.min(i + step - 1, #S)))\n    i = i + step\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local t = {}\n    for i = 1, #S, step do\n        t[#t+1] = S:sub(i, i + step - 1)\n    end\n    return t\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    local part = {}\n    for j = i, i + step - 1 do\n      part[#part + 1] = S[j]\n    end\n    result[#result + 1] = part\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return T\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local R = {}\n    for i = 1, #S, step do\n        R[#R + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return R\nend",
    "    local result = {}\n    local n = #S\n    for i = 1, n, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    local i = 1\n    while i <= #S do\n        result[#result + 1] = {unpack(S, i, math.min(i + step - 1, #S))}\n        i = i + step\n    end\n    return result\nend",
    "  local L = {}\n  for i = 1, #S, step do\n    L[#L+1] = S:sub(i, i+step-1)\n  end\n  return L\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = S:sub(i, i + step - 1)\n    end\n    return result\nend",
    "  local result = {}\n  local i = 1\n  while i <= #S do\n    local j = i + step - 1\n    if j > #S then\n      j = #S\n    end\n    table.insert(result, {unpack(S, i, j)})\n    i = j + 1\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local R = {}\n    for i = 1, #S, step do\n        R[#R + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return R\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "\tlocal R = {}\n\tfor i = 1, #S, step do\n\t\tR[#R + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn R\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = { unpack(S, i, i + step - 1) }\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "   local R = {}\n   for i = 1, #S, step do\n      R[#R+1] = {unpack(S, i, i+step-1)}\n   end\n   return R\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = S:sub(i, i + step - 1)\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "\tlocal R = {}\n\tfor i = 1, #S, step do\n\t\tR[#R+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn R\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "  local R = {}\n  for i = 1, #S, step do\n    R[#R + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return R\nend",
    "    local res = {}\n    for i = 1, #S, step do\n        res[#res + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return res\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = S[i]\n    end\n    return result\nend",
    "\tlocal R = {}\n\tfor i = 1, #S, step do\n\t\tR[#R + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn R\nend",
    "\tlocal R = {}\n\tfor i = 1, #S, step do\n\t\tR[#R+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn R\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    local n = #S\n    for i = 1, n, step do\n        local t = {}\n        for j = i, math.min(i + step - 1, n) do\n            table.insert(t, S[j])\n        end\n        table.insert(result, t)\n    end\n    return result\nend",
    "    local R = {}\n    for i = 1, #S, step do\n        R[#R+1] = {unpack(S, i, i+step-1)}\n    end\n    return R\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i=1,#S,step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn result\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn result\nend",
    "\tlocal res = {}\n\tfor i = 1, #S, step do\n\t\tres[#res + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn res\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local R = {}\n    for i = 1, #S, step do\n        R[#R + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return R\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "\tlocal R = {}\n\tfor i = 1, #S, step do\n\t\tR[#R + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn R\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn result\nend",
    "  local result = {}\n  local i = 1\n  while i <= #S do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n    i = i + step\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local result = {}\n  local i = 1\n  while i <= #S do\n    result[#result+1] = {unpack(S, i, math.min(i+step-1, #S))}\n    i = i + step\n  end\n  return result\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn result\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "\tlocal R = {}\n\tfor i = 1, #S, step do\n\t\tR[#R+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn R\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn T\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    local i = 1\n    while i <= #S do\n        table.insert(result, table.concat(S, \"\", i, math.min(i + step - 1, #S)))\n        i = i + step\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\ttable.insert(result, S:sub(i, i + step - 1))\n\tend\n\treturn result\nend",
    "  local result = {}\n  local n = #S\n  for i = 1, n, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local res = {}\n    for i = 1, #S, step do\n        res[#res + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return res\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "\tlocal R = {}\n\tfor i = 1, #S, step do\n\t\tR[#R+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn R\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "\tlocal L = {}\n\tfor i = 1, #S, step do\n\t\tL[#L+1] = S:sub(i, i+step-1)\n\tend\n\treturn L\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = S:sub(i, i + step - 1)\n    end\n    return result\nend",
    "  local R = {}\n  for i = 1, #S, step do\n    local t = {}\n    for j = i, i + step - 1 do\n      t[#t + 1] = S[j]\n    end\n    R[#R + 1] = t\n  end\n  return R\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn result\nend",
    "  local result = {}\n  local i = 1\n  while i <= #S do\n    table.insert(result, table.concat(S, \"\", i, math.min(i + step - 1, #S)))\n    i = i + step\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "  local R = {}\n  local i = 1\n  for j = 1, #S, step do\n    R[i] = {}\n    for k = j, j + step - 1 do\n      if S[k] then\n        R[i][#R[i] + 1] = S[k]\n      end\n    end\n    i = i + 1\n  end\n  return R\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "\tlocal res = {}\n\tfor i = 1, #S, step do\n\t\tres[#res + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn res\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = S:sub(i, i + step - 1)\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local R = {}\n    for i = 1, #S, step do\n        R[#R+1] = {unpack(S, i, i+step-1)}\n    end\n    return R\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "  local res = {}\n  local i = 1\n  while i <= #S do\n    local e = {}\n    for j = 1, step do\n      e[#e + 1] = S[i]\n      i = i + 1\n    end\n    res[#res + 1] = e\n  end\n  return res\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local result = {}\n  local i = 1\n  while i <= #S do\n    table.insert(result, S[i])\n    i = i + step\n  end\n  return result\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T+1] = {unpack(S, i, i+step-1)}\n  end\n  return T\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "  local result = {}\n  local i = 1\n  while i <= #S do\n    local j = i + step - 1\n    if j > #S then j = #S end\n    table.insert(result, {unpack(S, i, j)})\n    i = i + step\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T+1] = {unpack(S, i, i+step-1)}\n  end\n  return T\nend",
    "    local R = {}\n    for i = 1, #S, step do\n        R[#R + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return R\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = { unpack(S, i, i + step - 1) }\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = S:sub(i, i + step - 1)\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local t = {}\n  for i = 1, #S, step do\n    t[#t+1] = {unpack(S, i, i+step-1)}\n  end\n  return t\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend"
  ]
}