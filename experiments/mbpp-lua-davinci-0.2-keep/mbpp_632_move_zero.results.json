{
  "name": "mbpp_632_move_zero",
  "language": "lua",
  "prompt": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    local len = #num_list\n    for i = 1, len do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < len do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpotmnzphr.lua:21: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpotmnzphr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcuvlhc0d.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpcuvlhc0d.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  for i, v in ipairs(zero_list) do\n    table.insert(non_zero_list, v)\n  end\n  return non_zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    local len = #num_list\n    for i = 1, len do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < len do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpotmnzphr.lua:21: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpotmnzphr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnppmq2ob.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnppmq2ob.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnppmq2ob.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnppmq2ob.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local new_list = {}\n    local zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(new_list, v)\n        end\n    end\n    for i, v in ipairs(zero_list) do\n        table.insert(new_list, v)\n    end\n    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1dp9gk8.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpu1dp9gk8.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnppmq2ob.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnppmq2ob.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zeros = {}\n    local non_zeros = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zeros, num)\n        else\n            table.insert(non_zeros, num)\n        end\n    end\n    return non_zeros, zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0m03xbjs.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp0m03xbjs.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    for _, v in ipairs(zero_list) do\n        table.insert(non_zero_list, v)\n    end\n    return non_zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123961,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i,v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vkttg9x.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp0vkttg9x.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsc86r28.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpvsc86r28.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_count = 0\n    for i = 1, #num_list do\n        if num_list[i] == 0 then\n            zero_count = zero_count + 1\n        else\n            num_list[i - zero_count] = num_list[i]\n        end\n    end\n    for i = #num_list - zero_count + 1, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    local len = #num_list\n    for i = 1, len do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < len do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpotmnzphr.lua:21: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpotmnzphr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local index = 1\n    local count = 0\n    while index <= #num_list do\n        if num_list[index] == 0 then\n            table.remove(num_list, index)\n            count = count + 1\n        else\n            index = index + 1\n        end\n    end\n    for i = 1, count do\n        table.insert(num_list, 0)\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123961,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnppmq2ob.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnppmq2ob.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_count = 0\n    for i = 1, #num_list do\n        if num_list[i] == 0 then\n            zero_count = zero_count + 1\n        else\n            num_list[i - zero_count] = num_list[i]\n        end\n    end\n    for i = #num_list - zero_count + 1, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    for i, num in ipairs(zero_list) do\n        table.insert(non_zero_list, num)\n    end\n    return non_zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local zero_count = 0\n  for i = 1, #num_list do\n    if num_list[i] == 0 then\n      zero_count = zero_count + 1\n    else\n      num_list[i - zero_count] = num_list[i]\n    end\n  end\n  for i = #num_list - zero_count + 1, #num_list do\n    num_list[i] = 0\n  end\n  return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123961,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n\tlocal zero_list = {}\n\tlocal non_zero_list = {}\n\tfor i, v in ipairs(num_list) do\n\t\tif v == 0 then\n\t\t\ttable.insert(zero_list, v)\n\t\telse\n\t\t\ttable.insert(non_zero_list, v)\n\t\tend\n\tend\n\tfor i, v in ipairs(zero_list) do\n\t\ttable.insert(non_zero_list, v)\n\tend\n\treturn non_zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123961,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxxltm9z.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmppxxltm9z.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnppmq2ob.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnppmq2ob.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zeros = {}\n    local non_zeros = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zeros, v)\n        else\n            table.insert(non_zeros, v)\n        end\n    end\n    return non_zeros, zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123961,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpycrx68fi.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpycrx68fi.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123961,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxxltm9z.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmppxxltm9z.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local zeros = {}\n  local non_zeros = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zeros, num)\n    else\n      table.insert(non_zeros, num)\n    end\n  end\n  return non_zeros, zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6qq2r72.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpr6qq2r72.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsc86r28.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpvsc86r28.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    for i, num in ipairs(zero_list) do\n        table.insert(non_zero_list, num)\n    end\n    return non_zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local zeros = {}\n  local non_zeros = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zeros, num)\n    else\n      table.insert(non_zeros, num)\n    end\n  end\n  return non_zeros, zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6qq2r72.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpr6qq2r72.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnppmq2ob.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnppmq2ob.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n\tlocal zero_list = {}\n\tlocal non_zero_list = {}\n\tfor i,v in ipairs(num_list) do\n\t\tif v == 0 then\n\t\t\ttable.insert(zero_list, v)\n\t\telse\n\t\t\ttable.insert(non_zero_list, v)\n\t\tend\n\tend\n\tfor i,v in ipairs(zero_list) do\n\t\ttable.insert(non_zero_list, v)\n\tend\n\treturn non_zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n\tlocal zero_list = {}\n\tlocal non_zero_list = {}\n\tfor i, num in ipairs(num_list) do\n\t\tif num == 0 then\n\t\t\ttable.insert(zero_list, num)\n\t\telse\n\t\t\ttable.insert(non_zero_list, num)\n\t\tend\n\tend\n\treturn non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp83q1awcj.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp83q1awcj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcuvlhc0d.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpcuvlhc0d.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    local len = #num_list\n    for i = 1, len do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < len do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpotmnzphr.lua:21: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpotmnzphr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n\tlocal zero_list = {}\n\tlocal non_zero_list = {}\n\tfor i, v in ipairs(num_list) do\n\t\tif v == 0 then\n\t\t\ttable.insert(zero_list, v)\n\t\telse\n\t\t\ttable.insert(non_zero_list, v)\n\t\tend\n\tend\n\treturn non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnkww7g0.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnnkww7g0.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local new_list = {}\n    local zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v ~= 0 then\n            table.insert(new_list, v)\n        else\n            table.insert(zero_list, v)\n        end\n    end\n    for i, v in ipairs(zero_list) do\n        table.insert(new_list, v)\n    end\n    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnppmq2ob.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnppmq2ob.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n\tlocal new_list = {}\n\tlocal zero_list = {}\n\tfor i, v in ipairs(num_list) do\n\t\tif v == 0 then\n\t\t\ttable.insert(zero_list, v)\n\t\telse\n\t\t\ttable.insert(new_list, v)\n\t\tend\n\tend\n\tfor i, v in ipairs(zero_list) do\n\t\ttable.insert(new_list, v)\n\tend\n\treturn new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123961,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnppmq2ob.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnppmq2ob.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    local len = #num_list\n    for i = 1, len do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < len do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpotmnzphr.lua:21: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpotmnzphr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnppmq2ob.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnppmq2ob.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return table.concat(non_zero_list, \" \") .. \" \" .. table.concat(zero_list, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4iumhaz.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: \"1 2 3 4 0 0\"\nstack traceback:\n\t/tmp/tmpy4iumhaz.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local count = 0\n  for i = 1, #num_list do\n    if num_list[i] ~= 0 then\n      num_list[count] = num_list[i]\n      count = count + 1\n    end\n  end\n  while count < #num_list do\n    num_list[count] = 0\n    count = count + 1\n  end\n  return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123961,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdfc3dq3.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpbdfc3dq3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnppmq2ob.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnppmq2ob.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n\tlocal num_list_len = #num_list\n\tlocal zero_count = 0\n\tfor i = 1, num_list_len do\n\t\tif num_list[i] == 0 then\n\t\t\tzero_count = zero_count + 1\n\t\telse\n\t\t\tnum_list[i - zero_count] = num_list[i]\n\t\tend\n\tend\n\tfor i = num_list_len - zero_count + 1, num_list_len do\n\t\tnum_list[i] = 0\n\tend\n\treturn num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnppmq2ob.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnppmq2ob.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n\tlocal zero_list = {}\n\tlocal non_zero_list = {}\n\tfor i, v in ipairs(num_list) do\n\t\tif v == 0 then\n\t\t\ttable.insert(zero_list, v)\n\t\telse\n\t\t\ttable.insert(non_zero_list, v)\n\t\tend\n\tend\n\treturn non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnkww7g0.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnnkww7g0.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123961,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxxltm9z.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmppxxltm9z.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local new_list = {}\n  local zero_list = {}\n  for i = 1, #num_list do\n    if num_list[i] == 0 then\n      table.insert(zero_list, 0)\n    else\n      table.insert(new_list, num_list[i])\n    end\n  end\n  for i = 1, #zero_list do\n    table.insert(new_list, zero_list[i])\n  end\n  return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnppmq2ob.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnppmq2ob.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123961,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxxltm9z.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmppxxltm9z.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zeros = {}\n    local non_zeros = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zeros, num)\n        else\n            table.insert(non_zeros, num)\n        end\n    end\n    return non_zeros, zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0m03xbjs.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp0m03xbjs.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnppmq2ob.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnppmq2ob.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    local len = #num_list\n    for i = 1, len do\n        if num_list[i] ~= 0 then\n            num_list[count + 1] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < len do\n        num_list[count + 1] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123961,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyhqqyxb.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpoyhqqyxb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnppmq2ob.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnppmq2ob.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123961,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxxltm9z.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmppxxltm9z.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsc86r28.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpvsc86r28.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnppmq2ob.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnppmq2ob.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return table.concat(non_zero_list, \",\") .. \",\" .. table.concat(zero_list, \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71ivywe9.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: \"1,2,3,4,0,0\"\nstack traceback:\n\t/tmp/tmp71ivywe9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahw6wt6h.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpahw6wt6h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i,v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vkttg9x.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp0vkttg9x.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwmnt7ab.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmptwmnt7ab.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}