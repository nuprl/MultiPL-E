{
  "name": "mbpp_771_check_expression",
  "language": "lua",
  "prompt": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local stack = {}\n  local i = 1\n  while i <= #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    elseif c == ')' then\n      if stack[#stack] == '(' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == ']' then\n      if stack[#stack] == '[' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == '}' then\n      if stack[#stack] == '{' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n    i = i + 1\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            stack[#stack + 1] = c\n        elseif close_brackets[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = stack[#stack]\n            if pairs[top] == c then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack:push(c)\n    elseif c == ')' then\n      if stack:peek() ~= '(' then\n        return false\n      end\n      stack:pop()\n    elseif c == ']' then\n      if stack:peek() ~= '[' then\n        return false\n      end\n      stack:pop()\n    elseif c == '}' then\n      if stack:peek() ~= '{' then\n        return false\n      end\n      stack:pop()\n    end\n  end\n  return stack:is_empty()\nend",
    "    local stack = {}\n    local top = 0\n    local i = 1\n    while i <= #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            top = top + 1\n            stack[top] = c\n        elseif c == ')' or c == ']' or c == '}' then\n            if top == 0 then\n                return false\n            end\n            local t = stack[top]\n            if (c == ')' and t == '(') or (c == ']' and t == '[') or (c == '}' and t == '{') then\n                top = top - 1\n            else\n                return false\n            end\n        end\n        i = i + 1\n    end\n    if top ~= 0 then\n        return false\n    end\n    return true\nend",
    "    local stack = {}\n    local map = {\n        ['('] = ')',\n        ['['] = ']',\n        ['{'] = '}',\n    }\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if map[c] then\n            stack[#stack + 1] = c\n        else\n            local top = stack[#stack]\n            if map[top] == c then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['['] = true, ['{'] = true}\n  local close_brackets = {[')'] = true, [']'] = true, ['}'] = true}\n  local open_to_close = {['('] = ')', ['['] = ']', ['{'] = '}'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      stack[#stack + 1] = c\n    elseif close_brackets[c] then\n      if #stack == 0 then\n        return false\n      end\n      local last = stack[#stack]\n      if open_to_close[last] ~= c then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            table.insert(stack, char)\n        elseif close_brackets[char] then\n            if #stack == 0 then\n                return false\n            end\n            local top = table.remove(stack)\n            if bracket_pairs[top] ~= char then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {'(', '{', '['}\n    local close_brackets = {')', '}', ']'}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = '(', ['}'] = '{', [']'] = '['}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            table.insert(stack, c)\n        elseif close[c] then\n            local top = table.remove(stack)\n            if top ~= close[c] then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      table.insert(stack, c)\n    elseif close_brackets[c] then\n      local top = table.remove(stack)\n      if bracket_pairs[top] ~= c then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {\n    ['('] = ')',\n    ['{'] = '}',\n    ['['] = ']'\n  }",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack.push(stack, c)\n        elseif c == ')' or c == '}' or c == ']' then\n            if stack.is_empty(stack) then\n                return false\n            end\n            local top = stack.pop(stack)\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack.is_empty(stack)\nend",
    "\tlocal stack = {}\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif c == '(' or c == '{' or c == '[' then\n\t\t\tstack[#stack + 1] = c\n\t\telseif c == ')' or c == '}' or c == ']' then\n\t\t\tlocal s = stack[#stack]\n\t\t\tif s == '(' and c == ')' or s == '{' and c == '}' or s == '[' and c == ']' then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend",
    "    local stack = {}\n    local exp_len = #exp\n    for i = 1, exp_len do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack[#stack + 1] = c\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack[#stack]\n            if top == '(' and c == ')' or top == '{' and c == '}' or top == '[' and c == ']' then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {\n        ['('] = true,\n        ['{'] = true,\n        ['['] = true\n    }\n    local close_brackets = {\n        [')'] = '(',\n        ['}'] = '{',\n        [']'] = '['\n    }\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = table.remove(stack)\n            if top ~= close_brackets[c] then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "\tlocal stack = {}\n\tlocal i = 1\n\twhile i <= #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif c == '(' or c == '[' or c == '{' then\n\t\t\tstack[#stack + 1] = c\n\t\telseif c == ')' or c == ']' or c == '}' then\n\t\t\tlocal top = stack[#stack]\n\t\t\tif top == '(' and c == ')' or top == '[' and c == ']' or top == '{' and c == '}' then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn #stack == 0\nend",
    "  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack:push(c)\n    elseif c == ')' then\n      if stack:pop() ~= '(' then\n        return false\n      end\n    elseif c == ']' then\n      if stack:pop() ~= '[' then\n        return false\n      end\n    elseif c == '}' then\n      if stack:pop() ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "  local stack = Stack:new()\n  local open_brackets = {\n    ['('] = true,\n    ['{'] = true,\n    ['['] = true\n  }\n  local close_brackets = {\n    [')'] = '(',\n    ['}'] = '{',\n    [']'] = '['\n  }\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      stack:push(char)\n    elseif close_brackets[char] then\n      if stack:is_empty() then\n        return false\n      end\n      local top = stack:pop()\n      if top ~= close_brackets[char] then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            local top = stack[#stack]\n            if top and pairs[top] == c then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if char == \"(\" or char == \"{\" or char == \"[\" then\n            stack[#stack + 1] = char\n        elseif char == \")\" or char == \"}\" or char == \"]\" then\n            local top = stack[#stack]\n            if (top == \"(\" and char == \")\") or (top == \"{\" and char == \"}\") or (top == \"[\" and char == \"]\") then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      table.insert(stack, c)\n    elseif c == ')' then\n      if stack[#stack] == '(' then\n        table.remove(stack)\n      else\n        return false\n      end\n    elseif c == ']' then\n      if stack[#stack] == '[' then\n        table.remove(stack)\n      else\n        return false\n      end\n    elseif c == '}' then\n      if stack[#stack] == '{' then\n        table.remove(stack)\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = Stack.new()\n  local open_brackets = {[\"(\"] = true, [\"{\"] = true, [\"[\"] = true}\n  local close_brackets = {[\")\"] = true, [\"}\"] = true, [\"]\"] = true}\n  local open_to_close = {[\"(\"] = \")\", [\"{\"] = \"}\", [\"[\"] = \"]\"}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      stack:push(c)\n    elseif close_brackets[c] then\n      if stack:is_empty() then\n        return false\n      end\n      local top = stack:pop()\n      if open_to_close[top] ~= c then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "    local stack = Stack()\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local open_to_close = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            stack:push(c)\n        elseif close_brackets[c] then\n            local top = stack:pop()\n            if open_to_close[top] ~= c then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      table.insert(stack, c)\n    elseif c == ')' or c == '}' or c == ']' then\n      local top = table.remove(stack)\n      if top == nil then\n        return false\n      end\n      if c == ')' and top ~= '(' then\n        return false\n      end\n      if c == '}' and top ~= '{' then\n        return false\n      end\n      if c == ']' and top ~= '[' then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack:pop()\n            if top == nil then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "  local stack = {}\n  local open_brackets = {\n    ['('] = true,\n    ['{'] = true,\n    ['['] = true\n  }\n  local close_brackets = {\n    [')'] = true,\n    ['}'] = true,\n    [']'] = true\n  }\n  local bracket_pairs = {\n    ['('] = ')',\n    ['{'] = '}',\n    ['['] = ']'\n  }\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      table.insert(stack, c)\n    elseif close_brackets[c] then\n      local top = table.remove(stack)\n      if not top or bracket_pairs[top] ~= c then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack.push(stack, c)\n        elseif c == ')' or c == ']' or c == '}' then\n            if stack.is_empty(stack) then\n                return false\n            end\n            local top = stack.pop(stack)\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack.is_empty(stack)\nend",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local brackets = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      stack[#stack + 1] = c\n    elseif close_brackets[c] then\n      local top = stack[#stack]\n      if top and brackets[top] == c then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack.push(stack, c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack.pop(stack)\n            if (c == ')' and top ~= '(') or (c == '}' and top ~= '{') or (c == ']' and top ~= '[') then\n                return false\n            end\n        end\n    end\n    return stack.is_empty(stack)\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack:pop()\n            if top == nil then return false end\n            if (c == ')' and top ~= '(') or (c == '}' and top ~= '{') or (c == ']' and top ~= '[') then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack:push(c)\n    elseif c == ')' or c == '}' or c == ']' then\n      if stack:is_empty() then\n        return false\n      end\n      local top = stack:pop()\n      if c == ')' and top ~= '(' then\n        return false\n      elseif c == '}' and top ~= '{' then\n        return false\n      elseif c == ']' and top ~= '[' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "  local stack = {}\n  local balanced = true\n  local i = 1\n  while i <= #exp and balanced do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack.push(stack, c)\n    elseif c == ')' or c == ']' or c == '}' then\n      if stack.is_empty(stack) then\n        balanced = false\n      else\n        local top = stack.pop(stack)\n        if (c == ')' and top ~= '(') or (c == ']' and top ~= '[') or (c == '}' and top ~= '{') then\n          balanced = false\n        end\n      end\n    end\n    i = i + 1\n  end\n  if not stack.is_empty(stack) then\n    balanced = false\n  end\n  return balanced\nend",
    "  local stack = Stack:new()\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if char == '(' or char == '[' or char == '{' then\n      stack:push(char)\n    elseif char == ')' then\n      if stack:pop() ~= '(' then\n        return false\n      end\n    elseif char == ']' then\n      if stack:pop() ~= '[' then\n        return false\n      end\n    elseif char == '}' then\n      if stack:pop() ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      table.insert(stack, c)\n    elseif close_brackets[c] then\n      if #stack == 0 then\n        return false\n      end\n      local top = table.remove(stack)\n      if pairs[top] ~= c then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local matching_brackets = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            local top = table.remove(stack)\n            if top == nil or matching_brackets[top] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local brackets = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            local top = table.remove(stack)\n            if brackets[top] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            table.insert(stack, char)\n        elseif close_brackets[char] then\n            local top = table.remove(stack)\n            if bracket_pairs[top] ~= char then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local ch = exp:sub(i, i)\n        if ch == '(' or ch == '[' or ch == '{' then\n            stack:push(ch)\n        elseif ch == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif ch == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif ch == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = stack[#stack]\n            if pairs[top] == c then\n                table.remove(stack)\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local open_to_close = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            local last = table.remove(stack)\n            if open_to_close[last] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local open = {\n    ['('] = true,\n    ['{'] = true,\n    ['['] = true\n  }\n  local close = {\n    [')'] = '(',\n    ['}'] = '{',\n    [']'] = '['\n  }\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open[char] then\n      stack[#stack + 1] = char\n    elseif close[char] then\n      if stack[#stack] == close[char] then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    local i = 1\n    while i <= #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack[#stack + 1] = c\n        elseif c == ')' then\n            if stack[#stack] ~= '(' then\n                return false\n            end\n            stack[#stack] = nil\n        elseif c == ']' then\n            if stack[#stack] ~= '[' then\n                return false\n            end\n            stack[#stack] = nil\n        elseif c == '}' then\n            if stack[#stack] ~= '{' then\n                return false\n            end\n            stack[#stack] = nil\n        end\n        i = i + 1\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      stack[#stack + 1] = c\n    elseif close[c] then\n      if #stack == 0 then\n        return false\n      end\n      local top = stack[#stack]\n      if pairs[top] ~= c then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      table.insert(stack, char)\n    elseif close_brackets[char] then\n      local top = table.remove(stack)\n      if pairs[top] ~= char then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = '(', ['}'] = '{', [']'] = '['}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            stack[#stack + 1] = c\n        elseif close_brackets[c] then\n            local top = stack[#stack]\n            if top == close_brackets[c] then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    local open_brackets = {\n        ['('] = true,\n        ['{'] = true,\n        ['['] = true\n    }\n    local close_brackets = {\n        [')'] = true,\n        ['}'] = true,\n        [']'] = true\n    }\n    local pairs = {\n        ['('] = ')',\n        ['{'] = '}',\n        ['['] = ']'\n    }\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            table.insert(stack, char)\n        elseif close_brackets[char] then\n            local last = stack[#stack]\n            if pairs[last] == char then\n                table.remove(stack)\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack:push(c)\n    elseif c == ')' then\n      if stack:pop() ~= '(' then\n        return false\n      end\n    elseif c == ']' then\n      if stack:pop() ~= '[' then\n        return false\n      end\n    elseif c == '}' then\n      if stack:pop() ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local matching_brackets = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      stack[#stack + 1] = char\n    elseif close_brackets[char] then\n      if #stack == 0 then\n        return false\n      end\n      local last_open_bracket = stack[#stack]\n      if matching_brackets[last_open_bracket] ~= char then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            table.insert(stack, c)\n        elseif close[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = table.remove(stack)\n            if pairs[top] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {\n        ['('] = true,\n        ['['] = true,\n        ['{'] = true\n    }\n    local close_brackets = {\n        [')'] = '(',\n        [']'] = '[',\n        ['}'] = '{'\n    }\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            local top = table.remove(stack)\n            if top ~= close_brackets[c] then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {\n    ['('] = true,\n    ['{'] = true,\n    ['['] = true\n  }\n  local close_brackets = {\n    [')'] = true,\n    ['}'] = true,\n    [']'] = true\n  }\n  local bracket_pairs = {\n    ['('] = ')',\n    ['{'] = '}',\n    ['['] = ']'\n  }\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      table.insert(stack, char)\n    elseif close_brackets[char] then\n      local last_bracket = table.remove(stack)\n      if bracket_pairs[last_bracket] ~= char then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            table.insert(stack, char)\n        elseif close_brackets[char] then\n            if #stack == 0 then\n                return false\n            else\n                local last_open_bracket = table.remove(stack)\n                if pairs[last_open_bracket] ~= char then\n                    return false\n                end\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack:pop()\n            if top == nil then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    if stack:is_empty() then\n        return true\n    else\n        return false\n    end\nend",
    "    local stack = Stack:new()\n    local open_brackets = {['('] = true, ['['] = true, ['{'] = true}\n    local close_brackets = {[')'] = true, [']'] = true, ['}'] = true}\n    local bracket_pairs = {['('] = ')', ['['] = ']', ['{'] = '}'}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            stack:push(char)\n        elseif close_brackets[char] then\n            local top = stack:pop()\n            if bracket_pairs[top] ~= char then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack.push(stack, c)\n    elseif c == ')' then\n      if stack.pop(stack) ~= '(' then\n        return false\n      end\n    elseif c == ']' then\n      if stack.pop(stack) ~= '[' then\n        return false\n      end\n    elseif c == '}' then\n      if stack.pop(stack) ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack.is_empty(stack)\nend",
    "    local stack = Stack:new()\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if char == '(' or char == '{' or char == '[' then\n            stack:push(char)\n        elseif char == ')' or char == '}' or char == ']' then\n            local top = stack:pop()\n            if not top then\n                return false\n            end\n            if char == ')' and top ~= '(' then\n                return false\n            elseif char == '}' and top ~= '{' then\n                return false\n            elseif char == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "\tlocal stack = {}\n\tlocal top = 0\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif c == \"(\" or c == \"{\" or c == \"[\" then\n\t\t\ttop = top + 1\n\t\t\tstack[top] = c\n\t\telseif c == \")\" or c == \"}\" or c == \"]\" then\n\t\t\tif top == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tlocal top_c = stack[top]\n\t\t\tif (top_c == \"(\" and c == \")\") or (top_c == \"{\" and c == \"}\") or (top_c == \"[\" and c == \"]\") then\n\t\t\t\ttop = top - 1\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn top == 0\nend",
    "  local stack = {}\n  local open_brackets = {\n    ['('] = true,\n    ['{'] = true,\n    ['['] = true,\n  }\n  local close_brackets = {\n    [')'] = '(',\n    ['}'] = '{',\n    [']'] = '[',\n  }\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      table.insert(stack, char)\n    elseif close_brackets[char] then\n      if stack[#stack] == close_brackets[char] then\n        table.remove(stack, #stack)\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = {}\n  local top = 0\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      top = top + 1\n      stack[top] = c\n    elseif c == ')' or c == '}' or c == ']' then\n      if top == 0 then\n        return false\n      end\n      local top_element = stack[top]\n      if (c == ')' and top_element == '(') or\n         (c == '}' and top_element == '{') or\n         (c == ']' and top_element == '[') then\n        top = top - 1\n      else\n        return false\n      end\n    end\n  end\n  if top == 0 then\n    return true\n  else\n    return false\n  end\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = stack[#stack]\n            if pairs[top] ~= c then\n                return false\n            end\n            stack[#stack] = nil\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open[char] then\n            table.insert(stack, char)\n        elseif close[char] then\n            local top = stack[#stack]\n            if pairs[top] == char then\n                table.remove(stack)\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local matching_brackets = {['('] = ')', ['{'] = '}', ['['] = ']'}",
    "    local stack = {}\n    local open_brackets = {\n        ['('] = true,\n        ['{'] = true,\n        ['['] = true\n    }\n    local close_brackets = {\n        [')'] = true,\n        ['}'] = true,\n        [']'] = true\n    }\n    local open_to_close = {\n        ['('] = ')',\n        ['{'] = '}',\n        ['['] = ']'\n    }\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            local top = stack[#stack]\n            if top and open_to_close[top] == c then\n                table.remove(stack, #stack)\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {\n    ['('] = true,\n    ['{'] = true,\n    ['['] = true\n  }\n  local close_brackets = {\n    [')'] = true,\n    ['}'] = true,\n    [']'] = true\n  }\n  local open_to_close = {\n    ['('] = ')',\n    ['{'] = '}',\n    ['['] = ']'\n  }\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      table.insert(stack, char)\n    elseif close_brackets[char] then\n      local last_open = table.remove(stack)\n      if open_to_close[last_open] ~= char then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:is_empty() or stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:is_empty() or stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:is_empty() or stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = '(', ['}'] = '{', [']'] = '['}",
    "  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack.push(c)\n    elseif c == ')' then\n      if stack.pop() ~= '(' then\n        return false\n      end\n    elseif c == ']' then\n      if stack.pop() ~= '[' then\n        return false\n      end\n    elseif c == '}' then\n      if stack.pop() ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack.is_empty()\nend",
    "    local stack = {}\n    local open_brackets = {\n        ['('] = true,\n        ['{'] = true,\n        ['['] = true\n    }\n    local close_brackets = {\n        [')'] = true,\n        ['}'] = true,\n        [']'] = true\n    }\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            local top = table.remove(stack)\n            if not top or not open_brackets[top] or not (top .. c == '()' or top .. c == '{}' or top .. c == '[]') then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = stack[#stack]\n            if pairs[top] ~= c then\n                return false\n            end\n            stack[#stack] = nil\n        end\n    end\n    return #stack == 0\nend",
    "\tlocal stack = Stack:new()\n\tlocal open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n\tlocal close_brackets = {[')'] = '(', ['}'] = '{', [']'] = '['}",
    "\tlocal stack = {}\n\tfor i = 1, #exp do\n\t\tlocal char = exp:sub(i, i)\n\t\tif char == '(' or char == '{' or char == '[' then\n\t\t\tstack[#stack + 1] = char\n\t\telseif char == ')' or char == '}' or char == ']' then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tlocal top = stack[#stack]\n\t\t\tif (char == ')' and top == '(') or (char == '}' and top == '{') or (char == ']' and top == '[') then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack.push(c)\n        elseif c == ')' then\n            if stack.pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack.pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack.pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack.is_empty()\nend",
    "    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack:pop()\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:is_empty() or stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:is_empty() or stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:is_empty() or stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}",
    "    local stack = {}\n    local i = 1\n    while i <= #exp do\n        local c = exp:sub(i, i)\n        if c == \"(\" or c == \"{\" or c == \"[\" then\n            table.insert(stack, c)\n        elseif c == \")\" then\n            if #stack == 0 or stack[#stack] ~= \"(\" then\n                return false\n            end\n            table.remove(stack)\n        elseif c == \"}\" then\n            if #stack == 0 or stack[#stack] ~= \"{\" then\n                return false\n            end\n            table.remove(stack)\n        elseif c == \"]\" then\n            if #stack == 0 or stack[#stack] ~= \"[\" then\n                return false\n            end\n            table.remove(stack)\n        end\n        i = i + 1\n    end\n    return #stack == 0\nend",
    "    local stack = Stack:new()\n    local open_brackets = {\n        ['('] = true,\n        ['['] = true,\n        ['{'] = true\n    }\n    local closed_brackets = {\n        [')'] = '(',\n        [']'] = '[',\n        ['}'] = '{'\n    }\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            stack:push(char)\n        elseif closed_brackets[char] then\n            if stack:pop() ~= closed_brackets[char] then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = '(', ['}'] = '{', [']'] = '['}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            table.insert(stack, char)\n        elseif close_brackets[char] then\n            local top = table.remove(stack)\n            if top ~= close_brackets[char] then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = '(', ['}'] = '{', [']'] = '['}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      table.insert(stack, char)\n    elseif close_brackets[char] then\n      local top = table.remove(stack)\n      if top ~= close_brackets[char] then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    else\n      local top = stack[#stack]\n      if (c == ')' and top == '(') or (c == ']' and top == '[') or (c == '}' and top == '{') then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = Stack()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack:push(c)\n    elseif c == ')' then\n      if stack:pop() ~= '(' then\n        return false\n      end\n    elseif c == ']' then\n      if stack:pop() ~= '[' then\n        return false\n      end\n    elseif c == '}' then\n      if stack:pop() ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      table.insert(stack, char)\n    elseif close_brackets[char] then\n      local top = stack[#stack]\n      if pairs[top] == char then\n        table.remove(stack)\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if char == '(' or char == '[' or char == '{' then\n            table.insert(stack, char)\n        elseif char == ')' then\n            if stack[#stack] == '(' then\n                table.remove(stack)\n            else\n                return false\n            end\n        elseif char == ']' then\n            if stack[#stack] == '[' then\n                table.remove(stack)\n            else\n                return false\n            end\n        elseif char == '}' then\n            if stack[#stack] == '{' then\n                table.remove(stack)\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            if stack:is_empty() then\n                return false\n            end\n            local top = stack:pop()\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "\tlocal stack = {}\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif c == '(' or c == '[' or c == '{' then\n\t\t\tstack[#stack + 1] = c\n\t\telseif c == ')' then\n\t\t\tif stack[#stack] ~= '(' then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tstack[#stack] = nil\n\t\telseif c == ']' then\n\t\t\tif stack[#stack] ~= '[' then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tstack[#stack] = nil\n\t\telseif c == '}' then\n\t\t\tif stack[#stack] ~= '{' then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tstack[#stack] = nil\n\t\tend\n\tend\n\treturn #stack == 0\nend",
    "    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = stack:pop()\n            if top == nil then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = '(', ['}'] = '{', [']'] = '['}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            if stack[#stack] == close[c] then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {\n    ['('] = ')',\n    ['{'] = '}',\n    ['['] = ']'\n  }\n  local close_brackets = {\n    [')'] = '(',\n    ['}'] = '{',\n    [']'] = '['\n  }",
    "  local stack = {}\n  local pairs = {\n    ['('] = ')',\n    ['['] = ']',\n    ['{'] = '}'\n  }\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if pairs[c] then\n      stack[#stack + 1] = c\n    elseif pairs[stack[#stack]] == c then\n      stack[#stack] = nil\n    else\n      return false\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            table.insert(stack, c)\n        elseif close[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = table.remove(stack)\n            if pairs[top] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = Stack:new()\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      stack:push(c)\n    elseif close[c] then\n      local top = stack:pop()\n      if pairs[top] ~= c then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local match = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            local last = stack[#stack]\n            if last and match[last] == c then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {['{'] = true, ['('] = true, ['['] = true}\n  local close_brackets = {['}'] = true, [')'] = true, [']'] = true}\n  local open_to_close = {['{'] = '}', ['('] = ')', ['['] = ']'}",
    "  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack[#stack + 1] = c\n    elseif c == ')' then\n      if stack[#stack] ~= '(' then\n        return false\n      end\n      stack[#stack] = nil\n    elseif c == '}' then\n      if stack[#stack] ~= '{' then\n        return false\n      end\n      stack[#stack] = nil\n    elseif c == ']' then\n      if stack[#stack] ~= '[' then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open[char] then\n      stack[#stack + 1] = char\n    elseif close[char] then\n      if stack[#stack] == pairs[char] then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            table.insert(stack, c)\n        elseif close[c] then\n            local top = table.remove(stack)\n            if pairs[top] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            if #stack == 0 then\n                return false\n            end\n            local top = stack:pop()\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {\n    [\"(\"] = true,\n    [\"{\"] = true,\n    [\"[\"] = true\n  }\n  local close_brackets = {\n    [\")\"] = \"(\",\n    [\"}\"] = \"{\",\n    [\"]\"] = \"[\"\n  }\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      stack[#stack + 1] = c\n    elseif close_brackets[c] then\n      if stack[#stack] ~= close_brackets[c] then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = {}\n  local open = {['('] = true, ['['] = true, ['{'] = true}\n  local close = {[')'] = true, [']'] = true, ['}'] = true}\n  local pairs = {['('] = ')', ['['] = ']', ['{'] = '}'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      stack[#stack + 1] = c\n    elseif close[c] then\n      if #stack == 0 then\n        return false\n      end\n      local top = stack[#stack]\n      if pairs[top] ~= c then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack:push(c)\n    elseif c == ')' or c == '}' or c == ']' then\n      if stack:is_empty() then\n        return false\n      end\n      local top = stack:pop()\n      if (c == ')' and top ~= '(') or (c == '}' and top ~= '{') or (c == ']' and top ~= '[') then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "  local stack = {}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if char == '(' or char == '[' or char == '{' then\n      stack.push(char)\n    elseif char == ')' then\n      if stack.pop() ~= '(' then\n        return false\n      end\n    elseif char == ']' then\n      if stack.pop() ~= '[' then\n        return false\n      end\n    elseif char == '}' then\n      if stack.pop() ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack.is_empty()\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = stack[#stack]\n            if pairs[top] ~= c then\n                return false\n            end\n            stack[#stack] = nil\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            if stack:is_empty() then\n                return false\n            end\n            local top = stack:pop()\n            if (c == ')' and top ~= '(') or (c == ']' and top ~= '[') or (c == '}' and top ~= '{') then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            if stack:is_empty() then\n                return false\n            end\n            local top = stack:pop()\n            if (c == ')' and top ~= '(') or (c == '}' and top ~= '{') or (c == ']' and top ~= '[') then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "  local stack = Stack()\n  for i=1, #exp do\n    local c = exp:sub(i,i)\n    if c == '(' or c == '[' or c == '{' then\n      stack:push(c)\n    elseif c == ')' then\n      if stack:pop() ~= '(' then\n        return false\n      end\n    elseif c == ']' then\n      if stack:pop() ~= '[' then\n        return false\n      end\n    elseif c == '}' then\n      if stack:pop() ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "    local stack = {}\n    local map = {\n        ['('] = ')',\n        ['{'] = '}',\n        ['['] = ']'\n    }\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if map[char] then\n            table.insert(stack, char)\n        elseif map[stack[#stack]] == char then\n            table.remove(stack)\n        else\n            return false\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = Stack()\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "  local stack = {}\n  local open_brackets = {\n    ['('] = true,\n    ['{'] = true,\n    ['['] = true\n  }\n  local close_brackets = {\n    [')'] = true,\n    ['}'] = true,\n    [']'] = true\n  }\n  local bracket_pairs = {\n    ['('] = ')',\n    ['{'] = '}',\n    ['['] = ']'\n  }\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      stack[#stack + 1] = char\n    elseif close_brackets[char] then\n      local last_open_bracket = stack[#stack]\n      if bracket_pairs[last_open_bracket] == char then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = Stack:new()\n  local open_brackets = {['{'] = true, ['('] = true, ['['] = true}\n  local close_brackets = {['}'] = true, [')'] = true, [']'] = true}\n  local bracket_pairs = {['{'] = '}', ['('] = ')', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      stack:push(c)\n    elseif close_brackets[c] then\n      if stack:is_empty() then\n        return false\n      end\n      local top = stack:pop()\n      if bracket_pairs[top] ~= c then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack:push(c)\n    elseif c == ')' then\n      if stack:pop() ~= '(' then\n        return false\n      end\n    elseif c == ']' then\n      if stack:pop() ~= '[' then\n        return false\n      end\n    elseif c == '}' then\n      if stack:pop() ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = '(', ['}'] = '{', [']'] = '['}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open[char] then\n            stack[#stack + 1] = char\n        elseif close[char] then\n            if stack[#stack] == close[char] then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    local open = {\n        ['('] = true,\n        ['{'] = true,\n        ['['] = true\n    }\n    local close = {\n        [')'] = '(',\n        ['}'] = '{',\n        [']'] = '['\n    }\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            if stack[#stack] == close[c] then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}",
    "  local stack = {}\n  local i = 1\n  while i <= #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      table.insert(stack, c)\n    elseif c == ')' or c == '}' or c == ']' then\n      local top = table.remove(stack)\n      if (c == ')' and top ~= '(') or (c == '}' and top ~= '{') or (c == ']' and top ~= '[') then\n        return false\n      end\n    end\n    i = i + 1\n  end\n  return true\nend",
    "\tlocal stack = Stack()\n\tlocal open_brackets = {\n\t\t['('] = true,\n\t\t['{'] = true,\n\t\t['['] = true\n\t}\n\tlocal close_brackets = {\n\t\t[')'] = '(',\n\t\t['}'] = '{',\n\t\t[']'] = '['\n\t}\n\tfor i = 1, #exp do\n\t\tlocal char = exp:sub(i, i)\n\t\tif open_brackets[char] then\n\t\t\tstack:push(char)\n\t\telseif close_brackets[char] then\n\t\t\tlocal top = stack:pop()\n\t\t\tif top ~= close_brackets[char] then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn stack:is_empty()\nend",
    "    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = stack:pop()\n            if top == nil then\n                return false\n            elseif c == ')' and top ~= '(' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    local exp_len = #exp\n    local i = 1\n    local top = 0\n    local is_balanced = true\n    while i <= exp_len do\n        if exp[i] == '(' or exp[i] == '{' or exp[i] == '[' then\n            top = top + 1\n            stack[top] = exp[i]\n        elseif exp[i] == ')' or exp[i] == '}' or exp[i] == ']' then\n            if top == 0 then\n                is_balanced = false\n                break\n            end\n            if exp[i] == ')' and stack[top] == '(' then\n                top = top - 1\n            elseif exp[i] == '}' and stack[top] == '{' then\n                top = top - 1\n            elseif exp[i] == ']' and stack[top] == '[' then\n                top = top - 1\n            else\n                is_balanced = false\n                break\n            end\n        end\n        i = i + 1\n    end\n    if top ~= 0 then\n        is_balanced = false\n    end\n    return is_balanced\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = '(', ['}'] = '{', [']'] = '['}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            table.insert(stack, c)\n        elseif close[c] then\n            local top = table.remove(stack)\n            if top ~= close[c] then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = Stack:new()\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if char == '(' or char == '{' or char == '[' then\n      stack:push(char)\n    elseif char == ')' or char == '}' or char == ']' then\n      if stack:is_empty() then\n        return false\n      end\n      local top = stack:pop()\n      if (top == '(' and char ~= ')') or (top == '{' and char ~= '}') or (top == '[' and char ~= ']') then\n        return false\n      end\n    end\n  end\n  if stack:is_empty() then\n    return true\n  else\n    return false\n  end\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}",
    "  local stack = {}\n  local map = {\n    ['('] = ')',\n    ['{'] = '}',\n    ['['] = ']'\n  }\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if map[char] then\n      stack[#stack + 1] = char\n    else\n      if map[stack[#stack]] == char then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = Stack:new()\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local brackets = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      stack:push(char)\n    elseif close_brackets[char] then\n      local top = stack:pop()\n      if brackets[top] ~= char then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      table.insert(stack, char)\n    elseif close_brackets[char] then\n      local top = table.remove(stack)\n      if bracket_pairs[top] ~= char then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            table.insert(stack, c)\n        elseif c == ')' then\n            if stack[#stack] == '(' then\n                table.remove(stack)\n            else\n                return false\n            end\n        elseif c == ']' then\n            if stack[#stack] == '[' then\n                table.remove(stack)\n            else\n                return false\n            end\n        elseif c == '}' then\n            if stack[#stack] == '{' then\n                table.remove(stack)\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    elseif c == ')' then\n      if stack[#stack] == '(' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == ']' then\n      if stack[#stack] == '[' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == '}' then\n      if stack[#stack] == '{' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = stack:pop()\n            if top == nil then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "  local stack = {}\n  local map = {\n    ['('] = ')',\n    ['['] = ']',\n    ['{'] = '}'\n  }\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if map[c] then\n      table.insert(stack, c)\n    elseif c == ')' or c == ']' or c == '}' then\n      local top = table.remove(stack)\n      if map[top] ~= c then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = Stack()\n    local open_brackets = {'(', '{', '['}\n    local close_brackets = {')', '}', ']'}\n    local bracket_pairs = {\n        ['('] = ')',\n        ['{'] = '}',\n        ['['] = ']'\n    }",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      stack[#stack + 1] = char\n    elseif close_brackets[char] then\n      local top = stack[#stack]\n      if top and bracket_pairs[top] == char then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = Stack.new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack:push(c)\n    elseif c == ')' then\n      if stack:is_empty() or stack:pop() ~= '(' then\n        return false\n      end\n    elseif c == ']' then\n      if stack:is_empty() or stack:pop() ~= '[' then\n        return false\n      end\n    elseif c == '}' then\n      if stack:is_empty() or stack:pop() ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local open_to_close = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            local top = table.remove(stack)\n            if open_to_close[top] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack:pop()\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = stack:pop()\n            if (c == ')' and top ~= '(') or (c == ']' and top ~= '[') or (c == '}' and top ~= '{') then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local brackets = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      table.insert(stack, char)\n    elseif close_brackets[char] then\n      if #stack == 0 then\n        return false\n      end\n      local top = table.remove(stack)\n      if brackets[top] ~= char then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            local top = table.remove(stack)\n            if pairs[top] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "\tlocal stack = Stack()\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif c == '(' or c == '{' or c == '[' then\n\t\t\tstack:push(c)\n\t\telseif c == ')' or c == '}' or c == ']' then\n\t\t\tif stack:is_empty() then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tlocal top = stack:pop()\n\t\t\tif (c == ')' and top ~= '(') or (c == '}' and top ~= '{') or (c == ']' and top ~= '[') then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn stack:is_empty()\nend",
    "    local stack = {}\n    local top = 0\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            top = top + 1\n            stack[top] = c\n        elseif c == ')' or c == ']' or c == '}' then\n            if top == 0 then\n                return false\n            end\n            local x = stack[top]\n            top = top - 1\n            if (c == ')' and x ~= '(') or (c == ']' and x ~= '[') or (c == '}' and x ~= '{') then\n                return false\n            end\n        end\n    end\n    if top == 0 then\n        return true\n    end\n    return false\nend",
    "  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      stack[#stack + 1] = c\n    elseif close[c] then\n      if #stack == 0 then\n        return false\n      end\n      local top = stack[#stack]\n      if pairs[top] == c then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local brackets_map = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      table.insert(stack, c)\n    elseif close_brackets[c] then\n      local top = stack[#stack]\n      if top and brackets_map[top] == c then\n        table.remove(stack)\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack:pop()\n            if top == nil then\n                return false\n            end\n            if (c == ')' and top ~= '(') or (c == '}' and top ~= '{') or (c == ']' and top ~= '[') then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack:push(c)\n    elseif c == ')' or c == '}' or c == ']' then\n      if stack:is_empty() then\n        return false\n      end\n      local top = stack:pop()\n      if c == ')' and top ~= '(' then\n        return false\n      elseif c == '}' and top ~= '{' then\n        return false\n      elseif c == ']' and top ~= '[' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack.push(c)\n    elseif c == ')' or c == '}' or c == ']' then\n      local top = stack.pop()\n      if top == nil then\n        return false\n      end\n      if (c == ')' and top ~= '(') or (c == '}' and top ~= '{') or (c == ']' and top ~= '[') then\n        return false\n      end\n    end\n  end\n  return stack.is_empty()\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            table.insert(stack, char)\n        elseif close_brackets[char] then\n            local last_open_bracket = table.remove(stack)\n            if bracket_pairs[last_open_bracket] ~= char then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    local open = {\n        ['('] = true,\n        ['{'] = true,\n        ['['] = true,\n    }\n    local close = {\n        [')'] = '(',\n        ['}'] = '{',\n        [']'] = '[',\n    }\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            if stack[#stack] == close[c] then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {\n        ['('] = true,\n        ['['] = true,\n        ['{'] = true\n    }\n    local close_brackets = {\n        [')'] = '(',\n        [']'] = '[',\n        ['}'] = '{'\n    }\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            table.insert(stack, char)\n        elseif close_brackets[char] then\n            if #stack == 0 then\n                return false\n            end\n            local top = table.remove(stack)\n            if top ~= close_brackets[char] then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "  local stack = Stack:new()\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if char == '(' or char == '[' or char == '{' then\n      stack:push(char)\n    elseif char == ')' or char == ']' or char == '}' then\n      local top = stack:pop()\n      if char == ')' and top ~= '(' then\n        return false\n      elseif char == ']' and top ~= '[' then\n        return false\n      elseif char == '}' and top ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack.push(stack, c)\n    elseif c == ')' or c == '}' or c == ']' then\n      if stack.is_empty(stack) then\n        return false\n      end\n      local top = stack.pop(stack)\n      if c == ')' and top ~= '(' then\n        return false\n      elseif c == '}' and top ~= '{' then\n        return false\n      elseif c == ']' and top ~= '[' then\n        return false\n      end\n    end\n  end\n  if stack.is_empty(stack) then\n    return true\n  else\n    return false\n  end\nend",
    "  local stack = Stack.new()\n  local open_brackets = {\n    ['('] = true,\n    ['{'] = true,\n    ['['] = true\n  }\n  local close_brackets = {\n    [')'] = true,\n    ['}'] = true,\n    [']'] = true\n  }\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      stack:push(c)\n    elseif close_brackets[c] then\n      local open_bracket = stack:pop()\n      if open_bracket == nil then\n        return false\n      end\n      if open_bracket == '(' and c ~= ')' then\n        return false\n      end\n      if open_bracket == '{' and c ~= '}' then\n        return false\n      end\n      if open_bracket == '[' and c ~= ']' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            if stack:is_empty() then\n                return false\n            end\n            local top = stack:pop()\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "  local stack = {}\n  local open = {['('] = true, ['['] = true, ['{'] = true}\n  local close = {[')'] = true, [']'] = true, ['}'] = true}\n  local open_close = {['('] = ')', ['['] = ']', ['{'] = '}'}",
    "    local stack = {}\n    local open = {\n        [\"(\"] = true,\n        [\"{\"] = true,\n        [\"[\"] = true\n    }\n    local close = {\n        [\")\"] = \"(\",\n        [\"}\"] = \"{\",\n        [\"]\"] = \"[\"\n    }\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            table.insert(stack, c)\n        elseif close[c] then\n            local top = table.remove(stack)\n            if top ~= close[c] then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            local top = table.remove(stack)\n            if pairs[top] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            if stack:is_empty() then\n                return false\n            end\n            local top = stack:pop()\n            if (c == ')' and top ~= '(') or\n               (c == ']' and top ~= '[') or\n               (c == '}' and top ~= '{') then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "  local stack = {}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if char == '(' or char == '[' or char == '{' then\n      stack[#stack + 1] = char\n    elseif char == ')' then\n      if stack[#stack] == '(' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif char == ']' then\n      if stack[#stack] == '[' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif char == '}' then\n      if stack[#stack] == '{' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = Stack.new()\n    local open_brackets = {\n        ['('] = true,\n        ['{'] = true,\n        ['['] = true\n    }\n    local close_brackets = {\n        [')'] = true,\n        ['}'] = true,\n        [']'] = true\n    }\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            stack:push(char)\n        elseif close_brackets[char] then\n            local top = stack:pop()\n            if not top or (top == '(' and char ~= ')') or (top == '{' and char ~= '}') or (top == '[' and char ~= ']') then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = Stack.new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "\tlocal stack = {}\n\tlocal open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n\tlocal close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n\tlocal open_close_brackets = {['('] = ')', ['{'] = '}', ['['] = ']'}\n\tfor i = 1, #exp do\n\t\tlocal char = exp:sub(i, i)\n\t\tif open_brackets[char] then\n\t\t\tstack[#stack + 1] = char\n\t\telseif close_brackets[char] then\n\t\t\tlocal last_open_bracket = stack[#stack]\n\t\t\tif last_open_bracket and open_close_brackets[last_open_bracket] == char then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            table.insert(stack, c)\n        elseif c == ')' then\n            if #stack == 0 or stack[#stack] ~= '(' then\n                return false\n            end\n            table.remove(stack)\n        elseif c == ']' then\n            if #stack == 0 or stack[#stack] ~= '[' then\n                return false\n            end\n            table.remove(stack)\n        elseif c == '}' then\n            if #stack == 0 or stack[#stack] ~= '{' then\n                return false\n            end\n            table.remove(stack)\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack:pop()\n            if (c == ')' and top ~= '(') or\n               (c == '}' and top ~= '{') or\n               (c == ']' and top ~= '[') then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            local top = stack[#stack]\n            if top and pairs[top] == c then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local exp_len = #exp\n  for i = 1, exp_len do\n    local char = exp:sub(i, i)\n    if char == '(' or char == '{' or char == '[' then\n      stack[#stack + 1] = char\n    elseif char == ')' or char == '}' or char == ']' then\n      local top = stack[#stack]\n      if (char == ')' and top == '(') or (char == '}' and top == '{') or (char == ']' and top == '[') then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    local open = {\n        ['('] = true,\n        ['{'] = true,\n        ['['] = true,\n    }\n    local close = {\n        [')'] = '(',\n        ['}'] = '{',\n        [']'] = '[',\n    }\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            table.insert(stack, c)\n        elseif close[c] then\n            if stack[#stack] == close[c] then\n                table.remove(stack)\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {\n    ['('] = true,\n    ['{'] = true,\n    ['['] = true\n  }\n  local close_brackets = {\n    [')'] = '(',\n    ['}'] = '{',\n    [']'] = '['\n  }\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      table.insert(stack, char)\n    elseif close_brackets[char] then\n      if #stack == 0 then\n        return false\n      end\n      local last_open_bracket = table.remove(stack)\n      if last_open_bracket ~= close_brackets[char] then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local open_close_brackets = {\n    ['('] = ')',\n    ['{'] = '}',\n    ['['] = ']'\n  }\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      stack[#stack + 1] = c\n    elseif close_brackets[c] then\n      if #stack == 0 then\n        return false\n      end\n      local open_bracket = stack[#stack]\n      stack[#stack] = nil\n      if open_close_brackets[open_bracket] ~= c then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            local last = table.remove(stack)\n            if pairs[last] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['['] = true, ['{'] = true}\n  local close_brackets = {[')'] = true, [']'] = true, ['}'] = true}\n  local open_to_close = {['('] = ')', ['['] = ']', ['{'] = '}'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      stack[#stack + 1] = c\n    elseif close_brackets[c] then\n      if #stack == 0 then\n        return false\n      end\n      local top = stack[#stack]\n      if open_to_close[top] ~= c then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = '(', ['}'] = '{', [']'] = '['}",
    "    local stack = Stack()\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = '(', ['}'] = '{', [']'] = '['}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack:push(c)\n        elseif close[c] then\n            if stack:pop() ~= close[c] then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    local open_brackets = {\n        ['('] = true,\n        ['{'] = true,\n        ['['] = true\n    }\n    local close_brackets = {\n        [')'] = '(',\n        ['}'] = '{',\n        [']'] = '['\n    }\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            table.insert(stack, char)\n        elseif close_brackets[char] then\n            if stack[#stack] == close_brackets[char] then\n                table.remove(stack)\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    elseif c == ')' then\n      if stack[#stack] == '(' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == ']' then\n      if stack[#stack] == '[' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == '}' then\n      if stack[#stack] == '{' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack.push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = stack.pop()\n            if (c == ')' and top ~= '(') or (c == ']' and top ~= '[') or (c == '}' and top ~= '{') then\n                return false\n            end\n        end\n    end\n    return true\nend",
    "    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "\tlocal stack = {}\n\tlocal i = 1\n\twhile i <= #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif c == '(' or c == '[' or c == '{' then\n\t\t\tstack[#stack + 1] = c\n\t\telseif c == ')' or c == ']' or c == '}' then\n\t\t\tlocal top = stack[#stack]\n\t\t\tif top == '(' and c == ')' or top == '[' and c == ']' or top == '{' and c == '}' then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn #stack == 0\nend",
    "  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack.push(c)\n    elseif c == ')' or c == '}' or c == ']' then\n      if stack.is_empty() then\n        return false\n      end\n      local top = stack.pop()\n      if c == ')' and top ~= '(' then\n        return false\n      elseif c == '}' and top ~= '{' then\n        return false\n      elseif c == ']' and top ~= '[' then\n        return false\n      end\n    end\n  end\n  return stack.is_empty()\nend",
    "    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = '(', ['}'] = '{', [']'] = '['}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            local last = table.remove(stack)\n            if last ~= close_brackets[c] then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      table.insert(stack, char)\n    elseif close_brackets[char] then\n      local last_bracket = table.remove(stack)\n      if not last_bracket or bracket_pairs[last_bracket] ~= char then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = {}\n  for i=1,#exp do\n    local c = exp:sub(i,i)\n    if c == '(' or c == '{' or c == '[' then\n      stack[#stack+1] = c\n    elseif c == ')' or c == '}' or c == ']' then\n      local top = stack[#stack]\n      if top == '(' and c == ')' then\n        stack[#stack] = nil\n      elseif top == '{' and c == '}' then\n        stack[#stack] = nil\n      elseif top == '[' and c == ']' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = {}\n  local len = #exp\n  local i = 1\n  while i <= len do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    elseif c == ')' then\n      if stack[#stack] == '(' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == ']' then\n      if stack[#stack] == '[' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == '}' then\n      if stack[#stack] == '{' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n    i = i + 1\n  end\n  return #stack == 0\nend",
    "  local stack = Stack()\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      stack:push(c)\n    elseif close_brackets[c] then\n      local top = stack:pop()\n      if not top or pairs[top] ~= c then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack.push(stack, c)\n    elseif c == ')' or c == '}' or c == ']' then\n      local top = stack.pop(stack)\n      if not top then\n        return false\n      end\n      if (c == ')' and top ~= '(') or (c == '}' and top ~= '{') or (c == ']' and top ~= '[') then\n        return false\n      end\n    end\n  end\n  if stack.size(stack) > 0 then\n    return false\n  end\n  return true\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            table.insert(stack, c)\n        elseif close[c] then\n            local top = table.remove(stack)\n            if pairs[top] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "\tlocal stack = {}\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif c == '(' or c == '[' or c == '{' then\n\t\t\tstack[#stack + 1] = c\n\t\telseif c == ')' then\n\t\t\tif stack[#stack] == '(' then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telseif c == ']' then\n\t\t\tif stack[#stack] == '[' then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telseif c == '}' then\n\t\t\tif stack[#stack] == '{' then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend",
    "    local stack = Stack:new()\n    for i=1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack:pop()\n            if top == nil then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "  local stack = Stack:new()\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if char == '(' or char == '{' or char == '[' then\n      stack:push(char)\n    elseif char == ')' or char == '}' or char == ']' then\n      local top = stack:pop()\n      if top == nil then\n        return false\n      end\n      if char == ')' and top ~= '(' then\n        return false\n      elseif char == '}' and top ~= '{' then\n        return false\n      elseif char == ']' and top ~= '[' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend"
  ]
}