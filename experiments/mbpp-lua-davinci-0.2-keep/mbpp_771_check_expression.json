{
  "name": "mbpp_771_check_expression",
  "language": "lua",
  "prompt": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local stack = {}\n  local i = 1\n  while i <= #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    elseif c == ')' then\n      if stack[#stack] == '(' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == ']' then\n      if stack[#stack] == '[' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == '}' then\n      if stack[#stack] == '{' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n    i = i + 1\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            stack[#stack + 1] = c\n        elseif close_brackets[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = stack[#stack]\n            if pairs[top] == c then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack:push(c)\n    elseif c == ')' then\n      if stack:peek() ~= '(' then\n        return false\n      end\n      stack:pop()\n    elseif c == ']' then\n      if stack:peek() ~= '[' then\n        return false\n      end\n      stack:pop()\n    elseif c == '}' then\n      if stack:peek() ~= '{' then\n        return false\n      end\n      stack:pop()\n    end\n  end\n  return stack:is_empty()\nend",
    "    local stack = {}\n    local top = 0\n    local i = 1\n    while i <= #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            top = top + 1\n            stack[top] = c\n        elseif c == ')' or c == ']' or c == '}' then\n            if top == 0 then\n                return false\n            end\n            local t = stack[top]\n            if (c == ')' and t == '(') or (c == ']' and t == '[') or (c == '}' and t == '{') then\n                top = top - 1\n            else\n                return false\n            end\n        end\n        i = i + 1\n    end\n    if top ~= 0 then\n        return false\n    end\n    return true\nend",
    "    local stack = {}\n    local map = {\n        ['('] = ')',\n        ['['] = ']',\n        ['{'] = '}',\n    }\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if map[c] then\n            stack[#stack + 1] = c\n        else\n            local top = stack[#stack]\n            if map[top] == c then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['['] = true, ['{'] = true}\n  local close_brackets = {[')'] = true, [']'] = true, ['}'] = true}\n  local open_to_close = {['('] = ')', ['['] = ']', ['{'] = '}'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      stack[#stack + 1] = c\n    elseif close_brackets[c] then\n      if #stack == 0 then\n        return false\n      end\n      local last = stack[#stack]\n      if open_to_close[last] ~= c then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            table.insert(stack, char)\n        elseif close_brackets[char] then\n            if #stack == 0 then\n                return false\n            end\n            local top = table.remove(stack)\n            if bracket_pairs[top] ~= char then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {'(', '{', '['}\n    local close_brackets = {')', '}', ']'}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = '(', ['}'] = '{', [']'] = '['}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            table.insert(stack, c)\n        elseif close[c] then\n            local top = table.remove(stack)\n            if top ~= close[c] then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      table.insert(stack, c)\n    elseif close_brackets[c] then\n      local top = table.remove(stack)\n      if bracket_pairs[top] ~= c then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {\n    ['('] = ')',\n    ['{'] = '}',\n    ['['] = ']'\n  }",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack.push(stack, c)\n        elseif c == ')' or c == '}' or c == ']' then\n            if stack.is_empty(stack) then\n                return false\n            end\n            local top = stack.pop(stack)\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack.is_empty(stack)\nend",
    "\tlocal stack = {}\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif c == '(' or c == '{' or c == '[' then\n\t\t\tstack[#stack + 1] = c\n\t\telseif c == ')' or c == '}' or c == ']' then\n\t\t\tlocal s = stack[#stack]\n\t\t\tif s == '(' and c == ')' or s == '{' and c == '}' or s == '[' and c == ']' then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend",
    "    local stack = {}\n    local exp_len = #exp\n    for i = 1, exp_len do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack[#stack + 1] = c\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack[#stack]\n            if top == '(' and c == ')' or top == '{' and c == '}' or top == '[' and c == ']' then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {\n        ['('] = true,\n        ['{'] = true,\n        ['['] = true\n    }\n    local close_brackets = {\n        [')'] = '(',\n        ['}'] = '{',\n        [']'] = '['\n    }\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = table.remove(stack)\n            if top ~= close_brackets[c] then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "\tlocal stack = {}\n\tlocal i = 1\n\twhile i <= #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif c == '(' or c == '[' or c == '{' then\n\t\t\tstack[#stack + 1] = c\n\t\telseif c == ')' or c == ']' or c == '}' then\n\t\t\tlocal top = stack[#stack]\n\t\t\tif top == '(' and c == ')' or top == '[' and c == ']' or top == '{' and c == '}' then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn #stack == 0\nend",
    "  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack:push(c)\n    elseif c == ')' then\n      if stack:pop() ~= '(' then\n        return false\n      end\n    elseif c == ']' then\n      if stack:pop() ~= '[' then\n        return false\n      end\n    elseif c == '}' then\n      if stack:pop() ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "  local stack = Stack:new()\n  local open_brackets = {\n    ['('] = true,\n    ['{'] = true,\n    ['['] = true\n  }\n  local close_brackets = {\n    [')'] = '(',\n    ['}'] = '{',\n    [']'] = '['\n  }\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      stack:push(char)\n    elseif close_brackets[char] then\n      if stack:is_empty() then\n        return false\n      end\n      local top = stack:pop()\n      if top ~= close_brackets[char] then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            local top = stack[#stack]\n            if top and pairs[top] == c then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if char == \"(\" or char == \"{\" or char == \"[\" then\n            stack[#stack + 1] = char\n        elseif char == \")\" or char == \"}\" or char == \"]\" then\n            local top = stack[#stack]\n            if (top == \"(\" and char == \")\") or (top == \"{\" and char == \"}\") or (top == \"[\" and char == \"]\") then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend"
  ]
}