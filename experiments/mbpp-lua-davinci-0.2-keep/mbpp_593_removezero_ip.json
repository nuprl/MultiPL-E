{
  "name": "mbpp_593_removezero_ip",
  "language": "lua",
  "prompt": "-- Write a function to remove leading zeroes from an ip address.\nlocal function removezero_ip(ip)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = removezero_ip\n    lu.assertEquals(candidate('216.08.094.196'), '216.8.94.196')\n    lu.assertEquals(candidate('12.01.024'), '12.1.24')\n    lu.assertEquals(candidate('216.08.094.0196'), '216.8.94.196')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal t = {}\n\tfor v in ip:gmatch(\"%d+\") do\n\t\ttable.insert(t, v)\n\tend\n\treturn table.concat(t, \".\")\nend",
    "\tlocal ret = {}\n\tlocal i = 1\n\tfor octet in ip:gmatch(\"%d+\") do\n\t\tif octet ~= \"0\" then\n\t\t\tret[i] = octet\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn table.concat(ret, \".\")\nend",
    "\tlocal ret = ip:gsub(\"^0*\", \"\")\n\tif ret == \"\" then\n\t\tret = \"0\"\n\tend\n\treturn ret\nend",
    "\tlocal ret = {}\n\tfor octet in ip:gmatch(\"%d+\") do\n\t\ttable.insert(ret, tonumber(octet))\n\tend\n\treturn table.concat(ret, \".\")\nend",
    "\tlocal ret = ip:gsub(\"^0*\", \"\")\n\tif ret == \"\" then\n\t\treturn \"0\"\n\telse\n\t\treturn ret\n\tend\nend",
    "\tlocal ret = {}\n\tfor octet in ip:gmatch(\"%d+\") do\n\t\ttable.insert(ret, tonumber(octet))\n\tend\n\treturn table.concat(ret, \".\")\nend",
    "\tlocal ret = string.gsub(ip, \"^0*\", \"\")\n\tif ret == \"\" then\n\t\tret = \"0\"\n\tend\n\treturn ret\nend",
    "\tlocal ret = ip:gsub(\"^0*\", \"\")\n\tif ret == \"\" then\n\t\tret = \"0\"\n\tend\n\treturn ret\nend",
    "\tlocal t = {}\n\tfor octet in ip:gmatch(\"%d+\") do\n\t\ttable.insert(t, octet)\n\tend\n\treturn table.concat(t, \".\")\nend",
    "\tlocal ret = ip:gsub(\"^0*\", \"\")\n\tif ret == \"\" then\n\t\tret = \"0\"\n\tend\n\treturn ret\nend",
    "\tlocal o1,o2,o3,o4 = ip:match(\"(%d%d?%d?)%.(%d%d?%d?)%.(%d%d?%d?)%.(%d%d?%d?)\")\n\treturn (tonumber(o1) or 0)..\".\"..(tonumber(o2) or 0)..\".\"..(tonumber(o3) or 0)..\".\"..(tonumber(o4) or 0)\nend",
    "  local ret = ip:gsub(\"^0*\", \"\")\n  if ret == \"\" then\n    ret = \"0\"\n  end\n  return ret\nend",
    "\tlocal ret = {}\n\tfor octet in ip:gmatch(\"%d+\") do\n\t\ttable.insert(ret, tonumber(octet))\n\tend\n\treturn table.concat(ret, \".\")\nend",
    "\tlocal ret = ip:gsub(\"^0*\", \"\")\n\tif ret == \"\" then\n\t\tret = \"0\"\n\tend\n\treturn ret\nend",
    "\tlocal ret = ip:gsub(\"^0*\", \"\")\n\tif ret == \"\" then\n\t\tret = \"0\"\n\tend\n\treturn ret\nend",
    "\tlocal ret = ip:gsub(\"^0*\", \"\")\n\tif ret == \"\" then\n\t\tret = \"0\"\n\tend\n\treturn ret\nend",
    "  local ret = ip:gsub(\"^0*\", \"\")\n  if ret == \"\" then\n    ret = \"0\"\n  end\n  return ret\nend",
    "\tlocal ret = {}\n\tfor octet in ip:gmatch(\"%d+\") do\n\t\ttable.insert(ret, tonumber(octet))\n\tend\n\treturn table.concat(ret, \".\")\nend",
    "\tlocal ret = ip:gsub(\"^0*\", \"\")\n\tif ret == \"\" then\n\t\treturn \"0\"\n\telse\n\t\treturn ret\n\tend\nend",
    "\tlocal ret = {}\n\tfor octet in ip:gmatch(\"%d+\") do\n\t\ttable.insert(ret, tonumber(octet))\n\tend\n\treturn table.concat(ret, \".\")\nend"
  ]
}