{
  "name": "mbpp_597_find_kth",
  "language": "lua",
  "prompt": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then return nil end\n  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuj03tnkn.lua:12: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpuj03tnkn.lua:12: in local 'candidate'\n\t/tmp/tmpuj03tnkn.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local m = #arr1\n  local n = #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, math.floor(k / 2))\n  local j = math.min(n, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2, k - j)\n  else\n    return find_kth(arr1, arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4l3joc4.lua:26: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpr4l3joc4.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(math.floor(k / 2), len1)\n  local j = math.min(math.floor(k / 2), len2)\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5opphkws.lua:19: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp5opphkws.lua:19: in local 'candidate'\n\t/tmp/tmp5opphkws.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local i, j = 1, 1\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            if i + j == k then\n                return arr1[i]\n            end\n            i = i + 1\n        else\n            if i + j == k then\n                return arr2[j]\n            end\n            j = j + 1\n        end\n    end\n    if i > #arr1 then\n        return arr2[k - #arr1]\n    else\n        return arr1[k - #arr2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1g1tzxwc.lua:27: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp1g1tzxwc.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local i = math.min(math.floor(k/2), n1)\n  local j = math.min(k - i, n2)\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i+1), arr2, k-i)\n  else\n    return find_kth(arr1, arr2:sub(j+1), k-j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp394piqec.lua:10: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp394piqec.lua:10: in local 'candidate'\n\t/tmp/tmp394piqec.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "lua: /tmp/tmpv6bag5q7.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local m = #arr1\n  local n = #arr2\n  local i = math.floor(m / (m + n) * (k - 1))\n  local j = (k - 1) - i\n  local ai_1 = (i == 0) and -math.huge or arr1[i]\n  local ai = (i == m) and math.huge or arr1[i + 1]\n  local bj_1 = (j == 0) and -math.huge or arr2[j]\n  local bj = (j == n) and math.huge or arr2[j + 1]\n  if ai_1 <= bj and bj_1 <= ai then\n    return bj_1\n  elseif bj_1 <= ai and ai_1 <= bj then\n    return ai_1\n  elseif ai < bj_1 then\n    return find_kth(arr1, arr2, k - i - 1)\n  else\n    return find_kth(arr2, arr1, k - j - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1tdnoluz.lua:25: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp1tdnoluz.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2be08zro.lua:20: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp2be08zro.lua:20: in local 'candidate'\n\t/tmp/tmp2be08zro.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local mid1 = math.min(#arr1, math.floor(k / 2))\n    local mid2 = math.min(#arr2, math.floor(k / 2))\n    if arr1[mid1] < arr2[mid2] then\n        return find_kth(arr1, arr2, k - mid1)\n    else\n        return find_kth(arr1, arr2, k - mid2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqfxzkmu6.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(len1, math.floor(k / 2))\n    local j = math.min(len2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2.slice(j + 1), k - j)\n    else\n        return find_kth(arr1.slice(i + 1), arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf64v8ol9.lua:19: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpf64v8ol9.lua:19: in local 'candidate'\n\t/tmp/tmpf64v8ol9.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "lua: /tmp/tmpi3zjogrb.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  elseif len2 == 0 then\n    return arr1[k]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkq3d3qrw.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3za6mat1.lua:17: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp3za6mat1.lua:17: in local 'candidate'\n\t/tmp/tmp3za6mat1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  else\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu6vtre9q.lua:9: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpu6vtre9q.lua:9: in local 'candidate'\n\t/tmp/tmpu6vtre9q.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpab6yc2ss.lua:9: expected: 6, actual: nil\nstack traceback:\n\t/tmp/tmpab6yc2ss.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if not arr1 or not arr2 then return nil end\n  if k > #arr1 + #arr2 then return nil end\n  local i, j = 1, 1\n  while i <= #arr1 and j <= #arr2 do\n    if i + j == k then\n      return arr1[i] < arr2[j] and arr1[i] or arr2[j]\n    elseif i + j < k then\n      if arr1[i] < arr2[j] then\n        i = i + 1\n      else\n        j = j + 1\n      end\n    end\n  end\n  if i > #arr1 then\n    return arr2[k - #arr1]\n  else\n    return arr1[k - #arr2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj37sfvpc.lua:27: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpj37sfvpc.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    if #arr1 == 0 then return arr2[k] end\n    if #arr2 == 0 then return arr1[k] end\n    if k == 1 then return math.min(arr1[1], arr2[1]) end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgo84ulx4.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(math.floor(k / 2), n1)\n  local j = math.min(k - i, n2)\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  else\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyiuhdl5r.lua:14: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpyiuhdl5r.lua:14: in local 'candidate'\n\t/tmp/tmpyiuhdl5r.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local i = 1\n  local j = 1\n  local kth = 0\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n    if k == 0 then\n      return kth\n    end\n  end\n  while i <= #arr1 do\n    kth = arr1[i]\n    i = i + 1\n    k = k - 1\n    if k == 0 then\n      return kth\n    end\n  end\n  while j <= #arr2 do\n    kth = arr2[j]\n    j = j + 1\n    k = k - 1\n    if k == 0 then\n      return kth\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpt8dol2bb.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k/2))\n  local j = math.min(#arr2, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j+1), k-j)\n  else\n    return find_kth(arr1.slice(i+1), arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ijt2ks3.lua:17: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp7ijt2ks3.lua:17: in local 'candidate'\n\t/tmp/tmp7ijt2ks3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local mid1 = math.min(#arr1, math.floor(k / 2))\n    local mid2 = math.min(#arr2, math.floor(k / 2))\n    if arr1[mid1] < arr2[mid2] then\n        return find_kth(arr1, arr2, k - mid1)\n    else\n        return find_kth(arr1, arr2, k - mid2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpln3t46ld.lua:20: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  end\n  if n2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(math.floor(k/2), n1)\n  local j = math.min(k - i, n2)\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:slice(j + 1), k - j)\n  else\n    return find_kth(arr1:slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjsy5l28e.lua:18: attempt to call a nil value (method 'slice')\nstack traceback:\n\t/tmp/tmpjsy5l28e.lua:18: in local 'candidate'\n\t/tmp/tmpjsy5l28e.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local i, j = 1, 1\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      if i + j == k then\n        return arr1[i]\n      end\n      i = i + 1\n    else\n      if i + j == k then\n        return arr2[j]\n      end\n      j = j + 1\n    end\n  end\n  if i > #arr1 then\n    return arr2[k - #arr1]\n  else\n    return arr1[k - #arr2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123432,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24s4b47f.lua:27: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp24s4b47f.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3za6mat1.lua:17: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp3za6mat1.lua:17: in local 'candidate'\n\t/tmp/tmp3za6mat1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k / 2))\n  local j = math.min(len2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp1dxwt_a.lua:19: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpp1dxwt_a.lua:19: in local 'candidate'\n\t/tmp/tmpp1dxwt_a.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local n1, n2 = #arr1, #arr2\n    if n1 == 0 then\n        return arr2[k]\n    elseif n2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(n1, math.floor(k / 2))\n    local j = math.min(n2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k - j)\n    else\n        return find_kth(arr1, arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rp41_eo.lua:24: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp1rp41_eo.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpt8dol2bb.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local n1, n2 = #arr1, #arr2\n    if n1 == 0 then\n        return arr2[k]\n    end\n    if n2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(n1, math.floor(k / 2))\n    local j = math.min(n2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2.slice(j + 1), k - j)\n    else\n        return find_kth(arr1.slice(i + 1), arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  if k == n1 + n2 then return math.max(arr1[n1], arr2[n2]) end\n  local i = math.min(math.floor(k / 2), n1)\n  local j = k - i\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  else\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvbri4s4n.lua:11: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpvbri4s4n.lua:11: in local 'candidate'\n\t/tmp/tmpvbri4s4n.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, math.floor(k / 2))\n  local mid2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1.slice(mid1 + 1), arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2.slice(mid2 + 1), k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2p019k56.lua:15: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp2p019k56.lua:15: in local 'candidate'\n\t/tmp/tmp2p019k56.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local i = 1\n  local j = 1\n  local kth = nil\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n    if k == 0 then\n      break\n    end\n  end\n  if k > 0 then\n    if i > #arr1 then\n      kth = arr2[j + k - 1]\n    else\n      kth = arr1[i + k - 1]\n    end\n  end\n  return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, k / 2)\n  local mid2 = math.min(#arr2, k / 2)\n  if arr1[mid1] > arr2[mid2] then\n    return find_kth(arr1, arr2.slice(mid2 + 1), k - mid2)\n  else\n    return find_kth(arr1.slice(mid1 + 1), arr2, k - mid1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5lzx6hk.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmph5lzx6hk.lua:14: in local 'candidate'\n\t/tmp/tmph5lzx6hk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local m, n = #arr1, #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, k / 2)\n  local j = math.min(n, k / 2)\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5txjcb56.lua:15: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp5txjcb56.lua:15: in function </tmp/tmp5txjcb56.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp5txjcb56.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then return nil end\n  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnqhmzgj8.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  else\n    local i = math.min(n1, math.floor(k / 2))\n    local j = math.min(n2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n      return find_kth(arr1, arr2:sub(j + 1), k - j)\n    else\n      return find_kth(arr1:sub(i + 1), arr2, k - i)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  if k == n1 + n2 then return math.max(arr1[n1], arr2[n2]) end\n  local i = math.floor(n1 * k / (n1 + n2))\n  local j = k - 1 - i\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1, arr2, k - i - 1)\n  else\n    return find_kth(arr1, arr2, k)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2gfu5fv.lua:10: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmps2gfu5fv.lua:10: in function </tmp/tmps2gfu5fv.lua:2>\n\t(...tail calls...)\n\t/tmp/tmps2gfu5fv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  local i, j = 1, 1\n  while k > 1 do\n    if arr1[i] == nil then\n      j = j + 1\n    elseif arr2[j] == nil then\n      i = i + 1\n    elseif arr1[i] < arr2[j] then\n      i = i + 1\n    else\n      j = j + 1\n    end\n    k = k - 1\n  end\n  if arr1[i] == nil then\n    return arr2[j]\n  elseif arr2[j] == nil then\n    return arr1[i]\n  else\n    return math.min(arr1[i], arr2[j])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local m = #arr1\n  local n = #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, math.floor(k / 2))\n  local j = math.min(n, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2, k - j)\n  else\n    return find_kth(arr1, arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4l3joc4.lua:26: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpr4l3joc4.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  -- TODO: implement\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5909twc.lua:9: expected: 6, actual: nil\nstack traceback:\n\t/tmp/tmpz5909twc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpab6yc2ss.lua:9: expected: 6, actual: nil\nstack traceback:\n\t/tmp/tmpab6yc2ss.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then return nil end\n  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnqhmzgj8.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  local i = 1\n  local j = 1\n  local kth = nil\n  while i <= #arr1 and j <= #arr2 and k > 0 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n  end\n  while i <= #arr1 and k > 0 do\n    kth = arr1[i]\n    i = i + 1\n    k = k - 1\n  end\n  while j <= #arr2 and k > 0 do\n    kth = arr2[j]\n    j = j + 1\n    k = k - 1\n  end\n  return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local len1, len2 = #arr1, #arr2\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsmf4c90q.lua:22: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  else\n    local i = math.min(n1, math.floor(k / 2))\n    local j = math.min(n2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n      return find_kth(arr1, arr2:sub(j + 1), k - j)\n    else\n      return find_kth(arr1:sub(i + 1), arr2, k - i)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt2xscz1o.lua:20: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpt2xscz1o.lua:20: in local 'candidate'\n\t/tmp/tmpt2xscz1o.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(n1, math.floor(k / 2))\n  local j = math.min(n2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0m2z_351.lua:17: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp0m2z_351.lua:17: in local 'candidate'\n\t/tmp/tmp0m2z_351.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  elseif k == n1 + n2 then\n    return math.max(arr1[n1], arr2[n2])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgz7jx2eu.lua:22: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  local mid1 = math.floor(#arr1 / 2)\n  local mid2 = math.floor(#arr2 / 2)\n  if mid1 + mid2 < k then\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1, arr2:sub(mid2 + 1), k - mid2 - 1)\n    else\n      return find_kth(arr1:sub(mid1 + 1), arr2, k - mid1 - 1)\n    end\n  else\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1:sub(1, mid1), arr2, k)\n    else\n      return find_kth(arr1, arr2:sub(1, mid2), k)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocnr_5wq.lua:18: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpocnr_5wq.lua:18: in local 'candidate'\n\t/tmp/tmpocnr_5wq.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(math.floor(k / 2), len1)\n    local j = math.min(k - i, len2)\n    if arr1[i] < arr2[j] then\n        return find_kth(arr1:sub(i + 1), arr2, k - i)\n    else\n        return find_kth(arr1, arr2:sub(j + 1), k - j)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpljw25ptb.lua:17: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpljw25ptb.lua:17: in local 'candidate'\n\t/tmp/tmpljw25ptb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local m = #arr1\n  local n = #arr2\n  if m == 0 then\n    return arr2[k]\n  end\n  if n == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, math.floor(k / 2))\n  local j = math.min(n, math.floor(k / 2))\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  else\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vz0mbtp.lua:17: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp2vz0mbtp.lua:17: in local 'candidate'\n\t/tmp/tmp2vz0mbtp.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local i = 1\n  local j = 1\n  local kth = nil\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n    if k == 0 then\n      break\n    end\n  end\n  if k > 0 then\n    if i > #arr1 then\n      kth = arr2[j + k - 1]\n    else\n      kth = arr1[i + k - 1]\n    end\n  end\n  return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxmkkogmq.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    if len1 > len2 then\n        return find_kth(arr2, arr1, k)\n    end\n    local i = math.min(k / 2, len1)\n    local j = k - i\n    if arr1[i] < arr2[j] then\n        return find_kth(arr1, arr2, k - i)\n    elseif arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k - j)\n    else\n        return arr1[i]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplmbc2mjb.lua:19: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmplmbc2mjb.lua:19: in function </tmp/tmplmbc2mjb.lua:2>\n\t(...tail calls...)\n\t/tmp/tmplmbc2mjb.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmphnw0mr0i.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, math.floor(k / 2))\n  local mid2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyvje0ehq.lua:24: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpyvje0ehq.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then return arr2[k] end\n  if len2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  if k == len1 + len2 then return math.max(arr1[len1], arr2[len2]) end\n  local mid1 = math.floor(len1 / 2)\n  local mid2 = math.floor(len2 / 2)\n  if arr1[mid1] <= arr2[mid2] then\n    if k <= mid1 + mid2 then\n      return find_kth(arr1, arr2, k)\n    else\n      return find_kth(arr1, arr2, k - mid1)\n    end\n  else\n    if k <= mid1 + mid2 then\n      return find_kth(arr1, arr2, k)\n    else\n      return find_kth(arr1, arr2, k - mid2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123448,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    local i = 1\n    local j = 1\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            if i + j == k then\n                return arr1[i]\n            end\n            i = i + 1\n        else\n            if i + j == k then\n                return arr2[j]\n            end\n            j = j + 1\n        end\n    end\n    if i <= #arr1 then\n        return arr1[k - #arr2]\n    else\n        return arr2[k - #arr1]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7_5ed8q.lua:31: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpr7_5ed8q.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxmkkogmq.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    local i = 1\n    local j = 1\n    local kth = 0\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            kth = arr1[i]\n            i = i + 1\n        else\n            kth = arr2[j]\n            j = j + 1\n        end\n        k = k - 1\n        if k == 0 then\n            break\n        end\n    end\n    if k > 0 then\n        if i > #arr1 then\n            kth = arr2[j + k - 1]\n        else\n            kth = arr1[i + k - 1]\n        end\n    end\n    return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  local i = 1\n  local j = 1\n  local kth = nil\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n    if k == 0 then\n      return kth\n    end\n  end\n  if i <= #arr1 then\n    return arr1[i + k - 1]\n  else\n    return arr2[j + k - 1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k / 2))\n  local j = math.min(len2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkvxivvmz.lua:19: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpkvxivvmz.lua:19: in local 'candidate'\n\t/tmp/tmpkvxivvmz.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, math.floor(k / 2))\n  local mid2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5qc79bb.lua:27: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpi5qc79bb.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, math.floor(k / 2))\n  local mid2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5qc79bb.lua:27: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpi5qc79bb.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpi6vt8e94.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local i, j = 1, 1\n  local m, n = #arr1, #arr2\n  while i <= m and j <= n do\n    if arr1[i] < arr2[j] then\n      if k == i + j - 1 then return arr1[i] end\n      i = i + 1\n    else\n      if k == i + j - 1 then return arr2[j] end\n      j = j + 1\n    end\n  end\n  if i <= m then return arr1[k - n] end\n  return arr2[k - m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  elseif len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k / 2))\n  local j = math.min(len2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf4eyj7vs.lua:18: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpf4eyj7vs.lua:18: in local 'candidate'\n\t/tmp/tmpf4eyj7vs.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpln3t46ld.lua:20: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, math.floor(k / 2))\n  local mid2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyvje0ehq.lua:24: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpyvje0ehq.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  if k == n1 + n2 then return math.max(arr1[n1], arr2[n2]) end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_htd9x2b.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  elseif len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(k/2, len1)\n  local mid2 = math.min(k/2, len2)\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k-mid1)\n  else\n    return find_kth(arr1, arr2, k-mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplo3h3pwr.lua:15: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmplo3h3pwr.lua:15: in local 'candidate'\n\t/tmp/tmplo3h3pwr.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(n1, math.floor(k / 2))\n  local j = math.min(n2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ytrnwni.lua:17: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp7ytrnwni.lua:17: in local 'candidate'\n\t/tmp/tmp7ytrnwni.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  elseif len2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmp03um5g8x.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local i = 1\n    local j = 1\n    local n = #arr1\n    local m = #arr2\n    while i <= n and j <= m do\n        if arr1[i] < arr2[j] then\n            if k == i + j - 1 then\n                return arr1[i]\n            end\n            i = i + 1\n        else\n            if k == i + j - 1 then\n                return arr2[j]\n            end\n            j = j + 1\n        end\n    end\n    if i > n then\n        return arr2[k - n]\n    else\n        return arr1[k - m]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3za6mat1.lua:17: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp3za6mat1.lua:17: in local 'candidate'\n\t/tmp/tmp3za6mat1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    local i, j = 1, 1\n    while k > 1 do\n        if arr1[i] == nil then\n            j = j + 1\n        elseif arr2[j] == nil then\n            i = i + 1\n        elseif arr1[i] < arr2[j] then\n            i = i + 1\n        else\n            j = j + 1\n        end\n        k = k - 1\n    end\n    if arr1[i] == nil then\n        return arr2[j]\n    elseif arr2[j] == nil then\n        return arr1[i]\n    else\n        return math.min(arr1[i], arr2[j])\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxmkkogmq.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, k / 2)\n  local mid2 = math.min(#arr2, k / 2)\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1:sub(mid1 + 1), arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2:sub(mid2 + 1), k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjttzowhn.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpjttzowhn.lua:14: in local 'candidate'\n\t/tmp/tmpjttzowhn.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local mid1 = math.floor(#arr1 / 2)\n  local mid2 = math.floor(#arr2 / 2)\n  if mid1 + mid2 < k then\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1, arr2[mid2 + 1], k - mid2)\n    else\n      return find_kth(arr1[mid1 + 1], arr2, k - mid1)\n    end\n  else\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1[1, mid1], arr2, k)\n    else\n      return find_kth(arr1, arr2[1, mid2], k)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmput5cqttk.lua:16: ']' expected near ','\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local i, j = math.min(n1, math.floor(k/2)), math.min(n2, math.floor(k/2))\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i+1), arr2, k-i)\n  else\n    return find_kth(arr1, arr2:sub(j+1), k-j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbzaw72rx.lua:9: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpbzaw72rx.lua:9: in local 'candidate'\n\t/tmp/tmpbzaw72rx.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(math.floor(k/2), len1)\n  local j = math.min(math.floor(k/2), len2)\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i+1), arr2, k-i)\n  else\n    return find_kth(arr1, arr2:sub(j+1), k-j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5lfnzg0v.lua:17: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp5lfnzg0v.lua:17: in local 'candidate'\n\t/tmp/tmp5lfnzg0v.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2[j + 1], k - j)\n  else\n    return find_kth(arr1[i + 1], arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp99o6eit4.lua:3: attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t/tmp/tmp99o6eit4.lua:3: in function </tmp/tmp99o6eit4.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp99o6eit4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  elseif len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k / 2))\n  local j = math.min(len2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf4eyj7vs.lua:18: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpf4eyj7vs.lua:18: in local 'candidate'\n\t/tmp/tmpf4eyj7vs.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then return nil end\n  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnqhmzgj8.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  elseif len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k / 2))\n  local j = math.min(len2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf4eyj7vs.lua:18: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpf4eyj7vs.lua:18: in local 'candidate'\n\t/tmp/tmpf4eyj7vs.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local l1, l2 = #arr1, #arr2\n  if l1 == 0 then\n    return arr2[k]\n  elseif l2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(math.floor(k / 2), l1)\n  local j = math.min(k - i, l2)\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp07zpuupi.lua:17: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp07zpuupi.lua:17: in local 'candidate'\n\t/tmp/tmp07zpuupi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1, len2 = #arr1, #arr2\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k / 2))\n  local j = math.min(len2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2c5ttzqn.lua:18: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp2c5ttzqn.lua:18: in local 'candidate'\n\t/tmp/tmp2c5ttzqn.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(n1, math.floor(k/2))\n  local j = math.min(n2, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j+1), k-j)\n  else\n    return find_kth(arr1.slice(i+1), arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvp6vpelj.lua:17: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpvp6vpelj.lua:17: in local 'candidate'\n\t/tmp/tmpvp6vpelj.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m1 = math.min(#arr1, math.ceil(k / 2))\n  local m2 = math.min(#arr2, math.ceil(k / 2))\n  if arr1[m1] < arr2[m2] then\n    return find_kth(arr1:sub(m1 + 1), arr2, k - m1)\n  else\n    return find_kth(arr1, arr2:sub(m2 + 1), k - m2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnafvihzc.lua:18: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpnafvihzc.lua:18: in local 'candidate'\n\t/tmp/tmpnafvihzc.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, math.floor(k / 2))\n  local mid2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1[mid1 + 1], arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2[mid2 + 1], k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpge8fkaom.lua:3: attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t/tmp/tmpge8fkaom.lua:3: in function </tmp/tmpge8fkaom.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpge8fkaom.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m = math.floor(k / 2)\n  local n = k - m\n  if arr1[m] < arr2[n] then\n    return find_kth(arr1, arr2, m)\n  else\n    return find_kth(arr1, arr2, n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_jqy5v2.lua:24: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp6_jqy5v2.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(math.floor(k/2), n1)\n  local j = math.min(k - i, n2)\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgjujkh3i.lua:17: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpgjujkh3i.lua:17: in local 'candidate'\n\t/tmp/tmpgjujkh3i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k/2))\n  local j = math.min(#arr2, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j+1), k-j)\n  else\n    return find_kth(arr1.slice(i+1), arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ijt2ks3.lua:17: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp7ijt2ks3.lua:17: in local 'candidate'\n\t/tmp/tmp7ijt2ks3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "lua: /tmp/tmpi3zjogrb.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k/2))\n  local j = math.min(len2, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j+1), k-j)\n  else\n    return find_kth(arr1.slice(i+1), arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpelp8k7ye.lua:19: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpelp8k7ye.lua:19: in local 'candidate'\n\t/tmp/tmpelp8k7ye.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local i, j = 1, 1\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      i = i + 1\n    else\n      j = j + 1\n    end\n    if i + j == k then\n      return arr1[i] < arr2[j] and arr1[i] or arr2[j]\n    end\n  end\n  if i > #arr1 then\n    return arr2[k - #arr1]\n  else\n    return arr1[k - #arr2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbck3kxk.lua:24: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpxbck3kxk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqfxzkmu6.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  elseif k == n1 + n2 then\n    return math.max(arr1[n1], arr2[n2])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgz7jx2eu.lua:22: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  elseif #arr2 == 0 then\n    return arr1[k]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpn8a39tfd.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, math.floor(k / 2))\n  local mid2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1:sub(mid1 + 1), arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2:sub(mid2 + 1), k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9212ge1k.lua:15: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp9212ge1k.lua:15: in local 'candidate'\n\t/tmp/tmp9212ge1k.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  else\n    local i = math.min(n1, math.floor(k/2))\n    local j = math.min(n2, math.floor(k/2))\n    if arr1[i] > arr2[j] then\n      return find_kth(arr1, arr2.slice(j+1), k-j)\n    else\n      return find_kth(arr1.slice(i+1), arr2, k-i)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnd0y0l60.lua:16: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpnd0y0l60.lua:16: in local 'candidate'\n\t/tmp/tmpnd0y0l60.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxmkkogmq.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  local i = 1\n  local j = 1\n  local count = 1\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      if count == k then\n        return arr1[i]\n      end\n      i = i + 1\n      count = count + 1\n    else\n      if count == k then\n        return arr2[j]\n      end\n      j = j + 1\n      count = count + 1\n    end\n  end\n  while i <= #arr1 do\n    if count == k then\n      return arr1[i]\n    end\n    i = i + 1\n    count = count + 1\n  end\n  while j <= #arr2 do\n    if count == k then\n      return arr2[j]\n    end\n    j = j + 1\n    count = count + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k/2))\n  local j = math.min(#arr2, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2[j+1], k-j)\n  else\n    return find_kth(arr1[i+1], arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9gjblb6.lua:3: attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t/tmp/tmpt9gjblb6.lua:3: in function </tmp/tmpt9gjblb6.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpt9gjblb6.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local i, j = 1, 1\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      i = i + 1\n    else\n      j = j + 1\n    end\n    if i + j == k then\n      return arr1[i] < arr2[j] and arr1[i] or arr2[j]\n    end\n  end\n  if i > #arr1 then\n    return arr2[k - #arr1]\n  else\n    return arr1[k - #arr2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbck3kxk.lua:24: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpxbck3kxk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  local i = math.floor(k / 2)\n  local j = k - i\n  if i > #arr1 then\n    i = #arr1\n    j = k - i\n  end\n  if j > #arr2 then\n    j = #arr2\n    i = k - j\n  end\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2, k - j)\n  elseif arr1[i] < arr2[j] then\n    return find_kth(arr1, arr2, k - i)\n  else\n    return arr1[i]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb072hove.lua:16: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpb072hove.lua:16: in function </tmp/tmpb072hove.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpb072hove.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m = math.floor(k / 2)\n  local n = k - m\n  if arr1[m] > arr2[n] then\n    return find_kth(arr1, arr2:sub(n + 1), k - n)\n  else\n    return find_kth(arr1:sub(m + 1), arr2, k - m)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3x77rkkt.lua:20: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp3x77rkkt.lua:20: in local 'candidate'\n\t/tmp/tmp3x77rkkt.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  elseif #arr2 == 0 then\n    return arr1[k]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpn8a39tfd.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  local i = math.floor(k / 2)\n  local j = k - i\n  if i > #arr1 then\n    i = #arr1\n    j = k - i\n  end\n  if j > #arr2 then\n    j = #arr2\n    i = k - j\n  end\n  if arr1[i] == nil then\n    return arr2[j]\n  end\n  if arr2[j] == nil then\n    return arr1[i]\n  end\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1, arr2, k - i)\n  else\n    return find_kth(arr1, arr2, k - j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ff2a42h.lua:32: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp0ff2a42h.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local m = #arr1\n  local n = #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, math.floor(k / 2))\n  local j = math.min(n, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2, k - j)\n  else\n    return find_kth(arr1, arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4l3joc4.lua:26: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpr4l3joc4.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  elseif #arr2 == 0 then\n    return arr1[k]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpn8a39tfd.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m = math.floor(k / 2)\n  local n = k - m\n  if arr1[m] < arr2[n] then\n    return find_kth(arr1:sub(m + 1), arr2, n)\n  else\n    return find_kth(arr1, arr2:sub(n + 1), m)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3z6nsp4g.lua:15: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp3z6nsp4g.lua:15: in local 'candidate'\n\t/tmp/tmp3z6nsp4g.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local i = 1\n    local j = 1\n    local kth = nil\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            kth = arr1[i]\n            i = i + 1\n        else\n            kth = arr2[j]\n            j = j + 1\n        end\n        k = k - 1\n        if k == 0 then\n            break\n        end\n    end\n    if k > 0 then\n        if i > #arr1 then\n            kth = arr2[j + k - 1]\n        else\n            kth = arr1[i + k - 1]\n        end\n    end\n    return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local i = math.min(n1, math.floor(k/2))\n  local j = math.min(n2, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j+1), k-j)\n  else\n    return find_kth(arr1.slice(i+1), arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz_h4bflh.lua:12: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpz_h4bflh.lua:12: in local 'candidate'\n\t/tmp/tmpz_h4bflh.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local m = #arr1\n  local n = #arr2\n  if m == 0 then\n    return arr2[k]\n  elseif n == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, math.floor(k/2))\n  local j = math.min(n, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j+1), k-j)\n  else\n    return find_kth(arr1.slice(i+1), arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnkuyxtik.lua:18: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpnkuyxtik.lua:18: in local 'candidate'\n\t/tmp/tmpnkuyxtik.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2be08zro.lua:20: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp2be08zro.lua:20: in local 'candidate'\n\t/tmp/tmp2be08zro.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, math.floor(k / 2))\n  local mid2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyvje0ehq.lua:24: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpyvje0ehq.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local len1, len2 = #arr1, #arr2\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(len1, math.floor(k / 2))\n    local j = math.min(len2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k - j)\n    else\n        return find_kth(arr1, arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjmwj56v2.lua:25: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpjmwj56v2.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "lua: /tmp/tmpi3zjogrb.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxmkkogmq.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ihkp_0y.lua:17: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp7ihkp_0y.lua:17: in local 'candidate'\n\t/tmp/tmp7ihkp_0y.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local n1, n2 = #arr1, #arr2\n    if n1 == 0 then\n        return arr2[k]\n    elseif n2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i, j = math.floor(k/2), math.floor(k/2)\n    if i > n1 then\n        i = n1\n    end\n    if j > n2 then\n        j = n2\n    end\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k-j)\n    else\n        return find_kth(arr1, arr2, k-i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8u8w6xs.lua:29: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmps8u8w6xs.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(len1, k / 2)\n    local j = math.min(len2, k / 2)\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2.slice(j + 1), k - j)\n    else\n        return find_kth(arr1.slice(i + 1), arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6u1jh9ab.lua:16: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp6u1jh9ab.lua:16: in local 'candidate'\n\t/tmp/tmp6u1jh9ab.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  elseif k == n1 + n2 then\n    return math.max(arr1[n1], arr2[n2])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgz7jx2eu.lua:22: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  if k == n1 + n2 then return math.max(arr1[n1], arr2[n2]) end\n  local i = math.min(n1, math.floor(k / 2))\n  local j = math.min(n2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7jmncmx4.lua:13: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp7jmncmx4.lua:13: in local 'candidate'\n\t/tmp/tmp7jmncmx4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1, len2 = #arr1, #arr2\n  if len1 == 0 then return arr2[k] end\n  if len2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  if k == len1 + len2 then return math.max(arr1[len1], arr2[len2]) end\n  local i = math.min(math.floor(k / 2), len1)\n  local j = math.min(math.floor(k / 2), len2)\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ftgzuib.lua:13: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp0ftgzuib.lua:13: in local 'candidate'\n\t/tmp/tmp0ftgzuib.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local mid1 = math.min(#arr1, math.floor(k / 2))\n  local mid2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptr2ylxxw.lua:18: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmptr2ylxxw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local mid1 = math.min(#arr1, math.floor(k / 2))\n    local mid2 = math.min(#arr2, math.floor(k / 2))\n    if arr1[mid1] < arr2[mid2] then\n        return find_kth(arr1, arr2, k - mid1)\n    else\n        return find_kth(arr1, arr2, k - mid2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid = math.floor(k / 2)\n  local mid1 = math.min(mid, #arr1)\n  local mid2 = math.min(mid, #arr2)\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbcyd28t.lua:25: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpsbcyd28t.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1, len2 = #arr1, #arr2\n  if len1 == 0 then\n    return arr2[k]\n  elseif len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1, mid2 = math.floor(k / 2), math.floor(k / 2)\n  if len1 < mid1 then\n    mid1 = len1\n  end\n  if len2 < mid2 then\n    mid2 = len2\n  end\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9r1ha5m.lua:29: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpq9r1ha5m.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local m = #arr1\n  local n = #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(k/2, m)\n  local j = k - i\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i+1), arr2, k-i)\n  elseif arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j+1), k-j)\n  else\n    return arr1[i]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp40zbjyo.lua:16: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpp40zbjyo.lua:16: in function </tmp/tmpp40zbjyo.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpp40zbjyo.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqfxzkmu6.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(math.floor(k / 2), #arr1)\n  local j = math.min(math.floor(k / 2), #arr2)\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  else\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbo_9d870.lua:18: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpbo_9d870.lua:18: in local 'candidate'\n\t/tmp/tmpbo_9d870.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k <= 0 then return nil end\n  if k > #arr1 + #arr2 then return nil end\n  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpssz9qzvn.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  local i = 1\n  local j = 1\n  local kth = nil\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n    if k == 0 then\n      break\n    end\n  end\n  if k > 0 then\n    if i > #arr1 then\n      kth = arr2[j + k - 1]\n    else\n      kth = arr1[i + k - 1]\n    end\n  end\n  return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local m, n = #arr1, #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, math.floor(k / 2))\n  local j = math.min(n, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2, k - j)\n  else\n    return find_kth(arr1, arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpplj5pg3v.lua:25: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpplj5pg3v.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 > len2 then\n    return find_kth(arr2, arr1, k)\n  end\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k / 2))\n  local j = math.min(len2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2q40x7un.lua:17: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp2q40x7un.lua:17: in function </tmp/tmp2q40x7un.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp2q40x7un.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local mid1 = math.floor(#arr1 / 2)\n  local mid2 = math.floor(#arr2 / 2)\n  if mid1 + mid2 < k then\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1, arr2[mid2 + 1], k - mid2 - 1)\n    else\n      return find_kth(arr1[mid1 + 1], arr2, k - mid1 - 1)\n    end\n  else\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1[1], arr2, k)\n    else\n      return find_kth(arr1, arr2[1], k)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpql8hzibq.lua:3: attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t/tmp/tmpql8hzibq.lua:3: in function </tmp/tmpql8hzibq.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpql8hzibq.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m = math.floor(k / 2)\n  local n = k - m\n  if arr1[m] < arr2[n] then\n    return find_kth(arr1:sub(m + 1), arr2, n)\n  else\n    return find_kth(arr1, arr2:sub(n + 1), m)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3z6nsp4g.lua:15: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp3z6nsp4g.lua:15: in local 'candidate'\n\t/tmp/tmp3z6nsp4g.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k / 2))\n  local j = math.min(len2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkvxivvmz.lua:19: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpkvxivvmz.lua:19: in local 'candidate'\n\t/tmp/tmpkvxivvmz.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  if k == n1 + n2 then return math.max(arr1[n1], arr2[n2]) end\n  local i = math.floor(k / 2)\n  local j = k - i\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1, arr2, k - i)\n  else\n    return find_kth(arr1, arr2, k - j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpteyy2o37.lua:20: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpteyy2o37.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k/2))\n  local j = math.min(len2, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2, k - j)\n  else\n    return find_kth(arr1, arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcr3peze7.lua:26: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpcr3peze7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxmkkogmq.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpst9fi0ys.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local m = #arr1\n  local n = #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, k / 2)\n  local j = math.min(n, k / 2)\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyt2kv09_.lua:16: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpyt2kv09_.lua:16: in function </tmp/tmpyt2kv09_.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpyt2kv09_.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    local i = 1\n    local j = 1\n    local kth = nil\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            kth = arr1[i]\n            i = i + 1\n        else\n            kth = arr2[j]\n            j = j + 1\n        end\n        k = k - 1\n        if k == 0 then\n            break\n        end\n    end\n    if k > 0 then\n        if i > #arr1 then\n            kth = arr2[j + k - 1]\n        else\n            kth = arr1[i + k - 1]\n        end\n    end\n    return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local i, j = 1, 1\n    local len1, len2 = #arr1, #arr2\n    while i <= len1 and j <= len2 do\n        if arr1[i] < arr2[j] then\n            if i + j == k then\n                return arr1[i]\n            end\n            i = i + 1\n        else\n            if i + j == k then\n                return arr2[j]\n            end\n            j = j + 1\n        end\n    end\n    if i > len1 then\n        return arr2[k - len1]\n    else\n        return arr1[k - len2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13ekk0ps.lua:28: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp13ekk0ps.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3za6mat1.lua:17: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp3za6mat1.lua:17: in local 'candidate'\n\t/tmp/tmp3za6mat1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k/2))\n  local j = math.min(#arr2, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j+1), k-j)\n  else\n    return find_kth(arr1:sub(i+1), arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph6dwq5vl.lua:17: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmph6dwq5vl.lua:17: in local 'candidate'\n\t/tmp/tmph6dwq5vl.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local m = #arr1\n  local n = #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, math.floor(k / 2))\n  local j = math.min(n, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2, k - j)\n  else\n    return find_kth(arr1, arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4l3joc4.lua:26: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpr4l3joc4.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local m, n = #arr1, #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, math.floor(k / 2))\n  local j = math.min(n, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcmkeftnh.lua:16: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpcmkeftnh.lua:16: in function </tmp/tmpcmkeftnh.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpcmkeftnh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k <= 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpy42kgbv5.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local i, j = 1, 1\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      if i + j == k then return arr1[i] end\n      i = i + 1\n    else\n      if i + j == k then return arr2[j] end\n      j = j + 1\n    end\n  end\n  if i <= #arr1 then return arr1[k - #arr2] end\n  if j <= #arr2 then return arr2[k - #arr1] end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7o1lhzm.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpu7o1lhzm.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  elseif len2 == 0 then\n    return arr1[k]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkq3d3qrw.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local mid1 = math.min(k / 2, #arr1)\n    local mid2 = math.min(k / 2, #arr2)\n    if arr1[mid1] < arr2[mid2] then\n        return find_kth(arr1, arr2, k - mid1)\n    else\n        return find_kth(arr1, arr2, k - mid2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3lnvmix6.lua:17: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp3lnvmix6.lua:17: in local 'candidate'\n\t/tmp/tmp3lnvmix6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  elseif k == n1 + n2 then\n    return math.max(arr1[n1], arr2[n2])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgz7jx2eu.lua:22: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i, j = math.min(n1, math.floor(k / 2)), math.min(n2, math.floor(k / 2))\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  else\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc2jgl8c0.lua:14: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpc2jgl8c0.lua:14: in local 'candidate'\n\t/tmp/tmpc2jgl8c0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local i = 1\n  local j = 1\n  local kth = nil\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n    if k == 0 then\n      break\n    end\n  end\n  if k > 0 then\n    if i <= #arr1 then\n      kth = arr1[i + k - 1]\n    else\n      kth = arr2[j + k - 1]\n    end\n  end\n  return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1] or math.huge, arr2[1] or math.huge)\n  end\n  local mid = math.floor(k / 2)\n  local val1 = arr1[mid] or math.huge\n  local val2 = arr2[mid] or math.huge\n  if val1 < val2 then\n    return find_kth(arr1, arr2, k - mid)\n  else\n    return find_kth(arr2, arr1, k - mid)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_66iy_0u.lua:19: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp_66iy_0u.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m = math.floor(k / 2)\n  local n = k - m\n  if arr1[m] < arr2[n] then\n    return find_kth(arr1, arr2, k - m)\n  else\n    return find_kth(arr1, arr2, k - n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bnizz74.lua:27: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp_bnizz74.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local n1, n2 = #arr1, #arr2\n    if n1 == 0 then\n        return arr2[k]\n    elseif n2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(math.floor(k / 2), n1)\n    local j = math.min(k - i, n2)\n    if arr1[i] < arr2[j] then\n        return find_kth(arr1:sub(i + 1), arr2, k - i)\n    else\n        return find_kth(arr1, arr2:sub(j + 1), k - j)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl11kcblv.lua:15: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpl11kcblv.lua:15: in local 'candidate'\n\t/tmp/tmpl11kcblv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    if #arr1 == 0 then\n        return arr2[k]\n    elseif #arr2 == 0 then\n        return arr1[k]\n    end\n    local mid1 = math.floor(#arr1 / 2)\n    local mid2 = math.floor(#arr2 / 2)\n    if mid1 + mid2 < k then\n        if arr1[mid1 + 1] > arr2[mid2 + 1] then\n            return find_kth(arr1, arr2[mid2 + 1], k - mid2 - 1)\n        else\n            return find_kth(arr1[mid1 + 1], arr2, k - mid1 - 1)\n        end\n    else\n        if arr1[mid1 + 1] > arr2[mid2 + 1] then\n            return find_kth(arr1[1:mid1], arr2, k)\n        else\n            return find_kth(arr1, arr2[1:mid2], k)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmptl_ntcxz.lua:18: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2be08zro.lua:20: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp2be08zro.lua:20: in local 'candidate'\n\t/tmp/tmp2be08zro.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "lua: /tmp/tmpi3zjogrb.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(k / 2, #arr1)\n  local mid2 = math.min(k / 2, #arr2)\n  if arr1[mid1] > arr2[mid2] then\n    return find_kth(arr1, arr2:sub(mid2 + 1), k - mid2)\n  else\n    return find_kth(arr1:sub(mid1 + 1), arr2, k - mid1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6spo_c90.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp6spo_c90.lua:14: in local 'candidate'\n\t/tmp/tmp6spo_c90.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8kfu678f.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n\tlocal n1, n2 = #arr1, #arr2\n\tif n1 == 0 then\n\t\treturn arr2[k]\n\telseif n2 == 0 then\n\t\treturn arr1[k]\n\telseif k == 1 then\n\t\treturn math.min(arr1[1], arr2[1])\n\tend\n\tlocal i, j = math.min(n1, k / 2), math.min(n2, k / 2)\n\tif arr1[i] > arr2[j] then\n\t\treturn find_kth(arr1, arr2:sub(j + 1), k - j)\n\telse\n\t\treturn find_kth(arr1:sub(i + 1), arr2, k - i)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp20vn9vm5.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp20vn9vm5.lua:12: in local 'candidate'\n\t/tmp/tmp20vn9vm5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(n1, math.floor(k/2))\n  local j = math.min(n2, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2[j+1], k-j)\n  else\n    return find_kth(arr1[i+1], arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3my_u_j2.lua:3: attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t/tmp/tmp3my_u_j2.lua:3: in function </tmp/tmp3my_u_j2.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp3my_u_j2.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local i, j = 1, 1\n    local n1, n2 = #arr1, #arr2\n    while i <= n1 and j <= n2 do\n        if arr1[i] < arr2[j] then\n            if i + j == k then\n                return arr1[i]\n            end\n            i = i + 1\n        else\n            if i + j == k then\n                return arr2[j]\n            end\n            j = j + 1\n        end\n    end\n    if i > n1 then\n        return arr2[k - n1]\n    else\n        return arr1[k - n2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpysceami9.lua:28: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpysceami9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  elseif len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(k/2, len1)\n  local j = math.min(k/2, len2)\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i+1), arr2, k-i)\n  else\n    return find_kth(arr1, arr2:sub(j+1), k-j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzo895pkd.lua:15: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpzo895pkd.lua:15: in local 'candidate'\n\t/tmp/tmpzo895pkd.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(k / 2, len1)\n    local j = math.min(k / 2, len2)\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k - j)\n    else\n        return find_kth(arr1, arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7l__g34z.lua:16: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp7l__g34z.lua:16: in local 'candidate'\n\t/tmp/tmp7l__g34z.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local m, n = #arr1, #arr2\n    if m > n then\n        return find_kth(arr2, arr1, k)\n    end\n    if m == 0 then\n        return arr2[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(m, math.floor(k/2))\n    local j = math.min(n, math.floor(k/2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k-j)\n    else\n        return find_kth(arr1, arr2, k-i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ja99o_m.lua:25: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp4ja99o_m.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  local i = 1\n  local j = 1\n  local kth = nil\n  while i <= #arr1 and j <= #arr2 and k > 0 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n  end\n  while i <= #arr1 and k > 0 do\n    kth = arr1[i]\n    i = i + 1\n    k = k - 1\n  end\n  while j <= #arr2 and k > 0 do\n    kth = arr2[j]\n    j = j + 1\n    k = k - 1\n  end\n  return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local i, j = 1, 1\n  local n1, n2 = #arr1, #arr2\n  while i <= n1 and j <= n2 do\n    if arr1[i] < arr2[j] then\n      if i + j == k then return arr1[i] end\n      i = i + 1\n    else\n      if i + j == k then return arr2[j] end\n      j = j + 1\n    end\n  end\n  if i > n1 then return arr2[k - n1] end\n  if j > n2 then return arr1[k - n2] end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlkam9qk.lua:21: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpzlkam9qk.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m = math.floor(k / 2)\n  local n = k - m\n  if arr1[m] > arr2[n] then\n    return find_kth(arr1, arr2, n)\n  else\n    return find_kth(arr1, arr2, m)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhqkd1w8.lua:24: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpmhqkd1w8.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpln3t46ld.lua:20: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, math.floor(k / 2))\n  local mid2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyvje0ehq.lua:24: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpyvje0ehq.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  elseif #arr2 == 0 then\n    return arr1[k]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpn8a39tfd.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  if n1 == 1 and n2 == 1 then return math.max(arr1[1], arr2[1]) end\n  if n1 == 1 then\n    if k == 2 then return math.max(arr1[1], arr2[1]) end\n    if arr1[1] < arr2[k-1] then return arr2[k-1] end\n    if arr1[1] > arr2[k] then return arr2[k] end\n    return arr1[1]\n  end\n  if n2 == 1 then\n    if k == 2 then return math.max(arr1[1], arr2[1]) end\n    if arr2[1] < arr1[k-1] then return arr1[k-1] end\n    if arr2[1] > arr1[k] then return arr1[k] end\n    return arr2[1]\n  end\n  local i, j = math.floor(k/2), math.floor(k/2)\n  if i + j > k then\n    if arr1[i] > arr2[j] then i = i - 1 end\n    if arr1[i] < arr2[j] then j = j - 1 end\n  end\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2, k - j)\n  else\n    return find_kth(arr1, arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdll0r7fp.lua:35: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpdll0r7fp.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, math.floor(k/2))\n  local mid2 = math.min(#arr2, math.floor(k/2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1.slice(mid1+1), arr2, k-mid1)\n  else\n    return find_kth(arr1, arr2.slice(mid2+1), k-mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyz92a0oj.lua:15: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpyz92a0oj.lua:15: in local 'candidate'\n\t/tmp/tmpyz92a0oj.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local i = 1\n    local j = 1\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            if i + j == k then\n                return arr1[i]\n            end\n            i = i + 1\n        else\n            if i + j == k then\n                return arr2[j]\n            end\n            j = j + 1\n        end\n    end\n    if i <= #arr1 then\n        return arr1[k - j + 1]\n    else\n        return arr2[k - i + 1]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bvmhy68.lua:28: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp_bvmhy68.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  local i = 1\n  local j = 1\n  local kth = 0\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n    if k == 0 then\n      return kth\n    end\n  end\n  if i > #arr1 then\n    return arr2[j + k - 1]\n  else\n    return arr1[i + k - 1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local m, n = #arr1, #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, math.floor(k / 2))\n  local j = math.min(n, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7lvinln2.lua:16: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp7lvinln2.lua:16: in function </tmp/tmp7lvinln2.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp7lvinln2.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local m, n = #arr1, #arr2\n    if m > n then\n        return find_kth(arr2, arr1, k)\n    end\n    if m == 0 then\n        return arr2[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(m, k / 2)\n    local j = math.min(n, k / 2)\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k - j)\n    else\n        return find_kth(arr1, arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxxeu_cmj.lua:15: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpxxeu_cmj.lua:15: in function </tmp/tmpxxeu_cmj.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpxxeu_cmj.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    elseif len2 == 0 then\n        return arr1[k]\n    elseif k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmptmez7guo.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local a = arr1[math.floor(k / 2)] or math.huge\n  local b = arr2[math.floor(k / 2)] or math.huge\n  if a < b then\n    return find_kth(arr1:sub(math.floor(k / 2) + 1), arr2, k - math.floor(k / 2))\n  else\n    return find_kth(arr1, arr2:sub(math.floor(k / 2) + 1), k - math.floor(k / 2))\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4jpdzr_t.lua:18: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp4jpdzr_t.lua:18: in local 'candidate'\n\t/tmp/tmp4jpdzr_t.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  elseif len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k / 2))\n  local j = math.min(len2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf4eyj7vs.lua:18: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpf4eyj7vs.lua:18: in local 'candidate'\n\t/tmp/tmpf4eyj7vs.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(n1, math.floor(k/2))\n  local j = math.min(n2, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2[j+1], k-j)\n  else\n    return find_kth(arr1[i+1], arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp58n0req9.lua:3: attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t/tmp/tmp58n0req9.lua:3: in function </tmp/tmp58n0req9.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp58n0req9.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  elseif #arr2 == 0 then\n    return arr1[k]\n  end\n  local mid1 = math.floor(#arr1 / 2)\n  local mid2 = math.floor(#arr2 / 2)\n  if mid1 + mid2 < k then\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1, arr2:slice(mid2 + 1), k - mid2 - 1)\n    else\n      return find_kth(arr1:slice(mid1 + 1), arr2, k - mid1 - 1)\n    end\n  else\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1:slice(1, mid1), arr2, k)\n    else\n      return find_kth(arr1, arr2:slice(1, mid2), k)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz8jynq9d.lua:14: attempt to call a nil value (method 'slice')\nstack traceback:\n\t/tmp/tmpz8jynq9d.lua:14: in local 'candidate'\n\t/tmp/tmpz8jynq9d.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  elseif k == n1 + n2 then\n    return math.max(arr1[n1], arr2[n2])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgz7jx2eu.lua:22: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(len1, math.floor(k / 2))\n    local j = math.min(len2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k - j)\n    else\n        return find_kth(arr1, arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppn3uzsb.lua:26: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpppn3uzsb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, math.floor(k / 2))\n  local mid2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5qc79bb.lua:27: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpi5qc79bb.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509711,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3za6mat1.lua:17: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp3za6mat1.lua:17: in local 'candidate'\n\t/tmp/tmp3za6mat1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(math.floor(k / 2), n1)\n  local j = math.min(k - i, n2)\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  else\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn7h9d19q.lua:15: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpn7h9d19q.lua:15: in local 'candidate'\n\t/tmp/tmpn7h9d19q.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ihkp_0y.lua:17: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp7ihkp_0y.lua:17: in local 'candidate'\n\t/tmp/tmp7ihkp_0y.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(len1, math.floor(k / 2))\n    local j = math.min(len2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k - j)\n    else\n        return find_kth(arr1, arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppn3uzsb.lua:26: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpppn3uzsb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m = math.floor(k / 2)\n  local n = k - m\n  if arr1[m] < arr2[n] then\n    return find_kth(arr1, arr2, m)\n  else\n    return find_kth(arr1, arr2, n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_jqy5v2.lua:24: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp6_jqy5v2.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "lua: /tmp/tmph20dxl8u.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}