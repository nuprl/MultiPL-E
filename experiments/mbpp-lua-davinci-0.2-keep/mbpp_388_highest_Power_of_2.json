{
  "name": "mbpp_388_highest_Power_of_2",
  "language": "lua",
  "prompt": "-- Write a python function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local result = 1\n    while result < n do\n        result = result * 2\n    end\n    return result / 2\nend",
    "    local i = 1\n    while i < n do\n        i = i * 2\n    end\n    return i\nend",
    "    local power = 0\n    while n > 0 do\n        n = n // 2\n        power = power + 1\n    end\n    return 2 ^ (power - 1)\nend",
    "    local i = 1\n    while i <= n do\n        i = i * 2\n    end\n    return i / 2\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\ti = i * 2\n\tend\n\treturn i / 2\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\ti = i * 2\n\tend\n\treturn i / 2\nend",
    "    local i = 1\n    while i < n do\n        i = i * 2\n    end\n    return i\nend",
    "    local i = 1\n    while i < n do\n        i = i * 2\n    end\n    return i\nend",
    "    local i = 1\n    while i < n do\n        i = i * 2\n    end\n    return i\nend",
    "\tlocal power = 1\n\twhile power <= n do\n\t\tpower = power * 2\n\tend\n\treturn power / 2\nend",
    "    local i = 1\n    while i < n do\n        i = i * 2\n    end\n    return i\nend",
    "    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\ti = i * 2\n\tend\n\treturn i / 2\nend",
    "    local power = 0\n    while n > 0 do\n        n = n / 2\n        power = power + 1\n    end\n    return 2 ^ (power - 1)\nend",
    "    local p = 0\n    while n > 0 do\n        n = n / 2\n        p = p + 1\n    end\n    return 2 ^ (p - 1)\nend",
    "  local power = 0\n  while n > 0 do\n    n = n / 2\n    power = power + 1\n  end\n  return 2 ^ (power - 1)\nend",
    "    local i = 0\n    while 2^i <= n do\n        i = i + 1\n    end\n    return i - 1\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\ti = i * 2\n\tend\n\treturn i/2\nend",
    "    local i = 1\n    while i <= n do\n        i = i * 2\n    end\n    return i / 2\nend",
    "    local i = 1\n    while i < n do\n        i = i * 2\n    end\n    return i\nend"
  ]
}