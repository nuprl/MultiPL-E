{
  "name": "mbpp_722_filter_data",
  "language": "lua",
  "prompt": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n  local result = {}\n  for k, v in pairs(students) do\n    if v[1] > h and v[2] > w then\n      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy11a5cbq.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmpy11a5cbq.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        local height, weight = data[1], data[2]\n        if height > h and weight > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84_syknx.lua:16: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp84_syknx.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local res = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            res[k] = v\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4y8gp06m.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp4y8gp06m.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local filtered = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            filtered[name] = data\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27p_txsm.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp27p_txsm.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] >= h and v[2] >= w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        local height, weight = data[1], data[2]\n        if height > h and weight > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84_syknx.lua:16: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp84_syknx.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local res = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            res[k] = v\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4y8gp06m.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp4y8gp06m.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        local height, weight = data[1], data[2]\n        if height > h and weight > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84_syknx.lua:16: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp84_syknx.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local res = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            res[name] = data\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xlj39zn.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp6xlj39zn.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n  local result = {}\n  for name, data in pairs(students) do\n    if data[1] > h and data[2] > w then\n      result[name] = data\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt54qsvzp.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmpt54qsvzp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        local height, weight = data[1], data[2]\n        if height > h and weight > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84_syknx.lua:16: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp84_syknx.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local res = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            res[k] = v\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4y8gp06m.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp4y8gp06m.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n  local result = {}\n  for name, data in pairs(students) do\n    if data[1] > h and data[2] > w then\n      result[name] = data\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt54qsvzp.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmpt54qsvzp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local filtered = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            filtered[name] = data\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27p_txsm.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp27p_txsm.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] >= h and v[2] >= w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local res = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            res[k] = v\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4y8gp06m.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp4y8gp06m.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] >= h and v[2] >= w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        local height, weight = data[1], data[2]\n        if height > h and weight > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84_syknx.lua:16: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp84_syknx.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n  local result = {}\n  for name, data in pairs(students) do\n    if data[1] > h and data[2] > w then\n      result[name] = data\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt54qsvzp.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmpt54qsvzp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n  local result = {}\n  for k, v in pairs(students) do\n    if v[1] > h and v[2] > w then\n      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy11a5cbq.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmpy11a5cbq.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n\tlocal result = {}\n\tfor name, data in pairs(students) do\n\t\tif data[1] >= h and data[2] >= w then\n\t\t\tresult[name] = data\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] >= h and v[2] >= w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n  local result = {}\n  for name, data in pairs(students) do\n    if data[1] > h and data[2] > w then\n      result[name] = data\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt54qsvzp.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmpt54qsvzp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        local height, weight = data[1], data[2]\n        if height >= h and weight >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] >= h and v[2] >= w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local filtered = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            filtered[name] = data\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27p_txsm.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp27p_txsm.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n  local result = {}\n  for name, data in pairs(students) do\n    if data[1] > h and data[2] > w then\n      result[name] = data\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt54qsvzp.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmpt54qsvzp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n  local result = {}\n  for name, data in pairs(students) do\n    if data[1] > h and data[2] > w then\n      result[name] = data\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt54qsvzp.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmpt54qsvzp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n  local filtered = {}\n  for name, data in pairs(students) do\n    if data[1] >= h and data[2] >= w then\n      filtered[name] = data\n    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n  local result = {}\n  for k, v in pairs(students) do\n    if v[1] > h and v[2] > w then\n      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy11a5cbq.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmpy11a5cbq.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n  local result = {}\n  for name, data in pairs(students) do\n    if data[1] >= h and data[2] >= w then\n      result[name] = data\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local res = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            res[k] = v\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4y8gp06m.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp4y8gp06m.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        local height, weight = data[1], data[2]\n        if height >= h and weight >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n  local result = {}\n  for name, data in pairs(students) do\n    if data[1] > h and data[2] > w then\n      result[name] = data\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt54qsvzp.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmpt54qsvzp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] >= h and data[2] >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        local height, weight = data[1], data[2]\n        if height >= h and weight >= w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n  local result = {}\n  for name, data in pairs(students) do\n    if data[1] > h and data[2] > w then\n      result[name] = data\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123744,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt54qsvzp.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmpt54qsvzp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for k, v in pairs(students) do\n        if v[1] > h and v[2] > w then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iyb7jpw.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp_iyb7jpw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n    local result = {}\n    for name, data in pairs(students) do\n        if data[1] > h and data[2] > w then\n            result[name] = data\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9whur4i4.lua:15: expected: {\"Cierra Vega\"={6.2, 70}}\nactual: {}\nstack traceback:\n\t/tmp/tmp9whur4i4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}