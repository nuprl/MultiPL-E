{
  "name": "mbpp_283_validate",
  "language": "lua",
  "prompt": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    digits[d] = (digits[d] or 0) + 1\n  end\n  for d, c in pairs(digits) do\n    if c > tonumber(d) then\n      return false\n    end\n  end\n  return true\nend",
    "    local n = tostring(n)\n    local freq = {}\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        freq[digit] = (freq[digit] or 0) + 1\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        if freq[digit] > digit then\n            return false\n        end\n    end\n    return true\nend",
    "  local digits = {}\n  for i = 0, 9 do\n    digits[i] = 0\n  end\n  while n > 0 do\n    local digit = n % 10\n    digits[digit] = digits[digit] + 1\n    n = math.floor(n / 10)\n  end\n  for i = 0, 9 do\n    if digits[i] > i then\n      return false\n    end\n  end\n  return true\nend",
    "    local n = tostring(n)\n    local count = {}\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        count[digit] = (count[digit] or 0) + 1\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        if count[digit] > digit then\n            return false\n        end\n    end\n    return true\nend",
    "    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 0, 9 do\n        if digits[i] ~= nil and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend",
    "  local digits = {}\n  local n = math.abs(n)\n  while n > 0 do\n    local digit = n % 10\n    if digits[digit] then\n      digits[digit] = digits[digit] + 1\n    else\n      digits[digit] = 1\n    end\n    n = math.floor(n / 10)\n  end\n  for digit, count in pairs(digits) do\n    if count > digit then\n      return false\n    end\n  end\n  return true\nend",
    "    local n = tostring(n)\n    local digits = {}\n    for i = 1, #n do\n        local digit = n:sub(i,i)\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 1, #n do\n        local digit = n:sub(i,i)\n        if digits[digit] > tonumber(digit) then\n            return false\n        end\n    end\n    return true\nend",
    "    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend",
    "    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        if digits[digit] > digit then\n            return false\n        end\n    end\n    return true\nend",
    "    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 0, 9 do\n        if digits[i] ~= nil and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend",
    "    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] > digit then\n            return false\n        end\n    end\n    return true\nend",
    "    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend",
    "  local n = tostring(n)\n  local digits = {}\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] then\n      digits[digit] = digits[digit] + 1\n    else\n      digits[digit] = 1\n    end\n  end\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] > digit then\n      return false\n    end\n  end\n  return true\nend",
    "    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for digit, count in pairs(digits) do\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend",
    "\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i,i))\n\t\tif digits[digit] then\n\t\t\tdigits[digit] = digits[digit] + 1\n\t\telse\n\t\t\tdigits[digit] = 1\n\t\tend\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  local digits = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i,i))\n    if digits[digit] then\n      digits[digit] = digits[digit] + 1\n    else\n      digits[digit] = 1\n    end\n  end\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i,i))\n    if digits[digit] > digit then\n      return false\n    end\n  end\n  return true\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    digits[d] = (digits[d] or 0) + 1\n  end\n  for d, count in pairs(digits) do\n    if count > tonumber(d) then\n      return false\n    end\n  end\n  return true\nend",
    "    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend",
    "    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend",
    "    local n = tostring(n)\n    local digits = {}\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] then\n            digits[digit] = digits[digit] + 1\n        else\n            digits[digit] = 1\n        end\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] > digit then\n            return false\n        end\n    end\n    return true\nend"
  ]
}