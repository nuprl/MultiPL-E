{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "lua",
  "prompt": "-- Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlocal function max_sum_increasing_subseq(a, n, index, k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum_increasing_subseq\n    lu.assertEquals(candidate({1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), 11)\n    lu.assertEquals(candidate({1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), 7)\n    lu.assertEquals(candidate({11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), 71)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    if index == 0 then\n        return a[k]\n    end\n    local max_sum = max_sum_increasing_subseq(a, n, index - 1, k)\n    for i = k - 1, index, -1 do\n        if a[i] < a[k] then\n            max_sum = math.max(max_sum, max_sum_increasing_subseq(a, n, index - 1, i) + a[k])\n        end\n    end\n    return max_sum\nend",
    "    local max_sum = 0\n    for i = index, k do\n        if a[i] < a[k] then\n            local sum = max_sum_increasing_subseq(a, n, i, k)\n            if sum > max_sum then\n                max_sum = sum\n            end\n        end\n    end\n    return a[k] + max_sum\nend",
    "\tlocal max_sum = 0\n\tfor i = index, k - 1 do\n\t\tlocal sum = a[i]\n\t\tlocal max_sum_subseq = max_sum_increasing_subseq(a, n, i + 1, k)\n\t\tif sum + max_sum_subseq > max_sum then\n\t\t\tmax_sum = sum + max_sum_subseq\n\t\tend\n\tend\n\treturn max_sum\nend",
    "    local max_sum = 0\n    for i = index, k do\n        max_sum = max_sum + a[i]\n    end\n    return max_sum\nend",
    "    local max_sum = a[k]\n    local sum = a[k]\n    for i = index, k - 1 do\n        if a[i] < a[k] then\n            sum = sum + a[i]\n            if sum > max_sum then\n                max_sum = sum\n            end\n        end\n    end\n    return max_sum\nend",
    "    local max_sum = 0\n    for i = index, k do\n        local sum = 0\n        for j = index, i do\n            sum = sum + a[j]\n        end\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    local max_sum = 0\n    for i = index, k do\n        local sum = max_sum_increasing_subseq(a, n, index, i)\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum + a[k]\nend",
    "  local max_sum = a[k]\n  local sum = 0\n  for i = index, k - 1 do\n    sum = sum + a[i]\n    max_sum = math.max(max_sum, sum + a[k])\n  end\n  return max_sum\nend",
    "    local max = 0\n    for i = index, k do\n        local sum = max_sum_increasing_subseq(a, n, index, i - 1)\n        if a[i] > a[index] and sum + a[i] > max then\n            max = sum + a[i]\n        end\n    end\n    return max\nend",
    "\tlocal max_sum = 0\n\tfor i = index, k do\n\t\tlocal sum = 0\n\t\tfor j = index, i do\n\t\t\tsum = sum + a[j]\n\t\tend\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\tend\n\tend\n\treturn max_sum\nend",
    "    local max_sum = 0\n    local sum = 0\n    for i = index, k do\n        sum = sum + a[i]\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    local max_sum = a[k]\n    for i = index, k - 1 do\n        local sum = max_sum_increasing_subseq(a, n, i, k - 1)\n        if sum + a[k] > max_sum then\n            max_sum = sum + a[k]\n        end\n    end\n    return max_sum\nend",
    "    local max_sum = 0\n    for i = index, k do\n        if a[i] < a[k] then\n            max_sum = math.max(max_sum, a[i])\n        end\n    end\n    return max_sum + a[k]\nend",
    "\tlocal max_sum = 0\n\tfor i = index + 1, k do\n\t\tif a[i] > a[index] then\n\t\t\tmax_sum = math.max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n\t\tend\n\tend\n\treturn a[index] + max_sum\nend",
    "    local max_sum = a[k]\n    local sum = 0\n    for i = index, k - 1 do\n        sum = sum + a[i]\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    local max_sum = 0\n    local max_sum_k = 0\n    local sum = 0\n    local sum_k = 0\n    for i = 1, index do\n        if a[i] < a[k] then\n            sum = sum + a[i]\n            if sum > max_sum then\n                max_sum = sum\n            end\n        end\n    end\n    for i = index + 1, k do\n        if a[i] < a[k] then\n            sum_k = sum_k + a[i]\n            if sum_k > max_sum_k then\n                max_sum_k = sum_k\n            end\n        end\n    end\n    return max_sum + max_sum_k + a[k]\nend",
    "    local max_sum = 0\n    for i = index, k do\n        if a[i] < a[k] then\n            local sum = max_sum_increasing_subseq(a, n, i, k)\n            if sum > max_sum then\n                max_sum = sum\n            end\n        end\n    end\n    return a[k] + max_sum\nend",
    "    local sum = 0\n    local max_sum = 0\n    local i = index\n    while i < k do\n        if a[i] < a[k] then\n            sum = sum + a[i]\n            if sum > max_sum then\n                max_sum = sum\n            end\n        end\n        i = i + 1\n    end\n    return max_sum\nend",
    "\tlocal max_sum = a[k]\n\tlocal sum = 0\n\tfor i = index, k - 1 do\n\t\tsum = sum + a[i]\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\tend\n\tend\n\treturn max_sum\nend",
    "    local max_sum = 0\n    local sum = 0\n    for i = index, k do\n        if a[i] < a[k] then\n            sum = sum + a[i]\n        end\n    end\n    sum = sum + a[k]\n    if sum > max_sum then\n        max_sum = sum\n    end\n    return max_sum\nend"
  ]
}