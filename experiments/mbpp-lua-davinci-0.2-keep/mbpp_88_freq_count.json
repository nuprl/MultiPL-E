{
  "name": "mbpp_88_freq_count",
  "language": "lua",
  "prompt": "-- Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nlocal function freq_count(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local freq = {}\n    for i, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend",
    "    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend",
    "    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend",
    "    local dict = {}\n    for i,v in ipairs(list1) do\n        dict[v] = dict[v] and dict[v] + 1 or 1\n    end\n    return dict\nend",
    "\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend",
    "    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend",
    "\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend",
    "  local freq = {}\n  for _, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend",
    "    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend",
    "    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend",
    "  local freq = {}\n  for _, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend",
    "    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend",
    "\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend",
    "  local freq = {}\n  for _, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend",
    "    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend",
    "  local count = {}\n  for _, v in ipairs(list1) do\n    count[v] = (count[v] or 0) + 1\n  end\n  return count\nend",
    "    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend",
    "    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend",
    "  local freq = {}\n  for _, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend",
    "    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend"
  ]
}