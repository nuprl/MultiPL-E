{
  "name": "mbpp_442_positive_count",
  "language": "lua",
  "prompt": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, v in ipairs(nums) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_xyt49k.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpa_xyt49k.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, v in ipairs(nums) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_xyt49k.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpa_xyt49k.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i = 1, #nums do\n        if nums[i] > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefqglj7p.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpefqglj7p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, v in ipairs(nums) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_xyt49k.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpa_xyt49k.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf2jlzl6.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphf2jlzl6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, n in ipairs(nums) do\n        if n > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp12kb8vd.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpp12kb8vd.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i = 1, #nums do\n        if nums[i] > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefqglj7p.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpefqglj7p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, n in ipairs(nums) do\n        if n > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp12kb8vd.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpp12kb8vd.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i = 1, #nums do\n        if nums[i] > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefqglj7p.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpefqglj7p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf2jlzl6.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphf2jlzl6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ty_pgcp.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp_ty_pgcp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ty_pgcp.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp_ty_pgcp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ty_pgcp.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp_ty_pgcp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ty_pgcp.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp_ty_pgcp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, v in ipairs(nums) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3o5psum.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpz3o5psum.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n\tlocal count = 0\n\tfor _, num in ipairs(nums) do\n\t\tif num > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpmbj1n9.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmprpmbj1n9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf2jlzl6.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphf2jlzl6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local pos_count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            pos_count = pos_count + 1\n        end\n    end\n    return pos_count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0iwt5gxu.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp0iwt5gxu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ty_pgcp.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp_ty_pgcp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, n in ipairs(nums) do\n        if n > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4uncta8_.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp4uncta8_.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, n in ipairs(nums) do\n        if n > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp12kb8vd.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpp12kb8vd.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i = 1, #nums do\n        if nums[i] > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefqglj7p.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpefqglj7p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf2jlzl6.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphf2jlzl6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, n in ipairs(nums) do\n    if n > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yj_4_wy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp1yj_4_wy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, n in ipairs(nums) do\n        if n > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp12kb8vd.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpp12kb8vd.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf2jlzl6.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphf2jlzl6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, n in ipairs(nums) do\n    if n > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yj_4_wy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp1yj_4_wy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ty_pgcp.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp_ty_pgcp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, v in ipairs(nums) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_xyt49k.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpa_xyt49k.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i = 1, #nums do\n        if nums[i] > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefqglj7p.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpefqglj7p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i = 1, #nums do\n        if nums[i] > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefqglj7p.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpefqglj7p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf2jlzl6.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphf2jlzl6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf2jlzl6.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphf2jlzl6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, v in ipairs(nums) do\n    if v > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0d_djs3y.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp0d_djs3y.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, n in ipairs(nums) do\n        if n > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp12kb8vd.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpp12kb8vd.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf2jlzl6.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphf2jlzl6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, v in ipairs(nums) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_xyt49k.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpa_xyt49k.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ty_pgcp.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp_ty_pgcp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, v in ipairs(nums) do\n        if v > 0 then count = count + 1 end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p5ycbrq.lua:13: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp9p5ycbrq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqifn8dus.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpqifn8dus.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local pos_count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            pos_count = pos_count + 1\n        end\n    end\n    return pos_count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0iwt5gxu.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp0iwt5gxu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i = 1, #nums do\n        if nums[i] > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefqglj7p.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpefqglj7p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i = 1, #nums do\n        if nums[i] > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefqglj7p.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpefqglj7p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i = 1, #nums do\n        if nums[i] > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefqglj7p.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpefqglj7p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqifn8dus.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpqifn8dus.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, n in ipairs(nums) do\n    if n > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123869,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yj_4_wy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp1yj_4_wy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26z4uxc2.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp26z4uxc2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509731,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpioz4dt.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfpioz4dt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}