{
  "name": "mbpp_75_find_tuples",
  "language": "lua",
  "prompt": "-- Write a function to find tuples which have all elements divisible by k from the given list of tuples.\nlocal function find_tuples(test_list, K)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_tuples\n    lu.assertEquals(candidate({{6, 24, 12}, {7, 9, 6}, {12, 18, 21}}, 6), {{6, 24, 12}})\n    lu.assertEquals(candidate({{5, 25, 30}, {4, 2, 3}, {7, 8, 9}}, 5), {{5, 25, 30}})\n    lu.assertEquals(candidate({{7, 9, 16}, {8, 16, 4}, {19, 17, 18}}, 4), {{8, 16, 4}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal result = {}\n\tfor _, tuple in ipairs(test_list) do\n\t\tlocal is_divisible = true\n\t\tfor _, element in ipairs(tuple) do\n\t\t\tif element % K ~= 0 then\n\t\t\t\tis_divisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_divisible then\n\t\t\ttable.insert(result, tuple)\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal result = {}\n\tfor i = 1, #test_list do\n\t\tlocal tuple = test_list[i]\n\t\tlocal divisible = true\n\t\tfor j = 1, #tuple do\n\t\t\tif tuple[j] % K ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, tuple)\n\t\tend\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i = 1, #test_list do\n        local tuple = test_list[i]\n        local is_divisible = true\n        for j = 1, #tuple do\n            if tuple[j] % K ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            result[#result + 1] = tuple\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_list) do\n        local is_divisible = true\n        for j, k in ipairs(v) do\n            if k % K ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, tuple in ipairs(test_list) do\n        local is_divisible = true\n        for j, value in ipairs(tuple) do\n            if value % K ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, tuple)\n        end\n    end\n    return result\nend",
    "\tlocal result = {}\n\tfor i, tuple in ipairs(test_list) do\n\t\tlocal is_divisible = true\n\t\tfor j, element in ipairs(tuple) do\n\t\t\tif element % K ~= 0 then\n\t\t\t\tis_divisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_divisible then\n\t\t\tresult[#result + 1] = tuple\n\t\tend\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i, tuple in ipairs(test_list) do\n        local is_divisible = true\n        for j, value in ipairs(tuple) do\n            if value % K ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, tuple)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_list do\n        local tuple = test_list[i]\n        local is_divisible = true\n        for j = 1, #tuple do\n            if tuple[j] % K ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, tuple)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, tuple in ipairs(test_list) do\n        local is_divisible = true\n        for _, value in ipairs(tuple) do\n            if value % K ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, tuple)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_list) do\n        local is_divisible = true\n        for j, k in ipairs(v) do\n            if k % K ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, tuple in ipairs(test_list) do\n        local is_divisible = true\n        for _, value in ipairs(tuple) do\n            if value % K ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, tuple)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_list) do\n        local is_divisible = true\n        for j, k in ipairs(v) do\n            if k % K ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, tuple in ipairs(test_list) do\n        local is_divisible = true\n        for j, value in ipairs(tuple) do\n            if value % K ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, tuple)\n        end\n    end\n    return result\nend",
    "\tlocal result = {}\n\tfor i, v in ipairs(test_list) do\n\t\tlocal tuple = {}\n\t\tfor j, w in ipairs(v) do\n\t\t\tif w % K == 0 then\n\t\t\t\ttable.insert(tuple, w)\n\t\t\tend\n\t\tend\n\t\tif #tuple == #v then\n\t\t\ttable.insert(result, tuple)\n\t\tend\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i = 1, #test_list do\n        local tuple = test_list[i]\n        local is_divisible = true\n        for j = 1, #tuple do\n            if tuple[j] % K ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, tuple)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, tuple in ipairs(test_list) do\n        local is_divisible = true\n        for _, value in ipairs(tuple) do\n            if value % K ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, tuple)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_list do\n        local tuple = test_list[i]\n        local divisible = true\n        for j = 1, #tuple do\n            if tuple[j] % K ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            result[#result + 1] = tuple\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, tuple in ipairs(test_list) do\n        if tuple[1] % K == 0 and tuple[2] % K == 0 then\n            table.insert(result, tuple)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_list do\n        local tuple = test_list[i]\n        local is_divisible = true\n        for j = 1, #tuple do\n            if tuple[j] % K ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, tuple)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_list do\n        local tuple = test_list[i]\n        local is_divisible = true\n        for j = 1, #tuple do\n            if tuple[j] % K ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, tuple)\n        end\n    end\n    return result\nend"
  ]
}