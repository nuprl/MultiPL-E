{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "lua",
  "prompt": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function cmp(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkoq9pli8.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            heap[#heap + 1] = {i, j, sum}\n            local i = #heap\n            while i > 1 do\n                local p = math.floor(i / 2)\n                if heap[p][3] > heap[i][3] then\n                    heap[p], heap[i] = heap[i], heap[p]\n                    i = p\n                else\n                    break\n                end\n            end\n        elseif sum < heap[1][3] then\n            heap[1] = {i, j, sum}\n            local i = 1\n            while true do\n                local l = i * 2\n                local r = l + 1\n                if l <= #heap then\n                    if r <= #heap and heap[r][3] < heap[l][3] then\n                        l = r\n                    end\n                    if heap[l][3] < heap[i][3] then\n                        heap[l], heap[i] = heap[i], heap[l]\n                        i = l\n                    else\n                        break\n                    end\n                else\n                    break\n                end\n            end\n        end\n    end\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            push(i, j)\n        end\n    end\n    local res = {}\n    for i = 1, #heap do\n        res[i] = {nums1[heap[i][1]], nums2[heap[i][2]]}\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xf943ax.lua:57: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp3xf943ax.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent][1] + heap[parent][2] > heap[i][1] + heap[i][2] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local child = i * 2\n            if child + 1 <= #heap and heap[child + 1][1] + heap[child + 1][2] < heap[child][1] + heap[child][2] then\n                child = child + 1\n            end\n            if heap[i][1] + heap[i][2] > heap[child][1] + heap[child][2] then\n                heap[child], heap[i] = heap[i], heap[child]\n                i = child\n            else\n                break\n            end\n        end\n        return ret\n    end\n    local heap = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            heap_push(heap, {nums1[i], nums2[j]})\n        end\n    end\n    local ret = {}\n    for i = 1, k do\n        if #heap == 0 then\n            break\n        end\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphna8rtiz.lua:56: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {7, 2}, {3, 6}}\nstack traceback:\n\t/tmp/tmphna8rtiz.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local res = {}\n  local len1 = #nums1\n  local len2 = #nums2\n  local i = 1\n  local j = 1\n  while i <= len1 and j <= len2 and #res < k do\n    local sum = nums1[i] + nums2[j]\n    if #res == 0 then\n      res[#res + 1] = {nums1[i], nums2[j]}\n    else\n      local last_sum = res[#res][1] + res[#res][2]\n      if sum < last_sum then\n        table.insert(res, 1, {nums1[i], nums2[j]})\n      else\n        res[#res + 1] = {nums1[i], nums2[j]}\n      end\n    end\n    if i == len1 then\n      j = j + 1\n    elseif j == len2 then\n      i = i + 1\n    else\n      if nums1[i + 1] + nums2[j] < nums1[i] + nums2[j + 1] then\n        i = i + 1\n      else\n        j = j + 1\n      end\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4q850n5.lua:40: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 6}, {7, 6}}\nstack traceback:\n\t/tmp/tmpd4q850n5.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local len1 = #nums1\n    local len2 = #nums2\n    if len1 == 0 or len2 == 0 then\n        return {}\n    end\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            table.insert(heap, {i, j, sum})\n            local i = #heap\n            while i > 1 do\n                local p = math.floor(i / 2)\n                if heap[p][3] > sum then\n                    heap[i], heap[p] = heap[p], heap[i]\n                    i = p\n                else\n                    break\n                end\n            end\n        else\n            if sum < heap[1][3] then\n                heap[1] = {i, j, sum}\n                local i = 1\n                while i * 2 <= #heap do\n                    local l = i * 2\n                    local r = i * 2 + 1\n                    local min_i = l\n                    if r <= #heap and heap[r][3] < heap[l][3] then\n                        min_i = r\n                    end\n                    if heap[i][3] > heap[min_i][3] then\n                        heap[i], heap[min_i] = heap[min_i], heap[i]\n                        i = min_i\n                    else\n                        break\n                    end\n                end\n            end\n        end\n    end\n    for i = 1, math.min(len1, k) do\n        push(i, 1)\n    end\n    local res = {}\n    while #heap > 0 do\n        local t = table.remove(heap, 1)\n        table.insert(res, {nums1[t[1]], nums2[t[2]]})\n        if t[2] < len2 then\n            push(t[1], t[2] + 1)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5ingwb0.lua:61: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}, {1, 4}, {3, 4}, {1, 6}, {3, 6}}\nstack traceback:\n\t/tmp/tmpf5ingwb0.lua:61: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    if #heap < k then\n      table.insert(heap, {i, j, sum})\n    elseif sum < heap[1][3] then\n      heap[1] = {i, j, sum}\n    end\n    local i = #heap\n    while i > 1 do\n      local p = math.floor(i / 2)\n      if heap[p][3] > heap[i][3] then\n        heap[p], heap[i] = heap[i], heap[p]\n        i = p\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local res = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local l = i * 2\n      local r = i * 2 + 1\n      if r <= #heap and heap[r][3] < heap[l][3] then\n        l = r\n      end\n      if heap[i][3] > heap[l][3] then\n        heap[i], heap[l] = heap[l], heap[i]\n        i = l\n      else\n        break\n      end\n    end\n    return res\n  end\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      push(i, j)\n    end\n  end\n  local res = {}\n  while #heap > 0 do\n    local p = pop()\n    table.insert(res, {nums1[p[1]], nums2[p[2]]})\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbf0dfe83.lua:60: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {7, 2}, {3, 6}}\nstack traceback:\n\t/tmp/tmpbf0dfe83.lua:60: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function push(i, j)\n        if i <= #nums1 and j <= #nums2 then\n            heap_push(heap, {i, j, nums1[i] + nums2[j]})\n        end\n    end\n    push(1, 1)\n    local result = {}\n    while #result < k and #heap > 0 do\n        local pair = heap_pop(heap)\n        push(pair[1] + 1, pair[2])\n        push(pair[1], pair[2] + 1)\n        table.insert(result, {nums1[pair[1]], nums2[pair[2]]})\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zfn4app.lua:6: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp_zfn4app.lua:6: in local 'push'\n\t/tmp/tmp_zfn4app.lua:9: in local 'candidate'\n\t/tmp/tmp_zfn4app.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function merge(a, b)\n    local c = {}\n    local i, j = 1, 1\n    while i <= #a and j <= #b do\n      if a[i][1] + a[i][2] < b[j][1] + b[j][2] then\n        c[#c + 1] = a[i]\n        i = i + 1\n      else\n        c[#c + 1] = b[j]\n        j = j + 1\n      end\n    end\n    while i <= #a do\n      c[#c + 1] = a[i]\n      i = i + 1\n    end\n    while j <= #b do\n      c[#c + 1] = b[j]\n      j = j + 1\n    end\n    return c\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2oovaz3z.lua:34: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            heap[#heap+1] = {i, j, sum}\n            local i = #heap\n            while i > 1 do\n                local p = math.floor(i/2)\n                if heap[p][3] > sum then\n                    heap[i], heap[p] = heap[p], heap[i]\n                    i = p\n                else\n                    break\n                end\n            end\n        elseif sum < heap[1][3] then\n            heap[1] = {i, j, sum}\n            local i = 1\n            while true do\n                local l = i * 2\n                local r = l + 1\n                if l > #heap then\n                    break\n                elseif r > #heap then\n                    if heap[l][3] < heap[i][3] then\n                        heap[i], heap[l] = heap[l], heap[i]\n                    end\n                    break\n                elseif heap[l][3] < heap[r][3] then\n                    if heap[l][3] < heap[i][3] then\n                        heap[i], heap[l] = heap[l], heap[i]\n                        i = l\n                    else\n                        break\n                    end\n                else\n                    if heap[r][3] < heap[i][3] then\n                        heap[i], heap[r] = heap[r], heap[i]\n                        i = r\n                    else\n                        break\n                    end\n                end\n            end\n        end\n    end\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            push(i, j)\n        end\n    end\n    local ret = {}\n    for i = 1, #heap do\n        ret[i] = {nums1[heap[i][1]], nums2[heap[i][2]]}\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkb55yzmc.lua:66: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpkb55yzmc.lua:66: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    local heap_size = #heap\n    if heap_size == k then\n      if sum < heap[1][1] then\n        heap[1] = {sum, i, j}\n        heap_down(heap, 1, heap_size)\n      end\n    else\n      heap[heap_size + 1] = {sum, i, j}\n      heap_up(heap, heap_size + 1)\n    end\n  end\n  local function pop()\n    local heap_size = #heap\n    if heap_size == 0 then\n      return nil\n    end\n    local ret = heap[1]\n    heap[1] = heap[heap_size]\n    heap[heap_size] = nil\n    heap_down(heap, 1, heap_size - 1)\n    return ret\n  end\n  local function pop_all()\n    local ret = {}\n    while true do\n      local pair = pop()\n      if not pair then\n        break\n      end\n      ret[#ret + 1] = pair\n    end\n    return ret\n  end\n  local function push_all()\n    for i = 1, #nums1 do\n      for j = 1, #nums2 do\n        push(i, j)\n      end\n    end\n  end\n  push_all()\n  return pop_all()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_jrn0vyy.lua:14: attempt to call a nil value (global 'heap_up')\nstack traceback:\n\t/tmp/tmp_jrn0vyy.lua:14: in upvalue 'push'\n\t/tmp/tmp_jrn0vyy.lua:42: in local 'push_all'\n\t/tmp/tmp_jrn0vyy.lua:46: in local 'candidate'\n\t/tmp/tmp_jrn0vyy.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\n    local function merge(a, b)\n        local c = {}\n        local i, j = 1, 1\n        while i <= #a and j <= #b do\n            if compare(a[i], b[j]) then\n                table.insert(c, a[i])\n                i = i + 1\n            else\n                table.insert(c, b[j])\n                j = j + 1\n            end\n        end\n        while i <= #a do\n            table.insert(c, a[i])\n            i = i + 1\n        end\n        while j <= #b do\n            table.insert(c, b[j])\n            j = j + 1\n        end\n        return c\n    end\n    local function merge_sort(a)\n        if #a <= 1 then\n            return a\n        end\n        local mid = #a / 2\n        local left = merge_sort(a:sub(1, mid))\n        local right = merge_sort(a:sub(mid + 1))\n        return merge(left, right)\n    end\n    local function get_pairs(nums1, nums2)\n        local pairs = {}\n        for i = 1, #nums1 do\n            for j = 1, #nums2 do\n                table.insert(pairs, {nums1[i], nums2[j]})\n            end\n        end\n        return pairs\n    end\n    local pairs = get_pairs(nums1, nums2)\n    pairs = merge_sort(pairs)\n    local result = {}\n    for i = 1, k do\n        if pairs[i] then\n            table.insert(result, pairs[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8u38hrfn.lua:33: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp8u38hrfn.lua:33: in local 'merge_sort'\n\t/tmp/tmp8u38hrfn.lua:47: in local 'candidate'\n\t/tmp/tmp8u38hrfn.lua:60: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function heap_pop(heap)\n        local ret = heap[1]\n        local last = table.remove(heap)\n        local i = 1\n        while true do\n            local l = i * 2\n            local r = i * 2 + 1\n            if l > #heap then break end\n            if r <= #heap and heap[r][1] < heap[l][1] then\n                l = r\n            end\n            if last[1] <= heap[l][1] then break end\n            heap[i] = heap[l]\n            i = l\n        end\n        heap[i] = last\n        return ret\n    end\n    local function heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local p = math.floor(i / 2)\n            if heap[p][1] <= heap[i][1] then break end\n            heap[i], heap[p] = heap[p], heap[i]\n            i = p\n        end\n    end\n    local heap = {}\n    for i = 1, #nums1 do\n        heap_push(heap, {nums1[i] + nums2[1], i, 1})\n    end\n    local ret = {}\n    for i = 1, k do\n        if #heap == 0 then break end\n        local val = heap_pop(heap)\n        table.insert(ret, {nums1[val[2]], nums2[val[3]]})\n        if val[3] < #nums2 then\n            heap_push(heap, {nums1[val[2]] + nums2[val[3] + 1], val[2], val[3] + 1})\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplaeorgit.lua:50: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}}\nstack traceback:\n\t/tmp/tmplaeorgit.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  if #nums1 == 0 or #nums2 == 0 then return {} end\n  local heap = {}\n  local result = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    if #heap < k then\n      heap[#heap + 1] = {sum, i, j}\n      local i = #heap\n      while i > 1 do\n        local parent = math.floor(i / 2)\n        if heap[parent][1] > heap[i][1] then\n          heap[parent], heap[i] = heap[i], heap[parent]\n          i = parent\n        else\n          break\n        end\n      end\n    elseif sum < heap[1][1] then\n      heap[1] = {sum, i, j}\n      local i = 1\n      while i * 2 <= #heap do\n        local left = i * 2\n        local right = i * 2 + 1\n        local min = left\n        if right <= #heap and heap[right][1] < heap[left][1] then\n          min = right\n        end\n        if heap[i][1] > heap[min][1] then\n          heap[i], heap[min] = heap[min], heap[i]\n          i = min\n        else\n          break\n        end\n      end\n    end\n  end\n  push(1, 1)\n  while #result < k and #heap > 0 do\n    local item = table.remove(heap, 1)\n    result[#result + 1] = {nums1[item[2]], nums2[item[3]]}\n    if item[3] < #nums2 then\n      push(item[2], item[3] + 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkjlwakja.lua:55: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}}\nstack traceback:\n\t/tmp/tmpkjlwakja.lua:55: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function push(i, j)\n        if i <= #nums1 and j <= #nums2 then\n            heap[#heap + 1] = {nums1[i] + nums2[j], i, j}\n        end\n    end\n    local function pop()\n        if #heap == 0 then\n            return nil\n        end\n        local t = heap[1]\n        local n = #heap\n        heap[1] = heap[n]\n        heap[n] = nil\n        local i = 1\n        while true do\n            local l = i * 2\n            local r = l + 1\n            if l > n then\n                break\n            end\n            if r <= n and heap[l][1] > heap[r][1] then\n                l = r\n            end\n            if heap[i][1] > heap[l][1] then\n                heap[i], heap[l] = heap[l], heap[i]\n                i = l\n            else\n                break\n            end\n        end\n        return t[2], t[3]\n    end\n    for i = 1, #nums1 do\n        push(i, 1)\n    end\n    local result = {}\n    for i = 1, k do\n        local x, y = pop()\n        if x == nil then\n            break\n        end\n        result[#result + 1] = {nums1[x], nums2[y]}\n        push(x, y + 1)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdyyfiyok.lua:24: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpdyyfiyok.lua:24: in local 'pop'\n\t/tmp/tmpdyyfiyok.lua:41: in local 'candidate'\n\t/tmp/tmpdyyfiyok.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function merge(a, b)\n    local res = {}\n    local i, j = 1, 1\n    while i <= #a and j <= #b do\n      if a[i] < b[j] then\n        table.insert(res, a[i])\n        i = i + 1\n      else\n        table.insert(res, b[j])\n        j = j + 1\n      end\n    end\n    while i <= #a do\n      table.insert(res, a[i])\n      i = i + 1\n    end\n    while j <= #b do\n      table.insert(res, b[j])\n      j = j + 1\n    end\n    return res\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzb576d3v.lua:34: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    if #heap < k or sum < heap[1][1] then\n      heapq.heappush(heap, {sum, i, j})\n      if #heap > k then\n        heapq.heappop(heap)\n      end\n    end\n  end\n  for i = 1, #nums1 do\n    push(i, 1)\n  end\n  local res = {}\n  while #heap > 0 do\n    local _, i, j = table.unpack(heapq.heappop(heap))\n    table.insert(res, {nums1[i], nums2[j]})\n    if j < #nums2 then\n      push(i, j + 1)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbyg9axi9.lua:7: attempt to index a nil value (global 'heapq')\nstack traceback:\n\t/tmp/tmpbyg9axi9.lua:7: in local 'push'\n\t/tmp/tmpbyg9axi9.lua:14: in local 'candidate'\n\t/tmp/tmpbyg9axi9.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] < b[1] or (a[1] == b[1] and a[2] < b[2])\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2pu0fxcn.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_push(heap, val)\n    heap[#heap + 1] = val\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent][1] + heap[parent][2] > heap[i][1] + heap[i][2] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpruu7bsgs.lua:25: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function merge(nums1, nums2)\n    local i, j, m, n = 1, 1, #nums1, #nums2\n    local res = {}\n    while i <= m and j <= n do\n      if nums1[i] < nums2[j] then\n        res[#res + 1] = {nums1[i], nums2[j]}\n        i = i + 1\n      else\n        res[#res + 1] = {nums1[i], nums2[j]}\n        j = j + 1\n      end\n    end\n    while i <= m do\n      res[#res + 1] = {nums1[i], nums2[j]}\n      i = i + 1\n    end\n    while j <= n do\n      res[#res + 1] = {nums1[i], nums2[j]}\n      j = j + 1\n    end\n    return res\n  end\n  local res = merge(nums1, nums2)\n  local function partition(arr, l, r)\n    local pivot = arr[r][1] + arr[r][2]\n    local i = l\n    for j = l, r - 1 do\n      if arr[j][1] + arr[j][2] < pivot then\n        arr[i], arr[j] = arr[j], arr[i]\n        i = i + 1\n      end\n    end\n    arr[i], arr[r] = arr[r], arr[i]\n    return i\n  end\n  local function quick_select(arr, l, r, k)\n    if l == r then return end\n    local p = partition(arr, l, r)\n    if p == k then return end\n    if p > k then\n      quick_select(arr, l, p - 1, k)\n    else\n      quick_select(arr, p + 1, r, k)\n    end\n  end\n  quick_select(res, 1, #res, k)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ymg8yjn.lua:27: attempt to perform arithmetic on a nil value (field 'integer index')\nstack traceback:\n\t/tmp/tmp7ymg8yjn.lua:27: in upvalue 'partition'\n\t/tmp/tmp7ymg8yjn.lua:40: in local 'quick_select'\n\t/tmp/tmp7ymg8yjn.lua:48: in local 'candidate'\n\t/tmp/tmp7ymg8yjn.lua:55: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function merge_sort(nums1, nums2)\n        local function merge(nums1, nums2)\n            local i, j, k = 1, 1, 1\n            local len1, len2 = #nums1, #nums2\n            local result = {}\n            while i <= len1 and j <= len2 do\n                if nums1[i] < nums2[j] then\n                    result[k] = nums1[i]\n                    i = i + 1\n                else\n                    result[k] = nums2[j]\n                    j = j + 1\n                end\n                k = k + 1\n            end\n            while i <= len1 do\n                result[k] = nums1[i]\n                i = i + 1\n                k = k + 1\n            end\n            while j <= len2 do\n                result[k] = nums2[j]\n                j = j + 1\n                k = k + 1\n            end\n            return result\n        end\n        local function merge_sort(nums)\n            local len = #nums\n            if len <= 1 then\n                return nums\n            end\n            local mid = math.floor(len / 2)\n            local left = merge_sort(nums, 1, mid)\n            local right = merge_sort(nums, mid + 1, len)\n            return merge(left, right)\n        end\n        return merge_sort(merge(nums1, nums2))\n    end\n    local function find_k_smallest(nums, k)\n        local function partition(nums, left, right)\n            local pivot = nums[left]\n            local i, j = left, right\n            while i < j do\n                while i < j and nums[j] >= pivot do\n                    j = j - 1\n                end\n                nums[i] = nums[j]\n                while i < j and nums[i] <= pivot do\n                    i = i + 1\n                end\n                nums[j] = nums[i]\n            end\n            nums[i] = pivot\n            return i\n        end\n        local function quick_sort(nums\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpw_xdtseb.lua:60: ')' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwd_paqts.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function merge(nums1, nums2)\n        local i, j = 1, 1\n        local result = {}\n        while i <= #nums1 and j <= #nums2 do\n            if nums1[i] < nums2[j] then\n                table.insert(result, nums1[i])\n                i = i + 1\n            else\n                table.insert(result, nums2[j])\n                j = j + 1\n            end\n        end\n        while i <= #nums1 do\n            table.insert(result, nums1[i])\n            i = i + 1\n        end\n        while j <= #nums2 do\n            table.insert(result, nums2[j])\n            j = j + 1\n        end\n        return result\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpc8qq7w4l.lua:34: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_push(heap, val)\n    table.insert(heap, val)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[i][1] < heap[j][1] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpo25uasxy.lua:25: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local res = {}\n    local heap = {}\n    local heap_size = 0\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        heap_size = heap_size + 1\n        heap[heap_size] = {i, j, sum}\n        local i = heap_size\n        while i > 1 do\n            local p = math.floor(i / 2)\n            if heap[p][3] > heap[i][3] then\n                heap[p], heap[i] = heap[i], heap[p]\n                i = p\n            else\n                break\n            end\n        end\n    end\n    local function pop()\n        local v = heap[1]\n        heap[1] = heap[heap_size]\n        heap[heap_size] = nil\n        heap_size = heap_size - 1\n        local i = 1\n        while i * 2 <= heap_size do\n            local l = i * 2\n            local r = i * 2 + 1\n            local j = l\n            if r <= heap_size and heap[r][3] < heap[l][3] then\n                j = r\n            end\n            if heap[i][3] > heap[j][3] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return v\n    end\n    for i = 1, #nums1 do\n        push(i, 1)\n    end\n    for i = 1, k do\n        if heap_size == 0 then\n            break\n        end\n        local v = pop()\n        local i, j = v[1], v[2]\n        res[i] = res[i] or {}\n        table.insert(res[i], nums2[j])\n        if j < #nums2 then\n            push(i, j + 1)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ibccjnq.lua:64: expected: {{1, 2}, {1, 4}}\nactual: {{2}, {2}}\nstack traceback:\n\t/tmp/tmp8ibccjnq.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] < b[1] or (a[1] == b[1] and a[2] < b[2])\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2pu0fxcn.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function merge(nums1, nums2)\n        local i, j = 1, 1\n        local res = {}\n        while i <= #nums1 and j <= #nums2 do\n            if nums1[i][1] + nums1[i][2] < nums2[j][1] + nums2[j][2] then\n                table.insert(res, nums1[i])\n                i = i + 1\n            else\n                table.insert(res, nums2[j])\n                j = j + 1\n            end\n        end\n        while i <= #nums1 do\n            table.insert(res, nums1[i])\n            i = i + 1\n        end\n        while j <= #nums2 do\n            table.insert(res, nums2[j])\n            j = j + 1\n        end\n        return res\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmppdv7zaaw.lua:34: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            heap_push(heap, {sum, i, j})\n        elseif sum < heap[1][1] then\n            heap_pop(heap)\n            heap_push(heap, {sum, i, j})\n        end\n    end\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            push(i, j)\n        end\n    end\n    local result = {}\n    for i = 1, #heap do\n        result[i] = {nums1[heap[i][2]], nums2[heap[i][3]]}\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpurotdjcv.lua:7: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpurotdjcv.lua:7: in local 'push'\n\t/tmp/tmpurotdjcv.lua:15: in local 'candidate'\n\t/tmp/tmpurotdjcv.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local res = {}\n  local len1 = #nums1\n  local len2 = #nums2\n  if len1 == 0 or len2 == 0 then return res end\n  local function push(a, b)\n    local sum = nums1[a] + nums2[b]\n    if #res < k then\n      table.insert(res, {nums1[a], nums2[b]})\n    elseif sum < res[k][1] + res[k][2] then\n      table.remove(res, k)\n      table.insert(res, {nums1[a], nums2[b]})\n    end\n  end\n  local a, b = 1, 1\n  push(a, b)\n  while k > 1 and (a < len1 or b < len2) do\n    if a < len1 and b < len2 then\n      if nums1[a] < nums2[b] then\n        a = a + 1\n      else\n        b = b + 1\n      end\n    elseif a < len1 then\n      a = a + 1\n    else\n      b = b + 1\n    end\n    push(a, b)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8gi66ma.lua:38: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}}\nstack traceback:\n\t/tmp/tmpz8gi66ma.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local result = {}\n  local len1 = #nums1\n  local len2 = #nums2\n  if len1 == 0 or len2 == 0 then\n    return result\n  end\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    local len = #heap\n    heap[len + 1] = {sum, i, j}\n    local i = len + 1\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent][1] > heap[i][1] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local len = #heap\n    if len == 0 then\n      return nil\n    end\n    local result = heap[1]\n    heap[1] = heap[len]\n    heap[len] = nil\n    local i = 1\n    while i < len do\n      local left = i * 2\n      local right = left + 1\n      if left >= len then\n        break\n      end\n      local min = left\n      if right < len and heap[right][1] < heap[left][1] then\n        min = right\n      end\n      if heap[min][1] < heap[i][1] then\n        heap[min], heap[i] = heap[i], heap[min]\n        i = min\n      else\n        break\n      end\n    end\n    return result\n  end\n  push(1, 1)\n  for i = 1, k do\n    local pair = pop()\n    if not pair then\n      break\n    end\n    result[i] = {nums1[pair[2]], nums2[pair[3]]}\n    if pair[3] < len2 then\n      push(pair[2], pair[3] + 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3p8mscgp.lua:72: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}}\nstack traceback:\n\t/tmp/tmp3p8mscgp.lua:72: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwd_paqts.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function cmp(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\n  local heap = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(heap, {nums1[i], nums2[j]})\n    end\n  end\n  table.sort(heap, cmp)\n  local res = {}\n  for i = 1, k do\n    table.insert(res, heap[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpclb07d2i.lua:25: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpclb07d2i.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    if i <= #nums1 and j <= #nums2 then\n      heap[#heap+1] = {nums1[i]+nums2[j], i, j}\n    end\n  end\n  push(1, 1)\n  table.sort(heap, function(a, b) return a[1] < b[1] end)\n  local result = {}\n  while k > 0 and #heap > 0 do\n    local pair = table.remove(heap, 1)\n    result[#result+1] = {nums1[pair[2]], nums2[pair[3]]}\n    push(pair[2], pair[3]+1)\n    push(pair[2]+1, pair[3])\n    k = k - 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphp79kjxs.lua:27: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 4}, {7, 2}}\nstack traceback:\n\t/tmp/tmphp79kjxs.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwd_paqts.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local res = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            local sum = nums1[i] + nums2[j]\n            if #res < k then\n                table.insert(res, {nums1[i], nums2[j]})\n            elseif sum < res[k][1] + res[k][2] then\n                table.remove(res, k)\n                table.insert(res, {nums1[i], nums2[j]})\n            end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46q1fmnl.lua:23: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp46q1fmnl.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_push(heap, val)\n    heap[#heap + 1] = val\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j][1] > heap[i][1] then\n        heap[j], heap[i] = heap[i], heap[j]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local res = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1][1] < heap[j][1] then\n        j = j + 1\n      end\n      if heap[i][1] > heap[j][1] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return res\n  end\n  local heap = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      heap_push(heap, {nums1[i] + nums2[j], {nums1[i], nums2[j]}})\n    end\n  end\n  local res = {}\n  for i = 1, k do\n    local val = heap_pop(heap)\n    if val then\n      res[i] = val[2]\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8k5h8tj.lua:56: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {7, 2}, {3, 6}}\nstack traceback:\n\t/tmp/tmpy8k5h8tj.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function push(i, j)\n        if i <= #nums1 and j <= #nums2 then\n            heap[#heap + 1] = {i, j}\n            local i = #heap\n            while i > 1 do\n                local p = math.floor(i / 2)\n                if nums1[heap[p][1]] + nums2[heap[p][2]] > nums1[heap[i][1]] + nums2[heap[i][2]] then\n                    heap[p], heap[i] = heap[i], heap[p]\n                    i = p\n                else\n                    break\n                end\n            end\n        end\n    end\n    local function pop()\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local a = i * 2\n            local b = i * 2 + 1\n            if b <= #heap and nums1[heap[b][1]] + nums2[heap[b][2]] < nums1[heap[a][1]] + nums2[heap[a][2]] then\n                a = b\n            end\n            if nums1[heap[i][1]] + nums2[heap[i][2]] > nums1[heap[a][1]] + nums2[heap[a][2]] then\n                heap[i], heap[a] = heap[a], heap[i]\n                i = a\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for i = 1, #nums1 do\n        push(i, 1)\n    end\n    local ret = {}\n    for i = 1, k do\n        local p = pop()\n        if p then\n            ret[#ret + 1] = {nums1[p[1]], nums2[p[2]]}\n            push(p[1], p[2] + 1)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5r11yqa.lua:56: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}}\nstack traceback:\n\t/tmp/tmpz5r11yqa.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function push(i, j)\n        if i <= #nums1 and j <= #nums2 then\n            heap[#heap + 1] = {nums1[i] + nums2[j], i, j}\n        end\n    end\n    local function pop()\n        local v = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1][1] < heap[j][1] then\n                j = j + 1\n            end\n            if heap[i][1] <= heap[j][1] then\n                break\n            end\n            heap[i], heap[j] = heap[j], heap[i]\n            i = j\n        end\n        return v\n    end\n    local function top()\n        return heap[1]\n    end\n    local function size()\n        return #heap\n    end\n    local function empty()\n        return #heap == 0\n    end\n    local function push_pop(i, j)\n        push(i, j)\n        return pop()\n    end\n    local function clear()\n        heap = {}\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmp196nhzty.lua:52: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function push(heap, val)\n    table.insert(heap, val)\n    local i = #heap\n    while i > 1 do\n      local p = math.floor(i / 2)\n      if heap[p][1] + heap[p][2] > heap[i][1] + heap[i][2] then\n        heap[p], heap[i] = heap[i], heap[p]\n        i = p\n      else\n        break\n      end\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpulw24vx4.lua:25: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_push(heap, val)\n    heap[#heap + 1] = val\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j][1] > heap[i][1] then\n        heap[j], heap[i] = heap[i], heap[j]\n        i = j\n      else\n        break\n      end\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgotc6pvx.lua:25: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    if #heap < k then\n      table.insert(heap, {i, j, sum})\n      local i = #heap\n      while i > 1 do\n        local parent = math.floor(i / 2)\n        if heap[parent][3] > sum then\n          heap[i], heap[parent] = heap[parent], heap[i]\n          i = parent\n        else\n          break\n        end\n      end\n    elseif heap[1][3] > sum then\n      heap[1] = {i, j, sum}\n      local i = 1\n      while i * 2 <= #heap do\n        local left = i * 2\n        local right = i * 2 + 1\n        local min_child = left\n        if right <= #heap and heap[right][3] < heap[left][3] then\n          min_child = right\n        end\n        if heap[min_child][3] < sum then\n          heap[i], heap[min_child] = heap[min_child], heap[i]\n          i = min_child\n        else\n          break\n        end\n      end\n    end\n  end\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      push(i, j)\n    end\n  end\n  local result = {}\n  for i = 1, #heap do\n    table.insert(result, {nums1[heap[i][1]], nums2[heap[i][2]]})\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3a71zml1.lua:54: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp3a71zml1.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function merge(nums1, nums2)\n        local res = {}\n        local i, j = 1, 1\n        while i <= #nums1 and j <= #nums2 do\n            if nums1[i] < nums2[j] then\n                table.insert(res, nums1[i])\n                i = i + 1\n            else\n                table.insert(res, nums2[j])\n                j = j + 1\n            end\n        end\n        while i <= #nums1 do\n            table.insert(res, nums1[i])\n            i = i + 1\n        end\n        while j <= #nums2 do\n            table.insert(res, nums2[j])\n            j = j + 1\n        end\n        return res\n    end\n    local function find_kth(nums1, nums2, k)\n        if #nums1 == 0 then\n            return nums2[k]\n        end\n        if #nums2 == 0 then\n            return nums1[k]\n        end\n        local mid1 = math.floor(#nums1 / 2)\n        local mid2 = math.floor(#nums2 / 2)\n        if mid1 + mid2 < k then\n            if nums1[mid1 + 1] > nums2[mid2 + 1] then\n                return find_kth(nums1, nums2:sub(mid2 + 1), k - mid2 - 1)\n            else\n                return find_kth(nums1:sub(mid1 + 1), nums2, k - mid1 - 1)\n            end\n        else\n            if nums1[mid1 + 1] > nums2[mid2 + 1] then\n                return find_kth(nums1:sub(1, mid1), nums2, k)\n            else\n                return find_kth(nums1, nums2:sub(1, mid2), k)\n            end\n        end\n    end\n    local function find_k_smallest(nums1, nums2, k)\n        local res = {}\n        for i = 1, k do\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjp2c89la.lua:61: 'end' expected (to close 'for' at line 50) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    if i <= #nums1 and j <= #nums2 then\n      heap[#heap + 1] = {nums1[i] + nums2[j], i, j}\n    end\n  end\n  local function pop()\n    local top = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j < #heap and heap[j][1] > heap[j + 1][1] then\n        j = j + 1\n      end\n      if heap[i][1] > heap[j][1] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return top\n  end\n  local function heapify()\n    for i = math.floor(#heap / 2), 1, -1 do\n      local j = i\n      while j * 2 <= #heap do\n        local k = j * 2\n        if k < #heap and heap[k][1] > heap[k + 1][1] then\n          k = k + 1\n        end\n        if heap[j][1] > heap[k][1] then\n          heap[j], heap[k] = heap[k], heap[j]\n          j = k\n        else\n          break\n        end\n      end\n    end\n  end\n  for i = 1, #nums1 do\n    push(i, 1)\n  end\n  heapify()\n  local result = {}\n  for i = 1, k do\n    if #heap == 0 then\n      break\n    end\n    local top = pop()\n    result[i] = {nums1[top[2]], nums2[top[3]]}\n    push(top[2], top[3] + 1)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmq5r4mnz.lua:64: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}}\nstack traceback:\n\t/tmp/tmpmq5r4mnz.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local len1, len2 = #nums1, #nums2\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            heap[#heap + 1] = {i, j, sum}\n            local i = #heap\n            while i > 1 do\n                local parent = math.floor(i / 2)\n                if heap[parent][3] > sum then\n                    heap[i], heap[parent] = heap[parent], heap[i]\n                    i = parent\n                else\n                    break\n                end\n            end\n        elseif sum < heap[1][3] then\n            heap[1] = {i, j, sum}\n            local i = 1\n            while i * 2 <= k do\n                local child = i * 2\n                if child < k and heap[child + 1][3] < heap[child][3] then\n                    child = child + 1\n                end\n                if heap[child][3] < heap[i][3] then\n                    heap[i], heap[child] = heap[child], heap[i]\n                    i = child\n                else\n                    break\n                end\n            end\n        end\n    end\n    for i = 1, math.min(len1, k) do\n        push(i, 1)\n    end\n    local result = {}\n    for i = 1, k do\n        if heap[1] then\n            local pair = heap[1]\n            result[i] = {nums1[pair[1]], nums2[pair[2]]}\n            if pair[2] < len2 then\n                push(pair[1], pair[2] + 1)\n            end\n        else\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hh47ljn.lua:57: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {1, 2}}\nstack traceback:\n\t/tmp/tmp9hh47ljn.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function merge(nums1, nums2)\n    local i, j, m, n = 1, 1, #nums1, #nums2\n    local res = {}\n    while i <= m and j <= n do\n      if nums1[i] < nums2[j] then\n        table.insert(res, {nums1[i], nums2[j]})\n        i = i + 1\n      else\n        table.insert(res, {nums1[i], nums2[j]})\n        j = j + 1\n      end\n    end\n    while i <= m do\n      table.insert(res, {nums1[i], nums2[j]})\n      i = i + 1\n    end\n    while j <= n do\n      table.insert(res, {nums1[i], nums2[j]})\n      j = j + 1\n    end\n    return res\n  end\n  local res = merge(nums1, nums2)\n  local function partition(res, l, r)\n    local pivot = res[l][1] + res[l][2]\n    local i = l\n    for j = l + 1, r do\n      if res[j][1] + res[j][2] < pivot then\n        i = i + 1\n        res[i], res[j] = res[j], res[i]\n      end\n    end\n    res[i], res[l] = res[l], res[i]\n    return i\n  end\n  local function quick_sort(res, l, r)\n    if l < r then\n      local p = partition(res, l, r)\n      quick_sort(res, l, p - 1)\n      quick_sort(res, p + 1, r)\n    end\n  end\n  quick_sort(res, 1, #res)\n  local res = {}\n  for i = 1, k do\n    table.insert(res, res[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpij0o53fm.lua:30: attempt to perform arithmetic on a nil value (field 'integer index')\nstack traceback:\n\t/tmp/tmpij0o53fm.lua:30: in upvalue 'partition'\n\t/tmp/tmpij0o53fm.lua:40: in local 'quick_sort'\n\t/tmp/tmpij0o53fm.lua:45: in local 'candidate'\n\t/tmp/tmpij0o53fm.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwd_paqts.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function merge(nums1, nums2)\n        local i, j = 1, 1\n        local result = {}\n        while i <= #nums1 and j <= #nums2 do\n            if nums1[i] < nums2[j] then\n                table.insert(result, nums1[i])\n                i = i + 1\n            else\n                table.insert(result, nums2[j])\n                j = j + 1\n            end\n        end\n        while i <= #nums1 do\n            table.insert(result, nums1[i])\n            i = i + 1\n        end\n        while j <= #nums2 do\n            table.insert(result, nums2[j])\n            j = j + 1\n        end\n        return result\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpc8qq7w4l.lua:34: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function merge(nums1, nums2)\n        local result = {}\n        local i, j = 1, 1\n        while i <= #nums1 and j <= #nums2 do\n            if nums1[i] < nums2[j] then\n                table.insert(result, nums1[i])\n                i = i + 1\n            else\n                table.insert(result, nums2[j])\n                j = j + 1\n            end\n        end\n        while i <= #nums1 do\n            table.insert(result, nums1[i])\n            i = i + 1\n        end\n        while j <= #nums2 do\n            table.insert(result, nums2[j])\n            j = j + 1\n        end\n        return result\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpys6o1gp7.lua:34: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local len1 = #nums1\n    local len2 = #nums2\n    if len1 == 0 or len2 == 0 then return {} end\n    local heap = {}\n    local function push(i, j, val)\n        heap[#heap + 1] = {i, j, val}\n        local idx = #heap\n        while idx > 1 do\n            local parent = math.floor(idx / 2)\n            if heap[parent][3] > heap[idx][3] then\n                heap[parent], heap[idx] = heap[idx], heap[parent]\n                idx = parent\n            else\n                break\n            end\n        end\n    end\n    local function pop()\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local idx = 1\n        while idx * 2 <= #heap do\n            local left = idx * 2\n            local right = idx * 2 + 1\n            local min_idx = left\n            if right <= #heap and heap[right][3] < heap[left][3] then\n                min_idx = right\n            end\n            if heap[idx][3] > heap[min_idx][3] then\n                heap[idx], heap[min_idx] = heap[min_idx], heap[idx]\n                idx = min_idx\n            else\n                break\n            end\n        end\n        return ret\n    end\n    local ret = {}\n    push(1, 1, nums1[1] + nums2[1])\n    while #ret < k and #heap > 0 do\n        local i, j, val = unpack(pop())\n        ret[#ret + 1] = {nums1[i], nums2[j]}\n        if j < len2 then\n            push(i, j + 1, nums1[i] + nums2[j + 1])\n        end\n        if j == 1 and i < len1 then\n            push(i + 1, 1, nums1[i + 1] + nums2[1])\n       \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7w4s_hxs.lua:61: 'end' expected (to close 'if' at line 49) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local res = {}\n    local len1 = #nums1\n    local len2 = #nums2\n    if len1 == 0 or len2 == 0 then return res end\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            table.insert(heap, {i, j, sum})\n            local i = #heap\n            while i > 1 do\n                local p = math.floor(i / 2)\n                if heap[p][3] > sum then\n                    heap[i], heap[p] = heap[p], heap[i]\n                    i = p\n                else\n                    break\n                end\n            end\n        elseif sum < heap[1][3] then\n            heap[1] = {i, j, sum}\n            local i = 1\n            while i * 2 <= k do\n                local l = i * 2\n                local r = i * 2 + 1\n                local min_i = l\n                if r <= k and heap[r][3] < heap[l][3] then\n                    min_i = r\n                end\n                if heap[min_i][3] < heap[i][3] then\n                    heap[i], heap[min_i] = heap[min_i], heap[i]\n                    i = min_i\n                else\n                    break\n                end\n            end\n        end\n    end\n    for i = 1, math.min(len1, k) do\n        push(i, 1)\n    end\n    for i = 1, k do\n        if #heap == 0 then break end\n        local pair = table.remove(heap, 1)\n        table.insert(res, {nums1[pair[1]], nums2[pair[2]]})\n        if pair[2] < len2 then\n            push(pair[1], pair[2] + 1)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphz2md43y.lua:58: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}}\nstack traceback:\n\t/tmp/tmphz2md43y.lua:58: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_push(heap, item)\n    table.insert(heap, item)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j][1] + heap[j][2] <= heap[i][1] + heap[i][2] then\n        break\n      end\n      heap[i], heap[j] = heap[j], heap[i]\n      i = j\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0xa8ys4t.lua:24: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    if #heap < k then\n      heapq.heappush(heap, {sum, i, j})\n    elseif heap[1][1] > sum then\n      heapq.heappop(heap)\n      heapq.heappush(heap, {sum, i, j})\n    end\n  end\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      push(i, j)\n    end\n  end\n  local res = {}\n  for _, v in ipairs(heap) do\n    table.insert(res, {nums1[v[2]], nums2[v[3]]})\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpirim9_y_.lua:7: attempt to index a nil value (global 'heapq')\nstack traceback:\n\t/tmp/tmpirim9_y_.lua:7: in local 'push'\n\t/tmp/tmpirim9_y_.lua:15: in local 'candidate'\n\t/tmp/tmpirim9_y_.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function cmp(a, b)\n        return a[1] < b[1] or (a[1] == b[1] and a[2] < b[2])\n    end\n    local heap = {}\n    local function push(i, j)\n        if i <= #nums1 and j <= #nums2 then\n            heapinsert(heap, {nums1[i] + nums2[j], i, j}, cmp)\n        end\n    end\n    local function pop()\n        local v = heapremove(heap, cmp)\n        if v then\n            push(v[2] + 1, v[3])\n            return v[1], v[2], v[3]\n        end\n    end\n    for i = 1, #nums1 do\n        push(i, 1)\n    end\n    local ret = {}\n    for i = 1, k do\n        local v = pop()\n        if not v then\n            break\n        end\n        ret[i] = {nums1[v[2]], nums2[v[3]]}\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_csoer6f.lua:9: attempt to call a nil value (global 'heapinsert')\nstack traceback:\n\t/tmp/tmp_csoer6f.lua:9: in local 'push'\n\t/tmp/tmp_csoer6f.lua:20: in local 'candidate'\n\t/tmp/tmp_csoer6f.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function heap_push(x, y, val)\n    heap[#heap+1] = {x=x, y=y, val=val}\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i/2)\n      if heap[j].val > heap[i].val then\n        heap[j], heap[i] = heap[i], heap[j]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop()\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i*2 <= #heap do\n      local j = i*2\n      if j+1 <= #heap and heap[j+1].val < heap[j].val then\n        j = j+1\n      end\n      if heap[i].val > heap[j].val then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for i=1,#nums1 do\n    for j=1,#nums2 do\n      heap_push(i, j, nums1[i]+nums2[j])\n    end\n  end\n  local ret = {}\n  for i=1,k do\n    local x = heap_pop()\n    if not x then break end\n    ret[#ret+1] = {x.x, x.y}\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0md5psn3.lua:53: expected: {{1, 2}, {1, 4}}\nactual: {{1, 1}, {1, 2}}\nstack traceback:\n\t/tmp/tmp0md5psn3.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] < b[1] or (a[1] == b[1] and a[2] < b[2])\n    end\n    local function push(heap, num1, num2)\n        if #heap < k then\n            table.insert(heap, {num1 + num2, num1, num2})\n        elseif num1 + num2 < heap[1][1] then\n            heap[1] = {num1 + num2, num1, num2}\n            table.sort(heap, compare)\n        end\n    end\n    local heap = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            push(heap, nums1[i], nums2[j])\n        end\n    end\n    local result = {}\n    for i = 1, #heap do\n        table.insert(result, {heap[i][2], heap[i][3]})\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjofgji_.lua:32: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpnjofgji_.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local result = {}\n  local heap = {}\n  local function heap_push(heap, val)\n    table.insert(heap, val)\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[i][1] + heap[i][2] >= heap[parent][1] + heap[parent][2] then\n        break\n      end\n      heap[i], heap[parent] = heap[parent], heap[i]\n      i = parent\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap)\n    local i = 1\n    while i * 2 <= #heap do\n      local l = i * 2\n      local r = i * 2 + 1\n      local min = l\n      if r <= #heap and heap[r][1] + heap[r][2] < heap[l][1] + heap[l][2] then\n        min = r\n      end\n      if heap[i][1] + heap[i][2] <= heap[min][1] + heap[min][2] then\n        break\n      end\n      heap[i], heap[min] = heap[min], heap[i]\n      i = min\n    end\n    return ret\n  end\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      heap_push(heap, {nums1[i], nums2[j]})\n    end\n  end\n  for i = 1, k do\n    if #heap == 0 then\n      break\n    end\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrhne1dd.lua:56: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {7, 2}, {3, 6}}\nstack traceback:\n\t/tmp/tmpsrhne1dd.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_push(heap, val)\n    table.insert(heap, val)\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent][1] + heap[parent][2] > heap[i][1] + heap[i][2] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmp346vxwvj.lua:25: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local result = {}\n  local heap = {}\n  local function push(x, y, val)\n    if #heap < k then\n      table.insert(heap, {x, y, val})\n      local i = #heap\n      while i > 1 and heap[i][3] < heap[i // 2][3] do\n        heap[i], heap[i // 2] = heap[i // 2], heap[i]\n        i = i // 2\n      end\n    elseif val < heap[1][3] then\n      heap[1] = {x, y, val}\n      local i = 1\n      while i * 2 <= #heap do\n        local j = i * 2\n        if j < #heap and heap[j + 1][3] < heap[j][3] then\n          j = j + 1\n        end\n        if heap[j][3] < heap[i][3] then\n          heap[i], heap[j] = heap[j], heap[i]\n          i = j\n        else\n          break\n        end\n      end\n    end\n  end\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      push(i, j, nums1[i] + nums2[j])\n    end\n  end\n  for i = 1, #heap do\n    table.insert(result, {nums1[heap[i][1]], nums2[heap[i][2]]})\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_6r8k40.lua:46: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpl_6r8k40.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local len1 = #nums1\n    local len2 = #nums2\n    if len1 == 0 or len2 == 0 then\n        return {}\n    end\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            table.insert(heap, {i, j, sum})\n            local i = #heap\n            while i > 1 and heap[i][3] < heap[i // 2][3] do\n                heap[i], heap[i // 2] = heap[i // 2], heap[i]\n                i = i // 2\n            end\n        elseif sum < heap[1][3] then\n            heap[1] = {i, j, sum}\n            local i = 1\n            while i * 2 <= #heap do\n                local j = i * 2\n                if j + 1 <= #heap and heap[j + 1][3] < heap[j][3] then\n                    j = j + 1\n                end\n                if heap[i][3] <= heap[j][3] then\n                    break\n                end\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            end\n        end\n    end\n    for i = 1, math.min(len1, k) do\n        push(i, 1)\n    end\n    local res = {}\n    while #heap > 0 do\n        local i, j, sum = table.unpack(table.remove(heap, 1))\n        table.insert(res, {nums1[i], nums2[j]})\n        if j + 1 <= len2 then\n            push(i, j + 1)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpci8kqnr2.lua:51: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}, {1, 4}, {3, 4}, {1, 6}, {3, 6}}\nstack traceback:\n\t/tmp/tmpci8kqnr2.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function merge(nums1, nums2)\n    local res = {}\n    local i, j = 1, 1\n    while i <= #nums1 and j <= #nums2 do\n      if nums1[i] < nums2[j] then\n        res[#res + 1] = nums1[i]\n        i = i + 1\n      else\n        res[#res + 1] = nums2[j]\n        j = j + 1\n      end\n    end\n    while i <= #nums1 do\n      res[#res + 1] = nums1[i]\n      i = i + 1\n    end\n    while j <= #nums2 do\n      res[#res + 1] = nums2[j]\n      j = j + 1\n    end\n    return res\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpz30hlz9s.lua:34: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe9dli__4.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local pairs = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(pairs, {nums1[i], nums2[j]})\n    end\n  end\n  table.sort(pairs, function(a, b) return a[1] + a[2] < b[1] + b[2] end)\n  local result = {}\n  for i = 1, k do\n    table.insert(result, pairs[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1llxtbzj.lua:22: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp1llxtbzj.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return (a[1] + a[2]) < (b[1] + b[2])\n  end\n  local function add_pair(n1, n2, pairs)\n    if #pairs < k then\n      table.insert(pairs, {n1, n2})\n    else\n      local last = pairs[#pairs]\n      if (n1 + n2) < (last[1] + last[2]) then\n        table.remove(pairs)\n        table.insert(pairs, {n1, n2})\n      end\n    end\n  end\n  local pairs = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      add_pair(nums1[i], nums2[j], pairs)\n    end\n  end\n  table.sort(pairs, compare)\n  return pairs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpob1nx3sg.lua:32: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpob1nx3sg.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe9dli__4.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local pairs = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(pairs, {nums1[i], nums2[j]})\n        end\n    end\n    table.sort(pairs, function(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end)\n    local result = {}\n    for i = 1, k do\n        table.insert(result, pairs[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00931efe.lua:24: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp00931efe.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    if #heap < k then\n      heap[#heap + 1] = {i, j, sum}\n      local i = #heap\n      while i > 1 do\n        local parent = math.floor(i / 2)\n        if heap[parent][3] > heap[i][3] then\n          heap[parent], heap[i] = heap[i], heap[parent]\n          i = parent\n        else\n          break\n        end\n      end\n    elseif sum < heap[1][3] then\n      heap[1] = {i, j, sum}\n      local i = 1\n      while i * 2 <= #heap do\n        local left = i * 2\n        local right = i * 2 + 1\n        local min_child = left\n        if right <= #heap and heap[right][3] < heap[left][3] then\n          min_child = right\n        end\n        if heap[i][3] > heap[min_child][3] then\n          heap[i], heap[min_child] = heap[min_child], heap[i]\n          i = min_child\n        else\n          break\n        end\n      end\n    end\n  end\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      push(i, j)\n    end\n  end\n  local result = {}\n  for i = 1, #heap do\n    result[i] = {nums1[heap[i][1]], nums2[heap[i][2]]}\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxfcf3ke.lua:54: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpdxfcf3ke.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    if #heap < k then\n      table.insert(heap, {i, j, sum})\n      local i = #heap\n      while i > 1 do\n        local j = math.floor(i / 2)\n        if heap[j][3] > heap[i][3] then\n          heap[i], heap[j] = heap[j], heap[i]\n          i = j\n        else\n          break\n        end\n      end\n    elseif sum < heap[1][3] then\n      heap[1] = {i, j, sum}\n      local i = 1\n      while i * 2 <= #heap do\n        local j = i * 2\n        if j + 1 <= #heap and heap[j + 1][3] < heap[j][3] then\n          j = j + 1\n        end\n        if heap[i][3] > heap[j][3] then\n          heap[i], heap[j] = heap[j], heap[i]\n          i = j\n        else\n          break\n        end\n      end\n    end\n  end\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      push(i, j)\n    end\n  end\n  local result = {}\n  for i = 1, #heap do\n    table.insert(result, {nums1[heap[i][1]], nums2[heap[i][2]]})\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoc601u3i.lua:52: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpoc601u3i.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_push(heap, val)\n    heap[#heap + 1] = val\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j][1] + heap[j][2] > heap[i][1] + heap[i][2] then\n        heap[j], heap[i] = heap[i], heap[j]\n        i = j\n      else\n        break\n      end\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwtuoynyc.lua:25: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\n    local heap = {}\n    local function push(x, y)\n        if x <= #nums1 and y <= #nums2 then\n            table.insert(heap, {nums1[x], nums2[y]})\n            table.sort(heap, compare)\n            if #heap > k then\n                table.remove(heap, #heap)\n            end\n        end\n    end\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            push(i, j)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_5tclgk.lua:29: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {3, 2}, {1, 4}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpo_5tclgk.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\n  local pairs = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(pairs, {nums1[i], nums2[j]})\n    end\n  end\n  table.sort(pairs, compare)\n  local result = {}\n  for i = 1, k do\n    table.insert(result, pairs[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfu81o02.lua:25: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpsfu81o02.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local len1 = #nums1\n  local len2 = #nums2\n  if len1 == 0 or len2 == 0 then\n    return {}\n  end\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    heap[#heap + 1] = {sum, i, j}\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent][1] > heap[i][1] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local left = i * 2\n      local right = i * 2 + 1\n      local min = left\n      if right <= #heap and heap[right][1] < heap[left][1] then\n        min = right\n      end\n      if heap[i][1] > heap[min][1] then\n        heap[i], heap[min] = heap[min], heap[i]\n        i = min\n      else\n        break\n      end\n    end\n    return ret\n  end\n  local ret = {}\n  for i = 1, math.min(len1, k) do\n    push(i, 1)\n  end\n  while k > 0 and #heap > 0 do\n    local pair = pop()\n    ret[#ret + 1] = {nums1[pair[2]], nums2[pair[3]]}\n    k = k - 1\n    if pair[3] < len2 then\n      push(pair[2], pair[3] + 1)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpenk5rcrx.lua:62: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}}\nstack traceback:\n\t/tmp/tmpenk5rcrx.lua:62: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            table.insert(heap, {i, j, sum})\n            local i = #heap\n            while i > 1 and heap[i][3] < heap[i // 2][3] do\n                heap[i], heap[i // 2] = heap[i // 2], heap[i]\n                i = i // 2\n            end\n        elseif sum < heap[1][3] then\n            heap[1] = {i, j, sum}\n            local i = 1\n            while i * 2 <= #heap do\n                local j = i * 2\n                if j + 1 <= #heap and heap[j + 1][3] < heap[j][3] then\n                    j = j + 1\n                end\n                if heap[i][3] <= heap[j][3] then\n                    break\n                end\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            end\n        end\n    end\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            push(i, j)\n        end\n    end\n    local res = {}\n    for i = 1, #heap do\n        res[i] = {nums1[heap[i][1]], nums2[heap[i][2]]}\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56bpzzvz.lua:46: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp56bpzzvz.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local len1 = #nums1\n  local len2 = #nums2\n  local heap = {}\n  local heap_size = 0\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    heap_size = heap_size + 1\n    heap[heap_size] = {sum, i, j}\n    local i = heap_size\n    while i > 1 do\n      local p = math.floor(i / 2)\n      if heap[p][1] > heap[i][1] then\n        heap[p], heap[i] = heap[i], heap[p]\n        i = p\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local ret = heap[1]\n    heap[1] = heap[heap_size]\n    heap_size = heap_size - 1\n    local i = 1\n    while i * 2 <= heap_size do\n      local l = i * 2\n      local r = i * 2 + 1\n      local min = l\n      if r <= heap_size and heap[r][1] < heap[l][1] then\n        min = r\n      end\n      if heap[i][1] > heap[min][1] then\n        heap[i], heap[min] = heap[min], heap[i]\n        i = min\n      else\n        break\n      end\n    end\n    return ret\n  end\n  local function empty()\n    return heap_size == 0\n  end\n  local function top()\n    return heap[1]\n  end\n  local function size()\n    return heap_size\n  end\n  local function clear()\n    heap_size = 0\n  end\n  local function print()\n    for i = 1, heap_size do\n      print(heap[i][1])\n    end\n  end\n  for i = 1, math.min(len1, k) do\n    push(i, 1)\n  end\n  local ret = {}\n  for i = 1, k do\n    if empty() then\n      break\n    end\n    local sum, x, y = pop()\n   \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzico79c9.lua:79: 'end' expected (to close 'for' at line 64) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe9dli__4.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function heap_push(heap, item)\n        table.insert(heap, item)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[j][1] + heap[j][2] > heap[i][1] + heap[i][2] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmprtob7le_.lua:25: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_push(heap, val, idx1, idx2)\n    local i = #heap + 1\n    heap[i] = {val, idx1, idx2}\n    while i > 1 do\n      local p = math.floor(i / 2)\n      if heap[p][1] > heap[i][1] then\n        heap[p], heap[i] = heap[i], heap[p]\n        i = p\n      else\n        break\n      end\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmprrma6_jt.lua:25: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local res = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(res, {nums1[i], nums2[j]})\n        end\n    end\n    table.sort(res, function(a, b) return a[1] + a[2] < b[1] + b[2] end)\n    local ret = {}\n    for i = 1, k do\n        table.insert(ret, res[i])\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjs_718c.lua:22: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmphjs_718c.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\n  local res = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(res, {nums1[i], nums2[j]})\n    end\n  end\n  table.sort(res, compare)\n  local result = {}\n  for i = 1, k do\n    table.insert(result, res[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mdbse1x.lua:25: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp6mdbse1x.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_push(heap, val)\n    table.insert(heap, val)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j][1] + heap[j][2] <= heap[i][1] + heap[i][2] then\n        break\n      end\n      heap[i], heap[j] = heap[j], heap[i]\n      i = j\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe_nl8v27.lua:24: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    if i <= #nums1 and j <= #nums2 then\n      heap[#heap + 1] = {nums1[i] + nums2[j], i, j}\n    end\n  end\n  local function pop()\n    local top = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j < #heap and heap[j][1] > heap[j + 1][1] then\n        j = j + 1\n      end\n      if heap[i][1] <= heap[j][1] then\n        break\n      end\n      heap[i], heap[j] = heap[j], heap[i]\n      i = j\n    end\n    return top\n  end\n  local function top()\n    return heap[1]\n  end\n  local function size()\n    return #heap\n  end\n  push(1, 1)\n  local result = {}\n  while size() > 0 and #result < k do\n    local top = pop()\n    result[#result + 1] = {nums1[top[2]], nums2[top[3]]}\n    push(top[2], top[3] + 1)\n    if top[3] == 1 then\n      push(top[2] + 1, 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwkvxke3.lua:51: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {7, 2}, {3, 6}}\nstack traceback:\n\t/tmp/tmpkwkvxke3.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function merge(nums1, nums2)\n    local i, j, m, n = 1, 1, #nums1, #nums2\n    local res = {}\n    while i <= m and j <= n do\n      if nums1[i] <= nums2[j] then\n        table.insert(res, nums1[i])\n        i = i + 1\n      else\n        table.insert(res, nums2[j])\n        j = j + 1\n      end\n    end\n    while i <= m do\n      table.insert(res, nums1[i])\n      i = i + 1\n    end\n    while j <= n do\n      table.insert(res, nums2[j])\n      j = j + 1\n    end\n    return res\n  end\n  local function find_kth(nums1, nums2, k)\n    local m, n = #nums1, #nums2\n    if m > n then\n      return find_kth(nums2, nums1, k)\n    end\n    if m == 0 then\n      return nums2[k]\n    end\n    if k == 1 then\n      return math.min(nums1[1], nums2[1])\n    end\n    local i = math.min(m, math.floor(k / 2))\n    local j = math.min(n, math.floor(k / 2))\n    if nums1[i] > nums2[j] then\n      return find_kth(nums1, {unpack(nums2, j + 1)}, k - j)\n    else\n      return find_kth({unpack(nums1, i + 1)}, nums2, k - i)\n    end\n  end\n  local function find_kth_smallest_pair(nums1, nums2, k)\n    local m, n = #nums1, #nums2\n    local left, right = math.max(nums1[1] + nums2[1], nums1[m] + nums2[1]), nums1[m] + nums2[\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmp64tihnh9.lua:47: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local result = {}\n    local len1 = #nums1\n    local len2 = #nums2\n    if len1 == 0 or len2 == 0 then\n        return result\n    end\n    local heap = {}\n    local function push(val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local p = math.floor(i / 2)\n            if heap[p][1] + heap[p][2] > heap[i][1] + heap[i][2] then\n                heap[p], heap[i] = heap[i], heap[p]\n                i = p\n            else\n                break\n            end\n        end\n    end\n    local function pop()\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local l = i * 2\n            local r = i * 2 + 1\n            local min = l\n            if r <= #heap and heap[r][1] + heap[r][2] < heap[l][1] + heap[l][2] then\n                min = r\n            end\n            if heap[i][1] + heap[i][2] > heap[min][1] + heap[min][2] then\n                heap[i], heap[min] = heap[min], heap[i]\n                i = min\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for i = 1, math.min(len1, k) do\n        push({nums1[i], nums2[1], 1})\n    end\n    while #result < k and #heap > 0 do\n        local val = pop()\n        table.insert(result, {val[1], val[2]})\n        if val[3] + 1 <= len2 then\n            push({val[1], nums2[val[3] + 1], val[3] + 1})\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8hmpljw.lua:60: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}}\nstack traceback:\n\t/tmp/tmpl8hmpljw.lua:60: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_pop(heap)\n    local root = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i < #heap do\n      local left = i * 2\n      local right = left + 1\n      if left > #heap then\n        break\n      elseif right > #heap then\n        if heap[i][1] > heap[left][1] then\n          heap[i], heap[left] = heap[left], heap[i]\n        end\n        break\n      else\n        local min_index = i\n        if heap[left][1] < heap[min_index][1] then\n          min_index = left\n        end\n        if heap[right][1] < heap[min_index][1] then\n          min_index = right\n        end\n        if min_index == i then\n          break\n        else\n          heap[i], heap[min_index] = heap[min_index], heap[i]\n          i = min_index\n        end\n      end\n    end\n    return root\n  end\n  local function heap_push(heap, value)\n    heap[#heap + 1] = value\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[i][1] < heap[parent][1] then\n        heap[i], heap[parent] = heap[parent], heap[i]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_top(heap)\n    return heap[1]\n  end\n  local function heap_empty(heap)\n    return #heap == 0\n  end\n  local function heap_size(heap)\n    return #heap\n  end\n  local heap = {}\n  local result = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      heap_push(heap, {nums1[i] + nums2[j], {nums1[i], nums2[j]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpolkf20nt.lua:63: '}' expected (to close '{' at line 62) near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] < b[1] or (a[1] == b[1] and a[2] < b[2])\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2pu0fxcn.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_push(heap, val)\n    heap[#heap + 1] = val\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent][1] + heap[parent][2] > heap[i][1] + heap[i][2] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpruu7bsgs.lua:25: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function heap_pop(heap)\n        local n = #heap\n        if n == 0 then\n            return nil\n        end\n        local v = heap[1]\n        if n == 1 then\n            heap[1] = nil\n            return v\n        end\n        heap[1] = heap[n]\n        heap[n] = nil\n        local i = 1\n        while true do\n            local l = i * 2\n            local r = l + 1\n            if l > n then\n                break\n            end\n            local j = l\n            if r <= n and heap[r][1] < heap[l][1] then\n                j = r\n            end\n            if heap[j][1] < heap[i][1] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return v\n    end\n    local function heap_push(heap, v)\n        local n = #heap\n        heap[n + 1] = v\n        local i = n + 1\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[j][1] > heap[i][1] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function heap_top(heap)\n        return heap[1]\n    end\n    local function heap_empty(heap)\n        return #heap == 0\n    end\n    local heap = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            heap_push(heap, {nums1[i] + nums2[j], i, j})\n        end\n    end\n    local ret = {}\n    while k > 0 and not heap_empty(heap) do\n        local v = heap_pop(heap)\n        table.insert(ret, {nums1[v[2]], nums2[v[3]]})\n        k = k - 1\n    end\n   \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdqtc3qu9.lua:77: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function heap_pop(heap)\n        local v = heap[1]\n        local n = #heap\n        heap[1] = heap[n]\n        heap[n] = nil\n        local i = 1\n        while true do\n            local l = i * 2\n            local r = l + 1\n            if l > n then\n                break\n            elseif r > n then\n                if heap[i][1] > heap[l][1] then\n                    heap[i], heap[l] = heap[l], heap[i]\n                end\n                break\n            else\n                local min_i = i\n                if heap[l][1] < heap[min_i][1] then\n                    min_i = l\n                end\n                if heap[r][1] < heap[min_i][1] then\n                    min_i = r\n                end\n                if min_i ~= i then\n                    heap[i], heap[min_i] = heap[min_i], heap[i]\n                    i = min_i\n                else\n                    break\n                end\n            end\n        end\n        return v\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3o3369at.lua:46: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe9dli__4.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\n  local pairs = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(pairs, {nums1[i], nums2[j]})\n    end\n  end\n  table.sort(pairs, compare)\n  local result = {}\n  for i = 1, k do\n    table.insert(result, pairs[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfu81o02.lua:25: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpsfu81o02.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwd_paqts.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_pop(heap)\n    local last = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1][1] < heap[j][1] then\n        j = j + 1\n      end\n      if last[1] <= heap[j][1] then\n        break\n      end\n      heap[i] = heap[j]\n      i = j\n    end\n    heap[i] = last\n    return heap[1]\n  end\n  local function heap_push(heap, item)\n    heap[#heap + 1] = item\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j][1] <= heap[i][1] then\n        break\n      end\n      heap[i], heap[j] = heap[j], heap[i]\n      i = j\n    end\n  end\n  local function heap_top(heap)\n    return heap[1]\n  end\n  local function heap_empty(heap)\n    return #heap == 0\n  end\n  local function heap_size(heap)\n    return #heap\n  end\n  local function heap_clear(heap)\n    for i = 1, #heap do\n      heap[i] = nil\n    end\n  end\n  local function heap_new()\n    return {}\n  end\n  local function heap_delete(heap)\n    heap_clear(heap)\n  end\n  local function heap_merge(heap1, heap2)\n    for i = 1, #heap2 do\n      heap_push(heap1, heap2[i])\n    end\n  end\n  local function heap_sort(heap)\n    local result = {}\n    while not heap_empty(heap) do\n      result[#result + 1] = heap_pop(heap)\n    end\n    return result\n  end\n  local function heap_copy(heap)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpq4_dibbz.lua:76: 'end' expected (to close 'function' at line 65) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwd_paqts.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function cmp(a, b)\n        return a[1] < b[1] or (a[1] == b[1] and a[2] < b[2])\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpblqmg39d.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function merge(nums1, nums2)\n    local i, j = 1, 1\n    local res = {}\n    while i <= #nums1 and j <= #nums2 do\n      if nums1[i] < nums2[j] then\n        table.insert(res, nums1[i])\n        i = i + 1\n      else\n        table.insert(res, nums2[j])\n        j = j + 1\n      end\n    end\n    while i <= #nums1 do\n      table.insert(res, nums1[i])\n      i = i + 1\n    end\n    while j <= #nums2 do\n      table.insert(res, nums2[j])\n      j = j + 1\n    end\n    return res\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpf5vk941o.lua:34: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\n    local heap = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(heap, {nums1[i], nums2[j]})\n        end\n    end\n    table.sort(heap, compare)\n    local result = {}\n    for i = 1, k do\n        table.insert(result, heap[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9pk9x12.lua:25: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpf9pk9x12.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function merge(nums1, nums2)\n    local i, j = 1, 1\n    local res = {}\n    while i <= #nums1 and j <= #nums2 do\n      if nums1[i] < nums2[j] then\n        table.insert(res, nums1[i])\n        i = i + 1\n      else\n        table.insert(res, nums2[j])\n        j = j + 1\n      end\n    end\n    if i <= #nums1 then\n      for k = i, #nums1 do\n        table.insert(res, nums1[k])\n      end\n    elseif j <= #nums2 then\n      for k = j, #nums2 do\n        table.insert(res, nums2[k])\n      end\n    end\n    return res\n  end\n  local res = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(res, {nums1[i], nums2[j]})\n    end\n  end\n  table.sort(res, function(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end)\n  local ret = {}\n  for i = 1, k do\n    table.insert(ret, res[i])\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp267vgdb7.lua:47: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp267vgdb7.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_pop(heap)\n    local n = #heap\n    if n == 0 then\n      return nil\n    end\n    local v = heap[1]\n    if n == 1 then\n      heap[1] = nil\n      return v\n    end\n    heap[1] = heap[n]\n    heap[n] = nil\n    local i = 1\n    while true do\n      local l = i * 2\n      local r = l + 1\n      if l > n then\n        break\n      end\n      local j = l\n      if r <= n and heap[r][1] < heap[l][1] then\n        j = r\n      end\n      if heap[i][1] <= heap[j][1] then\n        break\n      end\n      heap[i], heap[j] = heap[j], heap[i]\n      i = j\n    end\n    return v\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcy161w64.lua:43: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(x, y)\n    local val = nums1[x] + nums2[y]\n    if #heap < k then\n      heap[#heap+1] = {x, y, val}\n      local i = #heap\n      while i > 1 do\n        local j = math.floor(i / 2)\n        if heap[j][3] > val then\n          heap[i], heap[j] = heap[j], heap[i]\n          i = j\n        else\n          break\n        end\n      end\n    elseif val < heap[1][3] then\n      heap[1] = {x, y, val}\n      local i = 1\n      while i * 2 <= #heap do\n        local j = i * 2\n        if j + 1 <= #heap and heap[j+1][3] < heap[j][3] then\n          j = j + 1\n        end\n        if heap[j][3] < val then\n          heap[i], heap[j] = heap[j], heap[i]\n          i = j\n        else\n          break\n        end\n      end\n    end\n  end\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      push(i, j)\n    end\n  end\n  local res = {}\n  for i = 1, #heap do\n    res[i] = {nums1[heap[i][1]], nums2[heap[i][2]]}\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3xfqmuo.lua:52: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpf3xfqmuo.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local result = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local sum = nums1[i] + nums2[j]\n      if #result < k then\n        table.insert(result, {nums1[i], nums2[j]})\n      else\n        local max = result[1][1] + result[1][2]\n        local max_index = 1\n        for index, pair in ipairs(result) do\n          if pair[1] + pair[2] > max then\n            max = pair[1] + pair[2]\n            max_index = index\n          end\n        end\n        if sum < max then\n          table.remove(result, max_index)\n          table.insert(result, {nums1[i], nums2[j]})\n        end\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7j74zjrm.lua:33: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp7j74zjrm.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\n    local heap = {}\n    local function push(x, y)\n        if x > #nums1 or y > #nums2 then\n            return\n        end\n        local pair = {nums1[x], nums2[y]}\n        table.insert(heap, pair)\n        table.sort(heap, compare)\n        if #heap > k then\n            table.remove(heap, 1)\n        end\n    end\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            push(i, j)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5usvqczt.lua:29: expected: {{1, 2}, {1, 4}}\nactual: {{7, 4}, {7, 6}}\nstack traceback:\n\t/tmp/tmp5usvqczt.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    if #heap < k then\n      heap[#heap + 1] = {i, j, sum}\n      local i = #heap\n      while i > 1 do\n        local p = math.floor(i / 2)\n        if heap[p][3] > heap[i][3] then\n          heap[p], heap[i] = heap[i], heap[p]\n          i = p\n        else\n          break\n        end\n      end\n    elseif sum < heap[1][3] then\n      heap[1] = {i, j, sum}\n      local i = 1\n      while i * 2 <= #heap do\n        local l = i * 2\n        local r = l + 1\n        if r <= #heap and heap[r][3] < heap[l][3] then\n          l = r\n        end\n        if heap[i][3] > heap[l][3] then\n          heap[i], heap[l] = heap[l], heap[i]\n          i = l\n        else\n          break\n        end\n      end\n    end\n  end\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      push(i, j)\n    end\n  end\n  local result = {}\n  for i = 1, #heap do\n    result[i] = {nums1[heap[i][1]], nums2[heap[i][2]]}\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8saa5hj.lua:53: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpw8saa5hj.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\n    local function add_pair(a, b)\n        local pairs = {}\n        for i = 1, #a do\n            for j = 1, #b do\n                table.insert(pairs, {a[i], b[j]})\n            end\n        end\n        table.sort(pairs, compare)\n        return pairs\n    end\n    local pairs = add_pair(nums1, nums2)\n    local result = {}\n    for i = 1, k do\n        table.insert(result, pairs[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxu4uu2cs.lua:29: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpxu4uu2cs.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\n    local pairs = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(pairs, {nums1[i], nums2[j]})\n        end\n    end\n    table.sort(pairs, compare)\n    local result = {}\n    for i = 1, k do\n        table.insert(result, pairs[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hlc82zo.lua:25: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp2hlc82zo.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwd_paqts.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local pairs = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(pairs, {nums1[i], nums2[j]})\n    end\n  end\n  table.sort(pairs, function(a, b) return a[1] + a[2] < b[1] + b[2] end)\n  local result = {}\n  for i = 1, k do\n    table.insert(result, pairs[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1llxtbzj.lua:22: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp1llxtbzj.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    if #heap < k then\n      table.insert(heap, {i, j, sum})\n      local i = #heap\n      while i > 1 do\n        local parent = math.floor(i / 2)\n        if heap[parent][3] > sum then\n          heap[i], heap[parent] = heap[parent], heap[i]\n          i = parent\n        else\n          break\n        end\n      end\n    elseif sum < heap[1][3] then\n      heap[1] = {i, j, sum}\n      local i = 1\n      while i * 2 <= #heap do\n        local left = i * 2\n        local right = i * 2 + 1\n        local min_child = left\n        if right <= #heap and heap[right][3] < heap[left][3] then\n          min_child = right\n        end\n        if heap[i][3] > heap[min_child][3] then\n          heap[i], heap[min_child] = heap[min_child], heap[i]\n          i = min_child\n        else\n          break\n        end\n      end\n    end\n  end\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      push(i, j)\n    end\n  end\n  local result = {}\n  for i = 1, #heap do\n    local pair = heap[i]\n    table.insert(result, {nums1[pair[1]], nums2[pair[2]]})\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3bnp522.lua:55: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpe3bnp522.lua:55: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = Heap.new()\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      heap:push({nums1[i] + nums2[j], {nums1[i], nums2[j]}})\n    end\n  end\n  local result = {}\n  for i = 1, k do\n    local item = heap:pop()\n    if item then\n      table.insert(result, item[2])\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk9tyh1f3.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpk9tyh1f3.lua:3: in local 'candidate'\n\t/tmp/tmpk9tyh1f3.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    if #heap < k then\n      table.insert(heap, {i, j, sum})\n      local i = #heap\n      while i > 1 do\n        local parent = math.floor(i / 2)\n        if heap[parent][3] > heap[i][3] then\n          heap[parent], heap[i] = heap[i], heap[parent]\n          i = parent\n        else\n          break\n        end\n      end\n    elseif heap[1][3] > sum then\n      heap[1] = {i, j, sum}\n      local i = 1\n      while i * 2 <= #heap do\n        local left = i * 2\n        local right = i * 2 + 1\n        local min_child = left\n        if right <= #heap and heap[right][3] < heap[left][3] then\n          min_child = right\n        end\n        if heap[i][3] > heap[min_child][3] then\n          heap[i], heap[min_child] = heap[min_child], heap[i]\n          i = min_child\n        else\n          break\n        end\n      end\n    end\n  end\n  for i = 1, #nums1 do\n    push(i, 1)\n  end\n  local result = {}\n  while #heap > 0 do\n    local i, j, sum = table.unpack(table.remove(heap, 1))\n    table.insert(result, {nums1[i], nums2[j]})\n    if j < #nums2 then\n      push(i, j + 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpup94ke72.lua:54: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}, {1, 4}, {3, 4}, {1, 6}, {3, 6}}\nstack traceback:\n\t/tmp/tmpup94ke72.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local res = {}\n    local len1 = #nums1\n    local len2 = #nums2\n    if len1 == 0 or len2 == 0 then\n        return res\n    end\n    local heap = {}\n    local function push(i, j)\n        local val = nums1[i] + nums2[j]\n        local heap_len = #heap\n        if heap_len < k then\n            heap[heap_len + 1] = {val, i, j}\n            local i = heap_len + 1\n            while i > 1 do\n                local parent = math.floor(i / 2)\n                if heap[parent][1] > heap[i][1] then\n                    heap[parent], heap[i] = heap[i], heap[parent]\n                    i = parent\n                else\n                    break\n                end\n            end\n        elseif val < heap[1][1] then\n            heap[1] = {val, i, j}\n            local i = 1\n            while true do\n                local left = i * 2\n                local right = left + 1\n                if left > heap_len then\n                    break\n                end\n                local min_i = i\n                if heap[left][1] < heap[min_i][1] then\n                    min_i = left\n                end\n                if right <= heap_len and heap[right][1] < heap[min_i][1] then\n                    min_i = right\n                end\n                if min_i ~= i then\n                    heap[min_i], heap[i] = heap[i], heap[min_i]\n                    i = min_i\n                else\n                    break\n                end\n            end\n        end\n    end\n    for i = 1, math.min(len1, k) do\n        push(i, 1)\n    end\n    for i = 1, k do\n        if #heap == 0 then\n            break\n        end\n        local val, i, j = unpack(table.remove(heap, 1))\n        res[#res + 1] = {nums1[i], nums2[j]}\n        if j < len2 then\n            push(i, j +\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe8p496zj.lua:61: ')' expected (to close '(' at line 60) near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[i][1] + heap[i][2] < heap[parent][1] + heap[parent][2] then\n                heap[i], heap[parent] = heap[parent], heap[i]\n                i = parent\n            else\n                break\n            end\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpv91pnjjq.lua:25: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_pop(heap)\n    local last = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local left = i * 2\n      local right = left + 1\n      local min_child = left\n      if right <= #heap and heap[right] < heap[left] then\n        min_child = right\n      end\n      if heap[i] <= heap[min_child] then\n        break\n      end\n      heap[i], heap[min_child] = heap[min_child], heap[i]\n      i = min_child\n    end\n    return last\n  end\n  local function heap_push(heap, val)\n    heap[#heap + 1] = val\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[i] >= heap[parent] then\n        break\n      end\n      heap[i], heap[parent] = heap[parent], heap[i]\n      i = parent\n    end\n  end\n  local function heap_top(heap)\n    return heap[1]\n  end\n  local function heap_size(heap)\n    return #heap\n  end\n  local heap = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local val = {nums1[i], nums2[j]}\n      if #heap < k then\n        heap_push(heap, val)\n      else\n        local top = heap_top(heap)\n        if nums1[i] + nums2[j] < top[1] + top[2] then\n          heap_pop(heap)\n          heap_push(heap, val)\n        end\n      end\n    end\n  end\n  local res = {}\n  while heap_size(heap) > 0 do\n    res[#res + 1] = heap_pop(heap)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qcoj5m3.lua:27: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp9qcoj5m3.lua:27: in local 'heap_push'\n\t/tmp/tmp9qcoj5m3.lua:45: in local 'candidate'\n\t/tmp/tmp9qcoj5m3.lua:65: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local result = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(result, {nums1[i], nums2[j]})\n        end\n    end\n    table.sort(result, function(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end)\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmo6fkw4x.lua:18: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}, {7, 4}, {7, 6}}\nstack traceback:\n\t/tmp/tmpmo6fkw4x.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] < b[1] or (a[1] == b[1] and a[2] < b[2])\n  end\n  local function heapify(arr, i, n)\n    local l, r, largest = 2 * i, 2 * i + 1, i\n    if l <= n and compare(arr[l], arr[largest]) then largest = l end\n    if r <= n and compare(arr[r], arr[largest]) then largest = r end\n    if largest ~= i then\n      arr[i], arr[largest] = arr[largest], arr[i]\n      heapify(arr, largest, n)\n    end\n  end\n  local function build_heap(arr, n)\n    for i = math.floor(n / 2), 1, -1 do\n      heapify(arr, i, n)\n    end\n  end\n  local function heap_pop(arr, n)\n    local res = arr[1]\n    arr[1], arr[n] = arr[n], arr[1]\n    heapify(arr, 1, n - 1)\n    return res\n  end\n  local function heap_push(arr, n, x)\n    local i = n + 1\n    arr[i] = x\n    while i > 1 and compare(arr[i], arr[math.floor(i / 2)]) do\n      arr[i], arr[math.floor(i / 2)] = arr[math.floor(i / 2)], arr[i]\n      i = math.floor(i / 2)\n    end\n  end\n  local function heap_sort(arr, n)\n    build_heap(arr, n)\n    for i = n, 2, -1 do\n      arr[1], arr[i] = arr[i], arr[1]\n      heapify(arr, 1, i - 1)\n    end\n  end\n  local function heap_top(arr)\n    return arr[1]\n  end\n  local function heap_empty(arr)\n    return #arr == 0\n  end\n  local function heap_size(arr)\n    return #arr\n  end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmposhiyr9o.lua:60: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local res = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(res, {nums1[i], nums2[j]})\n        end\n    end\n    table.sort(res, function(a, b) return a[1] + a[2] < b[1] + b[2] end)\n    local ret = {}\n    for i = 1, k do\n        table.insert(ret, res[i])\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjs_718c.lua:22: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmphjs_718c.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe9dli__4.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function merge(a, b)\n    local res = {}\n    local i, j = 1, 1\n    while i <= #a and j <= #b do\n      if a[i][1] + a[i][2] < b[j][1] + b[j][2] then\n        table.insert(res, a[i])\n        i = i + 1\n      else\n        table.insert(res, b[j])\n        j = j + 1\n      end\n    end\n    while i <= #a do\n      table.insert(res, a[i])\n      i = i + 1\n    end\n    while j <= #b do\n      table.insert(res, b[j])\n      j = j + 1\n    end\n    return res\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbl3c33lc.lua:34: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function cmp(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\n  local pairs = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(pairs, {nums1[i], nums2[j]})\n    end\n  end\n  table.sort(pairs, cmp)\n  local res = {}\n  for i = 1, k do\n    table.insert(res, pairs[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpi6x2vg.lua:25: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpdpi6x2vg.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            table.insert(heap, {i, j, sum})\n            local i = #heap\n            while i > 1 do\n                local p = math.floor(i / 2)\n                if heap[p][3] > heap[i][3] then\n                    heap[p], heap[i] = heap[i], heap[p]\n                    i = p\n                else\n                    break\n                end\n            end\n        elseif sum < heap[1][3] then\n            heap[1] = {i, j, sum}\n            local i = 1\n            while i * 2 <= #heap do\n                local l = i * 2\n                local r = i * 2 + 1\n                if r <= #heap and heap[r][3] < heap[l][3] then\n                    l = r\n                end\n                if heap[i][3] > heap[l][3] then\n                    heap[i], heap[l] = heap[l], heap[i]\n                    i = l\n                else\n                    break\n                end\n            end\n        end\n    end\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            push(i, j)\n        end\n    end\n    local result = {}\n    for i = 1, #heap do\n        result[i] = {nums1[heap[i][1]], nums2[heap[i][2]]}\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44m4c70d.lua:53: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp44m4c70d.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    if i <= #nums1 and j <= #nums2 then\n      heap[#heap + 1] = {nums1[i] + nums2[j], i, j}\n    end\n  end\n  local function pop()\n    local top = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i, j = 2, 3\n    while heap[i] or heap[j] do\n      if heap[i] and heap[j] then\n        if heap[i][1] < heap[j][1] then\n          if heap[i][1] < heap[1][1] then\n            heap[i], heap[1] = heap[1], heap[i]\n          else\n            break\n          end\n        else\n          if heap[j][1] < heap[1][1] then\n            heap[j], heap[1] = heap[1], heap[j]\n          else\n            break\n          end\n        end\n      elseif heap[i] then\n        if heap[i][1] < heap[1][1] then\n          heap[i], heap[1] = heap[1], heap[i]\n        else\n          break\n        end\n      else\n        if heap[j][1] < heap[1][1] then\n          heap[j], heap[1] = heap[1], heap[j]\n        else\n          break\n        end\n      end\n      i = i + 1\n      j = j + 1\n    end\n    return top\n  end\n  push(1, 1)\n  local result = {}\n  for _ = 1, k do\n    local top = pop()\n    if top then\n      result[#result + 1] = {top[2], top[3]}\n      push(top[2] + 1, top[3])\n      push(top[2], top[3] + 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_yoe6dn.lua:63: expected: {{1, 2}, {1, 4}}\nactual: {{1, 1}, {2, 1}}\nstack traceback:\n\t/tmp/tmp6_yoe6dn.lua:63: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function merge(a, b)\n    local result = {}\n    local i, j = 1, 1\n    while i <= #a and j <= #b do\n      if a[i][1] + a[i][2] < b[j][1] + b[j][2] then\n        table.insert(result, a[i])\n        i = i + 1\n      else\n        table.insert(result, b[j])\n        j = j + 1\n      end\n    end\n    while i <= #a do\n      table.insert(result, a[i])\n      i = i + 1\n    end\n    while j <= #b do\n      table.insert(result, b[j])\n      j = j + 1\n    end\n    return result\n  end\n  local function merge_sort(arr)\n    if #arr <= 1 then return arr end\n    local mid = math.floor(#arr / 2)\n    local left = merge_sort(arr, 1, mid)\n    local right = merge_sort(arr, mid + 1, #arr)\n    return merge(left, right)\n  end\n  local function get_pairs(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n      for j = 1, #nums2 do\n        table.insert(result, {nums1[i], nums2[j]})\n      end\n    end\n    return result\n  end\n  local pairs = get_pairs(nums1, nums2)\n  pairs = merge_sort(pairs)\n  local result = {}\n  for i = 1, k do\n    table.insert(result, pairs[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0eaaex8u.lua:27: stack overflow\nstack traceback:\n\t/tmp/tmp0eaaex8u.lua:27: in upvalue 'merge_sort'\n\t/tmp/tmp0eaaex8u.lua:28: in upvalue 'merge_sort'\n\t/tmp/tmp0eaaex8u.lua:28: in upvalue 'merge_sort'\n\t/tmp/tmp0eaaex8u.lua:28: in upvalue 'merge_sort'\n\t/tmp/tmp0eaaex8u.lua:28: in upvalue 'merge_sort'\n\t/tmp/tmp0eaaex8u.lua:28: in upvalue 'merge_sort'\n\t/tmp/tmp0eaaex8u.lua:28: in upvalue 'merge_sort'\n\t/tmp/tmp0eaaex8u.lua:28: in upvalue 'merge_sort'\n\t/tmp/tmp0eaaex8u.lua:28: in upvalue 'merge_sort'\n\t...\t(skipping 333293 levels)\n\t/tmp/tmp0eaaex8u.lua:42: in local 'candidate'\n\t/tmp/tmp0eaaex8u.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.200 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\n    local pairs = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(pairs, {nums1[i], nums2[j]})\n        end\n    end\n    table.sort(pairs, compare)\n    local result = {}\n    for i = 1, k do\n        table.insert(result, pairs[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hlc82zo.lua:25: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp2hlc82zo.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local pairs = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(pairs, {nums1[i], nums2[j]})\n        end\n    end\n    table.sort(pairs, function(a, b) return a[1] + a[2] < b[1] + b[2] end)\n    local result = {}\n    for i = 1, k do\n        table.insert(result, pairs[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukk20fou.lua:22: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpukk20fou.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    if i <= #nums1 and j <= #nums2 then\n      heap[#heap + 1] = {nums1[i] + nums2[j], i, j}\n    end\n  end\n  local function pop()\n    local min = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1][1] < heap[j][1] then\n        j = j + 1\n      end\n      if heap[j][1] < heap[i][1] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return min\n  end\n  local function heapify()\n    for i = #heap, 1, -1 do\n      local j = i\n      while j * 2 <= #heap do\n        local k = j * 2\n        if k + 1 <= #heap and heap[k + 1][1] < heap[k][1] then\n          k = k + 1\n        end\n        if heap[k][1] < heap[j][1] then\n          heap[j], heap[k] = heap[k], heap[j]\n          j = k\n        else\n          break\n        end\n      end\n    end\n  end\n  for i = 1, #nums1 do\n    push(i, 1)\n  end\n  heapify()\n  local result = {}\n  for i = 1, k do\n    local pair = pop()\n    if not pair then\n      break\n    end\n    result[#result + 1] = {nums1[pair[2]], nums2[pair[3]]}\n    push(pair[2], pair[3] + 1)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgr3kchml.lua:64: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}}\nstack traceback:\n\t/tmp/tmpgr3kchml.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\n    local function heapify(arr, i, n)\n        local l = 2 * i\n        local r = 2 * i + 1\n        local largest = i\n        if l <= n and compare(arr[l], arr[largest]) then\n            largest = l\n        end\n        if r <= n and compare(arr[r], arr[largest]) then\n            largest = r\n        end\n        if largest ~= i then\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, largest, n)\n        end\n    end\n    local function build_heap(arr)\n        for i = math.floor(#arr / 2), 1, -1 do\n            heapify(arr, i, #arr)\n        end\n    end\n    local function heap_sort(arr)\n        build_heap(arr)\n        for i = #arr, 2, -1 do\n            arr[1], arr[i] = arr[i], arr[1]\n            heapify(arr, 1, i - 1)\n        end\n    end\n    local function heap_insert(arr, val)\n        arr[#arr + 1] = val\n        local i = #arr\n        while i > 1 and compare(arr[i], arr[math.floor(i / 2)]) do\n            arr[i], arr[math.floor(i / 2)] = arr[math.floor(i / 2)], arr[i]\n            i = math.floor(i / 2)\n        end\n    end\n    local function heap_pop(arr)\n        local val = arr[1]\n        arr[1] = arr[#arr]\n        arr[#arr] = nil\n        heapify(arr, 1, #arr)\n        return val\n    end\n    local function heap_top(arr)\n        return arr[1]\n    end\n    local function heap_empty(arr)\n        return #arr == 0\n    end\n    local function heap_size(arr)\n        return #arr\n    end\n    local function\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8l9wer19.lua:58: '(' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_push(heap, val)\n    table.insert(heap, val)\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[i][1] + heap[i][2] >= heap[parent][1] + heap[parent][2] then\n        break\n      end\n      heap[i], heap[parent] = heap[parent], heap[i]\n      i = parent\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap)\n    local i = 1\n    while i * 2 <= #heap do\n      local child = i * 2\n      if child + 1 <= #heap and heap[child + 1][1] + heap[child + 1][2] < heap[child][1] + heap[child][2] then\n        child = child + 1\n      end\n      if heap[i][1] + heap[i][2] <= heap[child][1] + heap[child][2] then\n        break\n      end\n      heap[i], heap[child] = heap[child], heap[i]\n      i = child\n    end\n    return ret\n  end\n  local heap = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      if #heap < k then\n        heap_push(heap, {nums1[i], nums2[j]})\n      elseif nums1[i] + nums2[j] < heap[1][1] + heap[1][2] then\n        heap_pop(heap)\n        heap_push(heap, {nums1[i], nums2[j]})\n      else\n        break\n      end\n    end\n  end\n  local ret = {}\n  for i = 1, #heap do\n    table.insert(ret, heap[i])\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0vk_eoo.lua:58: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpe0vk_eoo.lua:58: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    if #heap < k then\n      heap[#heap + 1] = {i, j, sum}\n      local i = #heap\n      while i > 1 and heap[i][3] < heap[i // 2][3] do\n        heap[i], heap[i // 2] = heap[i // 2], heap[i]\n        i = i // 2\n      end\n    elseif sum < heap[1][3] then\n      heap[1] = {i, j, sum}\n      local i = 1\n      while i * 2 <= #heap do\n        local j = i * 2\n        if j + 1 <= #heap and heap[j + 1][3] < heap[j][3] then\n          j = j + 1\n        end\n        if heap[i][3] <= heap[j][3] then\n          break\n        end\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      end\n    end\n  end\n  for i = 1, #nums1 do\n    push(i, 1)\n  end\n  local result = {}\n  while #heap > 0 do\n    local i, j, sum = table.unpack(table.remove(heap, 1))\n    result[#result + 1] = {nums1[i], nums1[j]}\n    if j + 1 <= #nums2 then\n      push(i, j + 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprswl55i5.lua:46: expected: {{1, 2}, {1, 4}}\nactual: {{1, 1}, {3, 1}, {1, 3}, {3, 3}, {1, 7}, {3, 7}}\nstack traceback:\n\t/tmp/tmprswl55i5.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwd_paqts.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function heap_pop(heap)\n        local last = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local l = i * 2\n            local r = i * 2 + 1\n            if r <= #heap then\n                if heap[l][1] < heap[r][1] then\n                    if heap[i][1] > heap[l][1] then\n                        heap[i], heap[l] = heap[l], heap[i]\n                        i = l\n                    else\n                        break\n                    end\n                else\n                    if heap[i][1] > heap[r][1] then\n                        heap[i], heap[r] = heap[r], heap[i]\n                        i = r\n                    else\n                        break\n                    end\n                end\n            else\n                if heap[i][1] > heap[l][1] then\n                    heap[i], heap[l] = heap[l], heap[i]\n                    i = l\n                else\n                    break\n                end\n            end\n        end\n        return last\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvhlza8of.lua:46: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwd_paqts.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    if #heap < k then\n      table.insert(heap, {i, j, sum})\n      local i = #heap\n      while i > 1 do\n        local p = math.floor(i / 2)\n        if heap[p][3] > heap[i][3] then\n          heap[p], heap[i] = heap[i], heap[p]\n          i = p\n        else\n          break\n        end\n      end\n    elseif sum < heap[1][3] then\n      heap[1] = {i, j, sum}\n      local i = 1\n      while i * 2 <= #heap do\n        local l = i * 2\n        local r = i * 2 + 1\n        if r <= #heap and heap[r][3] < heap[l][3] then\n          l = r\n        end\n        if heap[i][3] > heap[l][3] then\n          heap[i], heap[l] = heap[l], heap[i]\n          i = l\n        else\n          break\n        end\n      end\n    end\n  end\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      push(i, j)\n    end\n  end\n  local res = {}\n  for i = 1, #heap do\n    res[i] = {nums1[heap[i][1]], nums2[heap[i][2]]}\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphplcrdg3.lua:53: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmphplcrdg3.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local res = {}\n  local len1 = #nums1\n  local len2 = #nums2\n  if len1 == 0 or len2 == 0 then return res end\n  local heap = {}\n  local function push(x, y, val)\n    table.insert(heap, {x, y, val})\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j][3] > heap[i][3] then\n        heap[j], heap[i] = heap[i], heap[j]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap)\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1][3] < heap[j][3] then\n        j = j + 1\n      end\n      if heap[i][3] > heap[j][3] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return ret\n  end\n  push(1, 1, nums1[1] + nums2[1])\n  while #res < k and #heap > 0 do\n    local x, y, val = unpack(pop())\n    table.insert(res, {nums1[x], nums2[y]})\n    if x < len1 and y < len2 then\n      push(x, y + 1, nums1[x] + nums2[y + 1])\n    end\n    if x < len1 and y == 1 then\n      push(x + 1, y, nums1[x + 1] + nums2[y])\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph4yme_wj.lua:42: attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmph4yme_wj.lua:42: in local 'candidate'\n\t/tmp/tmph4yme_wj.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function merge(nums1, nums2)\n    local i, j, m, n = 1, 1, #nums1, #nums2\n    local res = {}\n    while i <= m and j <= n do\n      if nums1[i] < nums2[j] then\n        res[#res+1] = nums1[i]\n        i = i + 1\n      else\n        res[#res+1] = nums2[j]\n        j = j + 1\n      end\n    end\n    while i <= m do\n      res[#res+1] = nums1[i]\n      i = i + 1\n    end\n    while j <= n do\n      res[#res+1] = nums2[j]\n      j = j + 1\n    end\n    return res\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpfuy5wtt1.lua:34: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local res = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(res, {nums1[i], nums2[j]})\n        end\n    end\n    table.sort(res, function(a, b) return a[1] + a[2] < b[1] + b[2] end)\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgunytky9.lua:16: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}, {7, 4}, {7, 6}}\nstack traceback:\n\t/tmp/tmpgunytky9.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent][1] + heap[parent][2] > heap[i][1] + heap[i][2] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpo1pjbxts.lua:25: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] < b[1] or (a[1] == b[1] and a[2] < b[2])\n  end\n  local function push(heap, nums1, nums2, i, j)\n    if i <= #nums1 and j <= #nums2 then\n      table.insert(heap, {nums1[i] + nums2[j], {nums1[i], nums2[j]}})\n    end\n  end\n  local heap = {}\n  for i = 1, #nums1 do\n    push(heap, nums1, nums2, i, 1)\n  end\n  table.sort(heap, compare)\n  local result = {}\n  while k > 0 and #heap > 0 do\n    local pair = table.remove(heap, 1)\n    table.insert(result, pair[2])\n    push(heap, nums1, nums2, pair[2][1], pair[2][2] + 1)\n    table.sort(heap, compare)\n    k = k - 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9101dpb_.lua:30: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}}\nstack traceback:\n\t/tmp/tmp9101dpb_.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local pairs = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(pairs, {nums1[i], nums2[j]})\n        end\n    end\n    table.sort(pairs, function(a, b) return a[1] + a[2] < b[1] + b[2] end)\n    local res = {}\n    for i = 1, k do\n        table.insert(res, pairs[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6yf7tsas.lua:22: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp6yf7tsas.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwd_paqts.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    if i <= #nums1 and j <= #nums2 then\n      heap[#heap + 1] = {nums1[i] + nums2[j], i, j}\n    end\n  end\n  push(1, 1)\n  table.sort(heap, function(a, b) return a[1] < b[1] end)\n  local result = {}\n  while k > 0 and #heap > 0 do\n    local pair = table.remove(heap, 1)\n    result[#result + 1] = {nums1[pair[2]], nums2[pair[3]]}\n    push(pair[2], pair[3] + 1)\n    push(pair[2] + 1, pair[3])\n    k = k - 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwom3zel.lua:27: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 4}, {7, 2}}\nstack traceback:\n\t/tmp/tmptwom3zel.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n\tlocal res = {}\n\tlocal len1 = #nums1\n\tlocal len2 = #nums2\n\tif len1 == 0 or len2 == 0 then\n\t\treturn res\n\tend\n\tlocal heap = {}\n\tlocal function push(x, y, val)\n\t\tlocal p = #heap + 1\n\t\theap[p] = {x, y, val}\n\t\twhile p > 1 do\n\t\t\tlocal q = math.floor(p / 2)\n\t\t\tif heap[q][3] > val then\n\t\t\t\theap[p], heap[q] = heap[q], heap[p]\n\t\t\t\tp = q\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tlocal function pop()\n\t\tlocal p = 1\n\t\tlocal ret = heap[p]\n\t\theap[p] = heap[#heap]\n\t\theap[#heap] = nil\n\t\twhile 2 * p <= #heap do\n\t\t\tlocal q = 2 * p\n\t\t\tif q + 1 <= #heap and heap[q + 1][3] < heap[q][3] then\n\t\t\t\tq = q + 1\n\t\t\tend\n\t\t\tif heap[p][3] > heap[q][3] then\n\t\t\t\theap[p], heap[q] = heap[q], heap[p]\n\t\t\t\tp = q\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\treturn ret\n\tend\n\tpush(1, 1, nums1[1] + nums2[1])\n\twhile #res < k and #heap > 0 do\n\t\tlocal x, y, val = table.unpack(pop())\n\t\tres[#res + 1] = {nums1[x], nums2[y]}\n\t\tif y + 1 <= len2 then\n\t\t\tpush(x, y + 1, nums1[x] + nums2[y + 1])\n\t\tend\n\t\tif y == 1 and x + 1 <= len1 then\n\t\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpm39xq0f1.lua:60: 'end' expected (to close 'if' at line 49) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function merge(nums1, nums2)\n    local i, j, m, n = 1, 1, #nums1, #nums2\n    local res = {}\n    while i <= m and j <= n do\n      if nums1[i] < nums2[j] then\n        table.insert(res, {nums1[i], nums2[j]})\n        i = i + 1\n      else\n        table.insert(res, {nums1[i], nums2[j]})\n        j = j + 1\n      end\n    end\n    while i <= m do\n      table.insert(res, {nums1[i], nums2[j]})\n      i = i + 1\n    end\n    while j <= n do\n      table.insert(res, {nums1[i], nums2[j]})\n      j = j + 1\n    end\n    return res\n  end\n  local res = merge(nums1, nums2)\n  local function partition(res, l, r)\n    local pivot = res[l][1] + res[l][2]\n    local i = l + 1\n    for j = l + 1, r do\n      if res[j][1] + res[j][2] < pivot then\n        res[i], res[j] = res[j], res[i]\n        i = i + 1\n      end\n    end\n    res[l], res[i - 1] = res[i - 1], res[l]\n    return i - 1\n  end\n  local function quick_select(res, l, r, k)\n    if l == r then return end\n    local p = partition(res, l, r)\n    if p == k then return end\n    if p > k then\n      quick_select(res, l, p - 1, k)\n    else\n      quick_select(res, p + 1, r, k)\n    end\n  end\n  quick_select(res, 1, #res, k)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpujnbug1u.lua:30: attempt to perform arithmetic on a nil value (field 'integer index')\nstack traceback:\n\t/tmp/tmpujnbug1u.lua:30: in upvalue 'partition'\n\t/tmp/tmpujnbug1u.lua:40: in local 'quick_select'\n\t/tmp/tmpujnbug1u.lua:48: in local 'candidate'\n\t/tmp/tmpujnbug1u.lua:55: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_push(heap, val)\n    local i = #heap + 1\n    heap[i] = val\n    while i > 1 do\n      local p = math.floor(i / 2)\n      if heap[p][1] + heap[p][2] <= heap[i][1] + heap[i][2] then\n        break\n      end\n      heap[i], heap[p] = heap[p], heap[i]\n      i = p\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1][1] + heap[j + 1][2] < heap[j][1] + heap[j][2] then\n        j = j + 1\n      end\n      if heap[i][1] + heap[i][2] <= heap[j][1] + heap[j][2] then\n        break\n      end\n      heap[i], heap[j] = heap[j], heap[i]\n      i = j\n    end\n    return ret\n  end\n  local heap = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      heap_push(heap, {nums1[i], nums2[j]})\n      if #heap > k then\n        heap_pop(heap)\n      end\n    end\n  end\n  local ret = {}\n  for i = 1, #heap do\n    ret[i] = heap[i]\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2a13r5l.lua:52: expected: {{1, 2}, {1, 4}}\nactual: {{7, 4}, {7, 6}}\nstack traceback:\n\t/tmp/tmpc2a13r5l.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_pop(heap)\n    local result = heap[1]\n    local last = table.remove(heap)\n    if #heap > 0 then\n      heap[1] = last\n      local i = 1\n      while true do\n        local left = i * 2\n        local right = left + 1\n        local smallest = i\n        if left <= #heap and heap[left][1] < heap[smallest][1] then\n          smallest = left\n        end\n        if right <= #heap and heap[right][1] < heap[smallest][1] then\n          smallest = right\n        end\n        if smallest == i then\n          break\n        end\n        heap[i], heap[smallest] = heap[smallest], heap[i]\n        i = smallest\n      end\n    end\n    return result\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmptdrshmjs.lua:37: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local len1, len2 = #nums1, #nums2\n    if len1 == 0 or len2 == 0 then return {} end\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            heap_push(heap, {sum, i, j})\n        else\n            if sum < heap[1][1] then\n                heap_pop(heap)\n                heap_push(heap, {sum, i, j})\n            end\n        end\n    end\n    push(1, 1)\n    local res = {}\n    while #heap > 0 do\n        local _, i, j = unpack(heap_pop(heap))\n        res[#res + 1] = {nums1[i], nums2[j]}\n        if j < len2 then\n            push(i, j + 1)\n        end\n        if j == 1 and i < len1 then\n            push(i + 1, 1)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7l5m1__d.lua:9: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp7l5m1__d.lua:9: in local 'push'\n\t/tmp/tmp7l5m1__d.lua:17: in local 'candidate'\n\t/tmp/tmp7l5m1__d.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            table.insert(heap, {i, j, sum})\n            table.sort(heap, function(a, b) return a[3] < b[3] end)\n        elseif sum < heap[1][3] then\n            heap[1] = {i, j, sum}\n            table.sort(heap, function(a, b) return a[3] < b[3] end)\n        end\n    end\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            push(i, j)\n        end\n    end\n    local res = {}\n    for i = 1, #heap do\n        table.insert(res, {nums1[heap[i][1]], nums2[heap[i][2]]})\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3b85awag.lua:31: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {3, 2}, {1, 4}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp3b85awag.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\n    local heap = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(heap, {nums1[i], nums2[j]})\n        end\n    end\n    table.sort(heap, compare)\n    local res = {}\n    for i = 1, k do\n        table.insert(res, heap[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hti7jbs.lua:25: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp9hti7jbs.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local res = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(res, {nums1[i], nums2[j]})\n    end\n  end\n  table.sort(res, function(a, b) return a[1] + a[2] < b[1] + b[2] end)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppx5hmxha.lua:16: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}, {7, 4}, {7, 6}}\nstack traceback:\n\t/tmp/tmppx5hmxha.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_push(heap, val)\n    heap[#heap + 1] = val\n    local i = #heap\n    while i > 1 do\n      local p = math.floor(i / 2)\n      if heap[p][1] > heap[i][1] then\n        heap[p], heap[i] = heap[i], heap[p]\n        i = p\n      else\n        break\n      end\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqylqaomj.lua:25: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    if #heap < k then\n      table.insert(heap, {i, j, sum})\n      local i = #heap\n      while i > 1 do\n        local p = math.floor(i / 2)\n        if heap[p][3] > sum then\n          heap[i], heap[p] = heap[p], heap[i]\n          i = p\n        else\n          break\n        end\n      end\n    elseif sum < heap[1][3] then\n      heap[1] = {i, j, sum}\n      local i = 1\n      while i * 2 <= #heap do\n        local l = i * 2\n        local r = i * 2 + 1\n        local j = l\n        if r <= #heap and heap[r][3] < heap[l][3] then\n          j = r\n        end\n        if heap[i][3] > heap[j][3] then\n          heap[i], heap[j] = heap[j], heap[i]\n          i = j\n        else\n          break\n        end\n      end\n    end\n  end\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      push(i, j)\n    end\n  end\n  local res = {}\n  for i = 1, #heap do\n    table.insert(res, {nums1[heap[i][1]], nums2[heap[i][2]]})\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7cz7svuo.lua:54: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp7cz7svuo.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    if not nums1 or not nums2 or #nums1 == 0 or #nums2 == 0 then\n        return {}\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxx22iunn.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function heap_push(heap, val)\n        heap[#heap + 1] = val\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[j][1] + heap[j][2] > heap[i][1] + heap[i][2] then\n                heap[j], heap[i] = heap[i], heap[j]\n                i = j\n            else\n                break\n            end\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpef5xhm8n.lua:25: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_pop(heap)\n    local last = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j < #heap and heap[j + 1][1] < heap[j][1] then\n        j = j + 1\n      end\n      if last[1] <= heap[j][1] then\n        break\n      end\n      heap[i] = heap[j]\n      i = j\n    end\n    heap[i] = last\n    return heap\n  end\n  local function heap_push(heap, val)\n    heap[#heap + 1] = val\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j][1] <= heap[i][1] then\n        break\n      end\n      heap[i], heap[j] = heap[j], heap[i]\n      i = j\n    end\n    return heap\n  end\n  local function heap_top(heap)\n    return heap[1]\n  end\n  local function heap_size(heap)\n    return #heap\n  end\n  local function heap_empty(heap)\n    return #heap == 0\n  end\n  local function heap_clear(heap)\n    heap = {}\n    return heap\n  end\n  local function heap_new()\n    return {}\n  end\n  local heap = heap_new()\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      if heap_size(heap) < k then\n        heap_push(heap, {nums1[i] + nums2[j], {nums1[i], nums2[j]}})\n      else\n        if nums1[i] + nums2[j] < heap_top(heap)[1] then\n          heap_pop(heap)\n          heap_push(heap, {nums1[i] + nums2[j], {nums1[i], num\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpb6pz6qkr.lua:59: '}' expected (to close '{' at line 58) near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    if i <= #nums1 and j <= #nums2 then\n      heap[#heap + 1] = {i, j, nums1[i] + nums2[j]}\n    end\n  end\n  push(1, 1)\n  table.sort(heap, function(a, b) return a[3] < b[3] end)\n  local result = {}\n  for i = 1, k do\n    if #heap == 0 then break end\n    local pair = table.remove(heap, 1)\n    result[#result + 1] = {nums1[pair[1]], nums2[pair[2]]}\n    push(pair[1], pair[2] + 1)\n    if pair[2] == 1 then\n      push(pair[1] + 1, 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rkgyjgs.lua:29: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {7, 2}, {3, 6}}\nstack traceback:\n\t/tmp/tmp7rkgyjgs.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\n    local pairs = {}\n    for i, v1 in ipairs(nums1) do\n        for j, v2 in ipairs(nums2) do\n            table.insert(pairs, {v1, v2})\n        end\n    end\n    table.sort(pairs, compare)\n    local result = {}\n    for i = 1, k do\n        table.insert(result, pairs[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3skjzzx4.lua:25: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp3skjzzx4.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[j][1] + heap[j][2] <= heap[i][1] + heap[i][2] then\n                break\n            end\n            heap[i], heap[j] = heap[j], heap[i]\n            i = j\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmp195rywbg.lua:24: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] < b[1] or (a[1] == b[1] and a[2] < b[2])\n  end\n  local function push(heap, nums1, nums2, i, j)\n    if i <= #nums1 and j <= #nums2 then\n      table.insert(heap, {nums1[i] + nums2[j], {nums1[i], nums2[j]}})\n    end\n  end\n  local heap = {}\n  for i = 1, #nums1 do\n    push(heap, nums1, nums2, i, 1)\n  end\n  table.sort(heap, compare)\n  local result = {}\n  for i = 1, k do\n    if #heap == 0 then\n      break\n    end\n    local pair = table.remove(heap, 1)\n    table.insert(result, pair[2])\n    push(heap, nums1, nums2, pair[2][1], pair[2][2] + 1)\n    table.sort(heap, compare)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0ehfjey.lua:32: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}}\nstack traceback:\n\t/tmp/tmpk0ehfjey.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_pop(heap)\n    local ret = heap[1]\n    local last = table.remove(heap)\n    if #heap > 0 then\n      heap[1] = last\n      local i = 1\n      while i * 2 <= #heap do\n        local j = i * 2\n        if j + 1 <= #heap and heap[j + 1][1] < heap[j][1] then\n          j = j + 1\n        end\n        if heap[j][1] < last[1] then\n          heap[i] = heap[j]\n          i = j\n        else\n          break\n        end\n      end\n      heap[i] = last\n    end\n    return ret\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0egph__r.lua:34: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function push(i, j)\n        if i <= #nums1 and j <= #nums2 then\n            heap[#heap + 1] = {nums1[i] + nums2[j], i, j}\n        end\n    end\n    for i = 1, #nums1 do\n        push(i, 1)\n    end\n    table.sort(heap, function(a, b) return a[1] < b[1] end)\n    local res = {}\n    for i = 1, k do\n        if #heap == 0 then\n            break\n        end\n        local pair = table.remove(heap, 1)\n        res[#res + 1] = {nums1[pair[2]], nums2[pair[3]]}\n        push(pair[2], pair[3] + 1)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgttppce5.lua:28: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}}\nstack traceback:\n\t/tmp/tmpgttppce5.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent][1] + heap[parent][2] > heap[i][1] + heap[i][2] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i < #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            if left > #heap then\n                break\n            elseif right > #heap then\n                if heap[i][1] + heap[i][2] > heap[left][1] + heap[left][2] then\n                    heap[i], heap[left] = heap[left], heap[i]\n                end\n                break\n            else\n                local min_idx = i\n                if heap[left][1] + heap[left][2] < heap[min_idx][1] + heap[min_idx][2] then\n                    min_idx = left\n                end\n                if heap[right][1] + heap[right][2] < heap[min_idx][1] + heap[min_idx][2] then\n                    min_idx = right\n                end\n                if min_idx == i then\n                    break\n                else\n                    heap[i], heap[min_idx] = heap[min_idx], heap[i]\n                    i = min_idx\n                end\n            end\n        end\n        return ret\n    end\n    local heap = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            if #heap < k then\n                heap_push(heap, {nums1[i], nums2[j]})\n           \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpco001nw1.lua:64: 'end' expected (to close 'if' at line 52) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local len1, len2 = #nums1, #nums2\n  if len1 == 0 or len2 == 0 then return {} end\n  local heap = {}\n  local function push(i, j)\n    local val = nums1[i] + nums2[j]\n    if #heap < k then\n      heap_push(heap, val, {i, j})\n    elseif val < heap[1][1] then\n      heap_pop(heap)\n      heap_push(heap, val, {i, j})\n    end\n  end\n  push(1, 1)\n  local res = {}\n  while #heap > 0 do\n    local _, {i, j} = heap_pop(heap)\n    table.insert(res, {nums1[i], nums2[j]})\n    if j < len2 then\n      push(i, j + 1)\n    elseif i < len1 then\n      push(i + 1, 1)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5jaw7d9a.lua:18: <name> expected near '{'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] < b[1] or (a[1] == b[1] and a[2] < b[2])\n    end\n    local function push(heap, elem)\n        table.insert(heap, elem)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if compare(heap[i], heap[j]) then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function pop(heap)\n        local res = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and compare(heap[j + 1], heap[j]) then\n                j = j + 1\n            end\n            if compare(heap[j], heap[i]) then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return res\n    end\n    local heap = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            push(heap, {nums1[i] + nums2[j], nums1[i], nums2[j]})\n            if #heap > k then\n                pop(heap)\n            end\n        end\n    end\n    local res = {}\n    while #heap > 0 do\n        local elem = pop(heap)\n        table.insert(res, {elem[2], elem[3]})\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpmff6e9.lua:58: expected: {{1, 2}, {1, 4}}\nactual: {{7, 4}, {7, 6}}\nstack traceback:\n\t/tmp/tmpwpmff6e9.lua:58: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\n    local pairs = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(pairs, {nums1[i], nums2[j]})\n        end\n    end\n    table.sort(pairs, compare)\n    local result = {}\n    for i = 1, k do\n        table.insert(result, pairs[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hlc82zo.lua:25: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp2hlc82zo.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] < b[1] or (a[1] == b[1] and a[2] < b[2])\n  end\n  local pairs = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(pairs, {nums1[i] + nums2[j], i, j})\n    end\n  end\n  table.sort(pairs, compare)\n  local result = {}\n  for i = 1, k do\n    table.insert(result, {nums1[pairs[i][2]], nums2[pairs[i][3]]})\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            heap[#heap + 1] = {i, j, sum}\n            local i = #heap\n            while i > 1 do\n                local p = math.floor(i / 2)\n                if heap[p][3] > heap[i][3] then\n                    heap[p], heap[i] = heap[i], heap[p]\n                    i = p\n                else\n                    break\n                end\n            end\n        elseif sum < heap[1][3] then\n            heap[1] = {i, j, sum}\n            local i = 1\n            while i * 2 <= #heap do\n                local l = i * 2\n                local r = i * 2 + 1\n                if r <= #heap and heap[l][3] > heap[r][3] then\n                    l = r\n                end\n                if heap[i][3] > heap[l][3] then\n                    heap[i], heap[l] = heap[l], heap[i]\n                    i = l\n                else\n                    break\n                end\n            end\n        end\n    end\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            push(i, j)\n        end\n    end\n    local result = {}\n    for i = 1, #heap do\n        result[i] = {nums1[heap[i][1]], nums2[heap[i][2]]}\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0xba8t1j.lua:53: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp0xba8t1j.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local len1, len2 = #nums1, #nums2\n    if len1 == 0 or len2 == 0 or k == 0 then\n        return {}\n    end\n    local heap = {}\n    local function push(x, y)\n        local sum = nums1[x] + nums2[y]\n        if #heap < k then\n            table.insert(heap, {x, y, sum})\n        elseif sum < heap[1][3] then\n            heap[1] = {x, y, sum}\n        end\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[j][3] > heap[i][3] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function pop()\n        local ret = heap[1]\n        local x, y = ret[1], ret[2]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1][3] < heap[j][3] then\n                j = j + 1\n            end\n            if heap[i][3] > heap[j][3] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for i = 1, math.min(len1, k) do\n        push(i, 1)\n    end\n    local ret = {}\n    while #ret < k and #heap > 0 do\n        local x, y, sum = pop()\n        table.insert(ret, {nums1[x], nums2[y]})\n        if y + 1 <= len2 then\n            push(x, y + 1)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj10noy6h.lua:53: attempt to perform arithmetic on a nil value (local 'y')\nstack traceback:\n\t/tmp/tmpj10noy6h.lua:53: in local 'candidate'\n\t/tmp/tmpj10noy6h.lua:63: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function merge(nums1, nums2)\n        local result = {}\n        local i, j = 1, 1\n        while i <= #nums1 and j <= #nums2 do\n            if nums1[i] < nums2[j] then\n                table.insert(result, nums1[i])\n                i = i + 1\n            else\n                table.insert(result, nums2[j])\n                j = j + 1\n            end\n        end\n        while i <= #nums1 do\n            table.insert(result, nums1[i])\n            i = i + 1\n        end\n        while j <= #nums2 do\n            table.insert(result, nums2[j])\n            j = j + 1\n        end\n        return result\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpys6o1gp7.lua:34: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe9dli__4.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_push(heap, val)\n    table.insert(heap, val)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j][1] + heap[j][2] <= heap[i][1] + heap[i][2] then\n        break\n      end\n      heap[i], heap[j] = heap[j], heap[i]\n      i = j\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe_nl8v27.lua:24: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\n    local pairs = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(pairs, {nums1[i], nums2[j]})\n        end\n    end\n    table.sort(pairs, compare)\n    local res = {}\n    for i = 1, k do\n        table.insert(res, pairs[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxiuv1bh.lua:25: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmprxiuv1bh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function merge(nums1, nums2)\n    local i, j, m, n = 1, 1, #nums1, #nums2\n    local res = {}\n    while i <= m and j <= n do\n      if nums1[i] < nums2[j] then\n        res[#res + 1] = {nums1[i], nums2[j]}\n        i = i + 1\n      else\n        res[#res + 1] = {nums1[i], nums2[j]}\n        j = j + 1\n      end\n    end\n    while i <= m do\n      res[#res + 1] = {nums1[i], nums2[j]}\n      i = i + 1\n    end\n    while j <= n do\n      res[#res + 1] = {nums1[i], nums2[j]}\n      j = j + 1\n    end\n    return res\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyklhk1kz.lua:34: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function merge(nums1, nums2)\n        local i, j = 1, 1\n        local res = {}\n        while i <= #nums1 and j <= #nums2 do\n            if nums1[i] < nums2[j] then\n                table.insert(res, nums1[i])\n                i = i + 1\n            else\n                table.insert(res, nums2[j])\n                j = j + 1\n            end\n        end\n        while i <= #nums1 do\n            table.insert(res, nums1[i])\n            i = i + 1\n        end\n        while j <= #nums2 do\n            table.insert(res, nums2[j])\n            j = j + 1\n        end\n        return res\n    end\n    local function merge_sort(nums)\n        if #nums <= 1 then return nums end\n        local mid = math.floor(#nums / 2)\n        local left = merge_sort(nums, 1, mid)\n        local right = merge_sort(nums, mid + 1, #nums)\n        return merge(left, right)\n    end\n    local function find_k_smallest_pairs(nums1, nums2, k)\n        local res = {}\n        for i = 1, #nums1 do\n            for j = 1, #nums2 do\n                table.insert(res, {nums1[i], nums2[j]})\n            end\n        end\n        local function cmp(a, b)\n            return a[1] + a[2] < b[1] + b[2]\n        end\n        table.sort(res, cmp)\n        local k_res = {}\n        for i = 1, k do\n            table.insert(k_res, res[i])\n        end\n        return k_res\n    end\n    nums1 = merge_sort(nums1)\n    nums2 = merge_sort(nums2)\n    return find_k_smallest_pairs(nums1, nums2, k)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpllnsdw7u.lua:27: stack overflow\nstack traceback:\n\t/tmp/tmpllnsdw7u.lua:27: in upvalue 'merge_sort'\n\t/tmp/tmpllnsdw7u.lua:28: in upvalue 'merge_sort'\n\t/tmp/tmpllnsdw7u.lua:28: in upvalue 'merge_sort'\n\t/tmp/tmpllnsdw7u.lua:28: in upvalue 'merge_sort'\n\t/tmp/tmpllnsdw7u.lua:28: in upvalue 'merge_sort'\n\t/tmp/tmpllnsdw7u.lua:28: in upvalue 'merge_sort'\n\t/tmp/tmpllnsdw7u.lua:28: in upvalue 'merge_sort'\n\t/tmp/tmpllnsdw7u.lua:28: in upvalue 'merge_sort'\n\t/tmp/tmpllnsdw7u.lua:28: in upvalue 'merge_sort'\n\t...\t(skipping 333294 levels)\n\t/tmp/tmpllnsdw7u.lua:49: in local 'candidate'\n\t/tmp/tmpllnsdw7u.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.160 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\n    local function add_pair(a, b)\n        local pairs = {}\n        for i = 1, #a do\n            for j = 1, #b do\n                table.insert(pairs, {a[i], b[j]})\n            end\n        end\n        table.sort(pairs, compare)\n        return pairs\n    end\n    local pairs = add_pair(nums1, nums2)\n    local result = {}\n    for i = 1, k do\n        table.insert(result, pairs[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxu4uu2cs.lua:29: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpxu4uu2cs.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    if #heap < k or sum < heap[1][1] then\n      heapq.heappush(heap, {sum, i, j})\n      if #heap > k then\n        heapq.heappop(heap)\n      end\n    end\n  end\n  for i = 1, #nums1 do\n    push(i, 1)\n  end\n  local result = {}\n  while #heap > 0 do\n    local _, i, j = table.unpack(heapq.heappop(heap))\n    table.insert(result, {nums1[i], nums2[j]})\n    if j < #nums2 then\n      push(i, j + 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4c86u0li.lua:7: attempt to index a nil value (global 'heapq')\nstack traceback:\n\t/tmp/tmp4c86u0li.lua:7: in local 'push'\n\t/tmp/tmp4c86u0li.lua:14: in local 'candidate'\n\t/tmp/tmp4c86u0li.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function _k_smallest_pairs(nums1, nums2, k, i, j, pairs)\n    if k == 0 then return pairs end\n    if i == #nums1 or j == #nums2 then return pairs end\n    local pair = {nums1[i], nums2[j]}\n    table.insert(pairs, pair)\n    local next_i, next_j = i, j\n    if j == #nums2 then\n      next_i = i + 1\n      next_j = 1\n    else\n      next_j = j + 1\n    end\n    return _k_smallest_pairs(nums1, nums2, k - 1, next_i, next_j, pairs)\n  end\n  return _k_smallest_pairs(nums1, nums2, k, 1, 1, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_hi0745.lua:25: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}}\nstack traceback:\n\t/tmp/tmpc_hi0745.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local len1 = #nums1\n  local len2 = #nums2\n  if len1 == 0 or len2 == 0 then\n    return {}\n  end\n  local heap = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    if #heap < k then\n      table.insert(heap, {i, j, sum})\n      local index = #heap\n      while index > 1 do\n        local parent = math.floor(index / 2)\n        if heap[parent][3] > sum then\n          heap[index], heap[parent] = heap[parent], heap[index]\n          index = parent\n        else\n          break\n        end\n      end\n    elseif sum < heap[1][3] then\n      heap[1] = {i, j, sum}\n      local index = 1\n      while index * 2 <= #heap do\n        local left = index * 2\n        local right = left + 1\n        local child = left\n        if right <= #heap and heap[right][3] < heap[left][3] then\n          child = right\n        end\n        if heap[child][3] < sum then\n          heap[index], heap[child] = heap[child], heap[index]\n          index = child\n        else\n          break\n        end\n      end\n    end\n  end\n  for i = 1, math.min(len1, k) do\n    push(i, 1)\n  end\n  local result = {}\n  while #heap > 0 do\n    local pair = table.remove(heap, 1)\n    table.insert(result, {nums1[pair[1]], nums2[pair[2]]})\n    if pair[2] < len2 then\n      push(pair[1], pair[2] + 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5ksplvx.lua:59: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}, {1, 4}, {3, 4}, {1, 6}, {3, 6}}\nstack traceback:\n\t/tmp/tmpa5ksplvx.lua:59: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe9dli__4.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function merge(a, b)\n    local i, j, m, n = 1, 1, #a, #b\n    local c = {}\n    while i <= m and j <= n do\n      if a[i] < b[j] then\n        c[#c + 1] = a[i]\n        i = i + 1\n      else\n        c[#c + 1] = b[j]\n        j = j + 1\n      end\n    end\n    while i <= m do\n      c[#c + 1] = a[i]\n      i = i + 1\n    end\n    while j <= n do\n      c[#c + 1] = b[j]\n      j = j + 1\n    end\n    return c\n  end\n  local function merge_sort(a)\n    local n = #a\n    if n <= 1 then\n      return a\n    end\n    local m = math.floor(n / 2)\n    local b = merge_sort(a, 1, m)\n    local c = merge_sort(a, m + 1, n)\n    return merge(b, c)\n  end\n  local function find_k_smallest_pairs(a, b, k)\n    local m, n = #a, #b\n    local c = {}\n    for i = 1, m do\n      for j = 1, n do\n        c[#c + 1] = a[i] + b[j]\n      end\n    end\n    c = merge_sort(c)\n    local d = {}\n    for i = 1, k do\n      d[#d + 1] = c[i]\n    end\n    return d\n  end\n  return find_k_smallest_pairs(nums1, nums2, k)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgxgsc2jj.lua:30: stack overflow\nstack traceback:\n\t/tmp/tmpgxgsc2jj.lua:30: in upvalue 'merge_sort'\n\t/tmp/tmpgxgsc2jj.lua:31: in upvalue 'merge_sort'\n\t/tmp/tmpgxgsc2jj.lua:31: in upvalue 'merge_sort'\n\t/tmp/tmpgxgsc2jj.lua:31: in upvalue 'merge_sort'\n\t/tmp/tmpgxgsc2jj.lua:31: in upvalue 'merge_sort'\n\t/tmp/tmpgxgsc2jj.lua:31: in upvalue 'merge_sort'\n\t/tmp/tmpgxgsc2jj.lua:31: in upvalue 'merge_sort'\n\t/tmp/tmpgxgsc2jj.lua:31: in upvalue 'merge_sort'\n\t/tmp/tmpgxgsc2jj.lua:31: in upvalue 'merge_sort'\n\t...\t(skipping 249968 levels)\n\t/tmp/tmpgxgsc2jj.lua:43: in function </tmp/tmpgxgsc2jj.lua:35>\n\t(...tail calls...)\n\t/tmp/tmpgxgsc2jj.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.140 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwd_paqts.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end\n    local pairs = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(pairs, {nums1[i], nums2[j]})\n        end\n    end\n    table.sort(pairs, compare)\n    local result = {}\n    for i = 1, k do\n        table.insert(result, pairs[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hlc82zo.lua:25: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp2hlc82zo.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local p = math.floor(i / 2)\n            if heap[p][1] + heap[p][2] > heap[i][1] + heap[i][2] then\n                heap[p], heap[i] = heap[i], heap[p]\n                i = p\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local l = i * 2\n            local r = i * 2 + 1\n            local min_i = i\n            if heap[l][1] + heap[l][2] < heap[min_i][1] + heap[min_i][2] then\n                min_i = l\n            end\n            if r <= #heap and heap[r][1] + heap[r][2] < heap[min_i][1] + heap[min_i][2] then\n                min_i = r\n            end\n            if min_i ~= i then\n                heap[i], heap[min_i] = heap[min_i], heap[i]\n                i = min_i\n            else\n                break\n            end\n        end\n        return ret\n    end\n    local heap = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            heap_push(heap, {nums1[i], nums2[j]})\n            if #heap > k then\n                heap_pop(heap)\n            end\n        end\n    end\n    local ret = {}\n    while #heap > 0 do\n        table.insert(ret, 1, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1hnr0sx.lua:59: expected: {{1, 2}, {1, 4}}\nactual: {{7, 6}, {7, 4}}\nstack traceback:\n\t/tmp/tmph1hnr0sx.lua:59: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local res = {}\n    local len1 = #nums1\n    local len2 = #nums2\n    if len1 == 0 or len2 == 0 then\n        return res\n    end\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            table.insert(heap, {i, j, sum})\n            local i = #heap\n            while i > 1 do\n                local p = math.floor(i / 2)\n                if heap[p][3] > sum then\n                    heap[i], heap[p] = heap[p], heap[i]\n                    i = p\n                else\n                    break\n                end\n            end\n        elseif heap[1][3] > sum then\n            heap[1] = {i, j, sum}\n            local i = 1\n            while i * 2 <= k do\n                local l = i * 2\n                local r = i * 2 + 1\n                local min = l\n                if r <= k and heap[r][3] < heap[l][3] then\n                    min = r\n                end\n                if heap[min][3] < heap[i][3] then\n                    heap[i], heap[min] = heap[min], heap[i]\n                    i = min\n                else\n                    break\n                end\n            end\n        end\n    end\n    push(1, 1)\n    for i = 1, k do\n        local h = heap[1]\n        if h == nil then\n            break\n        end\n        table.insert(res, {nums1[h[1]], nums2[h[2]]})\n        if h[2] < len2 then\n            push(h[1], h[2] + 1)\n        end\n        if h[2] == 1 and h[1] < len1 then\n            push(h[1] + 1, 1)\n        end\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local l = i * 2\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmptavht79g.lua:70: 'end' expected (to close 'while' at line 59) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            heap[#heap + 1] = {i, j, sum}\n            local i = #heap\n            while i > 1 do\n                local p = math.floor(i / 2)\n                if heap[p][3] > sum then\n                    heap[i], heap[p] = heap[p], heap[i]\n                    i = p\n                else\n                    break\n                end\n            end\n        elseif sum < heap[1][3] then\n            heap[1] = {i, j, sum}\n            local i = 1\n            while i * 2 <= #heap do\n                local l = i * 2\n                local r = i * 2 + 1\n                local p = l\n                if r <= #heap and heap[r][3] < heap[l][3] then\n                    p = r\n                end\n                if heap[p][3] < sum then\n                    heap[i], heap[p] = heap[p], heap[i]\n                    i = p\n                else\n                    break\n                end\n            end\n        end\n    end\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            push(i, j)\n        end\n    end\n    local res = {}\n    for i = 1, #heap do\n        res[i] = {nums1[heap[i][1]], nums2[heap[i][2]]}\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7pv5nsj4.lua:54: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp7pv5nsj4.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\n  local pairs = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(pairs, {nums1[i], nums2[j]})\n    end\n  end\n  table.sort(pairs, compare)\n  local result = {}\n  for i = 1, k do\n    table.insert(result, pairs[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfu81o02.lua:25: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpsfu81o02.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local len1, len2 = #nums1, #nums2\n    if len1 == 0 or len2 == 0 then return {} end\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            table.insert(heap, {i, j, sum})\n            local i = #heap\n            while i > 1 do\n                local p = math.floor(i / 2)\n                if heap[p][3] > sum then\n                    heap[i], heap[p] = heap[p], heap[i]\n                    i = p\n                else\n                    break\n                end\n            end\n        elseif sum < heap[1][3] then\n            heap[1] = {i, j, sum}\n            local i = 1\n            while i * 2 <= k do\n                local l, r = i * 2, i * 2 + 1\n                local min_i = l\n                if r <= k and heap[r][3] < heap[l][3] then\n                    min_i = r\n                end\n                if heap[min_i][3] < heap[i][3] then\n                    heap[i], heap[min_i] = heap[min_i], heap[i]\n                    i = min_i\n                else\n                    break\n                end\n            end\n        end\n    end\n    for i = 1, math.min(k, len1) do\n        push(i, 1)\n    end\n    local ret = {}\n    for i = 1, k do\n        if #heap == 0 then break end\n        local pair = heap[1]\n        table.remove(heap, 1)\n        table.insert(ret, {nums1[pair[1]], nums2[pair[2]]})\n        if pair[2] < len2 then\n            push(pair[1], pair[2] + 1)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaymtw48y.lua:57: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}}\nstack traceback:\n\t/tmp/tmpaymtw48y.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local res = {}\n  local len1 = #nums1\n  local len2 = #nums2\n  if len1 == 0 or len2 == 0 then\n    return res\n  end\n  local function insert(nums, num)\n    local len = #nums\n    if len == 0 then\n      nums[1] = num\n      return\n    end\n    local i = 1\n    while i <= len do\n      if nums[i][1] + nums[i][2] > num[1] + num[2] then\n        break\n      end\n      i = i + 1\n    end\n    if i <= len then\n      for j = len, i, -1 do\n        nums[j + 1] = nums[j]\n      end\n      nums[i] = num\n    else\n      nums[len + 1] = num\n    end\n  end\n  for i = 1, len1 do\n    for j = 1, len2 do\n      insert(res, {nums1[i], nums2[j]})\n      if #res > k then\n        table.remove(res)\n      end\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            table.insert(heap, {i, j, sum})\n            local i = #heap\n            while i > 1 do\n                local p = math.floor(i / 2)\n                if heap[p][3] > heap[i][3] then\n                    heap[p], heap[i] = heap[i], heap[p]\n                    i = p\n                else\n                    break\n                end\n            end\n        else\n            if heap[1][3] > sum then\n                heap[1] = {i, j, sum}\n                local i = 1\n                while i * 2 <= #heap do\n                    local l = i * 2\n                    local r = l + 1\n                    if r <= #heap and heap[r][3] < heap[l][3] then\n                        l = r\n                    end\n                    if heap[i][3] > heap[l][3] then\n                        heap[i], heap[l] = heap[l], heap[i]\n                        i = l\n                    else\n                        break\n                    end\n                end\n            end\n        end\n    end\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            push(i, j)\n        end\n    end\n    local res = {}\n    for i = 1, #heap do\n        local h = heap[i]\n        table.insert(res, {nums1[h[1]], nums2[h[2]]})\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53twsxb7.lua:56: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp53twsxb7.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local len1, len2 = #nums1, #nums2\n  if len1 == 0 or len2 == 0 then return {} end\n  if k == 0 then return {} end\n  if k > len1 * len2 then k = len1 * len2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwlakysgv.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            table.insert(heap, {i, j, sum})\n            local i = #heap\n            while i > 1 do\n                local p = math.floor(i / 2)\n                if heap[p][3] > heap[i][3] then\n                    heap[p], heap[i] = heap[i], heap[p]\n                    i = p\n                else\n                    break\n                end\n            end\n        else\n            if heap[1][3] > sum then\n                heap[1] = {i, j, sum}\n                local i = 1\n                while i * 2 <= #heap do\n                    local l = i * 2\n                    local r = i * 2 + 1\n                    if r <= #heap and heap[r][3] < heap[l][3] then\n                        l = r\n                    end\n                    if heap[i][3] > heap[l][3] then\n                        heap[i], heap[l] = heap[l], heap[i]\n                        i = l\n                    else\n                        break\n                    end\n                end\n            end\n        end\n    end\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            push(i, j)\n        end\n    end\n    local result = {}\n    for i = 1, #heap do\n        table.insert(result, {nums1[heap[i][1]], nums2[heap[i][2]]})\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxypt_p00.lua:55: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}, {3, 2}, {3, 4}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpxypt_p00.lua:55: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local pairs = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(pairs, {nums1[i], nums2[j]})\n    end\n  end\n  table.sort(pairs, function(a, b) return a[1] + a[2] < b[1] + b[2] end)\n  local result = {}\n  for i = 1, k do\n    table.insert(result, pairs[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1llxtbzj.lua:22: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp1llxtbzj.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function get_next(i, j)\n        if j < #nums2 then\n            return i, j + 1\n        elseif i < #nums1 then\n            return i + 1, 1\n        else\n            return nil\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9dv2x6ki.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function compare(a, b)\n        return a[1] < b[1] or (a[1] == b[1] and a[2] < b[2])\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2pu0fxcn.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[j][1] + heap[j][2] > heap[i][1] + heap[i][2] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1][1] + heap[j + 1][2] < heap[j][1] + heap[j][2] then\n                j = j + 1\n            end\n            if heap[i][1] + heap[i][2] > heap[j][1] + heap[j][2] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return ret\n    end\n    local function heap_top(heap)\n        return heap[1]\n    end\n    local function heap_empty(heap)\n        return #heap == 0\n    end\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            if #heap < k then\n                heap_push(heap, {nums1[i], nums2[j]})\n            else\n                local top = heap_top(heap)\n                if nums1[i] + nums2[j] < top[1] + top[2] then\n                    heap_pop(heap)\n                    heap_push(heap, {nums1[i], nums2[j]})\n                end\n            end\n        end\n    end\n    local ret =\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmp81qg76kv.lua:56: unexpected symbol near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local len1 = #nums1\n    local len2 = #nums2\n    if len1 == 0 or len2 == 0 then\n        return {}\n    end\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        local pos = #heap + 1\n        heap[pos] = {i, j, sum}\n        local parent = math.floor(pos / 2)\n        while parent > 0 and heap[parent][3] > sum do\n            heap[parent], heap[pos] = heap[pos], heap[parent]\n            pos = parent\n            parent = math.floor(pos / 2)\n        end\n    end\n    local function pop()\n        local ret = heap[1]\n        local pos = 1\n        local child = pos * 2\n        while child < #heap do\n            if child + 1 < #heap and heap[child + 1][3] < heap[child][3] then\n                child = child + 1\n            end\n            if heap[child][3] < heap[#heap][3] then\n                heap[pos], heap[child] = heap[child], heap[pos]\n                pos = child\n                child = pos * 2\n            else\n                break\n            end\n        end\n        heap[pos] = heap[#heap]\n        heap[#heap] = nil\n        return ret\n    end\n    for i = 1, math.min(len1, k) do\n        push(i, 1)\n    end\n    local ret = {}\n    for i = 1, k do\n        local pair = pop()\n        if not pair then\n            break\n        end\n        table.insert(ret, {nums1[pair[1]], nums2[pair[2]]})\n        if pair[2] < len2 then\n            push(pair[1], pair[2] + 1)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsn_73uc5.lua:60: expected: {{1, 2}, {1, 4}}\nactual: {{1, 2}, {3, 2}}\nstack traceback:\n\t/tmp/tmpsn_73uc5.lua:60: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local p = math.floor(i / 2)\n            if heap[p][1] + heap[p][2] <= heap[i][1] + heap[i][2] then\n                break\n            end\n            heap[i], heap[p] = heap[p], heap[i]\n            i = p\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpfc2zdwiq.lua:24: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function heap_pop(heap)\n        local last = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i < #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            if left > #heap then\n                break\n            end\n            if right > #heap then\n                if heap[i][1] > heap[left][1] then\n                    heap[i], heap[left] = heap[left], heap[i]\n                end\n                break\n            end\n            if heap[i][1] > heap[left][1] or heap[i][1] > heap[right][1] then\n                if heap[left][1] < heap[right][1] then\n                    heap[i], heap[left] = heap[left], heap[i]\n                    i = left\n                else\n                    heap[i], heap[right] = heap[right], heap[i]\n                    i = right\n                end\n            else\n                break\n            end\n        end\n        return last\n    end\n    local function heap_push(heap, item)\n        heap[#heap + 1] = item\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[i][1] < heap[parent][1] then\n                heap[i], heap[parent] = heap[parent], heap[i]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local heap = {}\n    for i = 1, #nums1 do\n        heap_push(heap, {nums1[i] + nums2[1], i, 1})\n    end\n    local result = {}\n    while k > 0 and #heap > 0 do\n        local item = heap_pop(heap)\n        result[#result + 1] = {nums1[item[2]], nums2[item[3]]}\n        if item[3] < #nums2 then\n            heap_push(heap, {nums1[item[2]] + nums2[item[3]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr6grxyw3.lua:56: ']' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local heap = {}\n    local function push(i, j)\n        local sum = nums1[i] + nums2[j]\n        if #heap < k then\n            table.insert(heap, {i, j, sum})\n            table.sort(heap, function(a, b) return a[3] < b[3] end)\n        elseif sum < heap[1][3] then\n            heap[1] = {i, j, sum}\n            table.sort(heap, function(a, b) return a[3] < b[3] end)\n        end\n    end\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            push(i, j)\n        end\n    end\n    local res = {}\n    for i = 1, #heap do\n        table.insert(res, {nums1[heap[i][1]], nums2[heap[i][2]]})\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3b85awag.lua:31: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {3, 2}, {1, 4}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp3b85awag.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function compare(a, b)\n    return a[1] + a[2] < b[1] + b[2]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwd_paqts.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local pairs = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(pairs, {nums1[i], nums2[j]})\n    end\n  end\n  table.sort(pairs, function(a, b) return a[1] + a[2] < b[1] + b[2] end)\n  local result = {}\n  for i = 1, k do\n    table.insert(result, pairs[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1llxtbzj.lua:22: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmp1llxtbzj.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local function heap_pop(heap)\n        local ret = heap[1]\n        local last = table.remove(heap)\n        local i = 1\n        while 2 * i <= #heap do\n            local j = 2 * i\n            if j + 1 <= #heap and heap[j + 1] < heap[j] then\n                j = j + 1\n            end\n            if last <= heap[j] then\n                break\n            end\n            heap[i] = heap[j]\n            i = j\n        end\n        heap[i] = last\n        return ret\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "lua: /tmp/tmppqunm_0o.lua:30: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n    local pairs = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(pairs, {nums1[i], nums2[j]})\n        end\n    end\n    table.sort(pairs, function(a, b) return a[1] + a[2] < b[1] + b[2] end)\n    local result = {}\n    for i = 1, k do\n        table.insert(result, pairs[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukk20fou.lua:22: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {3, 2}, {3, 4}, {1, 6}, {3, 6}, {7, 2}}\nstack traceback:\n\t/tmp/tmpukk20fou.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  if #nums1 == 0 or #nums2 == 0 then return {} end\n  local heap = {}\n  local res = {}\n  local function push(i, j)\n    local sum = nums1[i] + nums2[j]\n    if #heap < k then\n      table.insert(heap, {i, j, sum})\n      local i = #heap\n      while i > 1 do\n        local p = math.floor(i / 2)\n        if heap[p][3] > heap[i][3] then\n          heap[i], heap[p] = heap[p], heap[i]\n          i = p\n        else\n          break\n        end\n      end\n    elseif sum < heap[1][3] then\n      heap[1] = {i, j, sum}\n      local i = 1\n      while i * 2 <= #heap do\n        local l = i * 2\n        local r = i * 2 + 1\n        local min = l\n        if r <= #heap and heap[r][3] < heap[l][3] then\n          min = r\n        end\n        if heap[i][3] > heap[min][3] then\n          heap[i], heap[min] = heap[min], heap[i]\n          i = min\n        else\n          break\n        end\n      end\n    end\n  end\n  push(1, 1)\n  while #res < k and #heap > 0 do\n    local i, j, sum = table.unpack(table.remove(heap, 1))\n    table.insert(res, {nums1[i], nums2[j]})\n    if j < #nums2 then\n      push(i, j + 1)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3qri3sut.lua:55: expected: {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\nactual: {{1, 2}, {1, 4}, {1, 6}}\nstack traceback:\n\t/tmp/tmp3qri3sut.lua:55: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n  local function heap_pop(heap)\n    local last = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i < #heap do\n      local j = i * 2\n      if j < #heap and heap[j][1] > heap[j + 1][1] then\n        j = j + 1\n      end\n      if last[1] <= heap[j][1] then\n        break\n      end\n      heap[i] = heap[j]\n      i = j\n    end\n    heap[i] = last\n    return last\n  end\n  local function heap_push(heap, item)\n    heap[#heap + 1] = item\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j][1] <= heap[i][1] then\n        break\n      end\n      heap[i], heap[j] = heap[j], heap[i]\n      i = j\n    end\n  end\n  local heap = {}\n  for i = 1, #nums1 do\n    heap_push(heap, {nums1[i] + nums2[1], i, 1})\n  end\n  local result = {}\n  for i = 1, k do\n    if #heap == 0 then\n      break\n    end\n    local item = heap_pop(heap)\n    result[i] = {nums1[item[2]], nums2[item[3]]}\n    if item[3] < #nums2 then\n      heap_push(heap, {nums1[item[2]] + nums2[item[3] + 1], item[2], item[3] + 1})\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122947,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffy22u81.lua:54: expected: {{1, 2}, {1, 4}}\nactual: {{7, 2}, {7, 4}}\nstack traceback:\n\t/tmp/tmpffy22u81.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}