{
  "name": "mbpp_442_positive_count",
  "language": "lua",
  "prompt": "-- Write a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend",
    "    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend",
    "    local count = 0\n    for i, v in ipairs(nums) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend",
    "    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend",
    "  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend",
    "    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend",
    "    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend",
    "  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend",
    "    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend",
    "    local count = 0\n    for i, v in ipairs(nums) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend",
    "    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend",
    "  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend",
    "  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend",
    "  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend",
    "  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend",
    "  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend",
    "    local count = 0\n    for i = 1, #nums do\n        if nums[i] > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend",
    "    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend",
    "  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend",
    "    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend"
  ]
}