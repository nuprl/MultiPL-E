{
  "name": "mbpp_397_median_numbers",
  "language": "lua",
  "prompt": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a > b then\n        if b > c then\n            return b\n        elseif a > c then\n            return c\n        else\n            return a\n        end\n    else\n        if a > c then\n            return a\n        elseif b > c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a > b then\n        if b > c then\n            return b\n        elseif a > c then\n            return c\n        else\n            return a\n        end\n    else\n        if a > c then\n            return a\n        elseif b > c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a > b then\n        if b > c then\n            return b\n        elseif a > c then\n            return c\n        else\n            return a\n        end\n    else\n        if a > c then\n            return a\n        elseif b > c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif c < a then\n      return a\n    else\n      return c\n    end\n  else\n    if a < c then\n      return a\n    elseif c < b then\n      return b\n    else\n      return c\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a > b then\n        if b > c then\n            return b\n        elseif a > c then\n            return c\n        else\n            return a\n        end\n    else\n        if a > c then\n            return a\n        elseif b > c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    elseif a < c then\n        return a\n    elseif b < c then\n        return c\n    else\n        return b\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n\tif a < b then\n\t\tif b < c then\n\t\t\treturn b\n\t\telseif a < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn a\n\t\tend\n\telse\n\t\tif a < c then\n\t\t\treturn a\n\t\telseif b < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn b\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a > b then\n        if b > c then\n            return b\n        elseif a > c then\n            return c\n        else\n            return a\n        end\n    else\n        if a > c then\n            return a\n        elseif b > c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if (a <= b and b <= c) or (c <= b and b <= a) then\n    return b\n  elseif (b <= a and a <= c) or (c <= a and a <= b) then\n    return a\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123915,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a > b then\n        if b > c then\n            return b\n        elseif a > c then\n            return c\n        else\n            return a\n        end\n    else\n        if a > c then\n            return a\n        elseif b > c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    local median = a\n    if (b < a and a < c) or (c < a and a < b) then\n        median = a\n    elseif (a < b and b < c) or (c < b and b < a) then\n        median = b\n    else\n        median = c\n    end\n    return median\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n\tif a > b then\n\t\tif b > c then\n\t\t\treturn b\n\t\telseif a > c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn a\n\t\tend\n\telse\n\t\tif a > c then\n\t\t\treturn a\n\t\telseif b > c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn b\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123915,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  local median = 0\n  if a > b then\n    if b > c then\n      median = b\n    elseif a > c then\n      median = c\n    else\n      median = a\n    end\n  else\n    if a > c then\n      median = a\n    elseif b > c then\n      median = c\n    else\n      median = b\n    end\n  end\n  return median\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  elseif a < c then\n    return a\n  elseif b < c then\n    return c\n  else\n    return b\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123915,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  local m = math.min(a, b, c)\n  local M = math.max(a, b, c)\n  return a + b + c - m - M\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  local min = math.min(a, b, c)\n  local max = math.max(a, b, c)\n  return a + b + c - min - max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a > b then\n        if b > c then\n            return b\n        elseif a > c then\n            return c\n        else\n            return a\n        end\n    else\n        if a > c then\n            return a\n        elseif b > c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  elseif a < c then\n    return a\n  elseif b < c then\n    return c\n  else\n    return b\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123915,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a > b then\n        if b > c then\n            return b\n        elseif a > c then\n            return c\n        else\n            return a\n        end\n    else\n        if a > c then\n            return a\n        elseif b > c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a <= b and b <= c then\n    return b\n  elseif a <= c and c <= b then\n    return c\n  elseif b <= a and a <= c then\n    return a\n  elseif b <= c and c <= a then\n    return c\n  elseif c <= a and a <= b then\n    return a\n  elseif c <= b and b <= a then\n    return b\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a > b then\n        if b > c then\n            return b\n        elseif a > c then\n            return c\n        else\n            return a\n        end\n    else\n        if a > c then\n            return a\n        elseif b > c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  elseif a < c then\n    return a\n  elseif b < c then\n    return c\n  else\n    return b\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123915,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n\tif a < b then\n\t\tif b < c then\n\t\t\treturn b\n\t\telseif a < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn a\n\t\tend\n\telse\n\t\tif a < c then\n\t\t\treturn a\n\t\telseif b < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn b\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if (a < b and b < c) or (c < b and b < a) then\n    return b\n  elseif (b < a and a < c) or (c < a and a < b) then\n    return a\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then return b\n    elseif a < c then return c\n    else return a\n    end\n  else\n    if a < c then return a\n    elseif b < c then return c\n    else return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a > b then\n        if b > c then\n            return b\n        elseif a > c then\n            return c\n        else\n            return a\n        end\n    else\n        if a > c then\n            return a\n        elseif b > c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  elseif a < c then\n    return a\n  elseif b < c then\n    return c\n  else\n    return b\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123915,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  elseif a < c then\n    return a\n  elseif b < c then\n    return c\n  else\n    return b\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123915,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a > b then\n        if b > c then\n            return b\n        elseif a > c then\n            return c\n        else\n            return a\n        end\n    else\n        if a > c then\n            return a\n        elseif b > c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif c < a then\n      return a\n    else\n      return c\n    end\n  else\n    if a < c then\n      return a\n    elseif c < b then\n      return b\n    else\n      return c\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n\tif a < b then\n\t\tif b < c then\n\t\t\treturn b\n\t\telseif a < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn a\n\t\tend\n\telse\n\t\tif a < c then\n\t\t\treturn a\n\t\telseif b < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn b\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  elseif a < c then\n    return a\n  elseif b < c then\n    return c\n  else\n    return b\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123915,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  local median = 0\n  if a > b then\n    if b > c then\n      median = b\n    elseif a > c then\n      median = c\n    else\n      median = a\n    end\n  else\n    if a > c then\n      median = a\n    elseif b > c then\n      median = c\n    else\n      median = b\n    end\n  end\n  return median\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a > b then\n        if b > c then\n            return b\n        elseif a > c then\n            return c\n        else\n            return a\n        end\n    else\n        if a > c then\n            return a\n        elseif b > c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a > b then\n        if b > c then\n            return b\n        elseif a > c then\n            return c\n        else\n            return a\n        end\n    else\n        if a > c then\n            return a\n        elseif b > c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n\tif a < b then\n\t\tif b < c then\n\t\t\treturn b\n\t\telseif a < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn a\n\t\tend\n\telse\n\t\tif a < c then\n\t\t\treturn a\n\t\telseif b < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn b\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a > b then\n        if b > c then\n            return b\n        elseif a > c then\n            return c\n        else\n            return a\n        end\n    else\n        if a > c then\n            return a\n        elseif b > c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  elseif a < c then\n    return a\n  elseif b < c then\n    return c\n  else\n    return b\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123915,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  local median = 0\n  if a < b then\n    if b < c then\n      median = b\n    elseif a < c then\n      median = c\n    else\n      median = a\n    end\n  elseif a < c then\n    median = a\n  elseif b < c then\n    median = c\n  else\n    median = b\n  end\n  return median\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n\tif a < b then\n\t\tif b < c then\n\t\t\treturn b\n\t\telseif a < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn a\n\t\tend\n\telse\n\t\tif a < c then\n\t\t\treturn a\n\t\telseif b < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn b\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    else\n        if a < c then\n            return a\n        elseif b < c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if (a > b) then\n    if (b > c) then\n      return b\n    elseif (a > c) then\n      return c\n    else\n      return a\n    end\n  else\n    if (a > c) then\n      return a\n    elseif (b > c) then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  elseif a < c then\n    return a\n  elseif b < c then\n    return c\n  else\n    return b\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123915,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  local min, max = math.min(a, b, c), math.max(a, b, c)\n  return a + b + c - min - max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a > b then\n        if b > c then\n            return b\n        elseif a > c then\n            return c\n        else\n            return a\n        end\n    else\n        if a > c then\n            return a\n        elseif b > c then\n            return c\n        else\n            return b\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n\tif a < b then\n\t\tif b < c then\n\t\t\treturn b\n\t\telseif a < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn a\n\t\tend\n\telse\n\t\tif a < c then\n\t\t\treturn a\n\t\telseif b < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn b\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n\tif a < b then\n\t\tif b < c then\n\t\t\treturn b\n\t\telseif a < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn a\n\t\tend\n\telse\n\t\tif a < c then\n\t\t\treturn a\n\t\telseif b < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn b\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n\tif (a < b and b < c) or (c < b and b < a) then\n\t\treturn b\n\telseif (b < a and a < c) or (c < a and a < b) then\n\t\treturn a\n\telse\n\t\treturn c\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  local min, max = math.min(a, b, c), math.max(a, b, c)\n  return a + b + c - min - max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n\tif a < b then\n\t\tif b < c then\n\t\t\treturn b\n\t\telseif a < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn a\n\t\tend\n\telse\n\t\tif a < c then\n\t\t\treturn a\n\t\telseif b < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn b\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if (a < b and b < c) or (c < b and b < a) then\n        return b\n    elseif (b < a and a < c) or (c < a and a < b) then\n        return a\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  local median = 0\n  if a > b then\n    if b > c then\n      median = b\n    elseif a > c then\n      median = c\n    else\n      median = a\n    end\n  else\n    if a > c then\n      median = a\n    elseif b > c then\n      median = c\n    else\n      median = b\n    end\n  end\n  return median\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if a > c then\n      if b > c then\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if b > c then\n      if a > c then\n        return a\n      else\n        return c\n      end\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  local median = nil\n  if a < b then\n    if b < c then\n      median = b\n    elseif a < c then\n      median = c\n    else\n      median = a\n    end\n  else\n    if a < c then\n      median = a\n    elseif b < c then\n      median = c\n    else\n      median = b\n    end\n  end\n  return median\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123916,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n\tif a < b then\n\t\tif b < c then\n\t\t\treturn b\n\t\telseif a < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn a\n\t\tend\n\telse\n\t\tif a < c then\n\t\t\treturn a\n\t\telseif b < c then\n\t\t\treturn c\n\t\telse\n\t\t\treturn b\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n    if a < b then\n        if b < c then\n            return b\n        elseif a < c then\n            return c\n        else\n            return a\n        end\n    elseif a < c then\n        return a\n    elseif b < c then\n        return c\n    else\n        return b\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a > b then\n    if b > c then\n      return b\n    elseif a > c then\n      return c\n    else\n      return a\n    end\n  else\n    if a > c then\n      return a\n    elseif b > c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n  if a < b then\n    if b < c then\n      return b\n    elseif a < c then\n      return c\n    else\n      return a\n    end\n  else\n    if a < c then\n      return a\n    elseif b < c then\n      return c\n    else\n      return b\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}