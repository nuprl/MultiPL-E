{
  "name": "mbpp_597_find_kth",
  "language": "lua",
  "prompt": "-- Write a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  if k > #arr1 + #arr2 then return nil end\n  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend",
    "  local m = #arr1\n  local n = #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, math.floor(k / 2))\n  local j = math.min(n, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2, k - j)\n  else\n    return find_kth(arr1, arr2, k - i)\n  end\nend",
    "  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(math.floor(k / 2), len1)\n  local j = math.min(math.floor(k / 2), len2)\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend",
    "    local i, j = 1, 1\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            if i + j == k then\n                return arr1[i]\n            end\n            i = i + 1\n        else\n            if i + j == k then\n                return arr2[j]\n            end\n            j = j + 1\n        end\n    end\n    if i > #arr1 then\n        return arr2[k - #arr1]\n    else\n        return arr1[k - #arr2]\n    end\nend",
    "  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local i = math.min(math.floor(k/2), n1)\n  local j = math.min(k - i, n2)\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i+1), arr2, k-i)\n  else\n    return find_kth(arr1, arr2:sub(j+1), k-j)\n  end\nend",
    "  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end",
    "  local m = #arr1\n  local n = #arr2\n  local i = math.floor(m / (m + n) * (k - 1))\n  local j = (k - 1) - i\n  local ai_1 = (i == 0) and -math.huge or arr1[i]\n  local ai = (i == m) and math.huge or arr1[i + 1]\n  local bj_1 = (j == 0) and -math.huge or arr2[j]\n  local bj = (j == n) and math.huge or arr2[j + 1]\n  if ai_1 <= bj and bj_1 <= ai then\n    return bj_1\n  elseif bj_1 <= ai and ai_1 <= bj then\n    return ai_1\n  elseif ai < bj_1 then\n    return find_kth(arr1, arr2, k - i - 1)\n  else\n    return find_kth(arr2, arr1, k - j - 1)\n  end\nend",
    "  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend",
    "    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local mid1 = math.min(#arr1, math.floor(k / 2))\n    local mid2 = math.min(#arr2, math.floor(k / 2))\n    if arr1[mid1] < arr2[mid2] then\n        return find_kth(arr1, arr2, k - mid1)\n    else\n        return find_kth(arr1, arr2, k - mid2)\n    end\nend",
    "  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end",
    "    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(len1, math.floor(k / 2))\n    local j = math.min(len2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2.slice(j + 1), k - j)\n    else\n        return find_kth(arr1.slice(i + 1), arr2, k - i)\n    end\nend",
    "  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end",
    "  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  elseif len2 == 0 then\n    return arr1[k]\n  end",
    "  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend",
    "  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  else\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  end\nend",
    "  -- TODO\nend",
    "  if not arr1 or not arr2 then return nil end\n  if k > #arr1 + #arr2 then return nil end\n  local i, j = 1, 1\n  while i <= #arr1 and j <= #arr2 do\n    if i + j == k then\n      return arr1[i] < arr2[j] and arr1[i] or arr2[j]\n    elseif i + j < k then\n      if arr1[i] < arr2[j] then\n        i = i + 1\n      else\n        j = j + 1\n      end\n    end\n  end\n  if i > #arr1 then\n    return arr2[k - #arr1]\n  else\n    return arr1[k - #arr2]\n  end\nend",
    "    if #arr1 == 0 then return arr2[k] end\n    if #arr2 == 0 then return arr1[k] end\n    if k == 1 then return math.min(arr1[1], arr2[1]) end",
    "  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(math.floor(k / 2), n1)\n  local j = math.min(k - i, n2)\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  else\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  end\nend",
    "  local i = 1\n  local j = 1\n  local kth = 0\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n    if k == 0 then\n      return kth\n    end\n  end\n  while i <= #arr1 do\n    kth = arr1[i]\n    i = i + 1\n    k = k - 1\n    if k == 0 then\n      return kth\n    end\n  end\n  while j <= #arr2 do\n    kth = arr2[j]\n    j = j + 1\n    k = k - 1\n    if k == 0 then\n      return kth\n    end\n  end\nend"
  ]
}