{
  "name": "mbpp_618_div_list",
  "language": "lua",
  "prompt": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i, num in ipairs(nums1) do\n    result[i] = num / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i, num in ipairs(nums1) do\n    result[i] = num / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i, v in ipairs(nums1) do\n        result[i] = v / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i, num1 in ipairs(nums1) do\n        local num2 = nums2[i]\n        if num2 == 0 then\n            error(\"Division by zero\")\n        end\n        result[i] = num1 / num2\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local nums = {}\n    for i, num1 in ipairs(nums1) do\n        local num2 = nums2[i]\n        if num2 ~= 0 then\n            nums[i] = num1 / num2\n        else\n            nums[i] = 0\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i, v in ipairs(nums1) do\n        table.insert(result, v / nums2[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i, num1 in ipairs(nums1) do\n        result[i] = num1 / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local res = {}\n  for i = 1, #nums1 do\n    res[i] = nums1[i] / nums2[i]\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n   local result = {}\n   for i = 1, #nums1 do\n      result[i] = nums1[i] / nums2[i]\n   end\n   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local res = {}\n    for i = 1, #nums1 do\n        res[i] = nums1[i] / nums2[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i, v in ipairs(nums1) do\n    result[i] = v / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i, v in ipairs(nums1) do\n    result[i] = v / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local nums = {}\n  for i = 1, #nums1 do\n    nums[i] = nums1[i] / nums2[i]\n  end\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local res = {}\n  for i, v in ipairs(nums1) do\n    res[i] = v / nums2[i]\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local nums = {}\n    for i = 1, #nums1 do\n        nums[i] = nums1[i] / nums2[i]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i, v in ipairs(nums1) do\n    result[i] = v / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i, v in ipairs(nums1) do\n        result[i] = v / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i, v in ipairs(nums1) do\n        result[i] = v / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local res = {}\n    for i = 1, #nums1 do\n        res[i] = nums1[i] / nums2[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local res = {}\n  for i = 1, #nums1 do\n    res[i] = nums1[i] / nums2[i]\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local res = {}\n    for i = 1, #nums1 do\n        res[i] = nums1[i] / nums2[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122635,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n  local result = {}\n  for i = 1, #nums1 do\n    result[i] = nums1[i] / nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n    local result = {}\n    for i = 1, #nums1 do\n        result[i] = nums1[i] / nums2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}