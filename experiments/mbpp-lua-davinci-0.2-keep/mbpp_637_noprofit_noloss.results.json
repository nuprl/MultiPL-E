{
  "name": "mbpp_637_noprofit_noloss",
  "language": "lua",
  "prompt": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n  if actual_cost == sale_amount then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif (actual_cost == sale_amount) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n  if actual_cost == sale_amount then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n  if actual_cost == sale_amount then\n    print(\"No profit no loss\")\n  else\n    print(\"Profit or loss\")\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123487,
      "stdout": "Profit or loss\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl__5a67h.lua:13: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpl__5a67h.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse \n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123487,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n  if actual_cost == sale_amount then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123487,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        print(\"No Profit No Loss\")\n    else\n        print(\"Profit or Loss\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123487,
      "stdout": "Profit or Loss\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94w16bqz.lua:13: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp94w16bqz.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n  if actual_cost == sale_amount then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\treturn actual_cost == sale_amount\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123486,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n  if actual_cost == sale_amount then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        print(\"No profit no loss\")\n    else\n        print(\"Profit or loss\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123487,
      "stdout": "Profit or loss\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77nbgqs1.lua:13: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp77nbgqs1.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123487,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif (actual_cost == sale_amount) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n  if actual_cost == sale_amount then\n    print(\"No profit no loss\")\n  else\n    print(\"Profit or loss\")\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123487,
      "stdout": "Profit or loss\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl__5a67h.lua:13: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpl__5a67h.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n  if actual_cost == sale_amount then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n  if actual_cost == sale_amount then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n  if actual_cost == sale_amount then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n\tif actual_cost == sale_amount then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}