{
  "name": "mbpp_616_tuple_modulo",
  "language": "lua",
  "prompt": "-- Write a function which takes two tuples of the same length and performs the element wise modulo.\nlocal function tuple_modulo(test_tup1, test_tup2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_modulo\n    lu.assertEquals(candidate({10, 4, 5, 6}, {5, 6, 7, 5}), {0, 4, 5, 1})\n    lu.assertEquals(candidate({11, 5, 6, 7}, {6, 7, 8, 6}), {5, 5, 6, 1})\n    lu.assertEquals(candidate({12, 6, 7, 8}, {7, 8, 9, 7}), {5, 6, 7, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] % test_tup2[i]\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_tup1 do\n    result[i] = test_tup1[i] % test_tup2[i]\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #test_tup1 do\n    result[i] = test_tup1[i] % test_tup2[i]\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #test_tup1 do\n    result[i] = test_tup1[i] % test_tup2[i]\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] % test_tup2[i]\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_tup1 do\n    result[i] = test_tup1[i] % test_tup2[i]\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #test_tup1 do\n    result[i] = test_tup1[i] % test_tup2[i]\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] % test_tup2[i]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] % test_tup2[i]\n    end\n    return result\nend",
    "\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = test_tup1[i] % test_tup2[i]\n\tend\n\treturn result_tup\nend",
    "  local result = {}\n  for i = 1, #test_tup1 do\n    result[i] = test_tup1[i] % test_tup2[i]\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #test_tup1 do\n    result[i] = test_tup1[i] % test_tup2[i]\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #test_tup1 do\n    result[i] = test_tup1[i] % test_tup2[i]\n  end\n  return result\nend",
    "    local new_tup = {}\n    for i = 1, #test_tup1 do\n        new_tup[i] = test_tup1[i] % test_tup2[i]\n    end\n    return new_tup\nend",
    "    local result = {}\n    for i, v in ipairs(test_tup1) do\n        result[i] = v % test_tup2[i]\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_tup1 do\n    result[i] = test_tup1[i] % test_tup2[i]\n  end\n  return result\nend",
    "    local tup1 = test_tup1\n    local tup2 = test_tup2\n    local tup_len = #tup1\n    local result = {}\n    for i = 1, tup_len do\n        result[i] = tup1[i] % tup2[i]\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_tup1 do\n    result[i] = test_tup1[i] % test_tup2[i]\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #test_tup1 do\n    result[i] = test_tup1[i] % test_tup2[i]\n  end\n  return result\nend",
    "\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = test_tup1[i] % test_tup2[i]\n\tend\n\treturn result\nend"
  ]
}