{
  "name": "mbpp_641_is_nonagonal",
  "language": "lua",
  "prompt": "-- Write a function to find the nth nonagonal number.\nlocal function is_nonagonal(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nonagonal\n    lu.assertEquals(candidate(10), 325)\n    lu.assertEquals(candidate(15), 750)\n    lu.assertEquals(candidate(18), 1089)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local nth = (math.sqrt(1 + 8 * n) - 1) / 2\n  return nth == math.floor(nth)\nend",
    "  local n = math.sqrt(8*n + 1)\n  return n == math.floor(n)\nend",
    "\tlocal n1 = (math.sqrt(1 + 8*n) - 1) / 2\n\treturn n1 == math.floor(n1)\nend",
    "  local n1 = (math.sqrt(1 + 8 * n) - 1) / 2\n  return n1 == math.floor(n1)\nend",
    "\tlocal nth = (math.sqrt(1 + 8 * n) - 1) / 2\n\treturn nth == math.floor(nth)\nend",
    "  local n = math.sqrt(8 * n + 1)\n  return n == math.floor(n)\nend",
    "  local n = math.sqrt(8*n + 1)\n  return n == math.floor(n)\nend",
    "    local nth = (math.sqrt(1 + 8 * n) - 1) / 2\n    return nth == math.floor(nth)\nend",
    "  local n2 = 2*n\n  local d = math.sqrt(n2)\n  return d == math.floor(d)\nend",
    "    local x = math.sqrt(1 + 8 * n)\n    return x == math.floor(x)\nend",
    "  local nth = (math.sqrt(1 + 8 * n) - 1) / 2\n  return nth == math.floor(nth)\nend",
    "  local nth = (math.sqrt(8 * n + 1) - 1) / 2\n  return nth == math.floor(nth)\nend",
    "  local n2 = math.sqrt(1 + 8 * n)\n  return n2 == math.floor(n2)\nend",
    "  local n = math.sqrt(8*n + 1)\n  return n == math.floor(n)\nend",
    "\treturn (math.sqrt(1 + 8 * n) - 1) % 2 == 0\nend",
    "  local n1 = (math.sqrt(1+8*n)-1)/2\n  return n1 == math.floor(n1)\nend",
    "    local nth = (math.sqrt(1 + 8 * n) - 1) / 2\n    return nth == math.floor(nth)\nend",
    "  local nth = 0\n  local i = 1\n  while nth < n do\n    nth = nth + i\n    i = i + 1\n  end\n  return nth == n\nend",
    "  local n = math.sqrt(8*n + 1)\n  return n == math.floor(n)\nend",
    "  local nth = math.floor((math.sqrt(1 + 8 * n) - 1) / 2)\n  return nth * (3 * nth - 1) / 2 == n\nend"
  ]
}