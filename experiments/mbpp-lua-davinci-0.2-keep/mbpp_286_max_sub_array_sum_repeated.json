{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "lua",
  "prompt": "-- Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlocal function max_sub_array_sum_repeated(a, n, k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum_repeated\n    lu.assertEquals(candidate({10, 20, -30, -1}, 4, 3), 30)\n    lu.assertEquals(candidate({-1, 10, 20}, 3, 2), 59)\n    lu.assertEquals(candidate({-1, -2, -3}, 3, 3), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local max_sum = 0\n  local curr_sum = 0\n  local max_so_far = 0\n  local max_ending_here = 0\n  local start = 0\n  local end_ = 0\n  local s = 0\n  for i = 0, n - 1 do\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n      start = s\n      end_ = i\n    end\n    if max_ending_here < 0 then\n      max_ending_here = 0\n      s = i + 1\n    end\n  end\n  local min_sum = 0\n  local curr_sum = 0\n  local min_so_far = 0\n  local min_ending_here = 0\n  local start = 0\n  local end_ = 0\n  local s = 0\n  for i = 0, n - 1 do\n    min_ending_here = min_ending_here + a[i]\n    if min_so_far > min_ending_here then\n      min_so_far = min_ending_here\n      start = s\n      end_ = i\n    end\n    if min_ending_here > 0 then\n      min_ending_here = 0\n      s = i + 1\n    end\n  end\n  local max_wrap = 0\n  for i = 0, n - 1 do\n    max_wrap = max_wrap + a[i]\n  end\n  max_wrap = max_wrap - min_so_far\n  if k == 1 then\n    return max_so_far\n  end\n  if max_wrap > max_so_far then\n    return max_wrap\n  end\n  return max_so_far + (k - 2) * curr_sum\nend",
    "  local max_sum = 0\n  local curr_sum = 0\n  local i = 0\n  local j = 0\n  local max_i = 0\n  local max_j = 0\n  local max_k = 0\n  local max_l = 0",
    "  local max_sum = 0\n  local curr_sum = 0\n  local max_ending_here = 0\n  local min_ending_here = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    min_ending_here = min_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if min_ending_here > 0 then\n      min_ending_here = 0\n    end\n    max_sum = max(max_sum, max_ending_here)\n  end\n  if max_sum == 0 then\n    return max_sum\n  end\n  local curr_prefix_sum = 0\n  local curr_suffix_sum = 0\n  local total_sum = 0\n  for i = 1, n do\n    curr_prefix_sum = curr_prefix_sum + a[i]\n    curr_suffix_sum = curr_suffix_sum + a[i]\n    total_sum = total_sum + a[i]\n    if curr_prefix_sum < 0 then\n      curr_prefix_sum = 0\n    end\n    if curr_suffix_sum > 0 then\n      curr_suffix_sum = 0\n    end\n    max_sum = max(max_sum, curr_prefix_sum)\n    max_sum = max(max_sum, curr_suffix_sum)\n  end\n  max_sum = max(max_sum, total_sum * (k - 2) + curr_prefix_sum + curr_suffix_sum)\n  return max_sum\nend",
    "  local max_sum = 0\n  local curr_sum = 0\n  local max_val = 0\n  local sum_of_all = 0\n  for i = 1, n do\n    max_val = math.max(max_val, a[i])\n    sum_of_all = sum_of_all + a[i]\n    curr_sum = curr_sum + a[i]\n    if curr_sum < 0 then\n      curr_sum = 0\n    end\n    max_sum = math.max(max_sum, curr_sum)\n  end\n  if max_sum > 0 then\n    return math.max(max_sum, sum_of_all * k - curr_sum)\n  end\n  return max_val\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local min_element = a[1]\n    local min_so_far = 0\n    local sum = 0\n    local i = 0\n    for i = 1, n do\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_element < a[i] then\n            max_element = a[i]\n        end\n        if min_element > a[i] then\n            min_element = a[i]\n        end\n        sum = sum + a[i]\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    min_so_far = sum - max_element\n    local max_sum = max_so_far\n    local min_sum = min_so_far\n    for i = 2, k do\n        max_so_far = max_so_far + sum - n * min_element\n        min_so_far = min_so_far + sum - n * max_element\n        if max_so_far > max_sum then\n            max_sum = max_so_far\n        end\n        if min_so_far < min_sum then\n            min_sum = min_so_far\n        end\n    end\n    return max_sum\nend",
    "  local max_sum = 0\n  local max_sum_so_far = 0\n  local max_element = a[1]\n  local sum = 0\n  local i = 0\n  local j = 0\n  local start = 0\n  local end_ = 0",
    "  local max_sum = 0\n  local curr_sum = 0\n  local max_val = 0\n  local curr_val = 0\n  local i = 0\n  local j = 0\n  for i = 1, n do\n    curr_sum = curr_sum + a[i]\n    curr_val = curr_val + i * a[i]\n    if curr_sum > max_sum then\n      max_sum = curr_sum\n      max_val = curr_val\n    elseif curr_sum == max_sum then\n      max_val = math.max(max_val, curr_val)\n    end\n    if curr_sum < 0 then\n      curr_sum = 0\n      curr_val = 0\n    end\n  end\n  local max_wrap = 0\n  local wrap_val = 0\n  for i = 1, n do\n    wrap_val = wrap_val + a[i]\n    max_wrap = max_wrap + i * a[i]\n  end\n  if k == 1 then\n    return max_val\n  end\n  max_val = max_val + (k - 2) * max_wrap\n  curr_sum = 0\n  curr_val = 0\n  for i = 1, n do\n    curr_sum = curr_sum + a[i]\n    curr_val = curr_val + i * a[i]\n    if curr_sum > max_sum then\n      max_sum = curr_sum\n      max_val = max_val + curr_val\n    elseif curr_sum == max_sum then\n      max_val = math.max(max_val, max_val + curr_val)\n    end\n    if curr_sum < 0 then\n      curr_sum = 0\n      curr_val = 0\n    end\n  end\n  return max_val\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  local max_sum = sum * k\n  local curr_prefix_sum = 0\n  local curr_suffix_sum = 0\n  for i = 1, n do\n    curr_prefix_sum = curr_prefix_sum + a[i]\n    max_so_far = math.max(max_so_far, curr_prefix_sum)\n    curr_suffix_sum = curr_suffix_sum + a[i]\n    max_ending_here = math.max(0, max_ending_here + a[i])\n  end\n  return math.max(max_sum, max_so_far + max_ending_here)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far * k\n  local max_wrap = sum * (k - 1) + max_so_far\n  return math.max(max_so_far, max_wrap)\nend",
    "  local sum = 0\n  local max_sum = 0\n  local max_ending_here = 0\n  local max_so_far = 0\n  local start = 0\n  local end_ = 0\n  local s = 0",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local i\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  local max_sum = sum * k\n  local curr_prefix = 0\n  local curr_suffix = 0\n  local i\n  for i = 0, n - 1 do\n    curr_prefix = curr_prefix + a[i]\n    curr_suffix = curr_suffix + a[n - i - 1]\n    max_sum = max_sum + curr_prefix\n    max_sum = max_sum + curr_suffix\n  end\n  return max_sum\nend",
    "  local max_sum = 0\n  local curr_sum = 0\n  local max_elem = 0\n  local curr_elem = 0\n  local i = 0\n  while i < n do\n    curr_elem = a[i]\n    if curr_elem > 0 then\n      curr_sum = curr_sum + curr_elem\n    else\n      curr_sum = 0\n    end\n    if curr_sum > max_sum then\n      max_sum = curr_sum\n    end\n    i = i + 1\n  end\n  if max_sum == 0 then\n    i = 0\n    while i < n do\n      curr_elem = a[i]\n      if curr_elem > max_elem then\n        max_elem = curr_elem\n      end\n      i = i + 1\n    end\n    return max_elem * k\n  end\n  local sum_of_all_elements = 0\n  i = 0\n  while i < n do\n    sum_of_all_elements = sum_of_all_elements + a[i]\n    i = i + 1\n  end\n  local max_wrap_sum = sum_of_all_elements * k\n  local min_wrap_sum = 0\n  i = 0\n  while i < n do\n    curr_elem = a[i]\n    if curr_elem > 0 then\n      min_wrap_sum = min_wrap_sum + curr_elem\n    end\n    i = i + 1\n  end\n  local max_wrap_sum = max_wrap_sum - min_wrap_sum\n  return math.max(max_sum, max_wrap_sum)\nend",
    "  local max_sum = 0\n  local curr_sum = 0\n  local max_sum_so_far = 0\n  local max_sum_ending_here = 0\n  local i = 0\n  local j = 0\n  local l = 0\n  local r = 0\n  local m = 0\n  local max_sum_ending_at_i = 0\n  local max_sum_ending_at_j = 0\n  local max_sum_ending_at_m = 0\n  local max_sum_ending_at_l = 0\n  local max_sum_ending_at_r = 0\n  local max_sum_ending_at_k = 0\n  local max_sum_ending_at_k_plus_1 = 0\n  local max_sum_ending_at_k_plus_2 = 0\n  local max_sum_ending_at_k_plus_3 = 0\n  local max_sum_ending_at_k_plus_4 = 0\n  local max_sum_ending_at_k_plus_5 = 0\n  local max_sum_ending_at_k_plus_6 = 0\n  local max_sum_ending_at_k_plus_7 = 0\n  local max_sum_ending_at_k_plus_8 = 0\n  local max_sum_ending_at_k_plus_9 = 0\n  local max_sum_ending_at_k_plus_10 = 0\n  local max_sum_ending_at_k_plus_11 = 0\n  local max_sum_ending_at_k_plus_12 = 0\n  local max_sum_ending_at_k_plus_13 = 0\n  local max_sum_ending_at_k_plus_14 = 0\n  local max_sum_ending_at_k_plus_15 = 0\n  local max_sum_ending_at_k_plus_16 = 0\n  local max_sum_ending_at_k_plus_17 = 0\n  local max_sum_ending_at_k_plus_18 = 0\n  local max_sum_ending_at_k_plus_19 = 0\n  local max_sum_ending_at_k_plus_",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local curr_sum = 0\n  local min_sum = 0\n  local result = 0",
    "  local max_sum = 0\n  local curr_sum = 0\n  local max_elem = 0\n  for i = 1, n do\n    max_elem = math.max(max_elem, a[i])\n    curr_sum = curr_sum + a[i]\n    if i % n == 0 then\n      curr_sum = curr_sum - max_elem\n    end\n    max_sum = math.max(max_sum, curr_sum)\n  end\n  return max_sum * k\nend",
    "  local max_sum = 0\n  local curr_sum = 0\n  local max_val = 0\n  for i = 1, n do\n    max_val = max_val + a[i]\n    max_sum = max_sum + i * a[i]\n  end\n  curr_sum = max_sum\n  for i = 1, n * (k - 1) do\n    curr_sum = curr_sum + max_val\n    curr_sum = curr_sum - (n * a[n - i + 1])\n    max_sum = max(max_sum, curr_sum)\n  end\n  return max_sum\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n  if max_wrap > max_so_far then\n    max_so_far = max_wrap\n  end\n  return max_so_far * k\nend",
    "  local max_sum = 0\n  local max_sum_so_far = 0\n  local sum = 0",
    "  local max_sum = 0\n  local max_ending_here = 0\n  local max_so_far = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  max_sum = max_so_far * k\n  local curr_sum = 0\n  local curr_val = 0\n  for i = 1, n do\n    curr_sum = curr_sum + a[i]\n  end\n  curr_val = curr_sum\n  for i = 1, n do\n    curr_val = curr_val - (a[i] * 2)\n    curr_sum = curr_sum + curr_val\n  end\n  max_sum = max_sum + curr_sum\n  return max_sum\nend",
    "  local max_sum = 0\n  local curr_sum = 0\n  local max_sum_so_far = 0\n  local max_sum_ending_here = 0\n  local max_sum_ending_here_prev = 0\n  local max_sum_ending_here_next = 0\n  local max_sum_ending_here_prev_prev = 0\n  local max_sum_ending_here_next_next = 0\n  local max_sum_ending_here_prev_prev_prev = 0\n  local max_sum_ending_here_next_next_next = 0\n  local max_sum_ending_here_prev_prev_prev_prev = 0\n  local max_sum_ending_here_next_next_next_next = 0\n  local max_sum_ending_here_prev_prev_prev_prev_prev = 0\n  local max_sum_ending_here_next_next_next_next_next = 0\n  local max_sum_ending_here_prev_prev_prev_prev_prev_prev = 0\n  local max_sum_ending_here_next_next_next_next_next_next = 0\n  local max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev = 0\n  local max_sum_ending_here_next_next_next_next_next_next_next = 0\n  local max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev = 0\n  local max_sum_ending_here_next_next_next_next_next_next_next_next = 0\n  local max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n  local max_sum_ending_here_next_next_next_next_next_next_next_next_next = 0\n  local max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n  local max_sum_ending_here_next_next_next_next_next_next_next_next_next_next = 0\n  local max_sum_ending_here_"
  ]
}