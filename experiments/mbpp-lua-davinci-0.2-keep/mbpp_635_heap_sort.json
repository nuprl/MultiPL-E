{
  "name": "mbpp_635_heap_sort",
  "language": "lua",
  "prompt": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local heap = Heap.new(iterable)\n  local result = {}\n  while not heap:is_empty() do\n    table.insert(result, heap:pop())\n  end\n  return result\nend",
    "    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend",
    "  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    table.insert(result, heap:pop())\n  end\n  return result\nend",
    "    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend",
    "    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend",
    "    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend",
    "    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend",
    "    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend",
    "  local heap = Heap.new(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend",
    "  local heap = Heap.new(iterable)\n  local result = {}\n  for _ = 1, #iterable do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend",
    "    local heap = Heap(iterable)\n    local sorted = {}\n    for i = 1, #heap do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend",
    "  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while not heap:is_empty() do\n    table.insert(result, heap:extract_min())\n  end\n  return result\nend",
    "  local heap = Heap(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    result[#result+1] = heap:pop()\n  end\n  return result\nend",
    "  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:push(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    table.insert(result, heap:pop())\n  end\n  return result\nend",
    "  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while not heap:is_empty() do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend",
    "    local heap = Heap(iterable)\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend",
    "    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend",
    "    local heap = Heap(iterable)\n    local result = {}\n    while not heap:empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend",
    "    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend",
    "  local heap = Heap()\n  for _, item in ipairs(iterable) do\n    heap:insert(item)\n  end\n  local result = {}\n  for i = 1, #iterable do\n    result[i] = heap:extract_min()\n  end\n  return result\nend"
  ]
}