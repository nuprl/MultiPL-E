{
  "name": "mbpp_450_extract_string",
  "language": "lua",
  "prompt": "-- Write a function to extract specified size of strings from a given list of string values.\nlocal function extract_string(str, l)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_string\n    lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 8), {'practice', 'solution'})\n    lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 6), {'Python'})\n    lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 9), {'exercises'})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local t = {}\n    for i = 1, #str do\n        if #str[i] == l then\n            table.insert(t, str[i])\n        end\n    end\n    return t\nend",
    "    local result = {}\n    for i = 1, #str do\n        if #str[i] == l then\n            table.insert(result, str[i])\n        end\n    end\n    return result\nend",
    "\tlocal res = {}\n\tfor i = 1, #str do\n\t\tif #str[i] == l then\n\t\t\tres[#res + 1] = str[i]\n\t\tend\n\tend\n\treturn res\nend",
    "\tlocal res = {}\n\tfor i = 1, #str do\n\t\tif #str[i] == l then\n\t\t\tres[#res + 1] = str[i]\n\t\tend\n\tend\n\treturn res\nend",
    "    local t = {}\n    for i = 1, #str do\n        if #str[i] == l then\n            t[#t + 1] = str[i]\n        end\n    end\n    return t\nend",
    "    local result = {}\n    for i = 1, #str do\n        if #str[i] == l then\n            result[#result + 1] = str[i]\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #str do\n        if #str[i] == l then\n            res[#res + 1] = str[i]\n        end\n    end\n    return res\nend",
    "    local t = {}\n    for i = 1, #str do\n        if #str[i] == l then\n            t[#t + 1] = str[i]\n        end\n    end\n    return t\nend",
    "\tlocal res = {}\n\tfor i = 1, #str do\n\t\tif #str[i] == l then\n\t\t\tres[#res + 1] = str[i]\n\t\tend\n\tend\n\treturn res\nend",
    "\tlocal t = {}\n\tfor i = 1, #str do\n\t\tif #str[i] == l then\n\t\t\tt[#t + 1] = str[i]\n\t\tend\n\tend\n\treturn t\nend",
    "\tlocal res = {}\n\tfor i = 1, #str do\n\t\tif #str[i] == l then\n\t\t\tres[#res + 1] = str[i]\n\t\tend\n\tend\n\treturn res\nend",
    "    local t = {}\n    for i = 1, l do\n        t[i] = str:sub(i, i)\n    end\n    return t\nend",
    "    local s = {}\n    for i = 1, l do\n        s[i] = str:sub(i, i)\n    end\n    return s\nend",
    "\tlocal t = {}\n\tfor i = 1, #str do\n\t\tif #str[i] == l then\n\t\t\ttable.insert(t, str[i])\n\t\tend\n\tend\n\treturn t\nend",
    "    local res = {}\n    for i = 1, #str do\n        if #str[i] == l then\n            res[#res + 1] = str[i]\n        end\n    end\n    return res\nend",
    "\tlocal t = {}\n\tfor i = 1, #str do\n\t\tif #str[i] == l then\n\t\t\tt[#t + 1] = str[i]\n\t\tend\n\tend\n\treturn t\nend",
    "\tlocal t = {}\n\tfor i = 1, #str do\n\t\tif #str[i] == l then\n\t\t\tt[#t + 1] = str[i]\n\t\tend\n\tend\n\treturn t\nend",
    "\tlocal res = {}\n\tfor i = 1, #str do\n\t\tif #str[i] == l then\n\t\t\ttable.insert(res, str[i])\n\t\tend\n\tend\n\treturn res\nend",
    "\tlocal res = {}\n\tfor i = 1, #str do\n\t\tif #str[i] == l then\n\t\t\tres[#res + 1] = str[i]\n\t\tend\n\tend\n\treturn res\nend",
    "  local t = {}\n  for i = 1, #str do\n    if #str[i] == l then\n      t[#t+1] = str[i]\n    end\n  end\n  return t\nend"
  ]
}