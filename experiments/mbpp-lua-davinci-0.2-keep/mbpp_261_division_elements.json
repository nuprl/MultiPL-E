{
  "name": "mbpp_261_division_elements",
  "language": "lua",
  "prompt": "-- Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nlocal function division_elements(test_tup1, test_tup2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = division_elements\n    lu.assertEquals(candidate({10, 4, 6, 9}, {5, 2, 3, 3}), {2, 2, 2, 3})\n    lu.assertEquals(candidate({12, 6, 8, 16}, {6, 3, 4, 4}), {2, 2, 2, 4})\n    lu.assertEquals(candidate({20, 14, 36, 18}, {5, 7, 6, 9}), {4, 2, 6, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] / test_tup2[i]\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_tup1 do\n    result[i] = test_tup1[i] / test_tup2[i]\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] / test_tup2[i]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] / test_tup2[i]\n    end\n    return result\nend",
    "    local new_tup = {}\n    for i = 1, #test_tup1 do\n        new_tup[i] = test_tup1[i] / test_tup2[i]\n    end\n    return new_tup\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] / test_tup2[i]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] / test_tup2[i]\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_tup1 do\n    result[i] = test_tup1[i] / test_tup2[i]\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] / test_tup2[i]\n    end\n    return result\nend",
    "    local new_tup = {}\n    for i = 1, #test_tup1 do\n        new_tup[i] = test_tup1[i] / test_tup2[i]\n    end\n    return new_tup\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] / test_tup2[i]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] / test_tup2[i]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] / test_tup2[i]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] / test_tup2[i]\n    end\n    return result\nend",
    "\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = test_tup1[i] / test_tup2[i]\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] / test_tup2[i]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] / test_tup2[i]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] / test_tup2[i]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] / test_tup2[i]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] / test_tup2[i]\n    end\n    return result\nend"
  ]
}