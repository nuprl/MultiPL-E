{
  "name": "mbpp_12_sort_matrix",
  "language": "lua",
  "prompt": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal order = {}\n\tfor i = 1, n do\n\t\torder[i] = i\n\tend\n\ttable.sort(order, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[order[i]]\n\tend\n\treturn result\nend",
    "\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(M, function(a, b) return sums[a] < sums[b] end)\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = sum(M[i])\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "    local rows = {}\n    for i = 1, #M do\n        local row = M[i]\n        local sum = 0\n        for j = 1, #row do\n            sum = sum + row[j]\n        end\n        rows[i] = {sum, row}\n    end\n    table.sort(rows, function(a, b) return a[1] < b[1] end)\n    return rows\nend",
    "\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = M[indices[i]]\n\tend\n\treturn sorted\nend",
    "\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = {}\n\t\tfor j = 1, m do\n\t\t\tresult[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn result\nend",
    "    local n, m = #M, #M[1]\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, m do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = {}\n        for j = 1, m do\n            sorted[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = {}\n        for j = 1, n do\n            sorted[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted\nend",
    "\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, m do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        local sum = 0\n        for j = 1, n do\n            sum = sum + M[i][j]\n        end\n        sums[i] = sum\n    end\n    table.sort(sums)\n    local result = {}\n    for i = 1, n do\n        local row = {}\n        for j = 1, n do\n            row[j] = M[sums[i]][j]\n        end\n        result[i] = row\n    end\n    return result\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        local sum = 0\n        for j = 1, n do\n            sum = sum + M[i][j]\n        end\n        sums[i] = sum\n    end\n    table.sort(sums)\n    local result = {}\n    for i = 1, n do\n        result[i] = {}\n        for j = 1, n do\n            result[i][j] = M[sums[i]][j]\n        end\n    end\n    return result\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local sorted = {}\n  for i = 1, n do\n    local min = math.huge\n    local min_idx = 0\n    for j = 1, n do\n      if sums[j] < min then\n        min = sums[j]\n        min_idx = j\n      end\n    end\n    table.insert(sorted, M[min_idx])\n    sums[min_idx] = math.huge\n  end\n  return sorted\nend",
    "    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(M, function(a, b) return sums[a] < sums[b] end)\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local result = {}\n  for i = 1, n do\n    result[i] = {}\n    for j = 1, n do\n      result[i][j] = M[sums[i]][j]\n    end\n  end\n  return result\nend",
    "\tlocal function compare(a, b)\n\t\tlocal sum_a = 0\n\t\tlocal sum_b = 0\n\t\tfor i = 1, #a do\n\t\t\tsum_a = sum_a + a[i]\n\t\t\tsum_b = sum_b + b[i]\n\t\tend\n\t\treturn sum_a < sum_b\n\tend\n\ttable.sort(M, compare)\n\treturn M\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = {}\n        for j = 1, n do\n            sorted[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local sorted_indices = sort_indices(sums)\n    local sorted_matrix = {}\n    for i = 1, n do\n        sorted_matrix[i] = M[sorted_indices[i]]\n    end\n    return sorted_matrix\nend",
    "\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, m do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = sum(M[i])\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "    local n = #M\n    local m = #M[1]\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, m do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    for i = 1, n - 1 do\n        for j = i + 1, n do\n            if sums[i] > sums[j] then\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            end\n        end\n    end\n    return M\nend",
    "\tlocal function compare(a, b)\n\t\tlocal sum_a = 0\n\t\tlocal sum_b = 0\n\t\tfor i = 1, #a do\n\t\t\tsum_a = sum_a + a[i]\n\t\t\tsum_b = sum_b + b[i]\n\t\tend\n\t\treturn sum_a < sum_b\n\tend\n\ttable.sort(M, compare)\n\treturn M\nend",
    "\tlocal function compare_rows(a, b)\n\t\treturn sum(a) < sum(b)\n\tend\n\ttable.sort(M, compare_rows)\n\treturn M\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local sorted = {}\n  for i = 1, n do\n    local min = math.huge\n    local min_index = 0\n    for j = 1, n do\n      if sums[j] < min then\n        min = sums[j]\n        min_index = j\n      end\n    end\n    sorted[i] = M[min_index]\n    sums[min_index] = math.huge\n  end\n  return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n - 1 do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[i] > sums[j] then\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\tend\n\t\tend\n\tend\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted_matrix = {}\n\tfor i = 1, n do\n\t\tsorted_matrix[i] = {}\n\t\tfor j = 1, n do\n\t\t\tsorted_matrix[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted_matrix\nend",
    "    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, #M do\n        for j = 1, #M do\n            if sums[i] == M[j][1] + M[j][2] + M[j][3] then\n                sorted[i] = M[j]\n                break\n            end\n        end\n    end\n    return sorted\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    local sum = 0\n    for j = 1, n do\n      sum = sum + M[i][j]\n    end\n    sums[i] = sum\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    for j = 1, n do\n      if sums[i] == M[j][1] + M[j][2] + M[j][3] then\n        table.insert(sorted, M[j])\n        break\n      end\n    end\n  end\n  return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, n - 1 do\n\t\t\tif sums[j] > sums[j + 1] then\n\t\t\t\tsums[j], sums[j + 1] = sums[j + 1], sums[j]\n\t\t\t\tM[j], M[j + 1] = M[j + 1], M[j]\n\t\t\tend\n\t\tend\n\tend\n\treturn M\nend",
    "    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(M, function(a, b) return sums[a] < sums[b] end)\n    return M\nend",
    "    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(M, function(a, b) return sums[a] < sums[b] end)\nend",
    "    local n, m = #M, #M[1]\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, m do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums, function(a, b) return a < b end)\n    local sorted = {}\n    for i = 1, n do\n        for j = 1, n do\n            if sums[i] == sums[j] then\n                sorted[i] = M[j]\n                break\n            end\n        end\n    end\n    return sorted\nend",
    "\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal sorted_matrix = {}\n\tfor i = 1, n do\n\t\tsorted_matrix[i] = {}\n\t\tfor j = 1, m do\n\t\t\tsorted_matrix[i][j] = M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, n - 1 do\n\t\t\tif sums[j] > sums[j + 1] then\n\t\t\t\tlocal temp = sums[j]\n\t\t\t\tsums[j] = sums[j + 1]\n\t\t\t\tsums[j + 1] = temp\n\t\t\t\tfor k = 1, m do\n\t\t\t\t\ttemp = sorted_matrix[j][k]\n\t\t\t\t\tsorted_matrix[j][k] = sorted_matrix[j + 1][k]\n\t\t\t\t\tsorted_matrix[j + 1][k] = temp\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted_matrix\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tlocal min = math.huge\n\t\tlocal min_index = 0\n\t\tfor j = 1, n do\n\t\t\tif sums[j] < min then\n\t\t\t\tmin = sums[j]\n\t\t\t\tmin_index = j\n\t\t\tend\n\t\tend\n\t\tsorted[i] = M[min_index]\n\t\tsums[min_index] = math.huge\n\tend\n\treturn sorted\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = {}\n    for j = 1, n do\n      sorted[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted\nend",
    "    local n, m = #M, #M[1]\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, m do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local result = {}\n    for i = 1, n do\n        for j = 1, n do\n            if sums[i] == sums[j] then\n                result[i] = M[j]\n            end\n        end\n    end\n    return result\nend",
    "  local sums = {}\n  for i = 1, #M do\n    sums[i] = 0\n    for j = 1, #M[i] do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, #sums do\n    for j = 1, #M do\n      if sums[i] == 0 then\n        break\n      end\n      if sums[i] == (function()\n        local sum = 0\n        for k = 1, #M[j] do\n          sum = sum + M[j][k]\n        end\n        return sum\n      end)() then\n        table.insert(sorted, M[j])\n        sums[i] = 0\n        break\n      end\n    end\n  end\n  return sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    local indices = {}\n    for i = 1, n do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local result = {}\n    for i = 1, n do\n        result[i] = M[indices[i]]\n    end\n    return result\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = i\n\tend\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[sorted[i]] > sums[sorted[j]] then\n\t\t\t\tsorted[i], sorted[j] = sorted[j], sorted[i]\n\t\t\tend\n\t\tend\n\tend\n\tlocal sorted_M = {}\n\tfor i = 1, n do\n\t\tsorted_M[i] = {}\n\t\tfor j = 1, n do\n\t\t\tsorted_M[i][j] = M[sorted[i]][j]\n\t\tend\n\tend\n\treturn sorted_M\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    for i = 1, n do\n        for j = i + 1, n do\n            if sums[i] > sums[j] then\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            end\n        end\n    end\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "\tlocal N = #M\n\tlocal sums = {}\n\tfor i = 1, N do\n\t\tsums[i] = 0\n\t\tfor j = 1, N do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, N do\n\t\tfor j = i + 1, N do\n\t\t\tif sums[i] > sums[j] then\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\tend\n\t\tend\n\tend\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = {}\n        for j = 1, n do\n            sorted[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted\nend",
    "\tlocal t = {}\n\tfor i = 1, #M do\n\t\tt[i] = {M[i], sum(M[i])}\n\tend\n\ttable.sort(t, function(a, b) return a[2] < b[2] end)\n\tfor i = 1, #M do\n\t\tM[i] = t[i][1]\n\tend\n\treturn M\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    table.sort(M, compare)\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local sorted = {}\n  for i = 1, n do\n    local min = math.huge\n    local min_index = 0\n    for j = 1, n do\n      if sums[j] < min then\n        min = sums[j]\n        min_index = j\n      end\n    end\n    sorted[i] = M[min_index]\n    sums[min_index] = math.huge\n  end\n  return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, n do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend",
    "\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal sorted_matrix = {}\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tlocal sum = 0\n\t\t\tfor k = 1, m do\n\t\t\t\tsum = sum + M[j][k]\n\t\t\tend\n\t\t\tif sums[i] == sum then\n\t\t\t\tsorted_matrix[i] = M[j]\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted_matrix\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function cmp(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal order = {}\n\tfor i = 1, n do\n\t\torder[i] = i\n\tend\n\ttable.sort(order, cmp)\n\tlocal M2 = {}\n\tfor i = 1, n do\n\t\tM2[i] = {}\n\t\tfor j = 1, n do\n\t\t\tM2[i][j] = M[order[i]][j]\n\t\tend\n\tend\n\treturn M2\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = sum(M[i])\n\tend\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tlocal min = math.min(unpack(sums))\n\t\tfor j = 1, n do\n\t\t\tif sums[j] == min then\n\t\t\t\tsorted[#sorted + 1] = M[j]\n\t\t\t\tsums[j] = math.huge\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "    local rows = {}\n    for i = 1, #M do\n        local row = M[i]\n        local sum = 0\n        for j = 1, #row do\n            sum = sum + row[j]\n        end\n        rows[i] = {sum, row}\n    end\n    table.sort(rows, function(a, b) return a[1] < b[1] end)\n    for i = 1, #rows do\n        M[i] = rows[i][2]\n    end\nend",
    "    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, #M do\n        for j = 1, #M do\n            if sums[i] == sums[j] then\n                sorted[i] = M[j]\n                break\n            end\n        end\n    end\n    return sorted\nend",
    "\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function cmp(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal sorted = {}\n\tfor i = 1, #M do\n\t\tsorted[i] = i\n\tend\n\ttable.sort(sorted, cmp)\n\tlocal result = {}\n\tfor i = 1, #M do\n\t\tresult[i] = M[sorted[i]]\n\tend\n\treturn result\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local result = {}\n  for i = 1, n do\n    result[i] = {}\n    for j = 1, n do\n      result[i][j] = M[sums[i]][j]\n    end\n  end\n  return result\nend",
    "  local function cmp(a, b)\n    return a[1] < b[1]\n  end\n  local t = {}\n  for i = 1, #M do\n    t[i] = {M[i][1] + M[i][2] + M[i][3], M[i]}\n  end\n  table.sort(t, cmp)\n  for i = 1, #M do\n    M[i] = t[i][2]\n  end\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = {}\n    for j = 1, n do\n      sorted[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local res = {}\n    for i = 1, n do\n        res[i] = {}\n        for j = 1, n do\n            res[i][j] = M[sums[i]][j]\n        end\n    end\n    return res\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[j] < sums[i] then\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\tend\n\t\tend\n\tend\nend",
    "    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    return sums\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted_matrix = {}\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tif sums[i] == M[j][1] + M[j][2] + M[j][3] then\n\t\t\t\tsorted_matrix[i] = M[j]\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted_matrix\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local sorted = {}\n    for i = 1, n do\n        local min = math.huge\n        local min_index = 0\n        for j = 1, n do\n            if sums[j] < min then\n                min = sums[j]\n                min_index = j\n            end\n        end\n        table.insert(sorted, M[min_index])\n        sums[min_index] = math.huge\n    end\n    return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[i] > sums[j] then\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\tend\n\t\tend\n\tend\nend",
    "    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(M, function(a, b) return sums[a] < sums[b] end)\nend",
    "    local function compare(a, b)\n        local sum_a = 0\n        local sum_b = 0\n        for i = 1, #a do\n            sum_a = sum_a + a[i]\n            sum_b = sum_b + b[i]\n        end\n        return sum_a < sum_b\n    end\n    table.sort(M, compare)\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, n do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        local sum = 0\n        for j = 1, n do\n            sum = sum + M[i][j]\n        end\n        sums[i] = sum\n    end\n    local function compare(a, b)\n        return sums[a] < sums[b]\n    end\n    local indices = {}\n    for i = 1, n do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = M[indices[i]]\n    end\n    return sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    local indices = {}\n    for i = 1, n do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = M[indices[i]]\n    end\n    return sorted\nend",
    "  local N = #M\n  local sums = {}\n  for i = 1, N do\n    sums[i] = sum(M[i])\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  table.sort(sums, compare)\n  local sorted = {}\n  for i = 1, N do\n    sorted[i] = M[sums[i]]\n  end\n  return sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function cmp(i, j)\n        return sums[i] < sums[j]\n    end\n    table.sort(sums, cmp)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = M[sums[i]]\n    end\n    return sorted\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = {}\n    for j = 1, n do\n      sorted[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted\nend",
    "\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(M, function(a, b) return sums[a] < sums[b] end)\nend",
    "    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    local indices = {}\n    for i = 1, #M do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local sorted = {}\n    for i = 1, #M do\n        sorted[i] = M[indices[i]]\n    end\n    return sorted\nend",
    "    local sum = {}\n    for i = 1, #M do\n        sum[i] = 0\n        for j = 1, #M[i] do\n            sum[i] = sum[i] + M[i][j]\n        end\n    end\n    table.sort(M, function(a, b) return sum[a] < sum[b] end)\n    return M\nend",
    "\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = M[indices[i]]\n\tend\n\treturn sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        local sum = 0\n        for j = 1, n do\n            sum = sum + M[i][j]\n        end\n        sums[i] = sum\n    end\n    local sorted = {}\n    for i = 1, n do\n        local min = math.huge\n        local min_index = 0\n        for j = 1, n do\n            if sums[j] < min then\n                min = sums[j]\n                min_index = j\n            end\n        end\n        sums[min_index] = math.huge\n        sorted[i] = M[min_index]\n    end\n    return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local sorted = {}\n  for i = 1, n do\n    local min = math.huge\n    local min_index = 0\n    for j = 1, n do\n      if sums[j] < min then\n        min = sums[j]\n        min_index = j\n      end\n    end\n    table.insert(sorted, M[min_index])\n    sums[min_index] = math.huge\n  end\n  return sorted\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = sum(M[i])\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  local indices = {}\n  for i = 1, n do\n    indices[i] = i\n  end\n  table.sort(indices, compare)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = M[indices[i]]\n  end\n  return sorted\nend",
    "\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tif sums[i] == sums[j] then\n\t\t\t\tsorted[i] = M[j]\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted\nend",
    "\tlocal function compare(a, b)\n\t\tlocal sum_a = 0\n\t\tlocal sum_b = 0\n\t\tfor i = 1, #a do\n\t\t\tsum_a = sum_a + a[i]\n\t\t\tsum_b = sum_b + b[i]\n\t\tend\n\t\treturn sum_a < sum_b\n\tend\n\ttable.sort(M, compare)\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal ret = {}\n\tfor i = 1, n do\n\t\tret[i] = {}\n\t\tfor j = 1, m do\n\t\t\tret[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn ret\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    for j = 1, n do\n      if sums[i] == 0 then\n        break\n      end\n      if sums[i] == sums[i + 1] then\n        break\n      end\n      for k = 1, n do\n        if sums[i] == 0 then\n          break\n        end\n        if sums[i] == sums[i + 1] then\n          break\n        end\n        if M[j][k] ~= 0 then\n          sorted[i] = M[j][k]\n          M[j][k] = 0\n          sums[i] = sums[i] - sorted[i]\n          break\n        end\n      end\n    end\n  end\n  return sorted\nend",
    "    local sorted = {}\n    for i = 1, #M do\n        sorted[i] = {M[i], sum(M[i])}\n    end\n    table.sort(sorted, function(a, b) return a[2] < b[2] end)\n    for i = 1, #M do\n        M[i] = sorted[i][1]\n    end\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, n - i do\n\t\t\tif sums[j] > sums[j + 1] then\n\t\t\t\tsums[j], sums[j + 1] = sums[j + 1], sums[j]\n\t\t\t\tM[j], M[j + 1] = M[j + 1], M[j]\n\t\t\tend\n\t\tend\n\tend\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = {}\n\t\tfor j = 1, n do\n\t\t\tresult[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, #sums do\n\t\tfor j = 1, #M do\n\t\t\tif sums[i] == 0 then\n\t\t\t\tsorted[i] = M[j]\n\t\t\t\tM[j] = {}\n\t\t\t\tbreak\n\t\t\telseif sums[i] == sums[i] - M[j][1] then\n\t\t\t\tsorted[i] = M[j]\n\t\t\t\ttable.remove(M[j], 1)\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted\nend",
    "\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local result = {}\n  for i = 1, n do\n    result[i] = {}\n    for j = 1, n do\n      result[i][j] = M[sums[i]][j]\n    end\n  end\n  return result\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "\tlocal rows = {}\n\tfor i = 1, #M do\n\t\tlocal row = M[i]\n\t\tlocal sum = 0\n\t\tfor j = 1, #row do\n\t\t\tsum = sum + row[j]\n\t\tend\n\t\trows[i] = {sum, row}\n\tend\n\ttable.sort(rows, function(a, b) return a[1] < b[1] end)\n\tfor i = 1, #rows do\n\t\tM[i] = rows[i][2]\n\tend\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local result = {}\n    for i = 1, n do\n        result[i] = {}\n        for j = 1, n do\n            result[i][j] = M[sums[i]][j]\n        end\n    end\n    return result\nend",
    "\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tlocal sum = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, #sums do\n\t\tfor j = 1, #M do\n\t\t\tif sums[i] == M[j][1] + M[j][2] + M[j][3] then\n\t\t\t\tsorted[i] = M[j]\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = sum(M[i])\n\tend\n\tlocal perm = sort_perm(sums)\n\tlocal M2 = {}\n\tfor i = 1, n do\n\t\tM2[i] = M[perm[i]]\n\tend\n\treturn M2\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal order = {}\n\tfor i = 1, n do\n\t\torder[i] = i\n\tend\n\ttable.sort(order, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[order[i]]\n\tend\n\treturn result\nend",
    "\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function cmp(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, cmp)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted_matrix = {}\n\tfor i = 1, n do\n\t\tsorted_matrix[i] = {}\n\t\tfor j = 1, n do\n\t\t\tsorted_matrix[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted_matrix\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local sorted = {}\n    for i = 1, n do\n        local min = math.huge\n        local min_index = 0\n        for j = 1, n do\n            if sums[j] < min then\n                min = sums[j]\n                min_index = j\n            end\n        end\n        table.insert(sorted, M[min_index])\n        sums[min_index] = math.huge\n    end\n    return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, n do\n\t\t\tsorted[i][j] = M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tfor k = 1, n do\n\t\t\t\tif sums[j] == M[k][i] then\n\t\t\t\t\tsorted[j][i] = M[k][i]\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted_matrix = {}\n  for i = 1, n do\n    sorted_matrix[i] = {}\n    for j = 1, n do\n      sorted_matrix[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted_matrix\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i=1,n do\n\t\tsums[i] = 0\n\t\tfor j=1,n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(M, function(a,b) return sums[a] < sums[b] end)\nend",
    "    local function compare(a, b)\n        local sum_a = 0\n        local sum_b = 0\n        for i = 1, #a do\n            sum_a = sum_a + a[i]\n            sum_b = sum_b + b[i]\n        end\n        return sum_a < sum_b\n    end\n    table.sort(M, compare)\nend",
    "  local sums = {}\n  for i = 1, #M do\n    sums[i] = 0\n    for j = 1, #M[i] do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(M, function(a, b) return sums[a] < sums[b] end)\n  return M\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = {}\n    for j = 1, n do\n      sorted[i][j] = M[i][j]\n    end\n  end\n  for i = 1, n do\n    for j = 1, n do\n      sorted[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local sorted = {}\n    for i = 1, n do\n        local min = math.huge\n        local min_index = 0\n        for j = 1, n do\n            if sums[j] < min then\n                min = sums[j]\n                min_index = j\n            end\n        end\n        sorted[i] = M[min_index]\n        sums[min_index] = math.huge\n    end\n    return sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    table.sort(M, compare)\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\ttable.sort(sums, compare)\n\tlocal sorted_matrix = {}\n\tfor i = 1, n do\n\t\tsorted_matrix[i] = M[sums[i]]\n\tend\n\treturn sorted_matrix\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = {}\n    for j = 1, n do\n      sorted[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function cmp(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal order = {}\n\tfor i = 1, n do\n\t\torder[i] = i\n\tend\n\ttable.sort(order, cmp)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[order[i]]\n\tend\n\treturn result\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = sum(M[i])\n\tend\n\tlocal indices = sort_indices(sums)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, m do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend",
    "\tlocal function compare(a, b)\n\t\tlocal sum_a = 0\n\t\tlocal sum_b = 0\n\t\tfor i = 1, #a do\n\t\t\tsum_a = sum_a + a[i]\n\t\t\tsum_b = sum_b + b[i]\n\t\tend\n\t\treturn sum_a < sum_b\n\tend\n\ttable.sort(M, compare)\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    table.sort(sums, compare)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = M[sums[i]]\n    end\n    return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tif sums[i] == 0 then\n\t\t\t\tsorted[i] = M[i]\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tif sums[i] == M[j][1] + M[j][2] + M[j][3] then\n\t\t\t\tsorted[i] = M[j]\n\t\t\t\tM[j][1] = 0\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted\nend",
    "  local N = #M\n  local sums = {}\n  for i = 1, N do\n    sums[i] = 0\n    for j = 1, N do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  local indices = {}\n  for i = 1, N do\n    indices[i] = i\n  end\n  table.sort(indices, compare)\n  local sorted = {}\n  for i = 1, N do\n    sorted[i] = M[indices[i]]\n  end\n  return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\ttable.sort(sums, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[sums[i]]\n\tend\n\treturn result\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  local indices = {}\n  for i = 1, n do\n    indices[i] = i\n  end\n  table.sort(indices, compare)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = M[indices[i]]\n  end\n  return sorted\nend",
    "\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, m do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend",
    "\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tlocal sum = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(M, function(a, b) return sums[a] < sums[b] end)\n\treturn M\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tlocal min = math.huge\n\t\tlocal min_idx = 0\n\t\tfor j = 1, n do\n\t\t\tif sums[j] < min then\n\t\t\t\tmin = sums[j]\n\t\t\t\tmin_idx = j\n\t\t\tend\n\t\tend\n\t\tsorted[i] = M[min_idx]\n\t\tsums[min_idx] = math.huge\n\tend\n\treturn sorted\nend",
    "\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, #M do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal sorted = {}\n\tfor i = 1, #M do\n\t\tsorted[i] = M[indices[i]]\n\tend\n\treturn sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    table.sort(sums, compare)\n    local sorted_matrix = {}\n    for i = 1, n do\n        sorted_matrix[i] = M[sums[i]]\n    end\n    return sorted_matrix\nend",
    "  local sums = {}\n  for i = 1, #M do\n    sums[i] = 0\n    for j = 1, #M[i] do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted_matrix = {}\n  for i = 1, #sums do\n    for j = 1, #M do\n      if sums[i] == 0 then\n        for k = 1, #M[j] do\n          sums[i] = sums[i] + M[j][k]\n        end\n      end\n      if sums[i] == 0 then\n        sorted_matrix[i] = M[j]\n        break\n      end\n    end\n  end\n  return sorted_matrix\nend",
    "\tlocal rows = {}\n\tfor i = 1, #M do\n\t\trows[i] = {sum = 0, row = M[i]}\n\t\tfor j = 1, #M[i] do\n\t\t\trows[i].sum = rows[i].sum + M[i][j]\n\t\tend\n\tend\n\ttable.sort(rows, function(a, b) return a.sum < b.sum end)\n\tfor i = 1, #rows do\n\t\tM[i] = rows[i].row\n\tend\nend",
    "  local N = #M\n  local sums = {}\n  for i = 1, N do\n    sums[i] = 0\n    for j = 1, N do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function cmp(a, b)\n    return sums[a] < sums[b]\n  end\n  local order = {}\n  for i = 1, N do\n    order[i] = i\n  end\n  table.sort(order, cmp)\n  local M2 = {}\n  for i = 1, N do\n    M2[i] = {}\n    for j = 1, N do\n      M2[i][j] = M[order[i]][j]\n    end\n  end\n  return M2\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indexes = {}\n\tfor i = 1, n do\n\t\tindexes[i] = i\n\tend\n\ttable.sort(indexes, compare)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = M[indexes[i]]\n\tend\n\treturn sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n - 1 do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[i] > sums[j] then\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\tend\n\t\tend\n\tend\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    table.sort(M, compare)\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local perm = {}\n  for i = 1, n do\n    perm[i] = i\n  end\n  table.sort(perm, function(i, j) return sums[i] < sums[j] end)\n  local result = {}\n  for i = 1, n do\n    result[i] = M[perm[i]]\n  end\n  return result\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = {}\n    for j = 1, n do\n      sorted[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted\nend",
    "    local t = {}\n    for i = 1, #M do\n        local sum = 0\n        for j = 1, #M[i] do\n            sum = sum + M[i][j]\n        end\n        t[i] = {sum, i}\n    end\n    table.sort(t, function(a, b) return a[1] < b[1] end)\n    local sorted_M = {}\n    for i = 1, #t do\n        sorted_M[i] = M[t[i][2]]\n    end\n    return sorted_M\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, n do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, n do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend",
    "\tlocal t = {}\n\tfor i = 1, #M do\n\t\tlocal sum = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tt[i] = {sum, i}\n\tend\n\ttable.sort(t, function(a, b) return a[1] < b[1] end)\n\tlocal M_sorted = {}\n\tfor i = 1, #M do\n\t\tM_sorted[i] = M[t[i][2]]\n\tend\n\treturn M_sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    table.sort(sums, compare)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = M[sums[i]]\n    end\n    return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = sum(M[i])\n\tend\n\tlocal indices = sort_indices(sums)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal new_M = {}\n\tfor i = 1, n do\n\t\tnew_M[i] = {}\n\t\tfor j = 1, n do\n\t\t\tnew_M[i][j] = M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tfor k = 1, n do\n\t\t\t\tif sums[k] == new_M[i][j] then\n\t\t\t\t\tnew_M[i][j] = k\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn new_M\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  table.sort(M, compare)\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    for i = 1, n do\n        for j = i + 1, n do\n            if sums[i] > sums[j] then\n                local temp = M[i]\n                M[i] = M[j]\n                M[j] = temp\n                local temp = sums[i]\n                sums[i] = sums[j]\n                sums[j] = temp\n            end\n        end\n    end\nend",
    "  local function compare(a, b)\n    return sum(a) < sum(b)\n  end\n  table.sort(M, compare)\n  return M\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums, function(a, b) return a < b end)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = {}\n        for j = 1, n do\n            sorted[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal M2 = {}\n\tfor i = 1, n do\n\t\tM2[i] = {}\n\t\tfor j = 1, n do\n\t\t\tM2[i][j] = M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tM2[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn M2\nend",
    "    local t = {}\n    for i = 1, #M do\n        t[i] = {M[i], sum(M[i])}\n    end\n    table.sort(t, function(a, b) return a[2] < b[2] end)\n    for i = 1, #M do\n        M[i] = t[i][1]\n    end\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = {}\n    for j = 1, n do\n      sorted[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted\nend",
    "    local function compare(a, b)\n        local sum_a = 0\n        local sum_b = 0\n        for i = 1, #a do\n            sum_a = sum_a + a[i]\n            sum_b = sum_b + b[i]\n        end\n        return sum_a < sum_b\n    end\n    table.sort(M, compare)\nend",
    "    local function compare(a, b)\n        return a[1] < b[1]\n    end",
    "\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal result = {}\n\tfor i = 1, #M do\n\t\tfor j = 1, #M do\n\t\t\tif sums[i] == M[j][1] + M[j][2] + M[j][3] then\n\t\t\t\ttable.insert(result, M[j])\n\t\t\t\tM[j] = nil\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, n do\n\t\t\tsorted[i][j] = M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend",
    "  local function compare(a, b)\n    local sum_a = 0\n    local sum_b = 0\n    for i = 1, #a do\n      sum_a = sum_a + a[i]\n      sum_b = sum_b + b[i]\n    end\n    return sum_a < sum_b\n  end\n  table.sort(M, compare)\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function cmp(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal idx = {}\n\tfor i = 1, n do\n\t\tidx[i] = i\n\tend\n\ttable.sort(idx, cmp)\n\tlocal M2 = {}\n\tfor i = 1, n do\n\t\tM2[i] = M[idx[i]]\n\tend\n\treturn M2\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    for i = 1, n - 1 do\n        for j = i + 1, n do\n            if sums[i] > sums[j] then\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            end\n        end\n    end\nend",
    "\tlocal function compare(a, b)\n\t\tlocal sum_a = 0\n\t\tlocal sum_b = 0\n\t\tfor i = 1, #a do\n\t\t\tsum_a = sum_a + a[i]\n\t\t\tsum_b = sum_b + b[i]\n\t\tend\n\t\treturn sum_a < sum_b\n\tend\n\ttable.sort(M, compare)\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted_matrix = {}\n  for i = 1, n do\n    sorted_matrix[i] = {}\n    for j = 1, n do\n      sorted_matrix[i][j] = M[i][j]\n    end\n  end\n  for i = 1, n do\n    for j = 1, n do\n      for k = 1, n do\n        if sums[i] == sums[k] then\n          for l = 1, n do\n            sorted_matrix[i][l] = M[k][l]\n          end\n        end\n      end\n    end\n  end\n  return sorted_matrix\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local sorted = {}\n    for i = 1, n do\n        local min = math.huge\n        local min_index = 0\n        for j = 1, n do\n            if sums[j] < min then\n                min = sums[j]\n                min_index = j\n            end\n        end\n        table.insert(sorted, M[min_index])\n        sums[min_index] = math.huge\n    end\n    return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i=1,n do\n\t\tsums[i] = 0\n\t\tfor j=1,n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a,b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i=1,n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices,compare)\n\tlocal result = {}\n\tfor i=1,n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  table.sort(M, compare)\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    for i = 1, n do\n        for j = 1, n do\n            M[i][j] = sums[i]\n        end\n    end\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[i] > sums[j] then\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\tend\n\t\tend\n\tend\nend",
    "\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal sorted_matrix = {}\n\tfor i = 1, n do\n\t\tsorted_matrix[i] = {}\n\t\tfor j = 1, m do\n\t\t\tsorted_matrix[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted_matrix\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = sum(M[i])\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  local indices = {}\n  for i = 1, n do\n    indices[i] = i\n  end\n  table.sort(indices, compare)\n  local result = {}\n  for i = 1, n do\n    result[i] = M[indices[i]]\n  end\n  return result\nend",
    "  local t = {}\n  for i = 1, #M do\n    t[i] = {M[i], sum(M[i])}\n  end\n  table.sort(t, function(a, b) return a[2] < b[2] end)\n  for i = 1, #M do\n    M[i] = t[i][1]\n  end\nend",
    "\tlocal rows = {}\n\tfor i = 1, #M do\n\t\trows[i] = {sum = 0, row = M[i]}\n\t\tfor j = 1, #M[i] do\n\t\t\trows[i].sum = rows[i].sum + M[i][j]\n\t\tend\n\tend\n\ttable.sort(rows, function(a, b) return a.sum < b.sum end)\n\tfor i = 1, #rows do\n\t\tM[i] = rows[i].row\n\tend\nend",
    "    local sum = {}\n    for i = 1, #M do\n        sum[i] = 0\n        for j = 1, #M[i] do\n            sum[i] = sum[i] + M[i][j]\n        end\n    end\n    table.sort(M, function(a, b) return sum[a] < sum[b] end)\n    return M\nend",
    "\tlocal function compare(a, b)\n\t\tlocal sum_a = 0\n\t\tlocal sum_b = 0\n\t\tfor i = 1, #a do\n\t\t\tsum_a = sum_a + a[i]\n\t\t\tsum_b = sum_b + b[i]\n\t\tend\n\t\treturn sum_a < sum_b\n\tend\n\ttable.sort(M, compare)\nend",
    "    local function compare(a, b)\n        return a.sum < b.sum\n    end\n    local rows = {}\n    for i = 1, #M do\n        local sum = 0\n        for j = 1, #M[i] do\n            sum = sum + M[i][j]\n        end\n        table.insert(rows, {sum = sum, row = M[i]})\n    end\n    table.sort(rows, compare)\n    for i = 1, #rows do\n        M[i] = rows[i].row\n    end\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local sorted = {}\n    for i = 1, n do\n        local min = math.huge\n        local min_index = 0\n        for j = 1, n do\n            if sums[j] < min then\n                min = sums[j]\n                min_index = j\n            end\n        end\n        table.insert(sorted, M[min_index])\n        sums[min_index] = math.huge\n    end\n    return sorted\nend",
    "  local sums = {}\n  for i = 1, #M do\n    sums[i] = 0\n    for j = 1, #M[i] do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums, function(a, b) return a < b end)\n  local sorted = {}\n  for i = 1, #M do\n    for j = 1, #M do\n      if sums[i] == M[j][1] + M[j][2] then\n        table.insert(sorted, M[j])\n        break\n      end\n    end\n  end\n  return sorted\nend",
    "    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, #sums do\n        for j = 1, #M do\n            if sums[i] == 0 then\n                for k = 1, #M[j] do\n                    sums[i] = sums[i] + M[j][k]\n                end\n            end\n            if sums[i] == 0 then\n                sorted[i] = M[j]\n            end\n        end\n    end\n    return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = {}\n    for j = 1, n do\n      sorted[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted\nend",
    "\tlocal sums = {}\n\tfor i, row in ipairs(M) do\n\t\tsums[i] = sum(row)\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i, sum in ipairs(sums) do\n\t\tfor j, row in ipairs(M) do\n\t\t\tif sum(row) == sum then\n\t\t\t\tsorted[i] = row\n\t\t\t\tM[j] = nil\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted\nend",
    "  local sums = {}\n  for i = 1, #M do\n    sums[i] = sum(M[i])\n  end\n  local sorted = {}\n  for i = 1, #M do\n    local min = math.min(unpack(sums))\n    local index = find(sums, min)\n    table.insert(sorted, M[index])\n    table.remove(sums, index)\n    table.remove(M, index)\n  end\n  return sorted\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = {}\n    for j = 1, n do\n      sorted[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        local sum = 0\n        for j = 1, n do\n            sum = sum + M[i][j]\n        end\n        sums[i] = sum\n    end\n    local function compare(a, b)\n        return sums[a] < sums[b]\n    end\n    local indices = {}\n    for i = 1, n do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = M[indices[i]]\n    end\n    return sorted\nend",
    "\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, #sums do\n\t\tfor j = 1, #M do\n\t\t\tif sums[i] == 0 then\n\t\t\t\tsorted[i] = M[j]\n\t\t\t\tsums[i] = -1\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted\nend",
    "  local sums = {}\n  for i = 1, #M do\n    sums[i] = 0\n    for j = 1, #M[i] do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function compare(a, b)\n    return sums[a] < sums[b]\n  end\n  local indices = {}\n  for i = 1, #M do\n    indices[i] = i\n  end\n  table.sort(indices, compare)\n  local sorted = {}\n  for i = 1, #M do\n    sorted[i] = M[indices[i]]\n  end\n  return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal order = {}\n\tfor i = 1, n do\n\t\torder[i] = i\n\tend\n\ttable.sort(order, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[order[i]]\n\tend\n\treturn result\nend",
    "    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(a, b)\n        return sums[a] < sums[b]\n    end\n    local indices = {}\n    for i = 1, #M do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local sorted = {}\n    for i = 1, #M do\n        sorted[i] = M[indices[i]]\n    end\n    return sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local sorted = {}\n    for i = 1, n do\n        local min = math.min(unpack(sums))\n        local index = find(sums, min)\n        table.insert(sorted, M[index])\n        sums[index] = math.huge\n    end\n    return sorted\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted_matrix = {}\n  for i = 1, n do\n    sorted_matrix[i] = {}\n    for j = 1, n do\n      sorted_matrix[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted_matrix\nend",
    "    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = vector.sum(M[i])\n    end\n    local order = vector.sort_index(sums)\n    local S = {}\n    for i = 1, n do\n        S[i] = M[order[i]]\n    end\n    return S\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n - 1 do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[i] > sums[j] then\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\tend\n\t\tend\n\tend\n\treturn M\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal order = {}\n\tfor i = 1, n do\n\t\torder[i] = i\n\tend\n\ttable.sort(order, compare)\n\tlocal M1 = {}\n\tfor i = 1, n do\n\t\tM1[i] = {}\n\t\tfor j = 1, n do\n\t\t\tM1[i][j] = M[order[i]][j]\n\t\tend\n\tend\n\treturn M1\nend",
    "\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\tlocal function cmp(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal order = {}\n\tfor i = 1, n do\n\t\torder[i] = i\n\tend\n\ttable.sort(order, cmp)\n\tlocal M2 = {}\n\tfor i = 1, n do\n\t\tM2[i] = {}\n\t\tfor j = 1, m do\n\t\t\tM2[i][j] = M[order[i]][j]\n\t\tend\n\tend\n\treturn M2\nend",
    "    local n = #M\n    local m = #M[1]\n    local sums = {}\n    for i = 1, n do\n        local sum = 0\n        for j = 1, m do\n            sum = sum + M[i][j]\n        end\n        sums[i] = sum\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, n do\n        for j = 1, n do\n            if sums[i] == sums[j] then\n                sorted[i] = M[j]\n                break\n            end\n        end\n    end\n    return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\ttable.sort(M, compare)\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal order = {}\n\tfor i = 1, n do\n\t\torder[i] = i\n\tend\n\ttable.sort(order, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[order[i]]\n\tend\n\treturn result\nend",
    "\tlocal function compare_rows(a,b)\n\t\treturn sum(a) < sum(b)\n\tend\n\ttable.sort(M,compare_rows)\n\treturn M\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[i] > sums[j] then\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\tend\n\t\tend\n\tend\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = sum(M[i])\n  end\n  local indices = sort_indices(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = M[indices[i]]\n  end\n  return sorted\nend",
    "\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function comp(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal order = {}\n\tfor i = 1, n do\n\t\torder[i] = i\n\tend\n\ttable.sort(order, comp)\n\tlocal M_sorted = {}\n\tfor i = 1, n do\n\t\tM_sorted[i] = {}\n\t\tfor j = 1, m do\n\t\t\tM_sorted[i][j] = M[order[i]][j]\n\t\tend\n\tend\n\treturn M_sorted\nend"
  ]
}