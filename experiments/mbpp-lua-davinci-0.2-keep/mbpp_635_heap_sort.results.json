{
  "name": "mbpp_635_heap_sort",
  "language": "lua",
  "prompt": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\n  while not heap:is_empty() do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8h96b0bo.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp8h96b0bo.lua:3: in local 'candidate'\n\t/tmp/tmp8h96b0bo.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_8xllrc.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmps_8xllrc.lua:3: in local 'candidate'\n\t/tmp/tmps_8xllrc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6xfp93yx.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp6xfp93yx.lua:3: in local 'candidate'\n\t/tmp/tmp6xfp93yx.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k6qra0o.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp1k6qra0o.lua:3: in local 'candidate'\n\t/tmp/tmp1k6qra0o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzo6p703k.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpzo6p703k.lua:3: in local 'candidate'\n\t/tmp/tmpzo6p703k.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ao6mg6e.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp4ao6mg6e.lua:3: in local 'candidate'\n\t/tmp/tmp4ao6mg6e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfvxzxlff.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfvxzxlff.lua:3: in local 'candidate'\n\t/tmp/tmpfvxzxlff.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\n  for _ = 1, #iterable do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcf0rkmg.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphcf0rkmg.lua:3: in local 'candidate'\n\t/tmp/tmphcf0rkmg.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    for i = 1, #heap do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu76d72bm.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpu76d72bm.lua:3: in local 'candidate'\n\t/tmp/tmpu76d72bm.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while not heap:is_empty() do\n    table.insert(result, heap:extract_min())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiazbuc7_.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpiazbuc7_.lua:3: in local 'candidate'\n\t/tmp/tmpiazbuc7_.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    result[#result+1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppeuk4n5q.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmppeuk4n5q.lua:3: in local 'candidate'\n\t/tmp/tmppeuk4n5q.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:push(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpww1vnwdd.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpww1vnwdd.lua:3: in local 'candidate'\n\t/tmp/tmpww1vnwdd.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while not heap:is_empty() do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc53p8b5z.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpc53p8b5z.lua:3: in local 'candidate'\n\t/tmp/tmpc53p8b5z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ap7ofr9.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp_ap7ofr9.lua:3: in local 'candidate'\n\t/tmp/tmp_ap7ofr9.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while not heap:empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnj04m4qw.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpnj04m4qw.lua:3: in local 'candidate'\n\t/tmp/tmpnj04m4qw.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqj20yt5q.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpqj20yt5q.lua:3: in local 'candidate'\n\t/tmp/tmpqj20yt5q.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, item in ipairs(iterable) do\n    heap:insert(item)\n  end\n  local result = {}\n  for i = 1, #iterable do\n    result[i] = heap:extract_min()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7bqhsl6l.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp7bqhsl6l.lua:3: in local 'candidate'\n\t/tmp/tmp7bqhsl6l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap:new()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsvrress.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvsvrress.lua:3: in local 'candidate'\n\t/tmp/tmpvsvrress.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:push(v)\n  end\n  local result = {}\n  for i = 1, #iterable do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy0_8jqvf.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpy0_8jqvf.lua:3: in local 'candidate'\n\t/tmp/tmpy0_8jqvf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_8xllrc.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmps_8xllrc.lua:3: in local 'candidate'\n\t/tmp/tmps_8xllrc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, value in ipairs(iterable) do\n        heap:insert(value)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp31asybwy.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp31asybwy.lua:3: in local 'candidate'\n\t/tmp/tmp31asybwy.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\n  while not heap:is_empty() do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8h96b0bo.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp8h96b0bo.lua:3: in local 'candidate'\n\t/tmp/tmp8h96b0bo.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ao6mg6e.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp4ao6mg6e.lua:3: in local 'candidate'\n\t/tmp/tmp4ao6mg6e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while not heap:empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp31bfflro.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp31bfflro.lua:3: in local 'candidate'\n\t/tmp/tmp31bfflro.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  for i = 1, #iterable do\n    result[i] = heap:extract_min()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3kgbprvk.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp3kgbprvk.lua:3: in local 'candidate'\n\t/tmp/tmp3kgbprvk.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv60gvooo.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpv60gvooo.lua:3: in local 'candidate'\n\t/tmp/tmpv60gvooo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6borq8bj.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp6borq8bj.lua:3: in local 'candidate'\n\t/tmp/tmp6borq8bj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while not heap:is_empty() do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk6h6u33u.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpk6h6u33u.lua:3: in local 'candidate'\n\t/tmp/tmpk6h6u33u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  while not heap:is_empty() do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zvn3tzs.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp6zvn3tzs.lua:3: in local 'candidate'\n\t/tmp/tmp6zvn3tzs.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, value in ipairs(iterable) do\n        heap:push(value)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwthw70vh.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpwthw70vh.lua:3: in local 'candidate'\n\t/tmp/tmpwthw70vh.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzo6p703k.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpzo6p703k.lua:3: in local 'candidate'\n\t/tmp/tmpzo6p703k.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6borq8bj.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp6borq8bj.lua:3: in local 'candidate'\n\t/tmp/tmp6borq8bj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn_r6cn5u.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpn_r6cn5u.lua:3: in local 'candidate'\n\t/tmp/tmpn_r6cn5u.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local sorted = {}\n    while not heap:empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsy7vpz4t.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpsy7vpz4t.lua:3: in local 'candidate'\n\t/tmp/tmpsy7vpz4t.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn_r6cn5u.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpn_r6cn5u.lua:3: in local 'candidate'\n\t/tmp/tmpn_r6cn5u.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, value in ipairs(iterable) do\n        heap:push(value)\n    end\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpihny91f3.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpihny91f3.lua:3: in local 'candidate'\n\t/tmp/tmpihny91f3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    for i = 1, #heap do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu76d72bm.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpu76d72bm.lua:3: in local 'candidate'\n\t/tmp/tmpu76d72bm.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    for i = 1, #heap do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpftk4wmhc.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpftk4wmhc.lua:3: in local 'candidate'\n\t/tmp/tmpftk4wmhc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7m_wc0o_.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp7m_wc0o_.lua:3: in local 'candidate'\n\t/tmp/tmp7m_wc0o_.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6borq8bj.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp6borq8bj.lua:3: in local 'candidate'\n\t/tmp/tmp6borq8bj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while not heap:is_empty() do\n        sorted[#sorted + 1] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwjwe2pzv.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpwjwe2pzv.lua:3: in local 'candidate'\n\t/tmp/tmpwjwe2pzv.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local sorted = {}\n  while not heap:is_empty() do\n    table.insert(sorted, heap:pop())\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph03np9ye.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmph03np9ye.lua:3: in local 'candidate'\n\t/tmp/tmph03np9ye.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\n  for i = 1, #iterable do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpygt126pa.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpygt126pa.lua:3: in local 'candidate'\n\t/tmp/tmpygt126pa.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplz0wkrfo.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmplz0wkrfo.lua:3: in local 'candidate'\n\t/tmp/tmplz0wkrfo.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmu7ifnd9.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmu7ifnd9.lua:3: in local 'candidate'\n\t/tmp/tmpmu7ifnd9.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new()\n  for _, v in ipairs(iterable) do\n    heap:push(v)\n  end\n  local result = {}\n  while not heap:empty() do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp62avccjb.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp62avccjb.lua:3: in local 'candidate'\n\t/tmp/tmp62avccjb.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsvrress.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvsvrress.lua:3: in local 'candidate'\n\t/tmp/tmpvsvrress.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqj20yt5q.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpqj20yt5q.lua:3: in local 'candidate'\n\t/tmp/tmpqj20yt5q.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsvrress.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvsvrress.lua:3: in local 'candidate'\n\t/tmp/tmpvsvrress.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while not heap:is_empty() do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc53p8b5z.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpc53p8b5z.lua:3: in local 'candidate'\n\t/tmp/tmpc53p8b5z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ao6mg6e.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp4ao6mg6e.lua:3: in local 'candidate'\n\t/tmp/tmp4ao6mg6e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn_r6cn5u.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpn_r6cn5u.lua:3: in local 'candidate'\n\t/tmp/tmpn_r6cn5u.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:push(v)\n  end\n  local sorted = {}\n  while not heap:is_empty() do\n    table.insert(sorted, heap:pop())\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7cx9l8x1.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp7cx9l8x1.lua:3: in local 'candidate'\n\t/tmp/tmp7cx9l8x1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoyzxxxc3.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpoyzxxxc3.lua:3: in local 'candidate'\n\t/tmp/tmpoyzxxxc3.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local sorted = {}\n  while heap:size() > 0 do\n    table.insert(sorted, heap:pop())\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg0oq_787.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpg0oq_787.lua:3: in local 'candidate'\n\t/tmp/tmpg0oq_787.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd2awksal.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpd2awksal.lua:3: in local 'candidate'\n\t/tmp/tmpd2awksal.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv60gvooo.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpv60gvooo.lua:3: in local 'candidate'\n\t/tmp/tmpv60gvooo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn_r6cn5u.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpn_r6cn5u.lua:3: in local 'candidate'\n\t/tmp/tmpn_r6cn5u.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, value in ipairs(iterable) do\n        heap:insert(value)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcidov1k2.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpcidov1k2.lua:3: in local 'candidate'\n\t/tmp/tmpcidov1k2.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvzilp0u3.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvzilp0u3.lua:3: in local 'candidate'\n\t/tmp/tmpvzilp0u3.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while not heap:is_empty() do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk6h6u33u.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpk6h6u33u.lua:3: in local 'candidate'\n\t/tmp/tmpk6h6u33u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsvrress.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvsvrress.lua:3: in local 'candidate'\n\t/tmp/tmpvsvrress.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphc2u0gbc.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphc2u0gbc.lua:3: in local 'candidate'\n\t/tmp/tmphc2u0gbc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ao6mg6e.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp4ao6mg6e.lua:3: in local 'candidate'\n\t/tmp/tmp4ao6mg6e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_8xllrc.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmps_8xllrc.lua:3: in local 'candidate'\n\t/tmp/tmps_8xllrc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfvxzxlff.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfvxzxlff.lua:3: in local 'candidate'\n\t/tmp/tmpfvxzxlff.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:push(v)\n  end\n  local result = {}\n  while not heap:empty() do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zvzhrej.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp4zvzhrej.lua:3: in local 'candidate'\n\t/tmp/tmp4zvzhrej.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  for i = 1, #iterable do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7r25jnx.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpf7r25jnx.lua:3: in local 'candidate'\n\t/tmp/tmpf7r25jnx.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, value in ipairs(iterable) do\n        heap:push(value)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkgas4yqa.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpkgas4yqa.lua:3: in local 'candidate'\n\t/tmp/tmpkgas4yqa.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:push(v)\n  end\n  local result = {}\n  while not heap:empty() do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp52k3c6z0.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp52k3c6z0.lua:3: in local 'candidate'\n\t/tmp/tmp52k3c6z0.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap.new()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuoioo36t.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpuoioo36t.lua:3: in local 'candidate'\n\t/tmp/tmpuoioo36t.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local sorted = {}\n    for i = 1, #iterable do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4f4jnc9p.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp4f4jnc9p.lua:3: in local 'candidate'\n\t/tmp/tmp4f4jnc9p.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv60gvooo.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpv60gvooo.lua:3: in local 'candidate'\n\t/tmp/tmpv60gvooo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0atf03dm.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp0atf03dm.lua:3: in local 'candidate'\n\t/tmp/tmp0atf03dm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, value in ipairs(iterable) do\n    heap:insert(value)\n  end\n  local result = {}\n  while not heap:is_empty() do\n    result[#result + 1] = heap:extract()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpha4bta7c.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpha4bta7c.lua:3: in local 'candidate'\n\t/tmp/tmpha4bta7c.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2837sfte.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local res = {}\n  while not heap:is_empty() do\n    res[#res + 1] = heap:pop()\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcofm0_qg.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpcofm0_qg.lua:3: in local 'candidate'\n\t/tmp/tmpcofm0_qg.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvzilp0u3.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvzilp0u3.lua:3: in local 'candidate'\n\t/tmp/tmpvzilp0u3.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptq8oo7fz.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmptq8oo7fz.lua:3: in local 'candidate'\n\t/tmp/tmptq8oo7fz.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvcpzd36.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphvcpzd36.lua:3: in local 'candidate'\n\t/tmp/tmphvcpzd36.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while not heap:is_empty() do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk6h6u33u.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpk6h6u33u.lua:3: in local 'candidate'\n\t/tmp/tmpk6h6u33u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  while not heap:is_empty() do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zvn3tzs.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp6zvn3tzs.lua:3: in local 'candidate'\n\t/tmp/tmp6zvn3tzs.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplz0wkrfo.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmplz0wkrfo.lua:3: in local 'candidate'\n\t/tmp/tmplz0wkrfo.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsvrress.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvsvrress.lua:3: in local 'candidate'\n\t/tmp/tmpvsvrress.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    for i = 1, #heap do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8v1rqze2.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp8v1rqze2.lua:3: in local 'candidate'\n\t/tmp/tmp8v1rqze2.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsvrress.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvsvrress.lua:3: in local 'candidate'\n\t/tmp/tmpvsvrress.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\n  for i = 1, #iterable do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpygt126pa.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpygt126pa.lua:3: in local 'candidate'\n\t/tmp/tmpygt126pa.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn_r6cn5u.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpn_r6cn5u.lua:3: in local 'candidate'\n\t/tmp/tmpn_r6cn5u.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzo6p703k.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpzo6p703k.lua:3: in local 'candidate'\n\t/tmp/tmpzo6p703k.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new()\n  for _, v in ipairs(iterable) do\n    heap:push(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjblfopnl.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpjblfopnl.lua:3: in local 'candidate'\n\t/tmp/tmpjblfopnl.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_8xllrc.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmps_8xllrc.lua:3: in local 'candidate'\n\t/tmp/tmps_8xllrc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvzilp0u3.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvzilp0u3.lua:3: in local 'candidate'\n\t/tmp/tmpvzilp0u3.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzo6p703k.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpzo6p703k.lua:3: in local 'candidate'\n\t/tmp/tmpzo6p703k.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_8xllrc.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmps_8xllrc.lua:3: in local 'candidate'\n\t/tmp/tmps_8xllrc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6xfp93yx.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp6xfp93yx.lua:3: in local 'candidate'\n\t/tmp/tmp6xfp93yx.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsvrress.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvsvrress.lua:3: in local 'candidate'\n\t/tmp/tmpvsvrress.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:push(v)\n  end\n  local result = {}\n  while not heap:empty() do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zvzhrej.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp4zvzhrej.lua:3: in local 'candidate'\n\t/tmp/tmp4zvzhrej.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjl_05m67.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpjl_05m67.lua:3: in local 'candidate'\n\t/tmp/tmpjl_05m67.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local sorted = {}\n  while heap:size() > 0 do\n    table.insert(sorted, heap:pop())\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpujj1bkzq.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpujj1bkzq.lua:3: in local 'candidate'\n\t/tmp/tmpujj1bkzq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:extract_min())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2flsxl1z.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp2flsxl1z.lua:3: in local 'candidate'\n\t/tmp/tmp2flsxl1z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap.new()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg7ccqcpx.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpg7ccqcpx.lua:3: in local 'candidate'\n\t/tmp/tmpg7ccqcpx.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0atf03dm.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp0atf03dm.lua:3: in local 'candidate'\n\t/tmp/tmp0atf03dm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\n  while not heap:is_empty() do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp24416xp5.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp24416xp5.lua:3: in local 'candidate'\n\t/tmp/tmp24416xp5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplz0wkrfo.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmplz0wkrfo.lua:3: in local 'candidate'\n\t/tmp/tmplz0wkrfo.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7m_wc0o_.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp7m_wc0o_.lua:3: in local 'candidate'\n\t/tmp/tmp7m_wc0o_.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local sorted = {}\n  while heap:size() > 0 do\n    table.insert(sorted, heap:pop())\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpujj1bkzq.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpujj1bkzq.lua:3: in local 'candidate'\n\t/tmp/tmpujj1bkzq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvzilp0u3.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvzilp0u3.lua:3: in local 'candidate'\n\t/tmp/tmpvzilp0u3.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzo6p703k.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpzo6p703k.lua:3: in local 'candidate'\n\t/tmp/tmpzo6p703k.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    for i = 1, #heap do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpftk4wmhc.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpftk4wmhc.lua:3: in local 'candidate'\n\t/tmp/tmpftk4wmhc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, value in ipairs(iterable) do\n        heap:push(value)\n    end\n    local result = {}\n    while not heap:empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnxhqfe31.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpnxhqfe31.lua:3: in local 'candidate'\n\t/tmp/tmpnxhqfe31.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzo6p703k.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpzo6p703k.lua:3: in local 'candidate'\n\t/tmp/tmpzo6p703k.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc3g33rha.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpc3g33rha.lua:3: in local 'candidate'\n\t/tmp/tmpc3g33rha.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0atf03dm.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp0atf03dm.lua:3: in local 'candidate'\n\t/tmp/tmp0atf03dm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsvrress.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvsvrress.lua:3: in local 'candidate'\n\t/tmp/tmpvsvrress.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    heap:sort()\n    return heap.elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw02j22ea.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpw02j22ea.lua:3: in local 'candidate'\n\t/tmp/tmpw02j22ea.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while not heap:is_empty() do\n    table.insert(result, heap:extract_min())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiazbuc7_.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpiazbuc7_.lua:3: in local 'candidate'\n\t/tmp/tmpiazbuc7_.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\n  while not heap:empty() do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy4xh4j5w.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpy4xh4j5w.lua:3: in local 'candidate'\n\t/tmp/tmpy4xh4j5w.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsvrress.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvsvrress.lua:3: in local 'candidate'\n\t/tmp/tmpvsvrress.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  while not heap:is_empty() do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpes3w8fe5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpes3w8fe5.lua:3: in local 'candidate'\n\t/tmp/tmpes3w8fe5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, value in ipairs(iterable) do\n        heap:push(value)\n    end\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbtba193b.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpbtba193b.lua:3: in local 'candidate'\n\t/tmp/tmpbtba193b.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6xfp93yx.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp6xfp93yx.lua:3: in local 'candidate'\n\t/tmp/tmp6xfp93yx.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmu7ifnd9.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmu7ifnd9.lua:3: in local 'candidate'\n\t/tmp/tmpmu7ifnd9.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7m_wc0o_.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp7m_wc0o_.lua:3: in local 'candidate'\n\t/tmp/tmp7m_wc0o_.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn_r6cn5u.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpn_r6cn5u.lua:3: in local 'candidate'\n\t/tmp/tmpn_r6cn5u.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while not heap:is_empty() do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc53p8b5z.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpc53p8b5z.lua:3: in local 'candidate'\n\t/tmp/tmpc53p8b5z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  for i = 1, #heap do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8if1e1u8.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp8if1e1u8.lua:3: in local 'candidate'\n\t/tmp/tmp8if1e1u8.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ao6mg6e.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp4ao6mg6e.lua:3: in local 'candidate'\n\t/tmp/tmp4ao6mg6e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap.new()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp987af4fo.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp987af4fo.lua:3: in local 'candidate'\n\t/tmp/tmp987af4fo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmu7ifnd9.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmu7ifnd9.lua:3: in local 'candidate'\n\t/tmp/tmpmu7ifnd9.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  for i = 1, #iterable do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_v0ftsr2.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp_v0ftsr2.lua:3: in local 'candidate'\n\t/tmp/tmp_v0ftsr2.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmu7ifnd9.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmu7ifnd9.lua:3: in local 'candidate'\n\t/tmp/tmpmu7ifnd9.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:push(v)\n  end\n  local result = {}\n  while not heap:empty() do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp52k3c6z0.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp52k3c6z0.lua:3: in local 'candidate'\n\t/tmp/tmp52k3c6z0.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  for _ = 1, #heap do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc550cfjl.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpc550cfjl.lua:3: in local 'candidate'\n\t/tmp/tmpc550cfjl.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0atf03dm.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp0atf03dm.lua:3: in local 'candidate'\n\t/tmp/tmp0atf03dm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoyzxxxc3.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpoyzxxxc3.lua:3: in local 'candidate'\n\t/tmp/tmpoyzxxxc3.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfvxzxlff.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfvxzxlff.lua:3: in local 'candidate'\n\t/tmp/tmpfvxzxlff.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  while not heap:is_empty() do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zvn3tzs.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp6zvn3tzs.lua:3: in local 'candidate'\n\t/tmp/tmp6zvn3tzs.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphc2u0gbc.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphc2u0gbc.lua:3: in local 'candidate'\n\t/tmp/tmphc2u0gbc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmu7ifnd9.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmu7ifnd9.lua:3: in local 'candidate'\n\t/tmp/tmpmu7ifnd9.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn_r6cn5u.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpn_r6cn5u.lua:3: in local 'candidate'\n\t/tmp/tmpn_r6cn5u.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:push(v)\n  end\n  local result = {}\n  while not heap:empty() do\n    result[#result+1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf9k5wolu.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpf9k5wolu.lua:3: in local 'candidate'\n\t/tmp/tmpf9k5wolu.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\n  for i = 1, #heap do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1sja3os0.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp1sja3os0.lua:3: in local 'candidate'\n\t/tmp/tmp1sja3os0.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmu7ifnd9.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmu7ifnd9.lua:3: in local 'candidate'\n\t/tmp/tmpmu7ifnd9.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  for i = 1, #iterable do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7r25jnx.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpf7r25jnx.lua:3: in local 'candidate'\n\t/tmp/tmpf7r25jnx.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv60gvooo.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpv60gvooo.lua:3: in local 'candidate'\n\t/tmp/tmpv60gvooo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptq8oo7fz.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmptq8oo7fz.lua:3: in local 'candidate'\n\t/tmp/tmptq8oo7fz.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsvrress.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvsvrress.lua:3: in local 'candidate'\n\t/tmp/tmpvsvrress.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  for i = 1, #heap do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8if1e1u8.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp8if1e1u8.lua:3: in local 'candidate'\n\t/tmp/tmp8if1e1u8.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsvrress.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvsvrress.lua:3: in local 'candidate'\n\t/tmp/tmpvsvrress.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvzilp0u3.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvzilp0u3.lua:3: in local 'candidate'\n\t/tmp/tmpvzilp0u3.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6xfp93yx.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp6xfp93yx.lua:3: in local 'candidate'\n\t/tmp/tmp6xfp93yx.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:extract_min())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa85c8tri.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpa85c8tri.lua:3: in local 'candidate'\n\t/tmp/tmpa85c8tri.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ao6mg6e.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp4ao6mg6e.lua:3: in local 'candidate'\n\t/tmp/tmp4ao6mg6e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, value in ipairs(iterable) do\n        heap:insert(value)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcidov1k2.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpcidov1k2.lua:3: in local 'candidate'\n\t/tmp/tmpcidov1k2.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsvrress.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvsvrress.lua:3: in local 'candidate'\n\t/tmp/tmpvsvrress.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, item in ipairs(iterable) do\n        heap:push(item)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptaysbuye.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmptaysbuye.lua:3: in local 'candidate'\n\t/tmp/tmptaysbuye.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:push(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuae8q__p.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpuae8q__p.lua:3: in local 'candidate'\n\t/tmp/tmpuae8q__p.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsvrress.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvsvrress.lua:3: in local 'candidate'\n\t/tmp/tmpvsvrress.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_8xllrc.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmps_8xllrc.lua:3: in local 'candidate'\n\t/tmp/tmps_8xllrc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw10_z_n8.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpw10_z_n8.lua:3: in local 'candidate'\n\t/tmp/tmpw10_z_n8.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap:new()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo0ycoq7z.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpo0ycoq7z.lua:3: in local 'candidate'\n\t/tmp/tmpo0ycoq7z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:push(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuae8q__p.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpuae8q__p.lua:3: in local 'candidate'\n\t/tmp/tmpuae8q__p.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while not heap:is_empty() do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk6h6u33u.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpk6h6u33u.lua:3: in local 'candidate'\n\t/tmp/tmpk6h6u33u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local sorted = {}\n  while not heap:is_empty() do\n    sorted[#sorted + 1] = heap:pop()\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_1l0yxi3.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp_1l0yxi3.lua:3: in local 'candidate'\n\t/tmp/tmp_1l0yxi3.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0atf03dm.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp0atf03dm.lua:3: in local 'candidate'\n\t/tmp/tmp0atf03dm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while not heap:is_empty() do\n    table.insert(result, heap:extract_min())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiazbuc7_.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpiazbuc7_.lua:3: in local 'candidate'\n\t/tmp/tmpiazbuc7_.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509729,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ao6mg6e.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp4ao6mg6e.lua:3: in local 'candidate'\n\t/tmp/tmp4ao6mg6e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    result[#result+1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_twetvjj.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp_twetvjj.lua:3: in local 'candidate'\n\t/tmp/tmp_twetvjj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n\tlocal heap = Heap.new(iterable)\n\tlocal result = {}\n\twhile not heap:empty() do\n\t\tresult[#result+1] = heap:pop()\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuq6ymovo.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpuq6ymovo.lua:3: in local 'candidate'\n\t/tmp/tmpuq6ymovo.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphc2u0gbc.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphc2u0gbc.lua:3: in local 'candidate'\n\t/tmp/tmphc2u0gbc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsvrress.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvsvrress.lua:3: in local 'candidate'\n\t/tmp/tmpvsvrress.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509730,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyxvt6j5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphyxvt6j5.lua:3: in local 'candidate'\n\t/tmp/tmphyxvt6j5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7m_wc0o_.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp7m_wc0o_.lua:3: in local 'candidate'\n\t/tmp/tmp7m_wc0o_.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, item in ipairs(iterable) do\n        heap:push(item)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptaysbuye.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmptaysbuye.lua:3: in local 'candidate'\n\t/tmp/tmptaysbuye.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:remove_min())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzj3nnpe_.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpzj3nnpe_.lua:3: in local 'candidate'\n\t/tmp/tmpzj3nnpe_.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyjv4ba9p.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpyjv4ba9p.lua:3: in local 'candidate'\n\t/tmp/tmpyjv4ba9p.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while not heap:empty() do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ohnb6p9.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp1ohnb6p9.lua:3: in local 'candidate'\n\t/tmp/tmp1ohnb6p9.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsvrress.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvsvrress.lua:3: in local 'candidate'\n\t/tmp/tmpvsvrress.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n  local heap = Heap.new()\n  for _, v in ipairs(iterable) do\n    heap:push(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphfzih4rd.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphfzih4rd.lua:3: in local 'candidate'\n\t/tmp/tmphfzih4rd.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given list.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124228,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvcpzd36.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphvcpzd36.lua:3: in local 'candidate'\n\t/tmp/tmphvcpzd36.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}