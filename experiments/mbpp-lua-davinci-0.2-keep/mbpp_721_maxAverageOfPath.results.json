{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "lua",
  "prompt": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {\n                cost = 0,\n                count = 0,\n            }\n        end\n    end\n    dp[1][1].cost = cost[1][1]\n    dp[1][1].count = 1\n    for i = 1, n do\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                goto continue\n            end\n            local left = dp[i][j - 1]\n            local up = dp[i - 1][j]\n            if left.cost > up.cost then\n                dp[i][j].cost = left.cost + cost[i][j]\n                dp[i][j].count = left.count + 1\n            elseif left.cost < up.cost then\n                dp[i][j].cost = up.cost + cost[i][j]\n                dp[i][j].count = up.count + 1\n            else\n                dp[i][j].cost = up.cost + cost[i][j]\n                dp[i][j].count = math.max(up.count, left.count) + 1\n            end\n            ::continue::\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqze0b8yw.lua:22: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpqze0b8yw.lua:22: in local 'candidate'\n\t/tmp/tmpqze0b8yw.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = 0\n\t\tend\n\tend\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].sum = 0\n\t\t\tdp[i][j].count = 0\n\t\tend\n\tend\n\tdp[1][1].sum = cost[1][1]\n\tdp[1][1].count = 1\n\tfor i = 2, n do\n\t\tdp[i][1].sum = dp[i - 1][1].sum + cost[i][1]\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\t\tdp[1][i].sum = dp[1][i - 1].sum + cost[1][i]\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].sum = math.max(dp[i - 1][j].sum, dp[i][j - 1].sum) + cost[i][j]\n\t\t\tdp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n\t\tend\n\tend\n\treturn dp[n][n].sum / dp[n][n].count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {\n\t\t\t\tsum = 0,\n\t\t\t\tcount = 0\n\t\t\t}\n\t\tend\n\tend\n\tdp[1][1].sum = cost[1][1]\n\tdp[1][1].count = 1\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tif i == 1 and j == 1 then\n\t\t\t\tgoto continue\n\t\t\tend\n\t\t\tif i == 1 then\n\t\t\t\tdp[i][j].sum = dp[i][j - 1].sum + cost[i][j]\n\t\t\t\tdp[i][j].count = dp[i][j - 1].count + 1\n\t\t\t\tgoto continue\n\t\t\tend\n\t\t\tif j == 1 then\n\t\t\t\tdp[i][j].sum = dp[i - 1][j].sum + cost[i][j]\n\t\t\t\tdp[i][j].count = dp[i - 1][j].count + 1\n\t\t\t\tgoto continue\n\t\t\tend\n\t\t\tlocal a = dp[i - 1][j].sum / dp[i - 1][j].count\n\t\t\tlocal b = dp[i][j - 1].sum / dp[i][j - 1].count\n\t\t\tif a > b then\n\t\t\t\tdp[i][j].sum = dp[i - 1][j].sum + cost[i][j]\n\t\t\t\tdp[i][j].count = dp[i - 1][j].count + 1\n\t\t\telse\n\t\t\t\tdp[i][j].sum = dp[i][j - 1].sum + cost[i][j]\n\t\t\t\tdp[i][j].count = dp[i][j - 1].count + 1\n\t\t\tend\n\t\t\t::continue::\n\t\tend\n\tend\n\treturn d\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwouqkkz9.lua:44: 'end' expected (to close 'function' at line 2) near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = 0\n            dp[i][j].count = 0\n        end\n    end\n    dp[1][1].cost = cost[1][1]\n    dp[1][1].count = 1\n    for i = 2, n do\n        dp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n        dp[1][i].count = dp[1][i - 1].count + 1\n    end\n    for i = 2, n do\n        dp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n        dp[i][1].count = dp[i - 1][1].count + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            local cost1 = dp[i - 1][j].cost + cost[i][j]\n            local count1 = dp[i - 1][j].count + 1\n            local cost2 = dp[i][j - 1].cost + cost[i][j]\n            local count2 = dp[i][j - 1].count + 1\n            if cost1 / count1 > cost2 / count2 then\n                dp[i][j].cost = cost1\n                dp[i][j].count = count1\n            else\n                dp[i][j].cost = cost2\n                dp[i][j].count = count2\n            end\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].cost = 0\n      dp[i][j].count = 0\n    end\n  end\n  dp[1][1].cost = cost[1][1]\n  dp[1][1].count = 1\n  for i = 2, n do\n    dp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n    dp[1][i].count = dp[1][i - 1].count + 1\n    dp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n    dp[i][1].count = dp[i - 1][1].count + 1\n  end\n  for i = 2, n do\n    for j = 2, n do\n      local left = dp[i][j - 1]\n      local up = dp[i - 1][j]\n      if left.cost * up.count > up.cost * left.count then\n        dp[i][j].cost = left.cost + cost[i][j]\n        dp[i][j].count = left.count + 1\n      else\n        dp[i][j].cost = up.cost + cost[i][j]\n        dp[i][j].count = up.count + 1\n      end\n    end\n  end\n  return dp[n][n].cost / dp[n][n].count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = 0\n\t\t\tdp[i][j].count = 0\n\t\tend\n\tend\n\tdp[1][1].cost = cost[1][1]\n\tdp[1][1].count = 1\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\t\tdp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + cost[i][j]\n\t\t\tif dp[i - 1][j].cost > dp[i][j - 1].cost then\n\t\t\t\tdp[i][j].count = dp[i - 1][j].count + 1\n\t\t\telse\n\t\t\t\tdp[i][j].count = dp[i][j - 1].count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = cost[i][j]\n        end\n    end\n    for i = 2, n do\n        dp[1][i] = dp[1][i] + dp[1][i - 1]\n        dp[i][1] = dp[i][1] + dp[i - 1][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = dp[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i-1][1] + cost[i][1]\n        dp[1][i] = dp[1][i-1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2*n-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  local sum = 0\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n      sum = sum + cost[i][j]\n    end\n  end\n  return dp[n][n] / (n * n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptniqurey.lua:27: expected: 5.2, actual: 2.8888888888889\nstack traceback:\n\t/tmp/tmptniqurey.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j][1] = cost[i][j]\n            dp[i][j][2] = 1\n        end\n    end\n    for i = 2, n do\n        dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n        dp[1][i][2] = dp[1][i - 1][2] + 1\n        dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n        dp[i][1][2] = dp[i - 1][1][2] + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            local a = dp[i - 1][j][1] + cost[i][j]\n            local b = dp[i - 1][j][2] + 1\n            local c = dp[i][j - 1][1] + cost[i][j]\n            local d = dp[i][j - 1][2] + 1\n            if a / b > c / d then\n                dp[i][j][1] = a\n                dp[i][j][2] = b\n            else\n                dp[i][j][1] = c\n                dp[i][j][2] = d\n            end\n        end\n    end\n    return dp[n][n][1] / dp[n][n][2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j][1] = cost[i][j]\n            dp[i][j][2] = 1\n        end\n    end\n    for i = 1, n do\n        for j = 1, n do\n            if i > 1 then\n                local avg = (dp[i - 1][j][1] + cost[i][j]) / (dp[i - 1][j][2] + 1)\n                if avg > dp[i][j][1] / dp[i][j][2] then\n                    dp[i][j][1] = dp[i - 1][j][1] + cost[i][j]\n                    dp[i][j][2] = dp[i - 1][j][2] + 1\n                end\n            end\n            if j > 1 then\n                local avg = (dp[i][j - 1][1] + cost[i][j]) / (dp[i][j - 1][2] + 1)\n                if avg > dp[i][j][1] / dp[i][j][2] then\n                    dp[i][j][1] = dp[i][j - 1][1] + cost[i][j]\n                    dp[i][j][2] = dp[i][j - 1][2] + 1\n                end\n            end\n        end\n    end\n    return dp[n][n][1] / dp[n][n][2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3iy99ynd.lua:37: expected: 5.2, actual: 9.0\nstack traceback:\n\t/tmp/tmp3iy99ynd.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j][1] = cost[i][j]\n            dp[i][j][2] = 1\n        end\n    end\n    for i = 2, n do\n        dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n        dp[1][i][2] = dp[1][i - 1][2] + 1\n        dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n        dp[i][1][2] = dp[i - 1][1][2] + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            if dp[i - 1][j][1] / dp[i - 1][j][2] > dp[i][j - 1][1] / dp[i][j - 1][2] then\n                dp[i][j][1] = dp[i - 1][j][1] + cost[i][j]\n                dp[i][j][2] = dp[i - 1][j][2] + 1\n            else\n                dp[i][j][1] = dp[i][j - 1][1] + cost[i][j]\n                dp[i][j][2] = dp[i][j - 1][2] + 1\n            end\n        end\n    end\n    return dp[n][n][1] / dp[n][n][2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n        end\n    end\n    dp[1][1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n        dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n        end\n    end\n    for k = 2, n do\n        for i = 1, n do\n            for j = 1, n do\n                if i == 1 and j == 1 then\n                    dp[i][j][k] = dp[i][j][k - 1]\n                elseif i == 1 then\n                    dp[i][j][k] = dp[i][j - 1][k] + cost[i][j]\n                elseif j == 1 then\n                    dp[i][j][k] = dp[i - 1][j][k] + cost[i][j]\n                else\n                    dp[i][j][k] = math.max(dp[i - 1][j][k], dp[i][j - 1][k]) + cost[i][j]\n                end\n            end\n        end\n    end\n    local maxAverage = -1\n    for k = 1, n do\n        maxAverage = math.max(maxAverage, dp[n][n][k] / k)\n    end\n    return maxAverage\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdnn83dy.lua:46: expected: 5.2, actual: 26.0\nstack traceback:\n\t/tmp/tmprdnn83dy.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tlocal sum = 0\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tsum = sum + cost[i][j]\n\t\t\tif i == 1 and j == 1 then\n\t\t\t\tdp[i][j] = cost[i][j]\n\t\t\telseif i == 1 then\n\t\t\t\tdp[i][j] = dp[i][j - 1] + cost[i][j]\n\t\t\telseif j == 1 then\n\t\t\t\tdp[i][j] = dp[i - 1][j] + cost[i][j]\n\t\t\telse\n\t\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n] / sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppw825_zn.lua:27: expected: 5.2, actual: 0.65\nstack traceback:\n\t/tmp/tmppw825_zn.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal m = #cost[1]\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, m do\n\t\t\tdp[i][j] = {}\n\t\tend\n\tend\n\tdp[1][1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n\tend\n\tfor j = 2, m do\n\t\tdp[1][j][1] = dp[1][j - 1][1] + cost[1][j]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, m do\n\t\t\tdp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n\t\tend\n\tend\n\tfor k = 2, n + m - 1 do\n\t\tfor i = 1, n do\n\t\t\tfor j = 1, m do\n\t\t\t\tdp[i][j][k] = 0\n\t\t\tend\n\t\tend\n\t\tfor i = 1, n do\n\t\t\tfor j = 1, m do\n\t\t\t\tif i + j == k + 1 then\n\t\t\t\t\tdp[i][j][k] = math.max(dp[i - 1][j][k - 1], dp[i][j - 1][k - 1]) + cost[i][j]\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tlocal max = 0\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tmax = math.max(max, dp[i][j][n + m - 1] / (i + j - 1))\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppabreer3.lua:33: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmppabreer3.lua:33: in local 'candidate'\n\t/tmp/tmppabreer3.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = cost[i][j]\n        end\n    end\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + dp[1][i]\n        dp[i][1] = dp[i - 1][1] + dp[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + dp[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j][1] = cost[i][j]\n            dp[i][j][2] = 1\n        end\n    end\n    for i = 2, n do\n        dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n        dp[1][i][2] = dp[1][i - 1][2] + 1\n    end\n    for i = 2, n do\n        dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n        dp[i][1][2] = dp[i - 1][1][2] + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            local a = dp[i - 1][j][1] / dp[i - 1][j][2]\n            local b = dp[i][j - 1][1] / dp[i][j - 1][2]\n            if a > b then\n                dp[i][j][1] = dp[i - 1][j][1] + cost[i][j]\n                dp[i][j][2] = dp[i - 1][j][2] + 1\n            else\n                dp[i][j][1] = dp[i][j - 1][1] + cost[i][j]\n                dp[i][j][2] = dp[i][j - 1][2] + 1\n            end\n        end\n    end\n    return dp[n][n][1] / dp[n][n][2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j][1] = cost[i][j]\n            dp[i][j][2] = 1\n        end\n    end\n    for i = 2, n do\n        dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n        dp[1][i][2] = dp[1][i - 1][2] + 1\n        dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n        dp[i][1][2] = dp[i - 1][1][2] + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            if dp[i - 1][j][1] / dp[i - 1][j][2] > dp[i][j - 1][1] / dp[i][j - 1][2] then\n                dp[i][j][1] = dp[i - 1][j][1] + cost[i][j]\n                dp[i][j][2] = dp[i - 1][j][2] + 1\n            else\n                dp[i][j][1] = dp[i][j - 1][1] + cost[i][j]\n                dp[i][j][2] = dp[i][j - 1][2] + 1\n            end\n        end\n    end\n    return dp[n][n][1] / dp[n][n][2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i-1][1] + cost[i][1]\n  end\n  for j = 2, n do\n    dp[1][j] = dp[1][j-1] + cost[1][j]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = cost[i][j]\n        end\n    end\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + dp[i][1]\n        dp[1][i] = dp[1][i - 1] + dp[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + dp[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzw1p5id_.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i-1][1] + cost[i][1]\n    dp[1][i] = dp[1][i-1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2*n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = 0\n\t\tend\n\tend\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i-1] + cost[1][i]\n        dp[i][1] = dp[i-1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2*n-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    dp[1] = {}\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        dp[i] = {}\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\tend\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = 0\n\t\tend\n\tend\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    dp[1] = {}\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        dp[i] = {}\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j][1] = cost[i][j]\n        end\n    end\n    for i = 2, n do\n        dp[1][i][2] = dp[1][i - 1][1] + cost[1][i]\n        dp[i][1][2] = dp[i - 1][1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j][2] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n        end\n    end\n    return dp[n][n][2] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uefbqyl.lua:27: expected: 5.2, actual: 2.6\nstack traceback:\n\t/tmp/tmp_uefbqyl.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = 0\n\t\t\tdp[i][j].count = 0\n\t\tend\n\tend\n\tdp[1][1].cost = cost[1][1]\n\tdp[1][1].count = 1\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\t\tdp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + cost[i][j]\n\t\t\tdp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i-1][1] + cost[i][1]\n    dp[1][i] = dp[1][i-1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2*n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\tend\n\tend\n\tdp[1][1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n\t\tdp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n\t\tend\n\tend\n\tfor k = 2, n do\n\t\tfor i = 1, n do\n\t\t\tfor j = 1, n do\n\t\t\t\tdp[i][j][k] = math.max(dp[i - 1][j][k], dp[i][j - 1][k]) + cost[i][j]\n\t\t\tend\n\t\tend\n\tend\n\tlocal maxAvg = -math.huge\n\tfor k = 1, n do\n\t\tmaxAvg = math.max(maxAvg, dp[n][n][k] / k)\n\tend\n\treturn maxAvg\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpir_os_f1.lua:24: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpir_os_f1.lua:24: in local 'candidate'\n\t/tmp/tmpir_os_f1.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].sum = 0\n\t\t\tdp[i][j].count = 0\n\t\tend\n\tend\n\tdp[1][1].sum = cost[1][1]\n\tdp[1][1].count = 1\n\tfor i = 2, n do\n\t\tdp[1][i].sum = dp[1][i - 1].sum + cost[1][i]\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].sum = dp[i - 1][1].sum + cost[i][1]\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].sum = math.max(dp[i - 1][j].sum, dp[i][j - 1].sum) + cost[i][j]\n\t\t\tdp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n\t\tend\n\tend\n\treturn dp[n][n].sum / dp[n][n].count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = cost[i][j]\n            dp[i][j].count = 1\n        end\n    end\n    for i = 2, n do\n        dp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n        dp[1][i].count = dp[1][i - 1].count + 1\n    end\n    for i = 2, n do\n        dp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n        dp[i][1].count = dp[i - 1][1].count + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            local left = dp[i][j - 1].cost * dp[i][j - 1].count\n            local up = dp[i - 1][j].cost * dp[i - 1][j].count\n            if left > up then\n                dp[i][j].cost = dp[i][j].cost + dp[i][j - 1].cost\n                dp[i][j].count = dp[i][j - 1].count + 1\n            else\n                dp[i][j].cost = dp[i][j].cost + dp[i - 1][j].cost\n                dp[i][j].count = dp[i - 1][j].count + 1\n            end\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\tend\n\tend\n\tdp[1][1][1] = cost[1][1]\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tif i == 1 and j == 1 then\n\t\t\t\t-- do nothing\n\t\t\telseif i == 1 then\n\t\t\t\tdp[i][j][1] = dp[i][j - 1][1] + cost[i][j]\n\t\t\t\tdp[i][j][2] = dp[i][j - 1][2] + 1\n\t\t\telseif j == 1 then\n\t\t\t\tdp[i][j][1] = dp[i - 1][j][1] + cost[i][j]\n\t\t\t\tdp[i][j][2] = dp[i - 1][j][2] + 1\n\t\t\telse\n\t\t\t\tlocal avg1 = dp[i - 1][j][1] / dp[i - 1][j][2]\n\t\t\t\tlocal avg2 = dp[i][j - 1][1] / dp[i][j - 1][2]\n\t\t\t\tif avg1 > avg2 then\n\t\t\t\t\tdp[i][j][1] = dp[i - 1][j][1] + cost[i][j]\n\t\t\t\t\tdp[i][j][2] = dp[i - 1][j][2] + 1\n\t\t\t\telse\n\t\t\t\t\tdp[i][j][1] = dp[i][j - 1][1] + cost[i][j]\n\t\t\t\t\tdp[i][j][2] = dp[i][j - 1][2] + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n][1] / dp[n][n][2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxs736vqb.lua:18: attempt to perform arithmetic on a nil value (field 'integer index')\nstack traceback:\n\t/tmp/tmpxs736vqb.lua:18: in local 'candidate'\n\t/tmp/tmpxs736vqb.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 1, n do\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\tend\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7vewjffm.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j][1] = cost[i][j]\n    end\n  end\n  for i = 2, n do\n    dp[1][i][2] = dp[1][i - 1][1] + cost[1][i]\n    dp[i][1][2] = dp[i - 1][1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j][2] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n    end\n  end\n  return dp[n][n][2] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp689ponzj.lua:27: expected: 5.2, actual: 2.6\nstack traceback:\n\t/tmp/tmp689ponzj.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = 0\n\t\tend\n\tend\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\tend\n\tend\n\tdp[1][1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n\t\tdp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n\t\tend\n\tend\n\tlocal maxAvg = dp[n][n][1] / (2 * n - 1)\n\tfor k = 2, n do\n\t\tdp[1][1][k] = dp[1][1][k - 1] + cost[1][1]\n\t\tfor i = 2, n do\n\t\t\tdp[i][1][k] = math.max(dp[i - 1][1][k], dp[i - 1][1][k - 1]) + cost[i][1]\n\t\t\tdp[1][i][k] = math.max(dp[1][i - 1][k], dp[1][i - 1][k - 1]) + cost[1][i]\n\t\tend\n\t\tfor i = 2, n do\n\t\t\tfor j = 2, n do\n\t\t\t\tdp[i][j][k] = math.max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i - 1][j][k - 1], dp[i][j - 1][k - 1]) + cost[i][j]\n\t\t\tend\n\t\tend\n\t\tmaxAvg = math.max(maxAvg, dp[n][n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwz6q34v5.lua:34: ']' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = 0\n\t\tend\n\tend\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = 0\n\t\tend\n\tend\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j][1] = cost[i][j]\n            dp[i][j][2] = 1\n        end\n    end\n    for i = 1, n do\n        for j = 1, n do\n            if i > 1 then\n                local avg = (dp[i][j][1] + dp[i - 1][j][1]) / (dp[i][j][2] + dp[i - 1][j][2])\n                if avg > dp[i][j][1] / dp[i][j][2] then\n                    dp[i][j][1] = dp[i][j][1] + dp[i - 1][j][1]\n                    dp[i][j][2] = dp[i][j][2] + dp[i - 1][j][2]\n                end\n            end\n            if j > 1 then\n                local avg = (dp[i][j][1] + dp[i][j - 1][1]) / (dp[i][j][2] + dp[i][j - 1][2])\n                if avg > dp[i][j][1] / dp[i][j][2] then\n                    dp[i][j][1] = dp[i][j][1] + dp[i][j - 1][1]\n                    dp[i][j][2] = dp[i][j][2] + dp[i][j - 1][2]\n                end\n            end\n        end\n    end\n    return dp[n][n][1] / dp[n][n][2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplb6v7tic.lua:37: expected: 5.2, actual: 9.0\nstack traceback:\n\t/tmp/tmplb6v7tic.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].cost = 0\n      dp[i][j].count = 0\n    end\n  end\n  dp[1][1].cost = cost[1][1]\n  dp[1][1].count = 1\n  for i = 2, n do\n    dp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n    dp[i][1].count = dp[i - 1][1].count + 1\n  end\n  for j = 2, n do\n    dp[1][j].cost = dp[1][j - 1].cost + cost[1][j]\n    dp[1][j].count = dp[1][j - 1].count + 1\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + cost[i][j]\n      dp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n    end\n  end\n  return dp[n][n].cost / dp[n][n].count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = cost[i][j]\n            dp[i][j].count = 1\n        end\n    end\n    for i = n - 1, 1, -1 do\n        for j = n - 1, 1, -1 do\n            local cost1 = dp[i + 1][j].cost + cost[i][j]\n            local count1 = dp[i + 1][j].count + 1\n            local cost2 = dp[i][j + 1].cost + cost[i][j]\n            local count2 = dp[i][j + 1].count + 1\n            if cost1 * count2 > cost2 * count1 then\n                dp[i][j].cost = cost1\n                dp[i][j].count = count1\n            else\n                dp[i][j].cost = cost2\n                dp[i][j].count = count2\n            end\n        end\n    end\n    return dp[1][1].cost / dp[1][1].count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69tdm3ck.lua:34: expected: 5.2, actual: 4.6666666666667\nstack traceback:\n\t/tmp/tmp69tdm3ck.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = 0\n\t\tend\n\tend\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j][1] = cost[i][j]\n        end\n    end\n    for i = 2, n do\n        dp[1][i][2] = dp[1][i - 1][1] + cost[1][i]\n        dp[i][1][2] = dp[i - 1][1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j][2] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n        end\n    end\n    return dp[n][n][2] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uefbqyl.lua:27: expected: 5.2, actual: 2.6\nstack traceback:\n\t/tmp/tmp_uefbqyl.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\tend\n\tend\n\tdp[1][1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n\t\tdp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tfor k = 1, i + j - 1 do\n\t\t\t\tdp[i][j][k] = math.max(dp[i - 1][j][k - 1], dp[i][j - 1][k - 1]) + cost[i][j]\n\t\t\tend\n\t\tend\n\tend\n\tlocal max = 0\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tmax = math.max(max, dp[i][j][i + j - 1] / (i + j - 1))\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two nil values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j][1] = cost[i][j]\n    end\n  end\n  for i = 2, n do\n    dp[1][i][2] = dp[1][i - 1][1] + cost[1][i]\n    dp[i][1][2] = dp[i - 1][1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j][2] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n    end\n  end\n  return dp[n][n][2] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp689ponzj.lua:27: expected: 5.2, actual: 2.6\nstack traceback:\n\t/tmp/tmp689ponzj.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for j = 2, n do\n        dp[1][j] = dp[1][j - 1] + cost[1][j]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = cost[i][j]\n\t\t\tdp[i][j].count = 1\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i-1].cost + dp[1][i].cost\n\t\tdp[1][i].count = dp[1][i-1].count + 1\n\t\tdp[i][1].cost = dp[i-1][1].cost + dp[i][1].cost\n\t\tdp[i][1].count = dp[i-1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].cost = math.max(dp[i-1][j].cost, dp[i][j-1].cost) + dp[i][j].cost\n\t\t\tdp[i][j].count = math.max(dp[i-1][j].count, dp[i][j-1].count) + 1\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tdp[1] = {}\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\tend\n\tfor i = 2, n do\n\t\tdp[i] = {}\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzw1p5id_.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].max = 0\n      dp[i][j].avg = 0\n    end\n  end\n  dp[1][1].max = cost[1][1]\n  dp[1][1].avg = cost[1][1]\n  for i = 2, n do\n    dp[i][1].max = dp[i - 1][1].max + cost[i][1]\n    dp[i][1].avg = dp[i][1].max / i\n    dp[1][i].max = dp[1][i - 1].max + cost[1][i]\n    dp[1][i].avg = dp[1][i].max / i\n  end\n  for i = 2, n do\n    for j = 2, n do\n      local max1 = dp[i - 1][j].max + cost[i][j]\n      local avg1 = max1 / (i + j - 1)\n      local max2 = dp[i][j - 1].max + cost[i][j]\n      local avg2 = max2 / (i + j - 1)\n      if avg1 > avg2 then\n        dp[i][j].max = max1\n        dp[i][j].avg = avg1\n      else\n        dp[i][j].max = max2\n        dp[i][j].avg = avg2\n      end\n    end\n  end\n  return dp[n][n].avg\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = 0\n            dp[i][j].count = 0\n        end\n    end\n    dp[1][1].cost = cost[1][1]\n    dp[1][1].count = 1\n    for i = 2, n do\n        dp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n        dp[1][i].count = dp[1][i - 1].count + 1\n    end\n    for i = 2, n do\n        dp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n        dp[i][1].count = dp[i - 1][1].count + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + cost[i][j]\n            dp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = 0\n\t\tend\n\tend\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = 0\n\t\tend\n\tend\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = cost[i][j]\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = 0\n\t\tend\n\tend\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = 0\n\t\tend\n\tend\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = 0\n\t\tend\n\tend\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j][1] = cost[i][j]\n            dp[i][j][2] = 1\n        end\n    end\n    for i = 2, n do\n        dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n        dp[1][i][2] = dp[1][i - 1][2] + 1\n        dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n        dp[i][1][2] = dp[i - 1][1][2] + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            local sum1, count1 = dp[i - 1][j][1], dp[i - 1][j][2]\n            local sum2, count2 = dp[i][j - 1][1], dp[i][j - 1][2]\n            if sum1 / count1 > sum2 / count2 then\n                dp[i][j][1] = sum1 + cost[i][j]\n                dp[i][j][2] = count1 + 1\n            else\n                dp[i][j][1] = sum2 + cost[i][j]\n                dp[i][j][2] = count2 + 1\n            end\n        end\n    end\n    return dp[n][n][1] / dp[n][n][2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\tend\n\tend\n\tdp[1][1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n\t\tdp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n\t\tend\n\tend\n\tfor k = 2, n do\n\t\tfor i = 1, n do\n\t\t\tfor j = 1, n do\n\t\t\t\tdp[i][j][k] = math.max(dp[i - 1][j][k], dp[i][j - 1][k]) + cost[i][j]\n\t\t\tend\n\t\tend\n\tend\n\tlocal max = dp[n][n][1] / 1\n\tfor k = 2, n do\n\t\tmax = math.max(max, dp[n][n][k] / k)\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfyaowjw2.lua:24: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpfyaowjw2.lua:24: in local 'candidate'\n\t/tmp/tmpfyaowjw2.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i-1][1] + cost[i][1]\n    dp[1][i] = dp[1][i-1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2*n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = cost[i][j]\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].sum = 0\n\t\t\tdp[i][j].count = 0\n\t\tend\n\tend\n\tdp[1][1].sum = cost[1][1]\n\tdp[1][1].count = 1\n\tfor i = 2, n do\n\t\tdp[i][1].sum = dp[i - 1][1].sum + cost[i][1]\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\t\tdp[1][i].sum = dp[1][i - 1].sum + cost[1][i]\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].sum = math.max(dp[i - 1][j].sum, dp[i][j - 1].sum) + cost[i][j]\n\t\t\tdp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n\t\tend\n\tend\n\treturn dp[n][n].sum / dp[n][n].count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (n * n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_d68us9.lua:27: expected: 5.2, actual: 2.8888888888889\nstack traceback:\n\t/tmp/tmpa_d68us9.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i-1][1] + cost[i][1]\n        dp[1][i] = dp[1][i-1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2*n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local N = #cost\n    local dp = {}\n    for i = 1, N do\n        dp[i] = {}\n        for j = 1, N do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, N do\n        dp[1][i] = dp[1][i-1] + cost[1][i]\n        dp[i][1] = dp[i-1][1] + cost[i][1]\n    end\n    for i = 2, N do\n        for j = 2, N do\n            dp[i][j] = cost[i][j] + math.max(dp[i-1][j], dp[i][j-1])\n        end\n    end\n    return dp[N][N] / (2*N - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = cost[i][j]\n\t\t\tdp[i][j].count = 1\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + dp[i][j].cost\n\t\t\tdp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = 0\n\t\t\tdp[i][j].count = 0\n\t\tend\n\tend\n\tdp[1][1].cost = cost[1][1]\n\tdp[1][1].count = 1\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + cost[i][j]\n\t\t\tdp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\tend\n\tend\n\tdp[1][1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n\t\tdp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n\t\tend\n\tend\n\tfor k = 2, n do\n\t\tfor i = 1, n do\n\t\t\tdp[i][1][k] = dp[i][1][k - 1] + cost[i][1]\n\t\t\tdp[1][i][k] = dp[1][i][k - 1] + cost[1][i]\n\t\tend\n\t\tfor i = 2, n do\n\t\t\tfor j = 2, n do\n\t\t\t\tdp[i][j][k] = math.max(dp[i - 1][j][k], dp[i][j - 1][k]) + cost[i][j]\n\t\t\tend\n\t\tend\n\tend\n\tlocal maxAvg = -math.huge\n\tfor k = 1, n do\n\t\tmaxAvg = math.max(maxAvg, dp[n][n][k] / k)\n\tend\n\treturn maxAvg\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvh6phs6y.lua:42: expected: 5.2, actual: 26.0\nstack traceback:\n\t/tmp/tmpvh6phs6y.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].cost = cost[i][j]\n      dp[i][j].count = 1\n    end\n  end\n  for i = 2, n do\n    dp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n    dp[1][i].count = dp[1][i - 1].count + 1\n  end\n  for i = 2, n do\n    dp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n    dp[i][1].count = dp[i - 1][1].count + 1\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j].cost = dp[i - 1][j].cost + dp[i][j].cost\n      dp[i][j].count = dp[i - 1][j].count + 1\n      if dp[i][j - 1].cost / dp[i][j - 1].count > dp[i][j].cost / dp[i][j].count then\n        dp[i][j].cost = dp[i][j - 1].cost + dp[i][j].cost\n        dp[i][j].count = dp[i][j - 1].count + 1\n      end\n    end\n  end\n  return dp[n][n].cost / dp[n][n].count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ukc6swb.lua:37: expected: 5.2, actual: 13.2\nstack traceback:\n\t/tmp/tmp5ukc6swb.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124097,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}