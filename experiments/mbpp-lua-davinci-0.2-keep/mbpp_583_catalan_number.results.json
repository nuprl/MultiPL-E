{
  "name": "mbpp_583_catalan_number",
  "language": "lua",
  "prompt": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {}\n    catalan[0] = 1\n    catalan[1] = 1\n    for i = 2, num do\n        catalan[i] = 0\n        for j = 0, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\n    return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tif num == 0 then\n\t\treturn 1\n\tend\n\tlocal result = 0\n\tfor i = 0, num - 1 do\n\t\tresult = result + catalan_number(i) * catalan_number(num - i - 1)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local catalan = {}\n  catalan[0] = 1\n  catalan[1] = 1\n  for i = 2, num do\n    catalan[i] = 0\n    for j = 0, i - 1 do\n      catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n    end\n  end\n  return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    local fact = 1\n    for i = 1, num do\n      fact = fact * i\n    end\n    return fact\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpa1wcm05o.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(n)\n        if n == 0 then\n            return 1\n        else\n            return n * factorial(n - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnh8j79zd.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal catalan = {}\n\tcatalan[0] = 1\n\tcatalan[1] = 1\n\tfor i = 2, num do\n\t\tcatalan[i] = 0\n\t\tfor j = 0, i - 1 do\n\t\t\tcatalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n\t\tend\n\tend\n\treturn catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        local result = 1\n        for i = 1, num do\n            result = result * i\n        end\n        return result\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmydofx0b.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {}\n    catalan[0] = 1\n    catalan[1] = 1\n    for i = 2, num do\n        catalan[i] = 0\n        for j = 0, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  if num == 0 then return 1 end\n  local sum = 0\n  for i = 0, num-1 do\n    sum = sum + catalan_number(i) * catalan_number(num-i-1)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {}\n    catalan[0] = 1\n    catalan[1] = 1\n    for i = 2, num do\n        catalan[i] = 0\n        for j = 0, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal catalan = {}\n\tcatalan[0] = 1\n\tcatalan[1] = 1\n\tfor i = 2, num do\n\t\tcatalan[i] = 0\n\t\tfor j = 0, i - 1 do\n\t\t\tcatalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n\t\tend\n\tend\n\treturn catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local catalan_numbers = {1, 1}\n  local function helper(n)\n    if catalan_numbers[n] then\n      return catalan_numbers[n]\n    end\n    local sum = 0\n    for i = 1, n - 1 do\n      sum = sum + helper(i) * helper(n - i)\n    end\n    catalan_numbers[n] = sum\n    return sum\n  end\n  return helper(num)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsikonhke.lua:21: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmpsikonhke.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local catalan = {1, 1}\n  for i = 3, num do\n    catalan[i] = 0\n    for j = 1, i - 1 do\n      catalan[i] = catalan[i] + catalan[j] * catalan[i - j]\n    end\n  end\n  return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_rvqlo6.lua:16: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmpz_rvqlo6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local catalan_numbers = {}\n  catalan_numbers[0] = 1\n  catalan_numbers[1] = 1\n  for i = 2, num do\n    catalan_numbers[i] = 0\n    for j = 0, i - 1 do\n      catalan_numbers[i] = catalan_numbers[i] + catalan_numbers[j] * catalan_numbers[i - j - 1]\n    end\n  end\n  return catalan_numbers[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal catalan = {}\n\tcatalan[0] = 1\n\tcatalan[1] = 1\n\tfor i = 2, num do\n\t\tcatalan[i] = 0\n\t\tfor j = 0, i - 1 do\n\t\t\tcatalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n\t\tend\n\tend\n\treturn catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        local result = 1\n        for i = 2, num do\n            result = result * i\n        end\n        return result\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjl08j4a7.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal function factorial(n)\n\t\tlocal result = 1\n\t\tfor i = 1, n do\n\t\t\tresult = result * i\n\t\tend\n\t\treturn result\n\tend\n\treturn factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal function factorial(num)\n\t\tlocal result = 1\n\t\tfor i = 1, num do\n\t\t\tresult = result * i\n\t\tend\n\t\treturn result\n\tend\n\treturn factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local res = 0\n    for i = 0, num - 1 do\n        res = res + catalan_number(i) * catalan_number(num - i - 1)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal catalan_table = {1, 1}\n\tfor i = 3, num do\n\t\tcatalan_table[i] = 0\n\t\tfor j = 1, i - 1 do\n\t\t\tcatalan_table[i] = catalan_table[i] + catalan_table[j] * catalan_table[i - j]\n\t\tend\n\tend\n\treturn catalan_table[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnilaivtm.lua:16: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmpnilaivtm.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tif num == 0 then\n\t\treturn 1\n\tend\n\tlocal result = 0\n\tfor i = 0, num - 1 do\n\t\tresult = result + catalan_number(i) * catalan_number(num - i - 1)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        local result = 1\n        for i = 1, num do\n            result = result * i\n        end\n        return result\n    end\n    return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    if num == 0 then\n      return 1\n    end\n    local result = 1\n    for i = 1, num do\n      result = result * i\n    end\n    return result\n  end\n  return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  if num == 0 then\n    return 1\n  end\n  local result = 0\n  for i = 0, num - 1 do\n    result = result + catalan_number(i) * catalan_number(num - i - 1)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local result = 0\n    for i = 0, num - 1 do\n        result = result + catalan_number(i) * catalan_number(num - i - 1)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local result = 1\n    for i = 1, num do\n        result = result * (2 * num - i + 1) / i\n    end\n    return result / (num + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\n    return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe69qq2tn.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal catalan_table = {}\n\tcatalan_table[0] = 1\n\tcatalan_table[1] = 1\n\tfor i = 2, num do\n\t\tcatalan_table[i] = 0\n\t\tfor j = 0, i - 1 do\n\t\t\tcatalan_table[i] = catalan_table[i] + catalan_table[j] * catalan_table[i - j - 1]\n\t\tend\n\tend\n\treturn catalan_table[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local sum = 0\n    for i = 1, num do\n        sum = sum + catalan_number(i - 1) * catalan_number(num - i)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    local result = 1\n    for i = 1, num do\n      result = result * i\n    end\n    return result\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmp82ebrvhe.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local result = 1\n    for i = 1, num do\n        result = result * (2 * num - i + 1) / i\n    end\n    return result / (num + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {}\n    catalan[0] = 1\n    catalan[1] = 1\n    for i = 2, num do\n        catalan[i] = 0\n        for j = 0, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(n)\n    if n == 0 then\n      return 1\n    else\n      return n * factorial(n - 1)\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdbhl93dg.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    if num == 0 then\n      return 1\n    else\n      return num * factorial(num - 1)\n    end\n  end\n  return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {1, 1}\n    for i = 3, num do\n        catalan[i] = 0\n        for j = 1, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpza1iv9ip.lua:16: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmpza1iv9ip.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local sum = 0\n    for i = 0, num - 1 do\n        sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local num = tonumber(num)\n    if num == 0 then\n        return 1\n    end\n    local result = 0\n    for i = 0, num - 1 do\n        result = result + catalan_number(i) * catalan_number(num - 1 - i)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local catalan = {1, 1}\n  for i = 3, num do\n    local sum = 0\n    for j = 1, i - 1 do\n      sum = sum + catalan[j] * catalan[i - j]\n    end\n    catalan[i] = sum\n  end\n  return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3b9abicv.lua:17: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmp3b9abicv.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  if num == 0 then\n    return 1\n  end\n  local sum = 0\n  for i = 0, num - 1 do\n    sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local result = 0\n    for i = 0, num - 1 do\n        result = result + catalan_number(i) * catalan_number(num - i - 1)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local sum = 0\n    for i = 0, num - 1 do\n        sum = sum + catalan_number(i) * catalan_number(num - 1 - i)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  if num == 0 then\n    return 1\n  end\n  local sum = 0\n  for i = 0, num - 1 do\n    sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local result = 1\n  for i = 0, num - 1 do\n    result = result * (2 * num - i) / (i + 1)\n  end\n  return result / (num + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function catalan(n)\n        if n == 0 then\n            return 1\n        end\n        local sum = 0\n        for i = 0, n - 1 do\n            sum = sum + catalan(i) * catalan(n - i - 1)\n        end\n        return sum\n    end\n    return catalan(num)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local catalan = {}\n  catalan[0] = 1\n  catalan[1] = 1\n  for i = 2, num do\n    catalan[i] = 0\n    for j = 0, i - 1 do\n      catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n    end\n  end\n  return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local sum = 0\n    for i = 0, num - 1 do\n        sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function catalan(num)\n    if num == 0 then\n      return 1\n    end\n    local sum = 0\n    for i = 0, num - 1 do\n      sum = sum + catalan(i) * catalan(num - i - 1)\n    end\n    return sum\n  end\n  return catalan(num)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe69qq2tn.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  if num == 0 then\n    return 1\n  end\n  local result = 0\n  for i = 0, num - 1 do\n    result = result + catalan_number(i) * catalan_number(num - i - 1)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal function factorial(num)\n\t\tlocal result = 1\n\t\tfor i = 1, num do\n\t\t\tresult = result * i\n\t\tend\n\t\treturn result\n\tend\n\treturn factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe69qq2tn.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {1, 1}\n    for i = 3, num do\n        catalan[i] = 0\n        for j = 1, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpza1iv9ip.lua:16: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmpza1iv9ip.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        local fact = 1\n        for i = 1, num do\n            fact = fact * i\n        end\n        return fact\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgkjicgd2.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        local result = 1\n        for i = 1, num do\n            result = result * i\n        end\n        return result\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmydofx0b.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {}\n    catalan[0] = 1\n    catalan[1] = 1\n    for i = 2, num do\n        catalan[i] = 0\n        for j = 0, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    if num == 0 then\n      return 1\n    else\n      return num * factorial(num - 1)\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcc1tmeud.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(n)\n    local result = 1\n    for i = 1, n do\n      result = result * i\n    end\n    return result\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": "",
      "stderr": "lua: /tmp/tmpasu98obz.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {}\n    catalan[0] = 1\n    for i = 1, num do\n        catalan[i] = 0\n        for j = 0, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tif num == 0 then\n\t\treturn 1\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "",
      "stderr": "lua: /tmp/tmpc7kyfl0u.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local result = 0\n    for i = 0, num - 1 do\n        result = result + catalan_number(i) * catalan_number(num - i - 1)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        local result = 1\n        for i = 1, num do\n            result = result * i\n        end\n        return result\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmydofx0b.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local res = 0\n    for i = 0, num - 1 do\n        res = res + catalan_number(i) * catalan_number(num - i - 1)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    if num == 0 then\n      return 1\n    else\n      return num * factorial(num - 1)\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcc1tmeud.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local result = 1\n  for i = 0, num do\n    result = result * (2 * num - i) / (i + 1)\n  end\n  return result / (num + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0k06efuq.lua:13: expected: 16796, actual: 15269.090909091\nstack traceback:\n\t/tmp/tmp0k06efuq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(n)\n    local result = 1\n    for i = 1, n do\n      result = result * i\n    end\n    return result\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": "",
      "stderr": "lua: /tmp/tmpasu98obz.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    if num == 0 then\n      return 1\n    else\n      return num * factorial(num - 1)\n    end\n  end\n  return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan_num = 1\n    for i = 1, num do\n        catalan_num = catalan_num * (2 * num - i + 1) / (i + 1)\n    end\n    return catalan_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    local result = 1\n    for i = 1, num do\n      result = result * i\n    end\n    return result\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmp82ebrvhe.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function catalan_recursive(num)\n        if num <= 1 then\n            return 1\n        end\n        local res = 0\n        for i = 0, num - 1 do\n            res = res + catalan_recursive(i) * catalan_recursive(num - i - 1)\n        end\n        return res\n    end\n    return catalan_recursive(num)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function fact(n)\n        if n == 0 then\n            return 1\n        else\n            return n * fact(n - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_3es9tf7.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(n)\n    if n == 0 then return 1 end\n    return n * factorial(n - 1)\n  end\n  return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        local result = 1\n        for i = 1, num do\n            result = result * i\n        end\n        return result\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmydofx0b.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    local result = 1\n    for i = 1, num do\n      result = result * i\n    end\n    return result\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmp82ebrvhe.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  if num == 0 then\n    return 1\n  end\n  local sum = 0\n  for i = 0, num - 1 do\n    sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  if num == 0 then\n    return 1\n  end\n  local sum = 0\n  for i = 0, num - 1 do\n    sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {}\n    catalan[0] = 1\n    catalan[1] = 1\n    for i = 2, num do\n        catalan[i] = 0\n        for j = 0, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local res = 0\n    for i = 0, num - 1 do\n        res = res + catalan_number(i) * catalan_number(num - i - 1)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal function factorial(num)\n\t\tif num == 0 then\n\t\t\treturn 1\n\t\telse\n\t\t\treturn num * factorial(num - 1)\n\t\tend\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "",
      "stderr": "lua: /tmp/tmppbjnul74.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    local result = 1\n    for i = 1, num do\n      result = result * i\n    end\n    return result\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmp82ebrvhe.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(n)\n        if n == 0 then\n            return 1\n        else\n            return n * factorial(n - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnh8j79zd.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    if num == 0 then\n      return 1\n    else\n      return num * factorial(num - 1)\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcc1tmeud.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        local fact = 1\n        for i = 1, num do\n            fact = fact * i\n        end\n        return fact\n    end\n    return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan_numbers = {1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190, 6564120420, 24466267020, 91482563640, 343059613650, 1289904147324, 4861946401452, 18367353072152, 69533550916004, 263747951750360, 1002242216651368, 3814986502092304}\n    return catalan_numbers[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_zgya4e.lua:10: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmpt_zgya4e.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  if num == 0 then\n    return 1\n  end\n  local result = 0\n  for i = 0, num - 1 do\n    result = result + catalan_number(i) * catalan_number(num - i - 1)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal catalan_table = {1}\n\tfor i = 2, num do\n\t\tcatalan_table[i] = 0\n\t\tfor j = 1, i - 1 do\n\t\t\tcatalan_table[i] = catalan_table[i] + catalan_table[j] * catalan_table[i - j]\n\t\tend\n\tend\n\treturn catalan_table[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe20kcfl8.lua:16: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmpe20kcfl8.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan_numbers = {1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190, 6564120420, 24466267020, 91482563640, 343059613650, 1289904147324, 4861946401452, 18367353072152, 69533550916004, 263747951750360, 1002242216651368, 3814986502092304}\n    return catalan_numbers[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_zgya4e.lua:10: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmpt_zgya4e.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local res = 0\n    for i = 0, num - 1 do\n        res = res + catalan_number(i) * catalan_number(num - i - 1)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        local result = 1\n        for i = 1, num do\n            result = result * i\n        end\n        return result\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmydofx0b.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        local res = 1\n        for i = 1, num do\n            res = res * i\n        end\n        return res\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "",
      "stderr": "lua: /tmp/tmphjwo7h8a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan_numbers = {1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190, 6564120420, 24466267020, 91482563640, 343059613650, 1289904147324, 4861946401452, 18367353072152, 69533550916004, 263747951750360, 1002242216651368, 3814986502092304}\n    return catalan_numbers[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_zgya4e.lua:10: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmpt_zgya4e.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {1, 1}\n    for i = 3, num do\n        catalan[i] = 0\n        for j = 1, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpza1iv9ip.lua:16: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmpza1iv9ip.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    if num == 0 then\n      return 1\n    end\n    return num * factorial(num - 1)\n  end\n  return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {}\n    catalan[0] = 1\n    catalan[1] = 1\n    for i = 2, num do\n        catalan[i] = 0\n        for j = 0, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {}\n    catalan[0] = 1\n    catalan[1] = 1\n    for i = 2, num do\n        catalan[i] = 0\n        for j = 0, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    local result = 1\n    for i = 2, num do\n      result = result * i\n    end\n    return result\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwl9nu86m.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {1, 1}\n    for i = 3, num do\n        local sum = 0\n        for j = 1, i - 1 do\n            sum = sum + catalan[j] * catalan[i - j]\n        end\n        catalan[i] = sum\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmffmtu4s.lua:17: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmpmffmtu4s.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function fact(n)\n    if n == 0 then return 1 end\n    return n * fact(n - 1)\n  end\n  return fact(2 * num) / (fact(num + 1) * fact(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(n)\n        if n == 0 then return 1 end\n        return n * factorial(n - 1)\n    end\n    return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    if num == 0 then\n      return 1\n    else\n      return num * factorial(num - 1)\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcc1tmeud.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local catalan = {}\n  catalan[0] = 1\n  for i = 1, num do\n    catalan[i] = 0\n    for j = 0, i - 1 do\n      catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n    end\n  end\n  return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal catalan_numbers = {}\n\tcatalan_numbers[0] = 1\n\tcatalan_numbers[1] = 1\n\tfor i = 2, num do\n\t\tcatalan_numbers[i] = 0\n\t\tfor j = 0, i - 1 do\n\t\t\tcatalan_numbers[i] = catalan_numbers[i] + catalan_numbers[j] * catalan_numbers[i - j - 1]\n\t\tend\n\tend\n\treturn catalan_numbers[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function catalan_number_helper(num)\n    if num == 0 then\n      return 1\n    end\n    local result = 0\n    for i = 0, num - 1 do\n      result = result + catalan_number_helper(i) * catalan_number_helper(num - i - 1)\n    end\n    return result\n  end\n  return catalan_number_helper(num)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {}\n    catalan[0] = 1\n    catalan[1] = 1\n    for i = 2, num do\n        catalan[i] = 0\n        for j = 0, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal catalan = {}\n\tcatalan[0] = 1\n\tcatalan[1] = 1\n\tfor i = 2, num do\n\t\tcatalan[i] = 0\n\t\tfor j = 0, i - 1 do\n\t\t\tcatalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n\t\tend\n\tend\n\treturn catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local result = 1\n    for i = 1, num do\n        result = result * (2 * num - i + 1) / i\n    end\n    return result / (num + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal result = 1\n\tfor i = 0, num do\n\t\tresult = result * (num + i) / (i + 1)\n\tend\n\treturn result / (num + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplwyni635.lua:13: expected: 16796, actual: 15269.090909091\nstack traceback:\n\t/tmp/tmplwyni635.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal function factorial(num)\n\t\tif num == 0 then\n\t\t\treturn 1\n\t\telse\n\t\t\treturn num * factorial(num - 1)\n\t\tend\n\tend\n\treturn factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(n)\n        if n == 0 then\n            return 1\n        else\n            return n * factorial(n - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnh8j79zd.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num <= 1 then\n        return 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "",
      "stderr": "lua: /tmp/tmple8dyuqc.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(n)\n    if n == 0 then return 1 end\n    return n * factorial(n - 1)\n  end\n  return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local sum = 0\n    for i = 0, num - 1 do\n        sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {1, 1}\n    for i = 3, num do\n        catalan[i] = 0\n        for j = 1, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpza1iv9ip.lua:16: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmpza1iv9ip.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    local result = 1\n    for i = 1, num do\n      result = result * i\n    end\n    return result\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmp82ebrvhe.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(n)\n        if n == 0 then\n            return 1\n        else\n            return n * factorial(n - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnh8j79zd.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        local fact = 1\n        for i = 1, num do\n            fact = fact * i\n        end\n        return fact\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgkjicgd2.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    if num == 0 then\n      return 1\n    else\n      return num * factorial(num - 1)\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcc1tmeud.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190}\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnstdik8.lua:10: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmphnstdik8.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    if num == 0 then return 1 end\n    return num * factorial(num - 1)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr8jo8phz.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local catalan_numbers = {1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190, 6564120420, 24466267020, 91482563640, 343059613650, 1289904147324, 4861946401452, 18367353072152, 69533550916004, 263747951750360, 1002242216651368, 3814986502092304}\n  return catalan_numbers[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48oydv1e.lua:10: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmp48oydv1e.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  if num == 0 then return 1 end\n  local sum = 0\n  for i = 0, num - 1 do\n    sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(n)\n        if n == 0 then\n            return 1\n        end\n        return n * factorial(n - 1)\n    end\n    return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal function factorial(n)\n\t\tif n == 0 then\n\t\t\treturn 1\n\t\telse\n\t\t\treturn n * factorial(n - 1)\n\t\tend\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqobbw2iq.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {}\n    catalan[0] = 1\n    catalan[1] = 1\n    for i = 2, num do\n        catalan[i] = 0\n        for j = 0, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    if num == 0 then\n      return 1\n    else\n      return num * factorial(num - 1)\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcc1tmeud.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local sum = 0\n    for i = 0, num - 1 do\n        sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {}\n    catalan[0] = 1\n    catalan[1] = 1\n    for i = 2, num do\n        catalan[i] = 0\n        for j = 0, i-1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i-j-1]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {}\n    catalan[0] = 1\n    catalan[1] = 1\n    for i = 2, num do\n        catalan[i] = 0\n        for j = 0, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    if num == 0 then\n      return 1\n    else\n      return num * factorial(num - 1)\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcc1tmeud.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal function factorial(num)\n\t\tif num == 0 then\n\t\t\treturn 1\n\t\telse\n\t\t\treturn num * factorial(num - 1)\n\t\tend\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "",
      "stderr": "lua: /tmp/tmppbjnul74.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal function factorial(num)\n\t\tlocal result = 1\n\t\tfor i = 1, num do\n\t\t\tresult = result * i\n\t\tend\n\t\treturn result\n\tend\n\treturn factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local sum = 0\n    for i = 0, num - 1 do\n        sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 1 then\n        return 1\n    end\n    local sum = 0\n    for i = 1, num - 1 do\n        sum = sum + catalan_number(i) * catalan_number(num - i)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoah8ixkv.lua:16: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmpoah8ixkv.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan_table = {1}\n    for i = 2, num do\n        catalan_table[i] = 0\n        for j = 1, i - 1 do\n            catalan_table[i] = catalan_table[i] + catalan_table[j] * catalan_table[i - j]\n        end\n    end\n    return catalan_table[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplhppm1td.lua:16: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmplhppm1td.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local catalan = {}\n  catalan[0] = 1\n  for i = 1, num do\n    catalan[i] = 0\n    for j = 0, i - 1 do\n      catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n    end\n  end\n  return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local result = 1\n  for i = 0, num do\n    result = result * (num + i) / (i + 1)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe93tx01d.lua:13: expected: 16796, actual: 167960.0\nstack traceback:\n\t/tmp/tmpe93tx01d.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local sum = 0\n    for i = 0, num - 1 do\n        sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        end\n        local result = 1\n        for i = 1, num do\n            result = result * i\n        end\n        return result\n    end\n    return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan_numbers = {}\n    catalan_numbers[0] = 1\n    catalan_numbers[1] = 1\n    for i = 2, num do\n        catalan_numbers[i] = 0\n        for j = 0, i - 1 do\n            catalan_numbers[i] = catalan_numbers[i] + catalan_numbers[j] * catalan_numbers[i - j - 1]\n        end\n    end\n    return catalan_numbers[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    local result = 1\n    for i = 1, num do\n      result = result * i\n    end\n    return result\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmp82ebrvhe.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        end\n        return num * factorial(num - 1)\n    end\n    return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local catalan = {}\n  catalan[0] = 1\n  catalan[1] = 1\n  for i = 2, num do\n    catalan[i] = 0\n    for j = 0, i - 1 do\n      catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n    end\n  end\n  return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\n    return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal function factorial(num)\n\t\tif num == 0 then\n\t\t\treturn 1\n\t\tend\n\t\treturn num * factorial(num - 1)\n\tend\n\treturn factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal catalan_numbers = {1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190, 6564120420, 24466267020, 91482563640, 343059613650, 1289904147324, 4861946401452, 18367353072152, 69533550916004, 263747951750360, 1002242216651368, 3814986502092304}\n\treturn catalan_numbers[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12pduqe_.lua:10: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmp12pduqe_.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\n    return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local catalan = {}\n  catalan[0] = 1\n  catalan[1] = 1\n  for i = 2, num do\n    catalan[i] = 0\n    for j = 0, i - 1 do\n      catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n    end\n  end\n  return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        local result = 1\n        for i = 1, num do\n            result = result * i\n        end\n        return result\n    end\n    return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(n)\n        if n == 0 then\n            return 1\n        else\n            return n * factorial(n - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnh8j79zd.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan_numbers = {1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190}\n    return catalan_numbers[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_2aalhp.lua:10: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmpy_2aalhp.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    local result = 1\n    for i = 1, num do\n      result = result * i\n    end\n    return result\n  end\n  return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122597,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    if num == 0 then\n      return 1\n    else\n      return num * factorial(num - 1)\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcc1tmeud.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {1, 1}\n    for i = 3, num do\n        catalan[i] = 0\n        for j = 1, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpza1iv9ip.lua:16: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmpza1iv9ip.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tif num == 0 then return 1 end\n\tlocal sum = 0\n\tfor i = 0, num - 1 do\n\t\tsum = sum + catalan_number(i) * catalan_number(num - i - 1)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan_table = {}\n    catalan_table[0] = 1\n    catalan_table[1] = 1\n    for i = 2, num do\n        catalan_table[i] = 0\n        for j = 0, i-1 do\n            catalan_table[i] = catalan_table[i] + catalan_table[j] * catalan_table[i-j-1]\n        end\n    end\n    return catalan_table[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(n)\n        if n == 0 then\n            return 1\n        end\n        return n * factorial(n - 1)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "",
      "stderr": "lua: /tmp/tmpd60t0hf0.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {}\n    catalan[0] = 1\n    catalan[1] = 1\n    for i = 2, num do\n        catalan[i] = 0\n        for j = 0, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 1 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0la0f1hb.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local sum = 0\n    for i = 0, num - 1 do\n        sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function fact(n)\n    if n == 0 then\n      return 1\n    end\n    return n * fact(n - 1)\n  end\n  return fact(2 * num) / (fact(num + 1) * fact(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local catalan = {1, 1}\n  for i = 3, num do\n    catalan[i] = 0\n    for j = 1, i - 1 do\n      catalan[i] = catalan[i] + catalan[j] * catalan[i - j]\n    end\n  end\n  return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_rvqlo6.lua:16: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmpz_rvqlo6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        local result = 1\n        for i = 1, num do\n            result = result * i\n        end\n        return result\n    end\n    return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {}\n    catalan[0] = 1\n    catalan[1] = 1\n    for i = 2, num do\n        catalan[i] = 0\n        for j = 0, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    local result = 1\n    for i = 1, num do\n      result = result * i\n    end\n    return result\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmp82ebrvhe.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local sum = 0\n    for i = 0, num - 1 do\n        sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  if num == 0 then return 1 end\n  local sum = 0\n  for i = 0, num - 1 do\n    sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal catalan_numbers = {1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190, 6564120420, 24466267020, 91482563640, 343059613650, 1289904147324, 4861946401452, 18367353072152, 69533550916004, 263747951750360, 1002242216651368, 3814986502092304}\n\treturn catalan_numbers[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12pduqe_.lua:10: expected: 16796, actual: 4862\nstack traceback:\n\t/tmp/tmp12pduqe_.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(n)\n        if n == 0 then\n            return 1\n        else\n            return n * factorial(n - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnh8j79zd.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan = {}\n    catalan[0] = 1\n    catalan[1] = 1\n    for i = 2, num do\n        catalan[i] = 0\n        for j = 0, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n        end\n    end\n    return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local catalan_number = 1\n    for i = 1, num do\n        catalan_number = catalan_number * (2 * num - i + 1) / i\n    end\n    return catalan_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggie6yck.lua:13: expected: 16796, actual: 184756.0\nstack traceback:\n\t/tmp/tmpggie6yck.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tif num == 1 then\n\t\treturn 1\n\tend\n\tlocal sum = 0\n\tfor i = 1, num do\n\t\tsum = sum + catalan_number(i - 1) * catalan_number(num - i)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8t6mlmb.lua:16: expected: 16796, actual: 0\nstack traceback:\n\t/tmp/tmpz8t6mlmb.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    local result = 1\n    for i = 1, num do\n      result = result * i\n    end\n    return result\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmp82ebrvhe.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local result = 1\n    for i = 1, num do\n        result = result * (2 * num - i + 1) / i\n    end\n    return result / (num + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe69qq2tn.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        local result = 1\n        for i = 1, num do\n            result = result * i\n        end\n        return result\n    end\n    return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  if num == 0 then\n    return 1\n  end\n  local sum = 0\n  for i = 0, num - 1 do\n    sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    if num == 0 then\n        return 1\n    end\n    local sum = 0\n    for i = 0, num - 1 do\n        sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  if num == 0 then\n    return 1\n  end\n  local result = 0\n  for i = 0, num - 1 do\n    result = result + catalan_number(i) * catalan_number(num - i - 1)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122598,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        local result = 1\n        for i = 1, num do\n            result = result * i\n        end\n        return result\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmydofx0b.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local catalan = {}\n  catalan[0] = 1\n  catalan[1] = 1\n  for i = 2, num do\n    catalan[i] = 0\n    for j = 0, i - 1 do\n      catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n    end\n  end\n  return catalan[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n\tlocal function factorial(num)\n\t\tlocal result = 1\n\t\tfor i = 1, num do\n\t\t\tresult = result * i\n\t\tend\n\t\treturn result\n\tend\n\treturn factorial(2*num)/(factorial(num+1)*factorial(num))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122599,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n  local function factorial(num)\n    if num == 0 then\n      return 1\n    else\n      return num * factorial(num - 1)\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcc1tmeud.lua:19: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qs7c13a.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}