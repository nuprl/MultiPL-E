{
  "name": "mbpp_598_armstrong_number",
  "language": "lua",
  "prompt": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile (temp ~= 0) do\n\t\tremainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif (number == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + remainder ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local num = number\n    local sum = 0\n    local rem = 0\n    while num > 0 do\n        rem = num % 10\n        sum = sum + (rem * rem * rem)\n        num = math.floor(num / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nprint(armstrong_number(153))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal num = number\n\twhile num > 0 do\n\t\tlocal digit = num % 10\n\t\tsum = sum + digit ^ 3\n\t\tnum = math.floor(num / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + remainder * remainder * remainder\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local temp = number\n    local sum = 0\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + remainder ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        print(number .. \" is an armstrong number\")\n    else\n        print(number .. \" is not an armstrong number\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpva6rdf71.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpva6rdf71.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile temp ~= 0 do\n\t\tremainder = temp % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal number_copy = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile number_copy ~= 0 do\n\t\tremainder = number_copy % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber_copy = math.floor(number_copy / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while (temp ~= 0) do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if (number == sum) then\n        print(number .. \" is an Armstrong number.\")\n    else\n        print(number .. \" is not an Armstrong number.\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": "153 is an Armstrong number.\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqaqv81p.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpsqaqv81p.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal result = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tresult = result + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif result == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile temp ~= 0 do\n\t\trem = temp % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local num = number\n    local sum = 0\n    local rem = 0\n    while num > 0 do\n        rem = num % 10\n        sum = sum + (rem * rem * rem)\n        num = math.floor(num / 10)\n    end\n    if sum == number then\n        print(number .. \" is an armstrong number\")\n    else\n        print(number .. \" is not an armstrong number\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46nt9bxg.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp46nt9bxg.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\tprint(temp .. \" is an armstrong number\")\n\telse\n\t\tprint(temp .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbd136t8a.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpbd136t8a.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal num = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile num > 0 do\n\t\trem = num % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnum = math.floor(num / 10)\n\tend\n\tif sum == number then\n\t\tprint(number .. \" is armstrong number\")\n\telse\n\t\tprint(number .. \" is not armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprs7i0g3y.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmprs7i0g3y.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\tprint(\"It is an armstrong number\")\n\telse\n\t\tprint(\"It is not an armstrong number\")\n\tend\nend\narmstrong_number(153)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "It is an armstrong number\nIt is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48n2hzj0.lua:22: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp48n2hzj0.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local temp = number\n  local sum = 0\n  local remainder = 0\n  while temp > 0 do\n    remainder = temp % 10\n    sum = sum + (remainder * remainder * remainder)\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    print(number .. \" is an armstrong number\")\n  else\n    print(number .. \" is not an armstrong number\")\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplabcp4d6.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmplabcp4d6.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\tlocal remainder = 0\n\twhile (number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif (temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp ~= 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp ~= 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + remainder * remainder * remainder\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal num = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile num > 0 do\n\t\trem = num % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnum = math.floor(num / 10)\n\tend\n\tif sum == number then\n\t\tprint(number .. \" is an armstrong number\")\n\telse\n\t\tprint(number .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile(number > 0) do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(sum == temp) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp ~= 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local num = number\n  local sum = 0\n  local digits = 0\n  local temp = 0\n  while num > 0 do\n    temp = num % 10\n    sum = sum + temp * temp * temp\n    num = math.floor(num / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp ~= 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile (temp ~= 0) do\n\t\trem = temp % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif (sum == number) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local temp = number\n    local sum = 0\n    local rem = 0\n    while temp ~= 0 do\n        rem = temp % 10\n        sum = sum + rem * rem * rem\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp ~= 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local number_string = tostring(number)\n    local number_length = string.len(number_string)\n    local sum = 0\n    for i = 1, number_length do\n        local digit = tonumber(string.sub(number_string, i, i))\n        sum = sum + digit ^ number_length\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp ~= 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\tprint(\"The given number is armstrong\")\n\telse\n\t\tprint(\"The given number is not armstrong\")\n\tend\nend\narmstrong_number(153)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "The given number is armstrong\nThe given number is armstrong\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpph0ssa5v.lua:22: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpph0ssa5v.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile(number > 0) do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp ~= 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\tprint(number .. \" is an armstrong number.\")\n\telse\n\t\tprint(number .. \" is not an armstrong number.\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number.\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0wttb4a.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpz0wttb4a.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp ~= 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif number == sum then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp ~= 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if number == sum then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp ~= 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal digit = number % 10\n\t\tsum = sum + digit ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local num = number\n    while num > 0 do\n        local digit = num % 10\n        sum = sum + digit ^ 3\n        num = math.floor(num / 10)\n    end\n    return sum == number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit^3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile (temp ~= 0) do\n\t\tremainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif (number == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + remainder * remainder * remainder\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local temp = number\n    local sum = 0\n    local rem = 0\n    while temp ~= 0 do\n        rem = temp % 10\n        sum = sum + (rem * rem * rem)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp, sum = number, 0\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\treturn sum == number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp ~= 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local rem = number % 10\n        sum = sum + rem ^ 3\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile number > 0 do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile temp ~= 0 do\n\t\tremainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\tprint(number .. \" is an armstrong number.\")\n\telse\n\t\tprint(number .. \" is not an armstrong number.\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number.\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7m51tua.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpa7m51tua.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp ~= 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local remainder = number % 10\n        sum = sum + remainder * remainder * remainder\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local num = number\n    while num > 0 do\n        local digit = num % 10\n        sum = sum + digit ^ 3\n        num = math.floor(num / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif temp == sum then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local num = number\n    while num > 0 do\n        local digit = num % 10\n        sum = sum + digit ^ 3\n        num = math.floor(num / 10)\n    end\n    if sum == number then\n        print(number .. \" is an armstrong number\")\n    else\n        print(number .. \" is not an armstrong number\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvruwxtej.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpvruwxtej.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local number_string = tostring(number)\n    local number_length = string.len(number_string)\n    local sum = 0\n    for i = 1, number_length do\n        local digit = string.sub(number_string, i, i)\n        sum = sum + math.pow(digit, number_length)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number ~= 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\tprint(temp..\" is an armstrong number\")\n\telse\n\t\tprint(temp..\" is not an armstrong number\")\n\tend\nend\narmstrong_number(153)\narmstrong_number(371)\narmstrong_number(407)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number\n371 is an armstrong number\n407 is an armstrong number\n153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgf7o5bx.lua:24: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpsgf7o5bx.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\tprint(temp .. \" is an armstrong number.\")\n\telse\n\t\tprint(temp .. \" is not an armstrong number.\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number.\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqrf4gtv.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpcqrf4gtv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local digit = number % 10\n        sum = sum + digit ^ 3\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        print(\"Armstrong Number\")\n    else\n        print(\"Not Armstrong Number\")\n    end\nend\narmstrong_number(371)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "Armstrong Number\nArmstrong Number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nt_38rx.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp9nt_38rx.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + remainder ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif temp == sum then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local remainder = number % 10\n        sum = sum + remainder ^ 3\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal digit = 0\n\twhile temp ~= 0 do\n\t\tdigit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\tprint(number .. \" is an armstrong number\")\n\telse\n\t\tprint(number .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5ajn4gy.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpj5ajn4gy.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + remainder ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp, sum = number, 0\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + remainder ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        remainder = number % 10\n        sum = sum + (remainder * remainder * remainder)\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        print(temp .. \" is an armstrong number\")\n    else\n        print(temp .. \" is not an armstrong number\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0x0a3bx5.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp0x0a3bx5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile (temp ~= 0) do\n\t\trem = temp % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif (sum == number) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(sum == temp) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit * digit * digit\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(sum == temp) then\n\t\tprint(temp .. \" is an armstrong number\")\n\telse\n\t\tprint(temp .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53_ubt8q.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp53_ubt8q.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile(number > 0) do\n\t\tlocal digit = number % 10\n\t\tsum = sum + digit ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(sum == temp) then\n\t\tprint(\"Armstrong Number\")\n\telse\n\t\tprint(\"Not Armstrong Number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "Armstrong Number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9aalhkb.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpn9aalhkb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local num = number\n    local sum = 0\n    local remainder = 0\n    local digits = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "lua: /tmp/tmpozrk3mu6.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp ~= 0 do\n    local rem = temp % 10\n    sum = sum + (rem * rem * rem)\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp, remainder, result = number, 0, 0\n\twhile temp ~= 0 do\n\t\tremainder = temp % 10\n\t\tresult = result + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif result == number then\n\t\tprint(number .. \" is an armstrong number\")\n\telse\n\t\tprint(number .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4t95znkx.lua:19: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4t95znkx.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile(number > 0) do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(sum == temp) then\n\t\tprint(temp .. \" is armstrong number\")\n\telse\n\t\tprint(temp .. \" is not armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_5b1q56.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpg_5b1q56.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile number > 0 do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif temp == sum then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local remainder = number % 10\n        sum = sum + (remainder * remainder * remainder)\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal digit = number % 10\n\t\tsum = sum + digit ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\tprint(temp .. \" is armstrong number\")\n\telse\n\t\tprint(temp .. \" is not armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpll37s3b8.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpll37s3b8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp ~= 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile temp ~= 0 do\n\t\tremainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\tprint(number .. \" is an armstrong number\")\n\telse\n\t\tprint(number .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf28k3xf9.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpf28k3xf9.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number ~= 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(sum == temp) then\n\t\tprint(temp .. \" is an armstrong number\")\n\telse\n\t\tprint(temp .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53_ubt8q.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp53_ubt8q.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\tprint(temp .. \" is armstrong number\")\n\telse\n\t\tprint(temp .. \" is not armstrong number\")\n\tend\nend\narmstrong_number(153)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is armstrong number\n153 is armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug292bs_.lua:22: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpug292bs_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal number_copy = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile number_copy > 0 do\n\t\tremainder = number_copy % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber_copy = math.floor(number_copy / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp > 0 do\n    local digit = temp % 10\n    sum = sum + digit ^ 3\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local number_string = tostring(number)\n    local number_length = string.len(number_string)\n    local sum = 0\n    for i = 1, number_length do\n        local digit = tonumber(string.sub(number_string, i, i))\n        sum = sum + digit ^ number_length\n    end\n    return sum == number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local number_string = tostring(number)\n  local number_length = string.len(number_string)\n  local sum = 0\n  for i = 1, number_length do\n    local digit = tonumber(string.sub(number_string, i, i))\n    sum = sum + digit ^ number_length\n  end\n  return sum == number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal digit = number % 10\n\t\tsum = sum + digit ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(sum == temp) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal num = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile num > 0 do\n\t\trem = num % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnum = math.floor(num / 10)\n\tend\n\tif sum == number then\n\t\tprint(\"The given number is armstrong\")\n\telse\n\t\tprint(\"The given number is not armstrong\")\n\tend\nend\narmstrong_number(153)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "The given number is armstrong\nThe given number is armstrong\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyts0yt5.lua:22: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpgyts0yt5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(sum == temp) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp ~= 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local temp = number\n    local sum = 0\n    local remainder = 0\n    while temp > 0 do\n        remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        print(number .. \" is an armstrong number.\")\n    else\n        print(number .. \" is not an armstrong number.\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number.\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6lfmvd0.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpk6lfmvd0.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number ~= 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(sum == temp) then\n\t\tprint(temp .. \" is an armstrong number\")\n\telse\n\t\tprint(temp .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknby2g28.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpknby2g28.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp > 0 do\n    local digit = temp % 10\n    sum = sum + digit ^ 3\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp > 0 do\n    local remainder = temp % 10\n    sum = sum + (remainder * remainder * remainder)\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp ~= 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp ~= 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp ~= 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\treturn sum == number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + remainder * remainder * remainder\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        print(number .. \" is an armstrong number\")\n    else\n        print(number .. \" is not an armstrong number\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbr54ea5.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpjbr54ea5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp > 0 do\n    local remainder = temp % 10\n    sum = sum + (remainder * remainder * remainder)\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp > 0 do\n    local remainder = temp % 10\n    sum = sum + (remainder * remainder * remainder)\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif temp == sum then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp ~= 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\tprint(\"It is an armstrong number\")\n\telse\n\t\tprint(\"It is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "It is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6_cvmdd.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpk6_cvmdd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\twhile temp ~= 0 do\n\t\tlocal rem = temp % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\tprint(\"The given number is armstrong\")\n\telse\n\t\tprint(\"The given number is not armstrong\")\n\tend\nend\narmstrong_number(153)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "The given number is armstrong\nThe given number is armstrong\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvopshfe.lua:22: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmprvopshfe.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp > 0 do\n    local digit = temp % 10\n    sum = sum + digit ^ 3\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp > 0 do\n    local digit = temp % 10\n    sum = sum + digit ^ 3\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local temp = number\n    local sum = 0\n    local rem = 0\n    while temp ~= 0 do\n        rem = temp % 10\n        sum = sum + (rem * rem * rem)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        print(number .. \" is an armstrong number\")\n    else\n        print(number .. \" is not an armstrong number\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfu_jr0x6.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpfu_jr0x6.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal number_copy = number\n\twhile number_copy > 0 do\n\t\tlocal digit = number_copy % 10\n\t\tsum = sum + digit ^ 3\n\t\tnumber_copy = math.floor(number_copy / 10)\n\tend\n\treturn sum == number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local temp = number\n    local sum = 0\n    local rem = 0\n    while (temp ~= 0) do\n        rem = temp % 10\n        sum = sum + (rem * rem * rem)\n        temp = math.floor(temp / 10)\n    end\n    if (number == sum) then\n        print(number .. \" is an armstrong number\")\n    else\n        print(number .. \" is not an armstrong number\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxanc1l9.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpcxanc1l9.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\tprint(temp..\" is armstrong number\")\n\telse\n\t\tprint(temp..\" is not armstrong number\")\n\tend\nend\narmstrong_number(153)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is armstrong number\n153 is armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9zjzq21l.lua:22: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp9zjzq21l.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local rem = temp % 10\n        sum = sum + (rem * rem * rem)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        print(number .. \" is an armstrong number\")\n    else\n        print(number .. \" is not an armstrong number\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoye3x6ov.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpoye3x6ov.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + remainder * remainder * remainder\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile number > 0 do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\tprint(\"Armstrong Number\")\n\telse\n\t\tprint(\"Not Armstrong Number\")\n\tend\nend\narmstrong_number(153)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "Armstrong Number\nArmstrong Number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpmf_2sq.lua:22: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpfpmf_2sq.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp ~= 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local remainder = number % 10\n        sum = sum + remainder * remainder * remainder\n        number = math.floor(number / 10)\n    end\n    if temp == sum then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while (number > 0) do\n        local digit = number % 10\n        sum = sum + digit ^ 3\n        number = math.floor(number / 10)\n    end\n    if (sum == temp) then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local digit = number % 10\n        sum = sum + digit * digit * digit\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal digit = number % 10\n\t\tsum = sum + digit ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(sum == temp) then\n\t\tprint(temp .. \" is an armstrong number\")\n\telse\n\t\tprint(temp .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepjiw52n.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpepjiw52n.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp > 0 do\n    local digit = temp % 10\n    sum = sum + digit ^ 3\n    temp = math.floor(temp / 10)\n  end\n  return sum == number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + remainder ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\tprint(number .. \" is an armstrong number\")\n\telse\n\t\tprint(number .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps97bh9fo.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmps97bh9fo.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local temp = number\n  local sum = 0\n  local rem = 0\n  while temp ~= 0 do\n    rem = temp % 10\n    sum = sum + (rem * rem * rem)\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal num = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile num > 0 do\n\t\trem = num % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnum = math.floor(num / 10)\n\tend\n\tif sum == number then\n\t\tprint(number .. \" is an armstrong number\")\n\telse\n\t\tprint(number .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp, sum = number, 0\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number ~= 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit * digit * digit\n        temp = math.floor(temp / 10)\n    end\n    return sum == number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + (digit * digit * digit)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local remainder = number % 10\n        sum = sum + (remainder * remainder * remainder)\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp, remainder, result = number, 0, 0\n\twhile temp ~= 0 do\n\t\tremainder = temp % 10\n\t\tresult = result + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif result == number then\n\t\tprint(number .. \" is an Armstrong number.\")\n\telse\n\t\tprint(number .. \" is not an Armstrong number.\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123116,
      "stdout": "153 is an Armstrong number.\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ge3bef8.lua:19: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp6ge3bef8.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}