{
  "name": "mbpp_251_insert_element",
  "language": "lua",
  "prompt": "-- Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nlocal function insert_element(list, element)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = insert_element\n    lu.assertEquals(candidate({'Red', 'Green', 'Black'}, 'c'), {'c', 'Red', 'c', 'Green', 'c', 'Black'})\n    lu.assertEquals(candidate({'python', 'java'}, 'program'), {'program', 'python', 'program', 'java'})\n    lu.assertEquals(candidate({'happy', 'sad'}, 'laugh'), {'laugh', 'happy', 'laugh', 'sad'})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local new_list = {}\n  for i, v in ipairs(list) do\n    table.insert(new_list, i, v)\n    table.insert(new_list, i, element)\n  end\n  return new_list\nend",
    "\tlocal new_list = {}\n\tfor i, v in ipairs(list) do\n\t\ttable.insert(new_list, element)\n\t\ttable.insert(new_list, v)\n\tend\n\treturn new_list\nend",
    "  local new_list = {}\n  for i, v in ipairs(list) do\n    new_list[i * 2 - 1] = element\n    new_list[i * 2] = v\n  end\n  return new_list\nend",
    "  local result = {}\n  for i = 1, #list do\n    result[i * 2 - 1] = element\n    result[i * 2] = list[i]\n  end\n  return result\nend",
    "  local result = {}\n  for _, v in ipairs(list) do\n    table.insert(result, element)\n    table.insert(result, v)\n  end\n  return result\nend",
    "  local new_list = {}\n  for i = 1, #list do\n    new_list[#new_list + 1] = element\n    new_list[#new_list + 1] = list[i]\n  end\n  return new_list\nend",
    "    local result = {}\n    for i, v in ipairs(list) do\n        result[#result + 1] = element\n        result[#result + 1] = v\n    end\n    return result\nend",
    "  local new_list = {}\n  for i, v in ipairs(list) do\n    new_list[i * 2 - 1] = element\n    new_list[i * 2] = v\n  end\n  return new_list\nend",
    "  local new_list = {}\n  for i, v in ipairs(list) do\n    new_list[i * 2 - 1] = element\n    new_list[i * 2] = v\n  end\n  return new_list\nend",
    "  local result = {}\n  for _, v in ipairs(list) do\n    table.insert(result, element)\n    table.insert(result, v)\n  end\n  return result\nend",
    "  local result = {}\n  for i, v in ipairs(list) do\n    table.insert(result, element)\n    table.insert(result, v)\n  end\n  return result\nend",
    "  local result = {}\n  for i, v in ipairs(list) do\n    table.insert(result, element)\n    table.insert(result, v)\n  end\n  return result\nend",
    "  local new_list = {}\n  for i, v in ipairs(list) do\n    new_list[i * 2 - 1] = element\n    new_list[i * 2] = v\n  end\n  return new_list\nend",
    "  local new_list = {}\n  for i, v in ipairs(list) do\n    new_list[i * 2 - 1] = element\n    new_list[i * 2] = v\n  end\n  return new_list\nend",
    "  local result = {}\n  for i, v in ipairs(list) do\n    table.insert(result, i, v)\n    table.insert(result, i, element)\n  end\n  return result\nend",
    "  local new_list = {}\n  for i, v in ipairs(list) do\n    table.insert(new_list, element)\n    table.insert(new_list, v)\n  end\n  return new_list\nend",
    "  local new_list = {}\n  for i, v in ipairs(list) do\n    new_list[i * 2 - 1] = element\n    new_list[i * 2] = v\n  end\n  return new_list\nend",
    "  local result = {}\n  for i, v in ipairs(list) do\n    table.insert(result, i, v)\n    table.insert(result, i, element)\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #list do\n    table.insert(result, element)\n    table.insert(result, list[i])\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #list do\n    result[#result + 1] = element\n    result[#result + 1] = list[i]\n  end\n  return result\nend"
  ]
}