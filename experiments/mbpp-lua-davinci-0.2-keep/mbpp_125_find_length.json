{
  "name": "mbpp_125_find_length",
  "language": "lua",
  "prompt": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local zeros = 0\n    local ones = 0\n    local max = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            zeros = zeros + 1\n        else\n            ones = ones + 1\n        end\n        if zeros == ones then\n            max = i\n        end\n    end\n    return max\nend",
    "    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_diff = math.max(max_diff, count_0 + count_1)\n        end\n    end\n    return max_diff\nend",
    "\tlocal max = 0\n\tlocal count = 0\n\tfor i = 1, #string do\n\t\tif string:sub(i, i) == \"0\" then\n\t\t\tcount = count - 1\n\t\telse\n\t\t\tcount = count + 1\n\t\tend\n\t\tif count < 0 then\n\t\t\tcount = 0\n\t\tend\n\t\tif count > max then\n\t\t\tmax = count\n\t\tend\n\tend\n\treturn max\nend",
    "    local max_diff = 0\n    local count = 0\n    local n = string.len(string)\n    for i=1,n do\n        if string.sub(string,i,i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend",
    "    local max_diff = 0\n    local count = 0\n    local n = #string",
    "  local max_diff = 0\n  local count_zero = 0\n  local count_one = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_zero = count_zero + 1\n    else\n      count_one = count_one + 1\n    end\n    if count_zero == count_one then\n      max_diff = math.max(max_diff, count_zero + count_one)\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  for i = #string, 1, -1 do\n    if string:sub(i, i) == \"0\" then\n      count_zero = count_zero + 1\n    else\n      count_one = count_one + 1\n    end\n    if count_zero == count_one then\n      max_diff = math.max(max_diff, count_zero + count_one)\n    end\n  end\n  return max_diff\nend",
    "    local max_length = 0\n    local count = 0\n    local hash = {}\n    hash[0] = -1\n    for i = 1, #string do\n        if string:sub(i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if hash[count] then\n            max_length = math.max(max_length, i - hash[count])\n        else\n            hash[count] = i\n        end\n    end\n    return max_length\nend",
    "    local zeros = 0\n    local ones = 0\n    local max_diff = 0\n    local diff = 0\n    for i = 1, #string do\n        if string:sub(i, i) == '0' then\n            zeros = zeros + 1\n        else\n            ones = ones + 1\n        end\n        diff = zeros - ones\n        if diff < 0 then\n            diff = -diff\n        end\n        if diff > max_diff then\n            max_diff = diff\n        end\n    end\n    return max_diff\nend",
    "  local max_length = 0\n  local count = 0\n  local zeros = 0\n  local ones = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      zeros = zeros + 1\n    else\n      ones = ones + 1\n    end\n    count = zeros - ones\n    if count < 0 then\n      count = -count\n    end\n    if count > max_length then\n      max_length = count\n    end\n  end\n  return max_length\nend",
    "    local max_diff = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend",
    "  local max_diff = 0\n  local count = 0\n  local n = string.len(string)\n  for i = 1, n do\n    if string.sub(string, i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max_diff then\n      max_diff = count\n    end\n  end\n  return max_diff\nend",
    "  local max_diff = 0\n  local count = 0\n  local n = #string\n  for i = 1, n do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max_diff then\n      max_diff = count\n    end\n  end\n  return max_diff\nend",
    "  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0)\n    end\n  end\n  return max_diff\nend",
    "  local max_diff = 0\n  local count = 0\n  local zeros = 0\n  local ones = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      zeros = zeros + 1\n    else\n      ones = ones + 1\n    end\n    count = count + 1\n    if zeros == ones then\n      max_diff = math.max(max_diff, count)\n      count = 0\n      zeros = 0\n      ones = 0\n    end\n  end\n  return max_diff\nend",
    "  local max_len = 0\n  local count = 0\n  local len = string.len(string)\n  local hash = {}\n  for i = 1, len do\n    if string.sub(string, i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = i\n    end\n    if hash[count] == nil then\n      hash[count] = i\n    else\n      if max_len < i - hash[count] then\n        max_len = i - hash[count]\n      end\n    end\n  end\n  return max_len\nend",
    "  local max_diff = 0\n  local count = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count = count + 1\n    else\n      count = count - 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    max_diff = math.max(max_diff, count)\n  end\n  return max_diff\nend",
    "  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 + count_1)\n    end\n  end\n  return max_diff\nend",
    "  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n  end\n  return max_diff\nend",
    "\tlocal max_diff = 0\n\tlocal count_0 = 0\n\tlocal count_1 = 0\n\tfor i = 1, #string do\n\t\tif string:sub(i, i) == \"0\" then\n\t\t\tcount_0 = count_0 + 1\n\t\telse\n\t\t\tcount_1 = count_1 + 1\n\t\tend\n\t\tmax_diff = math.max(max_diff, math.abs(count_0 - count_1))\n\tend\n\treturn max_diff\nend",
    "  local max_length = 0\n  local count = 0\n  local hash = {}\n  for i = 1, #string do\n    if string[i] == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_length = i\n    end\n    if hash[count] == nil then\n      hash[count] = i\n    else\n      max_length = math.max(max_length, i - hash[count])\n    end\n  end\n  return max_length\nend"
  ]
}