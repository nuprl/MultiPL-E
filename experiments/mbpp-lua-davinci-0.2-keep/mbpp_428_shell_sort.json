{
  "name": "mbpp_428_shell_sort",
  "language": "lua",
  "prompt": "-- Write a function to sort the given array by using shell sort.\nlocal function shell_sort(my_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = shell_sort\n    lu.assertEquals(candidate({12, 23, 4, 5, 3, 2, 12, 81, 56, 95}), {2, 3, 4, 5, 12, 12, 23, 56, 81, 95})\n    lu.assertEquals(candidate({24, 22, 39, 34, 87, 73, 68}), {22, 24, 34, 39, 68, 73, 87})\n    lu.assertEquals(candidate({32, 30, 16, 96, 82, 83, 74}), {16, 30, 32, 74, 82, 83, 96})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local n = #my_list\n  local gap = math.floor(n/2)\n  while gap > 0 do\n    for i = gap, n do\n      local temp = my_list[i]\n      local j = i\n      while j >= gap and my_list[j - gap] > temp do\n        my_list[j] = my_list[j - gap]\n        j = j - gap\n      end\n      my_list[j] = temp\n    end\n    gap = math.floor(gap/2)\n  end\n  return my_list\nend",
    "    local len = #my_list\n    local gap = math.floor(len / 2)\n    while gap > 0 do\n        for i = gap, len do\n            local temp = my_list[i]\n            local j = i\n            while j >= gap and my_list[j - gap] > temp do\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            end\n            my_list[j] = temp\n        end\n        gap = math.floor(gap / 2)\n    end\n    return my_list\nend",
    "    local n = #my_list\n    local gap = math.floor(n/2)\n    while gap > 0 do\n        for i = gap, n do\n            local temp = my_list[i]\n            local j = i\n            while j >= gap and my_list[j - gap] > temp do\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            end\n            my_list[j] = temp\n        end\n        gap = math.floor(gap/2)\n    end\n    return my_list\nend",
    "    local gap = math.floor(#my_list / 2)\n    while gap > 0 do\n        for i = gap, #my_list do\n            local temp = my_list[i]\n            local j = i\n            while j >= gap and my_list[j - gap] > temp do\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            end\n            my_list[j] = temp\n        end\n        gap = math.floor(gap / 2)\n    end\n    return my_list\nend",
    "\tlocal n = #my_list\n\tlocal gap = math.floor(n/2)\n\twhile gap > 0 do\n\t\tfor i = gap, n do\n\t\t\tlocal temp = my_list[i]\n\t\t\tlocal j = i\n\t\t\twhile j >= gap and my_list[j-gap] > temp do\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj = j - gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = math.floor(gap/2)\n\tend\n\treturn my_list\nend",
    "    local n = #my_list\n    local gap = math.floor(n / 2)\n    while gap > 0 do\n        for i = gap, n do\n            local temp = my_list[i]\n            local j = i\n            while j >= gap and my_list[j - gap] > temp do\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            end\n            my_list[j] = temp\n        end\n        gap = math.floor(gap / 2)\n    end\n    return my_list\nend",
    "\tlocal n = #my_list\n\tlocal gap = math.floor(n/2)\n\twhile gap > 0 do\n\t\tfor i = gap, n do\n\t\t\tlocal temp = my_list[i]\n\t\t\tlocal j = i\n\t\t\twhile j >= gap and my_list[j - gap] > temp do\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj = j - gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = math.floor(gap/2)\n\tend\n\treturn my_list\nend",
    "    local n = #my_list\n    local gap = math.floor(n / 2)\n    while gap > 0 do\n        for i = gap, n do\n            local temp = my_list[i]\n            local j = i\n            while j >= gap and my_list[j - gap] > temp do\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            end\n            my_list[j] = temp\n        end\n        gap = math.floor(gap / 2)\n    end\n    return my_list\nend",
    "    local n = #my_list\n    local gap = math.floor(n / 2)\n    while gap > 0 do\n        for i = gap, n do\n            local temp = my_list[i]\n            local j = i\n            while j >= gap and my_list[j - gap] > temp do\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            end\n            my_list[j] = temp\n        end\n        gap = math.floor(gap / 2)\n    end\n    return my_list\nend",
    "\tlocal len = #my_list\n\tlocal gap = math.floor(len/2)\n\twhile gap > 0 do\n\t\tfor i = gap, len do\n\t\t\tlocal temp = my_list[i]\n\t\t\tlocal j = i\n\t\t\twhile j >= gap and my_list[j-gap] > temp do\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj = j - gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = math.floor(gap/2)\n\tend\n\treturn my_list\nend",
    "    local n = #my_list\n    local gap = math.floor(n / 2)\n    while gap > 0 do\n        for i = gap, n do\n            local temp = my_list[i]\n            local j = i\n            while j >= gap and my_list[j - gap] > temp do\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            end\n            my_list[j] = temp\n        end\n        gap = math.floor(gap / 2)\n    end\n    return my_list\nend",
    "  local gap = math.floor(#my_list / 2)\n  while gap > 0 do\n    for i = gap, #my_list do\n      local temp = my_list[i]\n      local j = i\n      while j >= gap and my_list[j - gap] > temp do\n        my_list[j] = my_list[j - gap]\n        j = j - gap\n      end\n      my_list[j] = temp\n    end\n    gap = math.floor(gap / 2)\n  end\n  return my_list\nend",
    "\tlocal gap = math.floor(#my_list / 2)\n\twhile gap > 0 do\n\t\tfor i = gap, #my_list do\n\t\t\tlocal temp = my_list[i]\n\t\t\tlocal j = i\n\t\t\twhile j >= gap and my_list[j - gap] > temp do\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj = j - gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = math.floor(gap / 2)\n\tend\n\treturn my_list\nend",
    "    local gap = math.floor(#my_list / 2)\n    while gap > 0 do\n        for i = gap, #my_list do\n            local temp = my_list[i]\n            local j = i\n            while j >= gap and my_list[j - gap] > temp do\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            end\n            my_list[j] = temp\n        end\n        gap = math.floor(gap / 2)\n    end\n    return my_list\nend",
    "    local gap = math.floor(#my_list / 2)\n    while gap > 0 do\n        for i = gap, #my_list do\n            local temp = my_list[i]\n            local j = i\n            while j >= gap and my_list[j - gap] > temp do\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            end\n            my_list[j] = temp\n        end\n        gap = math.floor(gap / 2)\n    end\n    return my_list\nend",
    "  local n = #my_list\n  local gap = math.floor(n / 2)\n  while gap > 0 do\n    for i = gap, n do\n      local temp = my_list[i]\n      local j = i\n      while j >= gap and my_list[j - gap] > temp do\n        my_list[j] = my_list[j - gap]\n        j = j - gap\n      end\n      my_list[j] = temp\n    end\n    gap = math.floor(gap / 2)\n  end\n  return my_list\nend",
    "    local n = #my_list\n    local gap = math.floor(n / 2)\n    while gap > 0 do\n        for i = gap, n do\n            local temp = my_list[i]\n            local j = i\n            while j >= gap and my_list[j - gap] > temp do\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            end\n            my_list[j] = temp\n        end\n        gap = math.floor(gap / 2)\n    end\n    return my_list\nend",
    "    local n = #my_list\n    local gap = math.floor(n / 2)\n    while gap > 0 do\n        for i = gap, n do\n            local temp = my_list[i]\n            local j = i\n            while j >= gap and my_list[j - gap] > temp do\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            end\n            my_list[j] = temp\n        end\n        gap = math.floor(gap / 2)\n    end\n    return my_list\nend",
    "\tlocal n = #my_list\n\tlocal gap = math.floor(n/2)\n\twhile gap > 0 do\n\t\tfor i = gap, n do\n\t\t\tlocal temp = my_list[i]\n\t\t\tlocal j = i\n\t\t\twhile j >= gap and my_list[j - gap] > temp do\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj = j - gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = math.floor(gap/2)\n\tend\n\treturn my_list\nend",
    "\tlocal n = #my_list\n\tlocal gap = math.floor(n/2)\n\twhile gap > 0 do\n\t\tfor i = gap, n do\n\t\t\tlocal temp = my_list[i]\n\t\t\tlocal j = i\n\t\t\twhile j >= gap and my_list[j-gap] > temp do\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj = j - gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = math.floor(gap/2)\n\tend\n\treturn my_list\nend"
  ]
}