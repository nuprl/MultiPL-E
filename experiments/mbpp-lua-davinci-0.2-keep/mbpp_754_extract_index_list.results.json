{
  "name": "mbpp_754_extract_index_list",
  "language": "lua",
  "prompt": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmnd6bns.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmppmnd6bns.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukxoo2ug.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpukxoo2ug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local l = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            l[#l + 1] = i\n        end\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8687qb4y.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp8687qb4y.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l1[i] == l3[i] then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprieugqr2.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmprieugqr2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmnd6bns.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmppmnd6bns.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpte02qcqe.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpte02qcqe.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l1[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplx19e7cr.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplx19e7cr.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local res = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      res[#res + 1] = i\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfwh14cp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpdfwh14cp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l1[i] == l3[i] then\n\t\t\tresult[#result + 1] = l1[i]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l1[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6aga9h6y.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp6aga9h6y.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = l1[i]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local res = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            res[#res + 1] = l1[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local t = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      t[#t + 1] = i\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiw2srlkw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpiw2srlkw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukxoo2ug.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpukxoo2ug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmnd6bns.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmppmnd6bns.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp357zewql.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp357zewql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukxoo2ug.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpukxoo2ug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, l1[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l1[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplx19e7cr.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplx19e7cr.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = l1[i]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = l1[i]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukxoo2ug.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpukxoo2ug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l1[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplx19e7cr.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplx19e7cr.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = l1[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = l1[i]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal res = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tres[#res + 1] = i\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzutupvla.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpzutupvla.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4p28nd3.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpm4p28nd3.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpte02qcqe.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpte02qcqe.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukxoo2ug.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpukxoo2ug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l1[i] == l3[i] then\n      index_list[#index_list + 1] = i\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdwfrfek.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqdwfrfek.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local t = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoh8bxrr2.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpoh8bxrr2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, l1[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = l1[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukxoo2ug.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpukxoo2ug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpte02qcqe.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpte02qcqe.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      index_list[i] = l1[i]\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91vp_55a.lua:15: expected: {1, 7}\nactual: {2=1, 7=7}\nstack traceback:\n\t/tmp/tmp91vp_55a.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l1[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmbpia40.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpzmbpia40.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4p28nd3.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpm4p28nd3.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukxoo2ug.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpukxoo2ug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpte02qcqe.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpte02qcqe.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local l = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      l[#l + 1] = i\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvabvq1bx.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpvabvq1bx.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmnd6bns.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmppmnd6bns.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukxoo2ug.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpukxoo2ug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l1[i] == l3[i] then\n\t\t\tindex_list[#index_list + 1] = i\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctnox0yw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpctnox0yw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukxoo2ug.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpukxoo2ug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = l1[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, l1[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukxoo2ug.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpukxoo2ug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local l = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(l, i)\n        end\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyku8vcxp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpyku8vcxp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, l1[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = l1[i]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = l1[i]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l1[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ra94a3x.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp_ra94a3x.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l1[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplx19e7cr.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplx19e7cr.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local l = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            l[#l + 1] = l1[i]\n        end\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpte02qcqe.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpte02qcqe.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l1[i] == l3[i] then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0ob0ptn.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpo0ob0ptn.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4p28nd3.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpm4p28nd3.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local res = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            res[#res + 1] = i\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp222l3v5h.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp222l3v5h.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpte02qcqe.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpte02qcqe.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsu6j3wad.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpsu6j3wad.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, l1[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l1[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqjo06ef.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpiqjo06ef.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l1[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ra94a3x.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp_ra94a3x.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, l1[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l1[i] == l3[i] then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0ob0ptn.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpo0ob0ptn.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = l1[i]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l1[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ra94a3x.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp_ra94a3x.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4p28nd3.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpm4p28nd3.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4p28nd3.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpm4p28nd3.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if v == l2[i] and v == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fx_hyry.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9fx_hyry.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = l1[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(result, l1[i])\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = l1[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, l1[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local l = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            l[#l + 1] = l1[i]\n        end\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local l = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            l[#l + 1] = i\n        end\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8687qb4y.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp8687qb4y.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpte02qcqe.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpte02qcqe.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp357zewql.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp357zewql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            index_list[#index_list + 1] = i\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5tbvcbi.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpu5tbvcbi.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal l = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(l, i)\n\t\tend\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mebsgwt.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp7mebsgwt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, l1[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = l1[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpte02qcqe.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpte02qcqe.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukxoo2ug.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpukxoo2ug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l1[i] == l3[i] then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2z34y1r.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpu2z34y1r.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l1[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqjo06ef.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpiqjo06ef.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukxoo2ug.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpukxoo2ug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvw9p2_h.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpbvw9p2_h.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4p28nd3.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpm4p28nd3.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmnd6bns.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmppmnd6bns.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l1[i] == l3[i] then\n            result[#result + 1] = l1[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l1[i] == l3[i] then\n\t\t\tresult[#result + 1] = l1[i]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l1[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqjo06ef.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpiqjo06ef.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = l1[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsu6j3wad.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpsu6j3wad.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukxoo2ug.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpukxoo2ug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtxo9qkc.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpjtxo9qkc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmnd6bns.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmppmnd6bns.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            index_list[#index_list + 1] = i\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5tbvcbi.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpu5tbvcbi.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l1[i] == l3[i] then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2z34y1r.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpu2z34y1r.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv4eo__0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpnv4eo__0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l1[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6aga9h6y.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp6aga9h6y.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = l1[i]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = l1[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4p28nd3.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpm4p28nd3.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukxoo2ug.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpukxoo2ug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l1[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplx19e7cr.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplx19e7cr.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpte02qcqe.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpte02qcqe.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4p28nd3.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpm4p28nd3.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local res = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            res[#res + 1] = i\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123111,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp222l3v5h.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp222l3v5h.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplukctgp6.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmplukctgp6.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510005,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}