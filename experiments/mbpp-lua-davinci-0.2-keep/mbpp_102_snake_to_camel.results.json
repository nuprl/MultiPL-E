{
  "name": "mbpp_102_snake_to_camel",
  "language": "lua",
  "prompt": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%w)\", function(w) return w:upper() end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6ptqvf8.lua:9: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpr6ptqvf8.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%w\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnp50pjfp.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpnp50pjfp.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ff0r954.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmp2ff0r954.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    local result = word:gsub(\"_%l\", string.upper)\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123194,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2ncty4b.lua:10: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpq2ncty4b.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%w)\", function(letter)\n    return letter:upper()\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckkn2y3m.lua:11: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpckkn2y3m.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%w)\", function(w) return w:upper() end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6ptqvf8.lua:9: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpr6ptqvf8.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%l)\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123194,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu57rel5x.lua:9: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpu57rel5x.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ff0r954.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmp2ff0r954.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%w)\", function(w) return w:upper() end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6ptqvf8.lua:9: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpr6ptqvf8.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%w)\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfy9t09m.lua:9: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpdfy9t09m.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%w)\", function(w)\n    return w:upper()\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0y8yv9ob.lua:11: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmp0y8yv9ob.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%w)\", function(letter)\n    return letter:upper()\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckkn2y3m.lua:11: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpckkn2y3m.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  local result = \"\"\n  local upper = true\n  for char in word:gmatch(\".\") do\n    if char == \"_\" then\n      upper = true\n    else\n      if upper then\n        result = result .. char:upper()\n        upper = false\n      else\n        result = result .. char\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ff0r954.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmp2ff0r954.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return (word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5y3_qqke.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp5y3_qqke.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    local result = \"\"\n    local upper = false\n    for i = 1, #word do\n        local c = word:sub(i, i)\n        if c == \"_\" then\n            upper = true\n        else\n            if upper then\n                c = c:upper()\n                upper = false\n            end\n            result = result .. c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuuo5xade.lua:23: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpuuo5xade.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%w\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl48fhs4v.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpl48fhs4v.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  local result = \"\"\n  local upper = false\n  for i = 1, #word do\n    local c = word:sub(i, i)\n    if c == \"_\" then\n      upper = true\n    else\n      if upper then\n        result = result .. c:upper()\n        upper = false\n      else\n        result = result .. c\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpye_iorrk.lua:24: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpye_iorrk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    local result = \"\"\n    local upper = false\n    for i = 1, #word do\n        local c = word:sub(i, i)\n        if c == \"_\" then\n            upper = true\n        else\n            if upper then\n                c = c:upper()\n                upper = false\n            end\n            result = result .. c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuuo5xade.lua:23: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpuuo5xade.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%w)\", function(w) return w:upper() end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6ptqvf8.lua:9: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpr6ptqvf8.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return (word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5y3_qqke.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp5y3_qqke.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  local result = {}\n  for w in word:gmatch(\"[^_]+\") do\n    table.insert(result, w:sub(1,1):upper()..w:sub(2))\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123194,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub('_%l', string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0cv7oeh.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmph0cv7oeh.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%w\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnp50pjfp.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpnp50pjfp.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  local result = \"\"\n  local upper = false\n  for i = 1, #word do\n    local c = word:sub(i, i)\n    if c == \"_\" then\n      upper = true\n    else\n      if upper then\n        result = result .. c:upper()\n        upper = false\n      else\n        result = result .. c\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpye_iorrk.lua:24: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpye_iorrk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%w\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl48fhs4v.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpl48fhs4v.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return (word:gsub(\"_(%w)\", function(w) return w:upper() end))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnrosynh.lua:9: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpcnrosynh.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_(%w)\", function(w) return w:upper() end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggrj23nu.lua:9: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpggrj23nu.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"_\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpelbprkiq.lua:9: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpelbprkiq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub('_%l', string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0cv7oeh.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmph0cv7oeh.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  local result = \"\"\n  local upper = true\n  for i = 1, #word do\n    local c = word:sub(i, i)\n    if c == \"_\" then\n      upper = true\n    else\n      if upper then\n        result = result .. c:upper()\n        upper = false\n      else\n        result = result .. c\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123194,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%w\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl48fhs4v.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpl48fhs4v.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%l)\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123194,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu57rel5x.lua:9: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpu57rel5x.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%w)\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%w\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl48fhs4v.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpl48fhs4v.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  local result = word:gsub(\"_%l\", string.upper)\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123194,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ealczm6.lua:10: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmp7ealczm6.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return (word:gsub(\"_%l\", string.upper))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpew8ajrmm.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpew8ajrmm.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%a)\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%a)\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d30pfbp.lua:9: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmp9d30pfbp.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  local result = word:gsub(\"_%l\", string.upper)\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123194,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ealczm6.lua:10: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmp7ealczm6.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  local result = \"\"\n  local upper = false\n  for i = 1, #word do\n    local c = word:sub(i, i)\n    if c == \"_\" then\n      upper = true\n    else\n      if upper then\n        result = result .. c:upper()\n        upper = false\n      else\n        result = result .. c\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpye_iorrk.lua:24: expected: \"PythonProgram\"\nactual: \"pythonProgram\"\nstack traceback:\n\t/tmp/tmpye_iorrk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return (word:gsub(\"_%l\", upper))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123196,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqk2ebfuo.lua:3: bad argument #2 to 'gsub' (string/function/table expected, got nil)\nstack traceback:\n\t/tmp/tmpqk2ebfuo.lua:3: in local 'candidate'\n\t/tmp/tmpqk2ebfuo.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%w\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl48fhs4v.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpl48fhs4v.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%w\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ntnrt4s.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_ntnrt4s.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi03dm3rc.lua:9: expected: \"PythonProgram\"\nactual: \"python_Program\"\nstack traceback:\n\t/tmp/tmpi03dm3rc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2tx1cts.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmp_2tx1cts.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1_ndwr.lua:9: expected: \"PythonProgram\"\nactual: \"Python_Program\"\nstack traceback:\n\t/tmp/tmpzk1_ndwr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}