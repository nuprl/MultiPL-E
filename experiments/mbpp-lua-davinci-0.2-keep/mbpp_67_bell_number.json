{
  "name": "mbpp_67_bell_number",
  "language": "lua",
  "prompt": "-- Write a function to find the number of ways to partition a set of Bell numbers.\nlocal function bell_number(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bell_number\n    lu.assertEquals(candidate(2), 2)\n    lu.assertEquals(candidate(10), 115975)\n    lu.assertEquals(candidate(56), 6775685320645824322581483068371419745979053216268760300)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal b = {1}\n\tfor i = 1, n do\n\t\tlocal s = 0\n\t\tfor j = 1, i - 1 do\n\t\t\ts = s + b[j] * b[i - j]\n\t\tend\n\t\tb[i] = s\n\tend\n\treturn b[n]\nend",
    "  local b = {1}\n  for i = 1, n do\n    b[i + 1] = b[i] * (n - i + 1) + b[i - 1]\n  end\n  return b[n + 1]\nend",
    "\tlocal b = {1}\n\tfor i = 1, n do\n\t\tlocal s = 0\n\t\tfor j = 1, i - 1 do\n\t\t\ts = s + b[j] * b[i - j]\n\t\tend\n\t\tb[i] = s\n\tend\n\treturn b[n]\nend",
    "  local b = {1}\n  for i = 1, n do\n    local s = 0\n    for j = 1, i - 1 do\n      s = s + b[j] * b[i - j]\n    end\n    b[i] = s\n  end\n  return b[n]\nend",
    "  local b = {1}\n  for i = 1, n do\n    local s = 0\n    for j = 1, i - 1 do\n      s = s + b[j] * b[i - j]\n    end\n    b[i] = s\n  end\n  return b[n]\nend",
    "\tlocal b = {1}\n\tfor i = 1, n do\n\t\tlocal s = 0\n\t\tfor j = 1, i - 1 do\n\t\t\ts = s + b[j] * b[i - j]\n\t\tend\n\t\tb[i] = s\n\tend\n\treturn b[n]\nend",
    "\tlocal b = {1}\n\tfor i = 1, n do\n\t\tb[i + 1] = 0\n\t\tfor j = 1, i do\n\t\t\tb[i + 1] = b[i + 1] + b[j] * b[i + 1 - j]\n\t\tend\n\tend\n\treturn b[n + 1]\nend",
    "\tlocal b = {1}\n\tfor i = 1, n do\n\t\tb[i + 1] = 0\n\t\tfor j = 1, i do\n\t\t\tb[i + 1] = b[i + 1] + b[j] * b[i + 1 - j]\n\t\tend\n\tend\n\treturn b[n + 1]\nend",
    "\tlocal b = {1}\n\tfor i = 1, n do\n\t\tb[i + 1] = sum(map(function(k) return b[k] * b[i + 1 - k] end, range(i)))\n\tend\n\treturn b[n + 1]\nend",
    "\tlocal b = {1}\n\tfor i = 1, n do\n\t\tb[i + 1] = 0\n\t\tfor j = 1, i do\n\t\t\tb[i + 1] = b[i + 1] + b[j] * b[i + 1 - j]\n\t\tend\n\tend\n\treturn b[n + 1]\nend",
    "  local b = {1}\n  for i = 1, n do\n    local b_i = 0\n    for j = 1, i do\n      b_i = b_i + b[j] * b[i - j + 1]\n    end\n    b[i + 1] = b_i\n  end\n  return b[n + 1]\nend",
    "\tlocal b = {1}\n\tfor i = 1, n do\n\t\tb[i + 1] = 0\n\t\tfor j = 1, i do\n\t\t\tb[i + 1] = b[i + 1] + b[j] * b[i + 1 - j]\n\t\tend\n\tend\n\treturn b[n + 1]\nend",
    "  local b = {1}\n  for i = 1, n do\n    b[i+1] = 0\n    for j = 1, i do\n      b[i+1] = b[i+1] + b[j] * b[i+1-j]\n    end\n  end\n  return b[n+1]\nend",
    "  local b = {1}\n  for i = 1, n do\n    b[i + 1] = 0\n    for j = 1, i do\n      b[i + 1] = b[i + 1] + b[j] * b[i + 1 - j]\n    end\n  end\n  return b[n + 1]\nend",
    "  local b = {1}\n  for i = 1, n do\n    local sum = 0\n    for j = 1, i do\n      sum = sum + b[j] * binomial(i - 1, j - 1)\n    end\n    b[i + 1] = sum\n  end\n  return b[n + 1]\nend",
    "  local b = {1}\n  for i = 1, n do\n    b[i + 1] = 0\n    for j = 1, i do\n      b[i + 1] = b[i + 1] + b[j] * b[i + 1 - j]\n    end\n  end\n  return b[n + 1]\nend",
    "  local b = {1}\n  for i = 1, n do\n    local s = 0\n    for j = 1, i - 1 do\n      s = s + b[j] * b[i - j]\n    end\n    b[i] = s\n  end\n  return b[n]\nend",
    "\tlocal b = {1}\n\tfor i = 1, n do\n\t\tb[i + 1] = b[i] * (n + 1 - i) / i\n\tend\n\treturn b[n + 1]\nend",
    "\tlocal b = {1}\n\tfor i = 1, n do\n\t\tb[i+1] = 0\n\t\tfor j = 1, i do\n\t\t\tb[i+1] = b[i+1] + b[j] * b[i+1-j]\n\t\tend\n\tend\n\treturn b[n+1]\nend",
    "  local b = {1}\n  for i = 1, n do\n    local b_i = 0\n    for j = 1, i do\n      b_i = b_i + b[j] * binomial(i - 1, j - 1)\n    end\n    b[i + 1] = b_i\n  end\n  return b[n + 1]\nend"
  ]
}