{
  "name": "mbpp_753_min_k",
  "language": "lua",
  "prompt": "-- Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nlocal function min_k(test_list, K)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local min_k_list = {}\n    local min_k_list_size = 0\n    local min_k_list_max_size = K\n    for _, test_tuple in ipairs(test_list) do\n        if min_k_list_size < min_k_list_max_size then\n            table.insert(min_k_list, test_tuple)\n            min_k_list_size = min_k_list_size + 1\n        else\n            local min_k_list_max_index = 1\n            local min_k_list_max_value = min_k_list[1][2]\n            for i = 2, min_k_list_size do\n                if min_k_list[i][2] > min_k_list_max_value then\n                    min_k_list_max_index = i\n                    min_k_list_max_value = min_k_list[i][2]\n                end\n            end\n            if test_tuple[2] < min_k_list_max_value then\n                min_k_list[min_k_list_max_index] = test_tuple\n            end\n        end\n    end\n    return min_k_list\nend",
    "    local result = {}\n    for i = 1, K do\n        local min_idx = i\n        for j = i + 1, #test_list do\n            if test_list[j][1] < test_list[min_idx][1] then\n                min_idx = j\n            end\n        end\n        result[i] = test_list[min_idx]\n        test_list[min_idx] = test_list[i]\n    end\n    return result\nend",
    "    local min_list = {}\n    local min_list_len = 0\n    for i = 1, #test_list do\n        if min_list_len < K then\n            min_list[min_list_len + 1] = test_list[i]\n            min_list_len = min_list_len + 1\n            if min_list_len == K then\n                table.sort(min_list, function(a, b) return a[2] < b[2] end)\n            end\n        else\n            if test_list[i][2] < min_list[K][2] then\n                min_list[K] = test_list[i]\n                table.sort(min_list, function(a, b) return a[2] < b[2] end)\n            end\n        end\n    end\n    return min_list\nend",
    "    local result = {}\n    for i = 1, K do\n        local min_val = math.huge\n        local min_index = 0\n        for j = 1, #test_list do\n            if test_list[j][1] < min_val then\n                min_val = test_list[j][1]\n                min_index = j\n            end\n        end\n        result[i] = test_list[min_index]\n        table.remove(test_list, min_index)\n    end\n    return result\nend",
    "\tlocal min_list = {}\n\tlocal min_list_size = 0\n\tfor i, v in ipairs(test_list) do\n\t\tif min_list_size < K then\n\t\t\ttable.insert(min_list, v)\n\t\t\tmin_list_size = min_list_size + 1\n\t\telse\n\t\t\tlocal max_val = min_list[1]\n\t\t\tlocal max_index = 1\n\t\t\tfor j = 2, min_list_size do\n\t\t\t\tif max_val < min_list[j] then\n\t\t\t\t\tmax_val = min_list[j]\n\t\t\t\t\tmax_index = j\n\t\t\t\tend\n\t\t\tend\n\t\t\tif v < max_val then\n\t\t\t\tmin_list[max_index] = v\n\t\t\tend\n\t\tend\n\tend\n\treturn min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    local min_value = math.huge\n    for i, v in ipairs(test_list) do\n        if v[1] < min_value then\n            min_value = v[1]\n            min_list_size = 1\n            min_list[min_list_size] = v\n        elseif v[1] == min_value then\n            min_list_size = min_list_size + 1\n            min_list[min_list_size] = v\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, v)\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            local max_value = min_list[1][2]\n            for j = 2, min_list_size do\n                if min_list[j][2] > max_value then\n                    max_index = j\n                    max_value = min_list[j][2]\n                end\n            end\n            if v[2] < max_value then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_k_list = {}\n    local min_k_list_len = 0\n    local min_k_list_max_len = K\n    local min_k_list_max_len_minus_one = K - 1\n    local min_k_list_max_len_minus_two = K - 2\n    local min_k_list_max_len_minus_three = K - 3\n    local min_k_list_max_len_minus_four = K - 4\n    local min_k_list_max_len_minus_five = K - 5\n    local min_k_list_max_len_minus_six = K - 6\n    local min_k_list_max_len_minus_seven = K - 7\n    local min_k_list_max_len_minus_eight = K - 8\n    local min_k_list_max_len_minus_nine = K - 9\n    local min_k_list_max_len_minus_ten = K - 10\n    local min_k_list_max_len_minus_eleven = K - 11\n    local min_k_list_max_len_minus_twelve = K - 12\n    local min_k_list_max_len_minus_thirteen = K - 13\n    local min_k_list_max_len_minus_fourteen = K - 14\n    local min_k_list_max_len_minus_fifteen = K - 15\n    local min_k_list_max_len_minus_sixteen = K - 16\n    local min_k_list_max_len_minus_seventeen = K - 17\n    local min_k_list_max_len_minus_eighteen = K - 18\n    local min_k_list_max_len_minus_nineteen = K - 19\n    local min_k_list_max_len_minus_twenty = K - 20\n    local min_k_list_max_len_minus_twenty_one = K - 21\n    local min_k_list_max_len_minus_twenty_two = K - 22\n    local min_k_list_max_len_minus_twenty_three",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[1] < b[1] end)\n    -- return first K elements\n    return test_list[1:K]\nend",
    "  local min_list = {}\n  local min_list_size = 0\n  for _, v in ipairs(test_list) do\n    if min_list_size < K then\n      min_list[min_list_size + 1] = v\n      min_list_size = min_list_size + 1\n    else\n      local min_index = 0\n      local min_value = min_list[1][2]\n      for i = 2, min_list_size do\n        if min_list[i][2] < min_value then\n          min_index = i\n          min_value = min_list[i][2]\n        end\n      end\n      if v[2] > min_value then\n        min_list[min_index] = v\n      end\n    end\n  end\n  return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = min_list:sort()\n    for i = K + 1, #test_list do\n        if test_list[i] > min_list[K] then\n            min_list[K] = test_list[i]\n            min_list = min_list:sort()\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            min_list[min_list_size + 1] = v\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, min_list_size do\n                if min_list[j][2] > min_list[max_index][2] then\n                    max_index = j\n                end\n            end\n            if min_list[max_index][2] > v[2] then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for _, test_tuple in ipairs(test_list) do\n        local test_value = test_tuple[1]\n        local test_index = test_tuple[2]\n        if min_list_size < K then\n            min_list[min_list_size + 1] = {test_value, test_index}\n            min_list_size = min_list_size + 1\n        else\n            local max_value = min_list[1][1]\n            local max_index = 1\n            for i = 2, K do\n                if min_list[i][1] > max_value then\n                    max_value = min_list[i][1]\n                    max_index = i\n                end\n            end\n            if test_value < max_value then\n                min_list[max_index] = {test_value, test_index}\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i, v in ipairs(test_list) do\n        if #min_list < K then\n            table.insert(min_list, v)\n        else\n            table.sort(min_list, function(a, b) return a[1] < b[1] end)\n            if min_list[K][1] > v[1] then\n                min_list[K] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[1] < b[1] end)\n    -- return first k elements\n    local result = {}\n    for i = 1, K do\n        result[i] = test_list[i]\n    end\n    return result\nend",
    "    test_list.sort(key = lambda x: x[1])\n    return test_list[:K]",
    "\tlocal min_list = {}\n\tfor i = 1, K do\n\t\tlocal min_val = math.huge\n\t\tlocal min_idx = 0\n\t\tfor j = 1, #test_list do\n\t\t\tif test_list[j][1] < min_val then\n\t\t\t\tmin_val = test_list[j][1]\n\t\t\t\tmin_idx = j\n\t\t\tend\n\t\tend\n\t\tmin_list[i] = test_list[min_idx]\n\t\ttable.remove(test_list, min_idx)\n\tend\n\treturn min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test_list[i]\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, #min_list do\n                if min_list[j][2] > min_list[max_index][2] then\n                    max_index = j\n                end\n            end\n            if min_list[max_index][2] > test_list[i][2] then\n                min_list[max_index] = test_list[i]\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort_by_second(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][2] < min_list[K][2] then\n            min_list[K] = test_list[i]\n            min_list = sort_by_second(min_list)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list)\n        end\n    end\n    return min_list\nend"
  ]
}