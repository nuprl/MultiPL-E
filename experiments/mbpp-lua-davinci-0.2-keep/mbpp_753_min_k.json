{
  "name": "mbpp_753_min_k",
  "language": "lua",
  "prompt": "-- Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nlocal function min_k(test_list, K)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local min_k_list = {}\n    local min_k_list_size = 0\n    local min_k_list_max_size = K\n    for _, test_tuple in ipairs(test_list) do\n        if min_k_list_size < min_k_list_max_size then\n            table.insert(min_k_list, test_tuple)\n            min_k_list_size = min_k_list_size + 1\n        else\n            local min_k_list_max_index = 1\n            local min_k_list_max_value = min_k_list[1][2]\n            for i = 2, min_k_list_size do\n                if min_k_list[i][2] > min_k_list_max_value then\n                    min_k_list_max_index = i\n                    min_k_list_max_value = min_k_list[i][2]\n                end\n            end\n            if test_tuple[2] < min_k_list_max_value then\n                min_k_list[min_k_list_max_index] = test_tuple\n            end\n        end\n    end\n    return min_k_list\nend",
    "    local result = {}\n    for i = 1, K do\n        local min_idx = i\n        for j = i + 1, #test_list do\n            if test_list[j][1] < test_list[min_idx][1] then\n                min_idx = j\n            end\n        end\n        result[i] = test_list[min_idx]\n        test_list[min_idx] = test_list[i]\n    end\n    return result\nend",
    "    local min_list = {}\n    local min_list_len = 0\n    for i = 1, #test_list do\n        if min_list_len < K then\n            min_list[min_list_len + 1] = test_list[i]\n            min_list_len = min_list_len + 1\n            if min_list_len == K then\n                table.sort(min_list, function(a, b) return a[2] < b[2] end)\n            end\n        else\n            if test_list[i][2] < min_list[K][2] then\n                min_list[K] = test_list[i]\n                table.sort(min_list, function(a, b) return a[2] < b[2] end)\n            end\n        end\n    end\n    return min_list\nend",
    "    local result = {}\n    for i = 1, K do\n        local min_val = math.huge\n        local min_index = 0\n        for j = 1, #test_list do\n            if test_list[j][1] < min_val then\n                min_val = test_list[j][1]\n                min_index = j\n            end\n        end\n        result[i] = test_list[min_index]\n        table.remove(test_list, min_index)\n    end\n    return result\nend",
    "\tlocal min_list = {}\n\tlocal min_list_size = 0\n\tfor i, v in ipairs(test_list) do\n\t\tif min_list_size < K then\n\t\t\ttable.insert(min_list, v)\n\t\t\tmin_list_size = min_list_size + 1\n\t\telse\n\t\t\tlocal max_val = min_list[1]\n\t\t\tlocal max_index = 1\n\t\t\tfor j = 2, min_list_size do\n\t\t\t\tif max_val < min_list[j] then\n\t\t\t\t\tmax_val = min_list[j]\n\t\t\t\t\tmax_index = j\n\t\t\t\tend\n\t\t\tend\n\t\t\tif v < max_val then\n\t\t\t\tmin_list[max_index] = v\n\t\t\tend\n\t\tend\n\tend\n\treturn min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    local min_value = math.huge\n    for i, v in ipairs(test_list) do\n        if v[1] < min_value then\n            min_value = v[1]\n            min_list_size = 1\n            min_list[min_list_size] = v\n        elseif v[1] == min_value then\n            min_list_size = min_list_size + 1\n            min_list[min_list_size] = v\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, v)\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            local max_value = min_list[1][2]\n            for j = 2, min_list_size do\n                if min_list[j][2] > max_value then\n                    max_index = j\n                    max_value = min_list[j][2]\n                end\n            end\n            if v[2] < max_value then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_k_list = {}\n    local min_k_list_len = 0\n    local min_k_list_max_len = K\n    local min_k_list_max_len_minus_one = K - 1\n    local min_k_list_max_len_minus_two = K - 2\n    local min_k_list_max_len_minus_three = K - 3\n    local min_k_list_max_len_minus_four = K - 4\n    local min_k_list_max_len_minus_five = K - 5\n    local min_k_list_max_len_minus_six = K - 6\n    local min_k_list_max_len_minus_seven = K - 7\n    local min_k_list_max_len_minus_eight = K - 8\n    local min_k_list_max_len_minus_nine = K - 9\n    local min_k_list_max_len_minus_ten = K - 10\n    local min_k_list_max_len_minus_eleven = K - 11\n    local min_k_list_max_len_minus_twelve = K - 12\n    local min_k_list_max_len_minus_thirteen = K - 13\n    local min_k_list_max_len_minus_fourteen = K - 14\n    local min_k_list_max_len_minus_fifteen = K - 15\n    local min_k_list_max_len_minus_sixteen = K - 16\n    local min_k_list_max_len_minus_seventeen = K - 17\n    local min_k_list_max_len_minus_eighteen = K - 18\n    local min_k_list_max_len_minus_nineteen = K - 19\n    local min_k_list_max_len_minus_twenty = K - 20\n    local min_k_list_max_len_minus_twenty_one = K - 21\n    local min_k_list_max_len_minus_twenty_two = K - 22\n    local min_k_list_max_len_minus_twenty_three",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[1] < b[1] end)\n    -- return first K elements\n    return test_list[1:K]\nend",
    "  local min_list = {}\n  local min_list_size = 0\n  for _, v in ipairs(test_list) do\n    if min_list_size < K then\n      min_list[min_list_size + 1] = v\n      min_list_size = min_list_size + 1\n    else\n      local min_index = 0\n      local min_value = min_list[1][2]\n      for i = 2, min_list_size do\n        if min_list[i][2] < min_value then\n          min_index = i\n          min_value = min_list[i][2]\n        end\n      end\n      if v[2] > min_value then\n        min_list[min_index] = v\n      end\n    end\n  end\n  return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = min_list:sort()\n    for i = K + 1, #test_list do\n        if test_list[i] > min_list[K] then\n            min_list[K] = test_list[i]\n            min_list = min_list:sort()\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            min_list[min_list_size + 1] = v\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, min_list_size do\n                if min_list[j][2] > min_list[max_index][2] then\n                    max_index = j\n                end\n            end\n            if min_list[max_index][2] > v[2] then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for _, test_tuple in ipairs(test_list) do\n        local test_value = test_tuple[1]\n        local test_index = test_tuple[2]\n        if min_list_size < K then\n            min_list[min_list_size + 1] = {test_value, test_index}\n            min_list_size = min_list_size + 1\n        else\n            local max_value = min_list[1][1]\n            local max_index = 1\n            for i = 2, K do\n                if min_list[i][1] > max_value then\n                    max_value = min_list[i][1]\n                    max_index = i\n                end\n            end\n            if test_value < max_value then\n                min_list[max_index] = {test_value, test_index}\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i, v in ipairs(test_list) do\n        if #min_list < K then\n            table.insert(min_list, v)\n        else\n            table.sort(min_list, function(a, b) return a[1] < b[1] end)\n            if min_list[K][1] > v[1] then\n                min_list[K] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[1] < b[1] end)\n    -- return first k elements\n    local result = {}\n    for i = 1, K do\n        result[i] = test_list[i]\n    end\n    return result\nend",
    "    test_list.sort(key = lambda x: x[1])\n    return test_list[:K]",
    "\tlocal min_list = {}\n\tfor i = 1, K do\n\t\tlocal min_val = math.huge\n\t\tlocal min_idx = 0\n\t\tfor j = 1, #test_list do\n\t\t\tif test_list[j][1] < min_val then\n\t\t\t\tmin_val = test_list[j][1]\n\t\t\t\tmin_idx = j\n\t\t\tend\n\t\tend\n\t\tmin_list[i] = test_list[min_idx]\n\t\ttable.remove(test_list, min_idx)\n\tend\n\treturn min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test_list[i]\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, #min_list do\n                if min_list[j][2] > min_list[max_index][2] then\n                    max_index = j\n                end\n            end\n            if min_list[max_index][2] > test_list[i][2] then\n                min_list[max_index] = test_list[i]\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort_by_second(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][2] < min_list[K][2] then\n            min_list[K] = test_list[i]\n            min_list = sort_by_second(min_list)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, v)\n            min_list_size = min_list_size + 1\n        else\n            local max_value = min_list[1]\n            local max_index = 1\n            for j, w in ipairs(min_list) do\n                if w[1] > max_value[1] then\n                    max_value = w\n                    max_index = j\n                end\n            end\n            if v[1] < max_value[1] then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i, v in ipairs(test_list) do\n        if i <= K then\n            min_list[i] = v\n        else\n            local max_index = 1\n            for j, v in ipairs(min_list) do\n                if v[2] > min_list[max_index][2] then\n                    max_index = j\n                end\n            end\n            if v[2] < min_list[max_index][2] then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    test_list.sort(key = lambda x: x[1])\n    return test_list[:K]",
    "    local min_list = {}\n    local min_list_len = 0\n    for _, v in ipairs(test_list) do\n        if min_list_len < K then\n            min_list[min_list_len + 1] = v\n            min_list_len = min_list_len + 1\n        else\n            local min_idx = 1\n            local min_val = min_list[1][2]\n            for i = 2, min_list_len do\n                if min_list[i][2] < min_val then\n                    min_idx = i\n                    min_val = min_list[i][2]\n                end\n            end\n            if v[2] < min_val then\n                min_list[min_idx] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local result = {}\n    local min_val = test_list[1][1]\n    local min_idx = 1\n    for i = 1, K do\n        for j = 1, #test_list do\n            if test_list[j][1] < min_val then\n                min_val = test_list[j][1]\n                min_idx = j\n            end\n        end\n        result[i] = test_list[min_idx]\n        test_list[min_idx][1] = math.huge\n    end\n    return result\nend",
    "  local min_list = {}\n  local min_list_size = 0\n  for _, v in ipairs(test_list) do\n    if min_list_size < K then\n      table.insert(min_list, v)\n      min_list_size = min_list_size + 1\n    else\n      local max_index = 1\n      for i = 2, min_list_size do\n        if min_list[i][1] > min_list[max_index][1] then\n          max_index = i\n        end\n      end\n      if min_list[max_index][1] > v[1] then\n        min_list[max_index] = v\n      end\n    end\n  end\n  return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort_list(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][2] < min_list[K][2] then\n            min_list[K] = test_list[i]\n            min_list = sort_list(min_list)\n        end\n    end\n    return min_list\nend",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[1] < b[1] end)\n    -- return first K elements\n    local result = {}\n    for i = 1, K do\n        result[i] = test_list[i]\n    end\n    return result\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K)\n        end\n    end\n    return min_list\nend",
    "    if K > len(test_list):\n        return -1",
    "\t-- sort the list\n\ttable.sort(test_list, function(a, b) return a[1] < b[1] end)\n\t-- return first k elements\n\tlocal result = {}\n\tfor i = 1, K do\n\t\tresult[i] = test_list[i]\n\tend\n\treturn result\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, v)\n            min_list_size = min_list_size + 1\n        else\n            local max_val = min_list[1]\n            local max_index = 1\n            for j, val in ipairs(min_list) do\n                if val > max_val then\n                    max_val = val\n                    max_index = j\n                end\n            end\n            if v < max_val then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local result = {}\n    local min_val = math.huge\n    for i = 1, #test_list do\n        local val = test_list[i][1]\n        if val < min_val then\n            min_val = val\n            result[#result + 1] = test_list[i]\n        end\n    end\n    return result\nend",
    "    -- sort the list in ascending order\n    test_list = sorted(test_list, key=lambda x: x[1])\n    # print the first K records\n    for i in range(K):\n        print(test_list[i][0], end=\" \")\n    print()\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list)\n        end\n    end\n    return min_list\nend",
    "    -- sort the list with key as second element of tuple\n    test_list.sort(key = lambda x: x[1])\n    -- return first k elements\n    return test_list[:K]\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for _, v in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, v)\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 0\n            local max_value = min_list[1][1]\n            for i, v2 in ipairs(min_list) do\n                if v2[1] > max_value then\n                    max_value = v2[1]\n                    max_index = i\n                end\n            end\n            if v[1] < max_value then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i, v in ipairs(test_list) do\n        if #min_list < K then\n            table.insert(min_list, v)\n        else\n            table.sort(min_list, function(a, b) return a[1] < b[1] end)\n            if min_list[K][1] > v[1] then\n                min_list[K] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, v)\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, min_list_size do\n                if min_list[j][1] > min_list[max_index][1] then\n                    max_index = j\n                end\n            end\n            if v[1] < min_list[max_index][1] then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    test_list.sort(key = lambda x: x[1])\n    return test_list[:K]",
    "  local min_k_list = {}\n  local min_k_list_size = 0\n  for _, t in ipairs(test_list) do\n    if min_k_list_size < K then\n      min_k_list[#min_k_list + 1] = t\n      min_k_list_size = min_k_list_size + 1\n    else\n      local max_t = min_k_list[1]\n      local max_t_index = 1\n      for i, t2 in ipairs(min_k_list) do\n        if t2[2] > max_t[2] then\n          max_t = t2\n          max_t_index = i\n        end\n      end\n      if t[2] < max_t[2] then\n        min_k_list[max_t_index] = t\n      end\n    end\n  end\n  return min_k_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for _, v in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, v)\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for i = 2, min_list_size do\n                if min_list[i][1] > min_list[max_index][1] then\n                    max_index = i\n                end\n            end\n            if min_list[max_index][1] > v[1] then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort_list(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][2] < min_list[K][2] then\n            min_list[K] = test_list[i]\n            min_list = sort_list(min_list)\n        end\n    end\n    return min_list\nend",
    "  local min_list = {}\n  local min_list_size = 0\n  for _, test_case in ipairs(test_list) do\n    if min_list_size < K then\n      min_list[min_list_size + 1] = test_case\n      min_list_size = min_list_size + 1\n    else\n      local max_index = 1\n      local max_value = min_list[1][2]\n      for i = 2, min_list_size do\n        if min_list[i][2] > max_value then\n          max_index = i\n          max_value = min_list[i][2]\n        end\n      end\n      if test_case[2] < max_value then\n        min_list[max_index] = test_case\n      end\n    end\n  end\n  return min_list\nend",
    "  local min_list = {}\n  local min_list_size = 0\n  for _, test_case in ipairs(test_list) do\n    local test_case_size = #test_case\n    if test_case_size > 0 then\n      if min_list_size < K then\n        table.insert(min_list, test_case)\n        min_list_size = min_list_size + 1\n      else\n        local max_list_element = min_list[1]\n        local max_list_element_size = #max_list_element\n        if test_case_size < max_list_element_size then\n          min_list[1] = test_case\n        end\n        for i = 2, min_list_size do\n          local list_element = min_list[i]\n          local list_element_size = #list_element\n          if test_case_size < list_element_size then\n            min_list[i - 1] = test_case\n            min_list[i] = list_element\n          end\n        end\n      end\n    end\n  end\n  return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, v)\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, K do\n                if min_list[j][1] > min_list[max_index][1] then\n                    max_index = j\n                end\n            end\n            if min_list[max_index][1] > v[1] then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_len = 0\n    for _, test_tuple in ipairs(test_list) do\n        if min_list_len < K then\n            table.insert(min_list, test_tuple)\n            min_list_len = min_list_len + 1\n        else\n            local max_tuple = min_list[1]\n            local max_tuple_index = 1\n            for i, tuple in ipairs(min_list) do\n                if tuple[1] > max_tuple[1] then\n                    max_tuple = tuple\n                    max_tuple_index = i\n                end\n            end\n            if test_tuple[1] < max_tuple[1] then\n                min_list[max_tuple_index] = test_tuple\n            end\n        end\n    end\n    return min_list\nend",
    "  local result = {}\n  for i = 1, #test_list do\n    if i <= K then\n      table.insert(result, test_list[i])\n    else\n      table.sort(result, function(a, b) return a[2] < b[2] end)\n      if test_list[i][2] < result[K][2] then\n        result[K] = test_list[i]\n      end\n    end\n  end\n  return result\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for _, v in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, v)\n            min_list_size = min_list_size + 1\n        else\n            table.sort(min_list, function(a, b) return a[1] < b[1] end)\n            if v[1] < min_list[K][1] then\n                min_list[K] = v\n            end\n        end\n    end\n    return min_list\nend",
    "  local min_list = {}\n  for i = 1, K do\n    local min_value = math.huge\n    local min_index = -1\n    for j = 1, #test_list do\n      if test_list[j][1] < min_value then\n        min_value = test_list[j][1]\n        min_index = j\n      end\n    end\n    min_list[i] = test_list[min_index]\n    table.remove(test_list, min_index)\n  end\n  return min_list\nend",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[1] < b[1] end)\n    -- return the first K elements\n    return test_list[1], test_list[2], test_list[3]\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for _, t in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, t)\n            min_list_size = min_list_size + 1\n        else\n            local min_t = min_list[1]\n            local min_t_index = 1\n            for i, t2 in ipairs(min_list) do\n                if t2[1] < min_t[1] then\n                    min_t = t2\n                    min_t_index = i\n                end\n            end\n            if t[1] < min_t[1] then\n                min_list[min_t_index] = t\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_k_list = {}\n    local min_k_list_size = 0\n    for i = 1, #test_list do\n        if min_k_list_size < K then\n            table.insert(min_k_list, test_list[i])\n            min_k_list_size = min_k_list_size + 1\n        else\n            local max_element = min_k_list[1]\n            local max_index = 1\n            for j = 2, #min_k_list do\n                if min_k_list[j][2] > max_element[2] then\n                    max_element = min_k_list[j]\n                    max_index = j\n                end\n            end\n            if test_list[i][2] < max_element[2] then\n                min_k_list[max_index] = test_list[i]\n            end\n        end\n    end\n    return min_k_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            min_list[i] = v\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            local max_value = min_list[1]\n            for j = 2, K do\n                if max_value < min_list[j] then\n                    max_value = min_list[j]\n                    max_index = j\n                end\n            end\n            if v < max_value then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_len = 0\n    for i, v in ipairs(test_list) do\n        if min_list_len < K then\n            table.insert(min_list, v)\n            min_list_len = min_list_len + 1\n        else\n            local max_val = min_list[1]\n            local max_idx = 1\n            for j, w in ipairs(min_list) do\n                if w[2] > max_val[2] then\n                    max_val = w\n                    max_idx = j\n                end\n            end\n            if v[2] < max_val[2] then\n                min_list[max_idx] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_len = 0\n    for i = 1, #test_list do\n        if min_list_len < K then\n            min_list[#min_list + 1] = test_list[i]\n            min_list_len = min_list_len + 1\n            if min_list_len == K then\n                table.sort(min_list, function(a, b) return a[2] < b[2] end)\n            end\n        else\n            if test_list[i][2] < min_list[K][2] then\n                min_list[K] = test_list[i]\n                table.sort(min_list, function(a, b) return a[2] < b[2] end)\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][2] < min_list[K][2] then\n            min_list[K] = test_list[i]\n            min_list = sort(min_list)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list)\n        end\n    end\n    return min_list\nend",
    "  local min_list = {}\n  local min_list_len = 0\n  local min_list_max_len = K\n  local min_list_max_len_minus_one = K - 1\n  local min_list_max_len_minus_two = K - 2\n  local min_list_max_len_minus_three = K - 3\n  local min_list_max_len_minus_four = K - 4\n  local min_list_max_len_minus_five = K - 5\n  local min_list_max_len_minus_six = K - 6\n  local min_list_max_len_minus_seven = K - 7\n  local min_list_max_len_minus_eight = K - 8\n  local min_list_max_len_minus_nine = K - 9\n  local min_list_max_len_minus_ten = K - 10\n  local min_list_max_len_minus_eleven = K - 11\n  local min_list_max_len_minus_twelve = K - 12\n  local min_list_max_len_minus_thirteen = K - 13\n  local min_list_max_len_minus_fourteen = K - 14\n  local min_list_max_len_minus_fifteen = K - 15\n  local min_list_max_len_minus_sixteen = K - 16\n  local min_list_max_len_minus_seventeen = K - 17\n  local min_list_max_len_minus_eighteen = K - 18\n  local min_list_max_len_minus_nineteen = K - 19\n  local min_list_max_len_minus_twenty = K - 20\n  local min_list_max_len_minus_twenty_one = K - 21\n  local min_list_max_len_minus_twenty_two = K - 22\n  local min_list_max_len_minus_twenty_three = K - 23\n  local min_list_max_len_minus_twenty_four = K - 24\n  local min_list_max_len_minus_twenty_five = K - 25\n  local min_list",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = min_list:sort()\n    for i = K + 1, #test_list do\n        if test_list[i] > min_list[K] then\n            min_list[K] = test_list[i]\n            min_list = min_list:sort()\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K, \"min\")\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K, \"min\")\n        end\n    end\n    return min_list\nend",
    "  local min_list = {}\n  for i = 1, K do\n    min_list[i] = test_list[i]\n  end\n  min_list = heapify(min_list, K)\n  for i = K + 1, #test_list do\n    if test_list[i][1] < min_list[1][1] then\n      min_list[1] = test_list[i]\n      min_list = heapify(min_list, K)\n    end\n  end\n  return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test_list[i]\n            min_list_size = min_list_size + 1\n        else\n            local max_value = min_list[1][1]\n            local max_index = 1\n            for j = 2, #min_list do\n                if max_value < min_list[j][1] then\n                    max_value = min_list[j][1]\n                    max_index = j\n                end\n            end\n            if test_list[i][1] < max_value then\n                min_list[max_index] = test_list[i]\n            end\n        end\n    end\n    return min_list\nend",
    "    -- sort the list in ascending order\n    test_list.sort()\n    -- return the first K elements\n    return test_list[:K]\nend",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[1] < b[1] end)\n    -- return the first K elements\n    return test_list[1:K]\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i] < min_list[K] then\n            min_list[K] = test_list[i]\n            min_list = sort(min_list)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort_list(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][2] < min_list[K][2] then\n            min_list[K] = test_list[i]\n            min_list = sort_list(min_list)\n        end\n    end\n    return min_list\nend",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[1] < b[1] end)\n    -- return the first K elements\n    return test_list[1:K]\nend",
    "\tlocal min_k_list = {}\n\tlocal min_k_list_size = 0\n\tfor i = 1, #test_list do\n\t\tif min_k_list_size < K then\n\t\t\tmin_k_list[min_k_list_size + 1] = test_list[i]\n\t\t\tmin_k_list_size = min_k_list_size + 1\n\t\telse\n\t\t\tlocal max_index = 1\n\t\t\tfor j = 2, min_k_list_size do\n\t\t\t\tif min_k_list[j][2] > min_k_list[max_index][2] then\n\t\t\t\t\tmax_index = j\n\t\t\t\tend\n\t\t\tend\n\t\t\tif min_k_list[max_index][2] > test_list[i][2] then\n\t\t\t\tmin_k_list[max_index] = test_list[i]\n\t\t\tend\n\t\tend\n\tend\n\treturn min_k_list\nend",
    "    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\nend",
    "    test_list.sort(key = lambda x: x[0])\n    return test_list[:K]",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort_list(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][2] < min_list[K][2] then\n            min_list[K] = test_list[i]\n            min_list = sort_list(min_list)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort_list(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[K][1] then\n            min_list[K] = test_list[i]\n            min_list = sort_list(min_list)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort_tuple_list(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][2] < min_list[K][2] then\n            min_list[K] = test_list[i]\n            min_list = sort_tuple_list(min_list)\n        end\n    end\n    return min_list\nend",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[1] < b[1] end)\n    -- print the first k elements\n    for i = 1, K do\n        print(test_list[i][1], test_list[i][2])\n    end\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K)\n        end\n    end\n    return min_list\nend",
    "    local min_k_list = {}\n    local min_k_list_size = 0\n    local min_k_list_max_size = K\n    local min_k_list_max_value = math.huge\n    for _, test in ipairs(test_list) do\n        local value = test[2]\n        if min_k_list_size < min_k_list_max_size then\n            min_k_list_size = min_k_list_size + 1\n            min_k_list[min_k_list_size] = test\n            if value > min_k_list_max_value then\n                min_k_list_max_value = value\n            end\n        elseif value < min_k_list_max_value then\n            min_k_list[min_k_list_size] = test\n            min_k_list_max_value = value\n            for i = 1, min_k_list_size - 1 do\n                if min_k_list[i][2] > min_k_list_max_value then\n                    min_k_list[i], min_k_list[min_k_list_size] = min_k_list[min_k_list_size], min_k_list[i]\n                    min_k_list_max_value = min_k_list[i][2]\n                end\n            end\n        end\n    end\n    return min_k_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = min_list:sort(function(a, b) return a[2] < b[2] end)\n    for i = K + 1, #test_list do\n        if test_list[i][2] < min_list[K][2] then\n            min_list[K] = test_list[i]\n            min_list = min_list:sort(function(a, b) return a[2] < b[2] end)\n        end\n    end\n    return min_list\nend",
    "  local function compare(a, b)\n    return a[1] < b[1]\n  end\n  table.sort(test_list, compare)\n  local result = {}\n  for i = 1, K do\n    result[i] = test_list[i]\n  end\n  return result\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort_list(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][2] < min_list[K][2] then\n            min_list[K] = test_list[i]\n            min_list = sort_list(min_list)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K)\n        end\n    end\n    return min_list\nend",
    "  local function compare(a, b)\n    return a[1] < b[1]\n  end\n  table.sort(test_list, compare)\n  local result = {}\n  for i = 1, K do\n    result[i] = test_list[i]\n  end\n  return result\nend",
    "    test_list.sort()\n    return test_list[:K]\nend",
    "    test_list.sort(key = lambda x: x[1])\n    return test_list[:K]",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K, \"min\")\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K, \"min\")\n        end\n    end\n    return min_list\nend",
    "    test_list.sort(key = lambda x: x[1])\n    return test_list[:K]",
    "    # Sort the list in ascending order\n    test_list.sort()",
    "    test_list.sort(key = lambda x: x[0])\n    return test_list[:K]",
    "    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, v)\n            min_list_size = min_list_size + 1\n        else\n            local max_val = min_list[1]\n            local max_idx = 1\n            for j, w in ipairs(min_list) do\n                if max_val < w then\n                    max_val = w\n                    max_idx = j\n                end\n            end\n            if v < max_val then\n                min_list[max_idx] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort_list(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][2] < min_list[K][2] then\n            min_list[K] = test_list[i]\n            min_list = sort_list(min_list)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test_list[i]\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, #min_list do\n                if min_list[j][1] > min_list[max_index][1] then\n                    max_index = j\n                end\n            end\n            if min_list[max_index][1] > test_list[i][1] then\n                min_list[max_index] = test_list[i]\n            end\n        end\n    end\n    return min_list\nend",
    "  local min_list = {}\n  local min_list_size = 0\n  for i, v in ipairs(test_list) do\n    if min_list_size < K then\n      table.insert(min_list, v)\n      min_list_size = min_list_size + 1\n    else\n      local max_index = 1\n      local max_value = min_list[1][2]\n      for j = 2, min_list_size do\n        if min_list[j][2] > max_value then\n          max_index = j\n          max_value = min_list[j][2]\n        end\n      end\n      if v[2] < max_value then\n        min_list[max_index] = v\n      end\n    end\n  end\n  return min_list\nend",
    "\tlocal min_k_list = {}\n\tlocal min_k_list_size = 0\n\tfor _, v in ipairs(test_list) do\n\t\tif min_k_list_size < K then\n\t\t\tmin_k_list[#min_k_list + 1] = v\n\t\t\tmin_k_list_size = min_k_list_size + 1\n\t\telse\n\t\t\tlocal max_element = min_k_list[1]\n\t\t\tlocal max_element_index = 1\n\t\t\tfor i = 2, min_k_list_size do\n\t\t\t\tif max_element[1] < min_k_list[i][1] then\n\t\t\t\t\tmax_element = min_k_list[i]\n\t\t\t\t\tmax_element_index = i\n\t\t\t\tend\n\t\t\tend\n\t\t\tif max_element[1] > v[1] then\n\t\t\t\tmin_k_list[max_element_index] = v\n\t\t\tend\n\t\tend\n\tend\n\treturn min_k_list\nend",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[1] < b[1] end)\n    -- return first K elements\n    local result = {}\n    for i = 1, K do\n        result[i] = test_list[i]\n    end\n    return result\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K)\n        end\n    end\n    return min_list\nend",
    "    local result = {}\n    for _, v in ipairs(test_list) do\n        if #result < K then\n            table.insert(result, v)\n        else\n            table.sort(result, function(a, b) return a[2] < b[2] end)\n            if result[K][2] > v[2] then\n                result[K] = v\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, K do\n        result[i] = test_list[i]\n    end\n    for i = K + 1, #test_list do\n        local max_index = 1\n        for j = 2, K do\n            if result[j][2] > result[max_index][2] then\n                max_index = j\n            end\n        end\n        if test_list[i][2] < result[max_index][2] then\n            result[max_index] = test_list[i]\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, K do\n        local min_val = test_list[i][1]\n        local min_index = i\n        for j = i + 1, #test_list do\n            if test_list[j][1] < min_val then\n                min_val = test_list[j][1]\n                min_index = j\n            end\n        end\n        result[i] = test_list[min_index]\n        test_list[min_index] = test_list[i]\n        test_list[i] = result[i]\n    end\n    return result\nend",
    "\tlocal min_list = {}\n\tfor i = 1, K do\n\t\tlocal min_idx = i\n\t\tfor j = i + 1, #test_list do\n\t\t\tif test_list[j][1] < test_list[min_idx][1] then\n\t\t\t\tmin_idx = j\n\t\t\tend\n\t\tend\n\t\tmin_list[i] = test_list[min_idx]\n\t\ttest_list[min_idx] = test_list[i]\n\tend\n\treturn min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        local min_idx = i\n        for j = i + 1, #test_list do\n            if test_list[j][1] < test_list[min_idx][1] then\n                min_idx = j\n            end\n        end\n        min_list[i] = test_list[min_idx]\n        test_list[min_idx] = test_list[i]\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test_list[i]\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            local max_value = min_list[max_index][2]\n            for j = 2, min_list_size do\n                if min_list[j][2] > max_value then\n                    max_index = j\n                    max_value = min_list[max_index][2]\n                end\n            end\n            if test_list[i][2] < max_value then\n                min_list[max_index] = test_list[i]\n            end\n        end\n    end\n    return min_list\nend",
    "  local min_list = {}\n  local min_list_len = 0\n  for i, v in ipairs(test_list) do\n    if min_list_len < K then\n      min_list[i] = v\n      min_list_len = min_list_len + 1\n    else\n      local min_index = 1\n      local min_value = min_list[1]\n      for j = 2, min_list_len do\n        if min_list[j] < min_value then\n          min_index = j\n          min_value = min_list[j]\n        end\n      end\n      if v < min_value then\n        min_list[min_index] = v\n      end\n    end\n  end\n  return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    local min_value = math.huge\n    local min_index = 0\n    local min_value_index = 0\n    local min_value_list = {}\n    local min_value_list_size = 0\n    local min_value_list_index = 0\n    local min_value_list_value = 0\n    local min_value_list_value_index = 0\n    local min_value_list_value_index_list = {}\n    local min_value_list_value_index_list_size = 0\n    local min_value_list_value_index_list_index = 0\n    local min_value_list_value_index_list_value = 0\n    local min_value_list_value_index_list_value_index = 0\n    local min_value_list_value_index_list_value_index_list = {}\n    local min_value_list_value_index_list_value_index_list_size = 0\n    local min_value_list_value_index_list_value_index_list_index = 0\n    local min_value_list_value_index_list_value_index_list_value = 0\n    local min_value_list_value_index_list_value_index_list_value_index = 0\n    local min_value_list_value_index_list_value_index_list_value_index_list = {}\n    local min_value_list_value_index_list_value_index_list_value_index_list_size = 0\n    local min_value_list_value_index_list_value_index_list_value_index_list_index = 0\n    local min_value_list_value_index_list_value_index_list_value_index_list_value = 0\n    local min_value_list_value_index_list_value_index_list_value_index_list_value_index = 0\n    local min_value_list_value_index_list_value_index_list_value_index_list_value_index_list = {}\n    local min_value_list_value_index",
    "    local min_list = {}\n    for _, v in pairs(test_list) do\n        if #min_list < K then\n            table.insert(min_list, v)\n        else\n            local max_val = min_list[1][2]\n            local max_idx = 1\n            for i, v2 in pairs(min_list) do\n                if v2[2] > max_val then\n                    max_val = v2[2]\n                    max_idx = i\n                end\n            end\n            if v[2] < max_val then\n                min_list[max_idx] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i, v in ipairs(test_list) do\n        if #min_list < K then\n            table.insert(min_list, v)\n        else\n            table.sort(min_list, function(a, b) return a[2] < b[2] end)\n            if min_list[K][2] > v[2] then\n                min_list[K] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        local min_val = math.huge\n        local min_index = -1\n        for j = 1, #test_list do\n            if test_list[j][1] < min_val then\n                min_val = test_list[j][1]\n                min_index = j\n            end\n        end\n        min_list[i] = test_list[min_index]\n        table.remove(test_list, min_index)\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i=1,#test_list do\n        if min_list_size < K:\n            min_list.append(test_list[i])\n            min_list_size = min_list_size + 1\n        else:\n            min_list.sort()\n            if test_list[i][1] < min_list[0][1]:\n                min_list[0] = test_list[i]\n    min_list.sort()\n    return min_list\nend",
    "    local function compare(a, b)\n        return a[1] < b[1]\n    end\n    table.sort(test_list, compare)\n    local result = {}\n    for i = 1, K do\n        result[i] = test_list[i]\n    end\n    return result\nend",
    "    local min_k_list = {}\n    local min_k_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_k_list_size < K then\n            min_k_list[#min_k_list + 1] = v\n            min_k_list_size = min_k_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, K do\n                if min_k_list[j][1] > min_k_list[max_index][1] then\n                    max_index = j\n                end\n            end\n            if min_k_list[max_index][1] > v[1] then\n                min_k_list[max_index] = v\n            end\n        end\n    end\n    return min_k_list\nend",
    "  local min_list = {}\n  local min_list_size = 0\n  local min_list_max_size = K\n  local min_list_max_size_minus_one = K - 1\n  local min_list_max_size_minus_two = K - 2\n  local min_list_max_size_minus_three = K - 3\n  local min_list_max_size_minus_four = K - 4\n  local min_list_max_size_minus_five = K - 5\n  local min_list_max_size_minus_six = K - 6\n  local min_list_max_size_minus_seven = K - 7\n  local min_list_max_size_minus_eight = K - 8\n  local min_list_max_size_minus_nine = K - 9\n  local min_list_max_size_minus_ten = K - 10\n  local min_list_max_size_minus_eleven = K - 11\n  local min_list_max_size_minus_twelve = K - 12\n  local min_list_max_size_minus_thirteen = K - 13\n  local min_list_max_size_minus_fourteen = K - 14\n  local min_list_max_size_minus_fifteen = K - 15\n  local min_list_max_size_minus_sixteen = K - 16\n  local min_list_max_size_minus_seventeen = K - 17\n  local min_list_max_size_minus_eighteen = K - 18\n  local min_list_max_size_minus_nineteen = K - 19\n  local min_list_max_size_minus_twenty = K - 20\n  local min_list_max_size_minus_twenty_one = K - 21\n  local min_list_max_size_minus_twenty_two = K - 22\n  local min_list_max_size_minus_twenty_three = K - 23\n  local min_list_max_size_minus_twenty_four = K - 24\n  local min_list_max_size_minus_twenty_five = K - 25\n  local min_list",
    "    # sort the list in ascending order\n    test_list.sort()",
    "    -- sort the list in ascending order\n    test_list.sort()\n    -- print the first K records\n    for i in range(K):\n        print(test_list[i])",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K)\n        end\n    end\n    return min_list\nend",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[1] < b[1] end)\n    -- print the first k elements\n    for i = 1, K do\n        print(test_list[i][1], test_list[i][2])\n    end\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test_list[i]\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, min_list_size do\n                if min_list[j][1] > min_list[max_index][1] then\n                    max_index = j\n                end\n            end\n            if min_list[max_index][1] > test_list[i][1] then\n                min_list[max_index] = test_list[i]\n            end\n        end\n    end\n    return min_list\nend",
    "    local result = {}\n    for i = 1, K do\n        local min_val = math.huge\n        local min_index = 0\n        for j = 1, #test_list do\n            if test_list[j][1] < min_val then\n                min_val = test_list[j][1]\n                min_index = j\n            end\n        end\n        table.insert(result, test_list[min_index])\n        table.remove(test_list, min_index)\n    end\n    return result\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, v)\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j, w in ipairs(min_list) do\n                if w[2] > min_list[max_index][2] then\n                    max_index = j\n                end\n            end\n            if v[2] < min_list[max_index][2] then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "  local min_list = {}\n  for i = 1, K do\n    min_list[i] = test_list[i]\n  end\n  min_list = heapify(min_list)",
    "    local min_list = {}\n    for i = 1, K do\n        local min_val = test_list[i][1]\n        local min_index = i\n        for j = i + 1, #test_list do\n            if test_list[j][1] < min_val then\n                min_val = test_list[j][1]\n                min_index = j\n            end\n        end\n        test_list[min_index], test_list[i] = test_list[i], test_list[min_index]\n        min_list[i] = test_list[i]\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            min_list[min_list_size + 1] = v\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            local max_value = min_list[1][2]\n            for j = 2, min_list_size do\n                if max_value < min_list[j][2] then\n                    max_value = min_list[j][2]\n                    max_index = j\n                end\n            end\n            if v[2] < max_value then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i] < min_list[K] then\n            min_list[K] = test_list[i]\n            min_list = sort(min_list)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort_tuple_list(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][2] < min_list[K][2] then\n            min_list[K] = test_list[i]\n            min_list = sort_tuple_list(min_list)\n        end\n    end\n    return min_list\nend",
    "  local min_list = {}\n  for _, v in ipairs(test_list) do\n    if #min_list < K then\n      table.insert(min_list, v)\n    else\n      local max_val = min_list[1]\n      local max_idx = 1\n      for i, v in ipairs(min_list) do\n        if v > max_val then\n          max_val = v\n          max_idx = i\n        end\n      end\n      if v < max_val then\n        min_list[max_idx] = v\n      end\n    end\n  end\n  return min_list\nend",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[1] < b[1] end)\n    -- return first K elements\n    return test_list[1:K]\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort_tuple_list(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][2] < min_list[K][2] then\n            min_list[K] = test_list[i]\n            min_list = sort_tuple_list(min_list)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, v)\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j, w in ipairs(min_list) do\n                if w[2] > min_list[max_index][2] then\n                    max_index = j\n                end\n            end\n            if v[2] < min_list[max_index][2] then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_len = 0\n    for i, v in ipairs(test_list) do\n        if min_list_len < K then\n            min_list[min_list_len + 1] = v\n            min_list_len = min_list_len + 1\n        else\n            local min_index = 1\n            local min_value = min_list[1][2]\n            for j = 2, min_list_len do\n                if min_list[j][2] < min_value then\n                    min_index = j\n                    min_value = min_list[j][2]\n                end\n            end\n            if v[2] > min_value then\n                min_list[min_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test_list[i]\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, #min_list do\n                if min_list[j][2] > min_list[max_index][2] then\n                    max_index = j\n                end\n            end\n            if min_list[max_index][2] > test_list[i][2] then\n                min_list[max_index] = test_list[i]\n            end\n        end\n    end\n    return min_list\nend",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[1] < b[1] end)\n    -- return the first k elements\n    return test_list[1:K]\nend",
    "    -- sort the list in ascending order\n    test_list.sort()\n    -- return first k elements\n    return test_list[:K]\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test_list[i]\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, #min_list do\n                if min_list[j][1] > min_list[max_index][1] then\n                    max_index = j\n                end\n            end\n            if min_list[max_index][1] > test_list[i][1] then\n                min_list[max_index] = test_list[i]\n            end\n        end\n    end\n    return min_list\nend",
    "  local min_list = {}\n  local min_heap = {}\n  for _, test in ipairs(test_list) do\n    local test_value = test[2]\n    if #min_heap < K then\n      table.insert(min_heap, test)\n      table.sort(min_heap, function(a, b) return a[2] < b[2] end)\n    else\n      if test_value < min_heap[1][2] then\n        table.remove(min_heap, 1)\n        table.insert(min_heap, test)\n        table.sort(min_heap, function(a, b) return a[2] < b[2] end)\n      end\n    end\n  end\n  for _, test in ipairs(min_heap) do\n    table.insert(min_list, test)\n  end\n  return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        local min_index = i\n        for j = i + 1, #test_list do\n            if test_list[j][1] < test_list[min_index][1] then\n                min_index = j\n            end\n        end\n        min_list[i] = test_list[min_index]\n        test_list[min_index] = test_list[i]\n    end\n    return min_list\nend",
    "  local min_list = {}\n  local min_list_size = 0\n  for i, v in ipairs(test_list) do\n    if min_list_size < K then\n      table.insert(min_list, v)\n      min_list_size = min_list_size + 1\n    else\n      local max_value = min_list[1]\n      local max_index = 1\n      for j = 2, K do\n        if max_value[1] < min_list[j][1] then\n          max_value = min_list[j]\n          max_index = j\n        end\n      end\n      if max_value[1] > v[1] then\n        min_list[max_index] = v\n      end\n    end\n  end\n  return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    local i = 1\n    while i <= #test_list do\n        if min_list_size < K then\n            table.insert(min_list, test_list[i])\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, #min_list do\n                if min_list[j][2] > min_list[max_index][2] then\n                    max_index = j\n                end\n            end\n            if min_list[max_index][2] > test_list[i][2] then\n                min_list[max_index] = test_list[i]\n            end\n        end\n        i = i + 1\n    end\n    return min_list\nend",
    "    local res = {}\n    for i = 1, K do\n        local min_val = math.huge\n        local min_index = 0\n        for j = 1, #test_list do\n            if test_list[j][1] < min_val then\n                min_val = test_list[j][1]\n                min_index = j\n            end\n        end\n        res[i] = test_list[min_index]\n        table.remove(test_list, min_index)\n    end\n    return res\nend",
    "    local min_list = {}\n    local min_list_len = 0\n    for _, test_tuple in ipairs(test_list) do\n        local test_tuple_val = test_tuple[2]\n        if min_list_len < K then\n            min_list[#min_list + 1] = test_tuple\n            min_list_len = min_list_len + 1\n        else\n            local max_tuple = min_list[1]\n            local max_tuple_val = max_tuple[2]\n            if test_tuple_val < max_tuple_val then\n                min_list[1] = test_tuple\n            end\n            for i = 2, min_list_len do\n                local curr_tuple = min_list[i]\n                local curr_tuple_val = curr_tuple[2]\n                if test_tuple_val < curr_tuple_val and curr_tuple_val < max_tuple_val then\n                    min_list[i] = test_tuple\n                    max_tuple = curr_tuple\n                    max_tuple_val = curr_tuple_val\n                end\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_len = 0\n    for i = 1, #test_list do\n        if min_list_len < K then\n            table.insert(min_list, test_list[i])\n            min_list_len = min_list_len + 1\n        else\n            local max_tuple = min_list[1]\n            local max_tuple_index = 1\n            for j = 2, #min_list do\n                if max_tuple[2] < min_list[j][2] then\n                    max_tuple = min_list[j]\n                    max_tuple_index = j\n                end\n            end\n            if test_list[i][2] < max_tuple[2] then\n                min_list[max_tuple_index] = test_list[i]\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort(min_list, function(a, b) return a[1] < b[1] end)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[K][1] then\n            min_list[K] = test_list[i]\n            min_list = sort(min_list, function(a, b) return a[1] < b[1] end)\n        end\n    end\n    return min_list\nend",
    "  local min_list = {}\n  local min_list_len = 0\n  local min_list_max_len = K\n  local min_list_max_len_minus_1 = K - 1\n  local min_list_max_len_minus_2 = K - 2\n  local min_list_max_len_minus_3 = K - 3\n  local min_list_max_len_minus_4 = K - 4\n  local min_list_max_len_minus_5 = K - 5\n  local min_list_max_len_minus_6 = K - 6\n  local min_list_max_len_minus_7 = K - 7\n  local min_list_max_len_minus_8 = K - 8\n  local min_list_max_len_minus_9 = K - 9\n  local min_list_max_len_minus_10 = K - 10\n  local min_list_max_len_minus_11 = K - 11\n  local min_list_max_len_minus_12 = K - 12\n  local min_list_max_len_minus_13 = K - 13\n  local min_list_max_len_minus_14 = K - 14\n  local min_list_max_len_minus_15 = K - 15\n  local min_list_max_len_minus_16 = K - 16\n  local min_list_max_len_minus_17 = K - 17\n  local min_list_max_len_minus_18 = K - 18\n  local min_list_max_len_minus_19 = K - 19\n  local min_list_max_len_minus_20 = K - 20\n  local min_list_max_len_minus_21 = K - 21\n  local min_list_max_len_minus_22 = K - 22\n  local min_list_max_len_minus_23 = K - 23\n  local min_list_max_len_minus_24 = K - 24\n  local min_list_max_len_minus_25 = K - 25\n  local min_list_max_len_minus_26 = K - 26\n  local min_list_max_len_minus_27",
    "  local function compare(a, b)\n    return a[1] < b[1]\n  end\n  table.sort(test_list, compare)\n  local result = {}\n  for i = 1, K do\n    result[i] = test_list[i]\n  end\n  return result\nend",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[1] < b[1] end)\n    -- return first K elements\n    return test_list[1:K]\nend",
    "  local min_list = {}\n  local min_list_size = 0\n  local list_size = #test_list\n  for i = 1, list_size do\n    local current_tuple = test_list[i]\n    if min_list_size < K then\n      min_list[min_list_size + 1] = current_tuple\n      min_list_size = min_list_size + 1\n    else\n      local max_tuple = min_list[1]\n      local max_tuple_index = 1\n      for j = 2, K do\n        if max_tuple[2] < min_list[j][2] then\n          max_tuple = min_list[j]\n          max_tuple_index = j\n        end\n      end\n      if max_tuple[2] > current_tuple[2] then\n        min_list[max_tuple_index] = current_tuple\n      end\n    end\n  end\n  return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort_tuple_list(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][2] < min_list[K][2] then\n            min_list[K] = test_list[i]\n            min_list = sort_tuple_list(min_list)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[K][1] then\n            min_list[K] = test_list[i]\n            min_list = sort(min_list)\n        end\n    end\n    return min_list\nend",
    "    -- sort the list using sort()\n    test_list.sort()",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort_list(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][2] < min_list[K][2] then\n            min_list[K] = test_list[i]\n            min_list = sort_list(min_list)\n        end\n    end\n    return min_list\nend",
    "    local result = {}\n    for _, v in ipairs(test_list) do\n        if #result < K then\n            table.insert(result, v)\n        else\n            table.sort(result, function(a, b) return a[1] < b[1] end)\n            if result[K][1] > v[1] then\n                result[K] = v\n            end\n        end\n    end\n    return result\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for _, test in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, test)\n            min_list_size = min_list_size + 1\n        else\n            local max_test = min_list[1]\n            local max_index = 1\n            for i, test2 in ipairs(min_list) do\n                if test2[2] > max_test[2] then\n                    max_test = test2\n                    max_index = i\n                end\n            end\n            if test[2] < max_test[2] then\n                min_list[max_index] = test\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    local min_list_index = 1\n    local min_list_index_end = 1\n    local min_list_index_start = 1\n    local min_list_index_end_next = 1\n    local min_list_index_start_next = 1\n    local min_list_index_end_prev = 1\n    local min_list_index_start_prev = 1\n    local min_list_index_end_prev_prev = 1\n    local min_list_index_start_prev_prev = 1\n    local min_list_index_end_prev_prev_prev = 1\n    local min_list_index_start_prev_prev_prev = 1\n    local min_list_index_end_prev_prev_prev_prev = 1\n    local min_list_index_start_prev_prev_prev_prev = 1\n    local min_list_index_end_prev_prev_prev_prev_prev = 1\n    local min_list_index_start_prev_prev_prev_prev_prev = 1\n    local min_list_index_end_prev_prev_prev_prev_prev_prev = 1\n    local min_list_index_start_prev_prev_prev_prev_prev_prev = 1\n    local min_list_index_end_prev_prev_prev_prev_prev_prev_prev = 1\n    local min_list_index_start_prev_prev_prev_prev_prev_prev_prev = 1\n    local min_list_index_end_prev_prev_prev_prev_prev_prev_prev_prev = 1\n    local min_list_index_start_prev_prev_prev_prev_prev_prev_prev_prev = 1\n    local min_list_index_end_prev_prev_prev_prev_prev_prev_prev_prev_prev = 1\n    local min_list_index_start_prev_prev_prev_prev_prev_prev_prev_prev_prev = 1\n    local min_list_index_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 1\n    local min",
    "    local min_list = {}\n    for _, v in ipairs(test_list) do\n        local i = 1\n        while i <= #min_list and v[2] > min_list[i][2] do\n            i = i + 1\n        end\n        table.insert(min_list, i, v)\n        if #min_list > K then\n            table.remove(min_list)\n        end\n    end\n    return min_list\nend",
    "  local min_list = {}\n  local min_list_len = 0\n  for _, v in ipairs(test_list) do\n    if min_list_len < K then\n      min_list[#min_list + 1] = v\n      min_list_len = min_list_len + 1\n    else\n      local max_idx = 0\n      local max_val = min_list[1][2]\n      for i, v2 in ipairs(min_list) do\n        if v2[2] > max_val then\n          max_val = v2[2]\n          max_idx = i\n        end\n      end\n      if v[2] < max_val then\n        min_list[max_idx] = v\n      end\n    end\n  end\n  return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i] > min_list[K] then\n            min_list[K] = test_list[i]\n            min_list = sort(min_list)\n        end\n    end\n    return min_list\nend",
    "\tlocal min_list = {}\n\tfor i = 1, K do\n\t\tlocal min_val = math.huge\n\t\tlocal min_idx = -1\n\t\tfor j = 1, #test_list do\n\t\t\tif test_list[j][2] < min_val then\n\t\t\t\tmin_val = test_list[j][2]\n\t\t\t\tmin_idx = j\n\t\t\tend\n\t\tend\n\t\tmin_list[i] = test_list[min_idx]\n\t\ttable.remove(test_list, min_idx)\n\tend\n\treturn min_list\nend",
    "    local min_list = {}\n    local min_list_len = 0\n    for i, test_tuple in ipairs(test_list) do\n        if min_list_len < K then\n            table.insert(min_list, test_tuple)\n            min_list_len = min_list_len + 1\n        else\n            local max_tuple = min_list[1]\n            local max_tuple_index = 1\n            for j, min_tuple in ipairs(min_list) do\n                if max_tuple[2] < min_tuple[2] then\n                    max_tuple = min_tuple\n                    max_tuple_index = j\n                end\n            end\n            if test_tuple[2] < max_tuple[2] then\n                min_list[max_tuple_index] = test_tuple\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, v)\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            local max_value = min_list[1][2]\n            for j, w in ipairs(min_list) do\n                if w[2] > max_value then\n                    max_index = j\n                    max_value = w[2]\n                end\n            end\n            if v[2] < max_value then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for _, test_tuple in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, test_tuple)\n            min_list_size = min_list_size + 1\n        else\n            local max_tuple = min_list[1]\n            local max_tuple_index = 1\n            for i, tuple in ipairs(min_list) do\n                if tuple[2] > max_tuple[2] then\n                    max_tuple = tuple\n                    max_tuple_index = i\n                end\n            end\n            if test_tuple[2] < max_tuple[2] then\n                min_list[max_tuple_index] = test_tuple\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort_list(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[K][1] then\n            min_list[K] = test_list[i]\n            min_list = sort_list(min_list)\n        end\n    end\n    return min_list\nend",
    "    test_list.sort(key = lambda x: x[0])\n    return test_list[:K]",
    "    local min_list = {}\n    for _, v in ipairs(test_list) do\n        if #min_list < K then\n            table.insert(min_list, v)\n        else\n            table.sort(min_list, function(a, b) return a[1] < b[1] end)\n            if min_list[K][1] > v[1] then\n                min_list[K] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[K][1] then\n            min_list[K] = test_list[i]\n            min_list = sort(min_list)\n        end\n    end\n    return min_list\nend",
    "    test_list.sort(key = lambda x: x[1])\n    return test_list[:K]",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = min_heapify(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = min_heapify(min_list)\n        end\n    end\n    return min_list\nend",
    "  local min_list = {}\n  local min_list_size = 0\n  local min_list_index = 1\n  local min_list_value = math.huge\n  local min_list_value_index = 1\n  local min_list_value_index_index = 1\n  local min_list_value_index_index_index = 1\n  local min_list_value_index_index_index_index = 1\n  local min_list_value_index_index_index_index_index = 1\n  local min_list_value_index_index_index_index_index_index = 1\n  local min_list_value_index_index_index_index_index_index_index = 1\n  local min_list_value_index_index_index_index_index_index_index_index = 1\n  local min_list_value_index_index_index_index_index_index_index_index_index = 1\n  local min_list_value_index_index_index_index_index_index_index_index_index_index = 1\n  local min_list_value_index_index_index_index_index_index_index_index_index_index_index = 1\n  local min_list_value_index_index_index_index_index_index_index_index_index_index_index_index = 1\n  local min_list_value_index_index_index_index_index_index_index_index_index_index_index_index_index = 1\n  local min_list_value_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 1\n  local min_list_value_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 1\n  local min_list_value_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 1\n  local min_list_value_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K)\n        end\n    end\n    return min_list\nend",
    "    local result = {}\n    local min_val = math.huge\n    local min_index = 0\n    local count = 0",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[2] < b[2] end)\n    -- return first K elements\n    return test_list[1:K]\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, v)\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 0\n            local max_value = min_list[1][2]\n            for j, w in ipairs(min_list) do\n                if w[2] > max_value then\n                    max_index = j\n                    max_value = w[2]\n                end\n            end\n            if v[2] < max_value then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    local min_list_max_size = K\n    local min_list_max_value = math.huge\n    for _, test_tuple in ipairs(test_list) do\n        local test_value = test_tuple[2]\n        if min_list_size < min_list_max_size then\n            min_list_size = min_list_size + 1\n            min_list[min_list_size] = test_tuple\n            if test_value < min_list_max_value then\n                min_list_max_value = test_value\n            end\n        elseif test_value < min_list_max_value then\n            min_list[min_list_size] = test_tuple\n            min_list_max_value = test_value\n            for i = 1, min_list_size - 1 do\n                if min_list[i][2] > min_list_max_value then\n                    min_list[i], min_list[min_list_size] = min_list[min_list_size], min_list[i]\n                    min_list_max_value = min_list[i][2]\n                end\n            end\n        end\n    end\n    return min_list\nend",
    "    local function compare(a, b)\n        return a[1] < b[1]\n    end\n    table.sort(test_list, compare)\n    local result = {}\n    for i = 1, K do\n        result[#result + 1] = test_list[i]\n    end\n    return result\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K)\n        end\n    end\n    return min_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list, K)\n        end\n    end\n    return min_list\nend",
    "    local min_k_list = {}\n    for i, v in ipairs(test_list) do\n        if i <= K then\n            min_k_list[i] = v\n        else\n            local max_index = 1\n            for j = 2, K do\n                if min_k_list[j][2] > min_k_list[max_index][2] then\n                    max_index = j\n                end\n            end\n            if min_k_list[max_index][2] > v[2] then\n                min_k_list[max_index] = v\n            end\n        end\n    end\n    return min_k_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test_list[i]\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, min_list_size do\n                if min_list[j][1] > min_list[max_index][1] then\n                    max_index = j\n                end\n            end\n            if test_list[i][1] < min_list[max_index][1] then\n                min_list[max_index] = test_list[i]\n            end\n        end\n    end\n    return min_list\nend",
    "    -- sort the list in ascending order\n    test_list.sort()\n    -- print the first K records\n    for i in range(K):\n        print(test_list[i])",
    "  local min_k_list = {}\n  local min_k_list_len = 0\n  for _, v in ipairs(test_list) do\n    if min_k_list_len < K then\n      min_k_list[#min_k_list + 1] = v\n      min_k_list_len = min_k_list_len + 1\n    else\n      local max_val = min_k_list[1][2]\n      local max_index = 1\n      for i = 2, #min_k_list do\n        if min_k_list[i][2] > max_val then\n          max_val = min_k_list[i][2]\n          max_index = i\n        end\n      end\n      if v[2] < max_val then\n        min_k_list[max_index] = v\n      end\n    end\n  end\n  return min_k_list\nend",
    "    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = heapify(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_list[1][1] then\n            min_list[1] = test_list[i]\n            min_list = heapify(min_list)\n        end\n    end\n    return min_list\nend",
    "    local sorted_list = {}\n    for i, v in ipairs(test_list) do\n        table.insert(sorted_list, v)\n    end\n    table.sort(sorted_list, function(a, b) return a[1] < b[1] end)\n    local result = {}\n    for i = 1, K do\n        table.insert(result, sorted_list[i])\n    end\n    return result\nend",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[1] < b[1] end)\n    -- return the first K elements\n    local result = {}\n    for i = 1, K do\n        result[i] = test_list[i]\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, K do\n    local min_val = test_list[i][1]\n    local min_index = i\n    for j = i + 1, #test_list do\n      if test_list[j][1] < min_val then\n        min_val = test_list[j][1]\n        min_index = j\n      end\n    end\n    result[i] = test_list[min_index]\n    test_list[min_index] = test_list[i]\n    test_list[i] = result[i]\n  end\n  return result\nend",
    "\tlocal min_k_list = {}\n\tfor i = 1, K do\n\t\tlocal min_val = test_list[i][1]\n\t\tlocal min_index = i\n\t\tfor j = i + 1, #test_list do\n\t\t\tif test_list[j][1] < min_val then\n\t\t\t\tmin_val = test_list[j][1]\n\t\t\t\tmin_index = j\n\t\t\tend\n\t\tend\n\t\ttest_list[min_index], test_list[i] = test_list[i], test_list[min_index]\n\t\tmin_k_list[i] = test_list[i]\n\tend\n\treturn min_k_list\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            min_list[min_list_size + 1] = v\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 0\n            local max_value = min_list[1][1]\n            for j = 1, min_list_size do\n                if min_list[j][1] > max_value then\n                    max_value = min_list[j][1]\n                    max_index = j\n                end\n            end\n            if v[1] < max_value then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend",
    "    local result = {}\n    local n = #test_list\n    for i = 1, K do\n        result[i] = test_list[i]\n    end\n    for i = K + 1, n do\n        local j = 1\n        while j <= K do\n            if test_list[i][2] < result[j][2] then\n                result[j] = test_list[i]\n                break\n            end\n            j = j + 1\n        end\n    end\n    return result\nend",
    "    -- sort the list\n    table.sort(test_list, function(a, b) return a[1] < b[1] end)\n    -- return first k elements\n    return test_list[1:K]\nend",
    "    -- sort the list in ascending order\n    test_list.sort()\n    -- print the first K records\n    for i in range(K):\n        print(test_list[i])",
    "    local min_list = {}\n    local min_list_len = 0\n    for i = 1, #test_list do\n        if min_list_len < K then\n            min_list[#min_list + 1] = test_list[i]\n            min_list_len = min_list_len + 1\n        else\n            local max_index = 1\n            for j = 2, #min_list do\n                if min_list[j][2] > min_list[max_index][2] then\n                    max_index = j\n                end\n            end\n            if min_list[max_index][2] > test_list[i][2] then\n                min_list[max_index] = test_list[i]\n            end\n        end\n    end\n    return min_list\nend",
    "    if K > len(test_list):\n        return -1\n    test_list.sort(key = lambda x: x[1])\n    return test_list[:K]",
    "    local min_k_list = {}\n    for i = 1, K do\n        min_k_list[i] = test_list[i]\n    end\n    min_k_list = heapify(min_k_list, K)\n    for i = K + 1, #test_list do\n        if test_list[i][1] < min_k_list[1][1] then\n            min_k_list[1] = test_list[i]\n            min_k_list = heapify(min_k_list, K)\n        end\n    end\n    return min_k_list\nend"
  ]
}