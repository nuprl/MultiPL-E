{
  "name": "mbpp_77_is_Diff",
  "language": "lua",
  "prompt": "-- Write a python function to find whether a number is divisible by 11.\nlocal function is_Diff(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Diff\n    lu.assertEquals(candidate(12345), false)\n    lu.assertEquals(candidate(1212112), true)\n    lu.assertEquals(candidate(1212), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal sum1, sum2 = 0, 0\n\twhile n > 0 do\n\t\tsum1 = sum1 + n % 10\n\t\tn = math.floor(n / 10)\n\t\tsum2 = sum2 + n % 10\n\t\tn = math.floor(n / 10)\n\tend\n\treturn sum1 - sum2\nend",
    "\tlocal sum1, sum2 = 0, 0\n\twhile n > 0 do\n\t\tsum1 = sum1 + n % 10\n\t\tn = math.floor(n / 10)\n\t\tsum2 = sum2 + n % 10\n\t\tn = math.floor(n / 10)\n\tend\n\treturn sum1 == sum2\nend",
    "\tlocal sum_even, sum_odd = 0, 0\n\twhile n > 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 == 0 then\n\t\t\tsum_even = sum_even + d\n\t\telse\n\t\t\tsum_odd = sum_odd + d\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn math.abs(sum_even - sum_odd) % 11 == 0\nend",
    "    local sum1 = 0\n    local sum2 = 0\n    while n > 0 do\n        sum1 = sum1 + n % 10\n        n = math.floor(n / 10)\n        sum2 = sum2 + n % 10\n        n = math.floor(n / 10)\n    end\n    return sum1 == sum2\nend",
    "    local sum_even_digits = 0\n    local sum_odd_digits = 0\n    local rem = 0\n    while n > 0 do\n        rem = n % 10\n        if rem % 2 == 0 then\n            sum_even_digits = sum_even_digits + rem\n        else\n            sum_odd_digits = sum_odd_digits + rem\n        end\n        n = n // 10\n    end\n    return sum_even_digits - sum_odd_digits\nend",
    "\tlocal sum_odd, sum_even = 0, 0\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\tif digit % 2 == 0 then\n\t\t\tsum_even = sum_even + digit\n\t\telse\n\t\t\tsum_odd = sum_odd + digit\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn math.abs(sum_odd - sum_even) % 11 == 0\nend",
    "\tlocal sum_odd = 0\n\tlocal sum_even = 0\n\tlocal i = 1\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\tif i % 2 == 0 then\n\t\t\tsum_even = sum_even + digit\n\t\telse\n\t\t\tsum_odd = sum_odd + digit\n\t\tend\n\t\tn = math.floor(n / 10)\n\t\ti = i + 1\n\tend\n\treturn math.abs(sum_odd - sum_even) % 11 == 0\nend",
    "    local n = tostring(n)\n    local odd_sum = 0\n    local even_sum = 0\n    for i = 1, #n do\n        if i % 2 == 1 then\n            odd_sum = odd_sum + tonumber(n:sub(i, i))\n        else\n            even_sum = even_sum + tonumber(n:sub(i, i))\n        end\n    end\n    return (odd_sum - even_sum) % 11 == 0\nend",
    "\tlocal sum = 0\n\tlocal diff = 0\n\tlocal n = n\n\twhile n > 0 do\n\t\tsum = sum + n % 10\n\t\tn = math.floor(n / 10)\n\t\tdiff = diff + n % 10\n\t\tn = math.floor(n / 10)\n\tend\n\treturn sum - diff\nend",
    "    local n = tostring(n)\n    local odd_sum = 0\n    local even_sum = 0\n    for i = 1, #n do\n        if i % 2 == 1 then\n            odd_sum = odd_sum + tonumber(string.sub(n, i, i))\n        else\n            even_sum = even_sum + tonumber(string.sub(n, i, i))\n        end\n    end\n    return (odd_sum - even_sum) % 11 == 0\nend",
    "\tlocal sum1, sum2 = 0, 0\n\twhile n > 0 do\n\t\tsum1 = sum1 + n % 10\n\t\tn = math.floor(n / 10)\n\t\tsum2 = sum2 + n % 10\n\t\tn = math.floor(n / 10)\n\tend\n\treturn sum1 - sum2\nend",
    "    local n = tonumber(n)\n    local n1 = n % 11\n    if n1 == 0 then\n        return true\n    else\n        return false\n    end\nend",
    "\tlocal sum_odd, sum_even = 0, 0\n\twhile n > 0 do\n\t\tsum_odd = sum_odd + n % 10\n\t\tn = math.floor(n / 10)\n\t\tsum_even = sum_even + n % 10\n\t\tn = math.floor(n / 10)\n\tend\n\treturn math.abs(sum_odd - sum_even) % 11 == 0\nend",
    "\tlocal s = tostring(n)\n\tlocal odd_sum = 0\n\tlocal even_sum = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 1 then\n\t\t\todd_sum = odd_sum + tonumber(s:sub(i, i))\n\t\telse\n\t\t\teven_sum = even_sum + tonumber(s:sub(i, i))\n\t\tend\n\tend\n\treturn (odd_sum - even_sum) % 11 == 0\nend",
    "\tlocal sum1 = 0\n\tlocal sum2 = 0\n\tlocal i = 0\n\twhile n > 0 do\n\t\ti = i + 1\n\t\tif i % 2 == 0 then\n\t\t\tsum1 = sum1 + n % 10\n\t\telse\n\t\t\tsum2 = sum2 + n % 10\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\tif math.abs(sum1 - sum2) % 11 == 0 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sum1, sum2 = 0, 0\n\tfor i = 1, #tostring(n) do\n\t\tif i % 2 == 0 then\n\t\t\tsum1 = sum1 + tonumber(tostring(n):sub(i, i))\n\t\telse\n\t\t\tsum2 = sum2 + tonumber(tostring(n):sub(i, i))\n\t\tend\n\tend\n\treturn sum1 - sum2\nend",
    "    local sum1 = 0\n    local sum2 = 0\n    local i = 1\n    while n > 0 do\n        if i % 2 == 0 then\n            sum2 = sum2 + n % 10\n        else\n            sum1 = sum1 + n % 10\n        end\n        n = math.floor(n / 10)\n        i = i + 1\n    end\n    return sum1 - sum2\nend",
    "\tlocal s = tostring(n)\n\tlocal sum1, sum2 = 0, 0\n\tfor i = 1, #s, 2 do\n\t\tsum1 = sum1 + tonumber(s:sub(i, i))\n\tend\n\tfor i = 2, #s, 2 do\n\t\tsum2 = sum2 + tonumber(s:sub(i, i))\n\tend\n\treturn (sum1 - sum2) % 11 == 0\nend",
    "  local sum1 = 0\n  local sum2 = 0\n  local i = 1\n  while n > 0 do\n    local digit = n % 10\n    if i % 2 == 0 then\n      sum1 = sum1 + digit\n    else\n      sum2 = sum2 + digit\n    end\n    n = math.floor(n / 10)\n    i = i + 1\n  end\n  return (sum1 - sum2) % 11 == 0\nend",
    "\tlocal sum1, sum2 = 0, 0\n\twhile n > 0 do\n\t\tsum1 = sum1 + n % 10\n\t\tn = math.floor(n / 10)\n\t\tsum2 = sum2 + n % 10\n\t\tn = math.floor(n / 10)\n\tend\n\treturn sum1 == sum2\nend"
  ]
}