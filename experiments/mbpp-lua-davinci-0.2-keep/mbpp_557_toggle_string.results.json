{
  "name": "mbpp_557_toggle_string",
  "language": "lua",
  "prompt": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local new_string = \"\"\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char == char:upper() then\n      new_string = new_string .. char:lower()\n    else\n      new_string = new_string .. char:upper()\n    end\n  end\n  return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%u\") then\n            new_string = new_string .. char:lower()\n        elseif char:match(\"%l\") then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local toggled = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            toggled = toggled .. char:lower()\n        else\n            toggled = toggled .. char:upper()\n        end\n    end\n    return toggled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:lower() then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local result = \"\"\n  for i = 1, #string do\n    local c = string:sub(i, i)\n    if c:match(\"%a\") then\n      if c == c:lower() then\n        c = c:upper()\n      else\n        c = c:lower()\n      end\n    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local toggled = \"\"\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char == char:upper() then\n      toggled = toggled .. char:lower()\n    else\n      toggled = toggled .. char:upper()\n    end\n  end\n  return toggled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%u\") then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    return string:gsub(\"%a\", function(c)\n        return c == c:upper() and c:lower() or c:upper()\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n\tlocal result = \"\"\n\tfor i = 1, #string do\n\t\tlocal c = string:sub(i, i)\n\t\tif c:match(\"%u\") then\n\t\t\tresult = result .. c:lower()\n\t\telseif c:match(\"%l\") then\n\t\t\tresult = result .. c:upper()\n\t\telse\n\t\t\tresult = result .. c\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            result = result .. char:lower()\n        else\n            result = result .. char:upper()\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:find(\"%a\") then\n            if char == char:upper() then\n                new_string = new_string .. char:lower()\n            else\n                new_string = new_string .. char:upper()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local c = string:sub(i, i)\n        if c == c:upper() then\n            result = result .. c:lower()\n        else\n            result = result .. c:upper()\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i=1, #string do\n        local char = string:sub(i,i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:upper() then\n                result = result .. char:lower()\n            else\n                result = result .. char:upper()\n            end\n        else\n            result = result .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local new_string = \"\"\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char == char:upper() then\n      new_string = new_string .. char:lower()\n    else\n      new_string = new_string .. char:upper()\n    end\n  end\n  return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        new_string = new_string .. string.char(string.byte(string, i) ^ 32)\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdn28gjjd.lua:5: bad argument #1 to 'char' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpdn28gjjd.lua:5: in local 'candidate'\n\t/tmp/tmpdn28gjjd.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i,i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local new_string = \"\"\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char == char:lower() then\n      new_string = new_string .. char:upper()\n    else\n      new_string = new_string .. char:lower()\n    end\n  end\n  return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:lower() then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:lower() then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:lower() then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%l\") then\n            new_string = new_string .. char:upper()\n        elseif char:match(\"%u\") then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local result = \"\"\n  for i = 1, #string do\n    local c = string:sub(i, i)\n    if c:lower() == c then\n      result = result .. c:upper()\n    else\n      result = result .. c:lower()\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123855,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%u\") then\n            result = result .. char:lower()\n        elseif char:match(\"%l\") then\n            result = result .. char:upper()\n        else\n            result = result .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:upper() then\n                new_string = new_string .. char:lower()\n            else\n                new_string = new_string .. char:upper()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local result = \"\"\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char == char:upper() then\n      result = result .. char:lower()\n    else\n      result = result .. char:upper()\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i,i)\n        if char:match(\"%a\") then\n            if char == char:lower() then\n                new_string = new_string .. char:upper()\n            else\n                new_string = new_string .. char:lower()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:lower() then\n                char = char:upper()\n            else\n                char = char:lower()\n            end\n        end\n        new_string = new_string .. char\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123855,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%u\") then\n            new_string = new_string .. char:lower()\n        elseif char:match(\"%l\") then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local toggled = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:lower() then\n            toggled = toggled .. char:upper()\n        else\n            toggled = toggled .. char:lower()\n        end\n    end\n    return toggled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local c = string:sub(i, i)\n        if c:match(\"%a\") then\n            if c == c:lower() then\n                new_string = new_string .. c:upper()\n            else\n                new_string = new_string .. c:lower()\n            end\n        else\n            new_string = new_string .. c\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  return string:gsub(\"%a\", function(c)\n    return c == c:upper() and c:lower() or c:upper()\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:lower() then\n                new_string = new_string .. char:upper()\n            else\n                new_string = new_string .. char:lower()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i,i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:lower() then\n                new_string = new_string .. char:upper()\n            else\n                new_string = new_string .. char:lower()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local c = string:sub(i, i)\n        if c:match(\"%u\") then\n            result = result .. c:lower()\n        elseif c:match(\"%l\") then\n            result = result .. c:upper()\n        else\n            result = result .. c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:lower() then\n                new_string = new_string .. char:upper()\n            else\n                new_string = new_string .. char:lower()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local toggled = \"\"\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char:match(\"%a\") then\n      if char == char:upper() then\n        toggled = toggled .. char:lower()\n      else\n        toggled = toggled .. char:upper()\n      end\n    else\n      toggled = toggled .. char\n    end\n  end\n  return toggled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local toggled = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            toggled = toggled .. char:lower()\n        else\n            toggled = toggled .. char:upper()\n        end\n    end\n    return toggled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:upper() then\n                new_string = new_string .. char:lower()\n            else\n                new_string = new_string .. char:upper()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local toggled = \"\"\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char == char:lower() then\n      toggled = toggled .. char:upper()\n    else\n      toggled = toggled .. char:lower()\n    end\n  end\n  return toggled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local c = string:sub(i, i)\n        if c:lower() == c then\n            new_string = new_string .. c:upper()\n        else\n            new_string = new_string .. c:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    return string.gsub(string, \"%a\", function(c)\n        return string.upper(c) == c and string.lower(c) or string.upper(c)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n\tlocal new_string = \"\"\n\tfor i = 1, #string do\n\t\tlocal char = string:sub(i, i)\n\t\tif char == char:lower() then\n\t\t\tnew_string = new_string .. char:upper()\n\t\telse\n\t\t\tnew_string = new_string .. char:lower()\n\t\tend\n\tend\n\treturn new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:upper() then\n                new_string = new_string .. char:lower()\n            else\n                new_string = new_string .. char:upper()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:lower() then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:upper() then\n                new_string = new_string .. char:lower()\n            else\n                new_string = new_string .. char:upper()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local c = string:sub(i, i)\n        if c == c:upper() then\n            new_string = new_string .. c:lower()\n        else\n            new_string = new_string .. c:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%l\") then\n            result = result .. char:upper()\n        elseif char:match(\"%u\") then\n            result = result .. char:lower()\n        else\n            result = result .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:lower() then\n                new_string = new_string .. char:upper()\n            else\n                new_string = new_string .. char:lower()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    return string:gsub(\"%a\", function(c)\n        if c == c:lower() then\n            return c:upper()\n        else\n            return c:lower()\n        end\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123855,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local new_string = \"\"\n  for i = 1, #string do\n    local char = string:sub(i,i)\n    if char == char:upper() then\n      new_string = new_string .. char:lower()\n    else\n      new_string = new_string .. char:upper()\n    end\n  end\n  return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:upper() then\n                new_string = new_string .. char:lower()\n            else\n                new_string = new_string .. char:upper()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            result = result .. char:lower()\n        else\n            result = result .. char:upper()\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    return string:gsub(\"%a\", function(c)\n        if c:lower() == c then\n            return c:upper()\n        else\n            return c:lower()\n        end\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local new_string = \"\"\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char == char:upper() then\n      new_string = new_string .. char:lower()\n    else\n      new_string = new_string .. char:upper()\n    end\n  end\n  return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local c = string:sub(i, i)\n        if c:match(\"%l\") then\n            result = result .. c:upper()\n        elseif c:match(\"%u\") then\n            result = result .. c:lower()\n        else\n            result = result .. c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:lower() then\n                char = char:upper()\n            else\n                char = char:lower()\n            end\n        end\n        new_string = new_string .. char\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123855,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local new_string = \"\"\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char == char:upper() then\n      new_string = new_string .. char:lower()\n    else\n      new_string = new_string .. char:upper()\n    end\n  end\n  return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%u\") then\n            result = result .. char:lower()\n        elseif char:match(\"%l\") then\n            result = result .. char:upper()\n        else\n            result = result .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:upper() then\n                result = result .. char:lower()\n            else\n                result = result .. char:upper()\n            end\n        else\n            result = result .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:lower() then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local c = string:sub(i, i)\n        if c:match(\"%a\") then\n            if c == c:lower() then\n                new_string = new_string .. c:upper()\n            else\n                new_string = new_string .. c:lower()\n            end\n        else\n            new_string = new_string .. c\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local result = \"\"\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char == char:upper() then\n      result = result .. char:lower()\n    else\n      result = result .. char:upper()\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            result = result .. char:lower()\n        else\n            result = result .. char:upper()\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local new_string = \"\"\n  for i = 1, #string do\n    if string.sub(string, i, i) == string.lower(string.sub(string, i, i)) then\n      new_string = new_string .. string.upper(string.sub(string, i, i))\n    else\n      new_string = new_string .. string.lower(string.sub(string, i, i))\n    end\n  end\n  return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    return string:gsub(\"%a\", function(c)\n        if c == c:lower() then\n            return c:upper()\n        else\n            return c:lower()\n        end\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123855,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        if char == char:lower() then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:lower() == char then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n\tlocal new_string = \"\"\n\tfor i = 1, #string do\n\t\tlocal char = string:sub(i, i)\n\t\tif char == char:lower() then\n\t\t\tnew_string = new_string .. char:upper()\n\t\telse\n\t\t\tnew_string = new_string .. char:lower()\n\t\tend\n\tend\n\treturn new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:upper() then\n                new_string = new_string .. char:lower()\n            else\n                new_string = new_string .. char:upper()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%u\") then\n            new_string = new_string .. char:lower()\n        elseif char:match(\"%l\") then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    return string:gsub(\"%a\", function(c)\n        if c:lower() == c then\n            return c:upper()\n        else\n            return c:lower()\n        end\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:upper() then\n                new_string = new_string .. char:lower()\n            else\n                new_string = new_string .. char:upper()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local c = string:sub(i, i)\n        if c:match(\"%a\") then\n            if c == c:lower() then\n                c = c:upper()\n            else\n                c = c:lower()\n            end\n        end\n        result = result .. c\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%u\") then\n            new_string = new_string .. char:lower()\n        elseif char:match(\"%l\") then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n\tlocal new_string = \"\"\n\tfor i = 1, #string do\n\t\tlocal char = string:sub(i, i)\n\t\tif char == char:lower() then\n\t\t\tnew_string = new_string .. char:upper()\n\t\telse\n\t\t\tnew_string = new_string .. char:lower()\n\t\tend\n\tend\n\treturn new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local toggled = \"\"\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char == char:upper() then\n      toggled = toggled .. char:lower()\n    else\n      toggled = toggled .. char:upper()\n    end\n  end\n  return toggled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local c = string:sub(i, i)\n        if c:match(\"%a\") then\n            if c == c:lower() then\n                c = c:upper()\n            else\n                c = c:lower()\n            end\n        end\n        new_string = new_string .. c\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%l\") then\n            new_string = new_string .. char:upper()\n        elseif char:match(\"%u\") then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local toggled = \"\"\n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        if char == char:lower() then\n            toggled = toggled .. char:upper()\n        else\n            toggled = toggled .. char:lower()\n        end\n    end\n    return toggled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            result = result .. char:lower()\n        else\n            result = result .. char:upper()\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local result = \"\"\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char == char:upper() then\n      result = result .. char:lower()\n    else\n      result = result .. char:upper()\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local new_string = \"\"\n  for i = 1, #string do\n    local c = string:sub(i, i)\n    if c:match(\"%a\") then\n      if c == c:lower() then\n        c = c:upper()\n      else\n        c = c:lower()\n      end\n    end\n    new_string = new_string .. c\n  end\n  return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local toggled = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            toggled = toggled .. char:lower()\n        else\n            toggled = toggled .. char:upper()\n        end\n    end\n    return toggled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:upper() then\n                char = char:lower()\n            else\n                char = char:upper()\n            end\n        end\n        new_string = new_string .. char\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:lower() then\n                new_string = new_string .. char:upper()\n            else\n                new_string = new_string .. char:lower()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local c = string:sub(i, i)\n        if c == c:upper() then\n            result = result .. c:lower()\n        else\n            result = result .. c:upper()\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:upper() then\n                new_string = new_string .. char:lower()\n            else\n                new_string = new_string .. char:upper()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:lower() then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local c = string:sub(i, i)\n        if c == c:lower() then\n            new_string = new_string .. c:upper()\n        else\n            new_string = new_string .. c:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local result = \"\"\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char:match(\"%u\") then\n      result = result .. char:lower()\n    elseif char:match(\"%l\") then\n      result = result .. char:upper()\n    else\n      result = result .. char\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    return string:gsub(\"%a\", function(c)\n        if c == c:lower() then\n            return c:upper()\n        else\n            return c:lower()\n        end\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123855,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%l\") then\n            new_string = new_string .. char:upper()\n        elseif char:match(\"%u\") then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:lower() then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            result = result .. char:lower()\n        else\n            result = result .. char:upper()\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    return string.gsub(string, \"%a\", function(c)\n        if c == c:upper() then\n            return c:lower()\n        else\n            return c:upper()\n        end\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:lower() then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            result = result .. char:lower()\n        else\n            result = result .. char:upper()\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            result = result .. char:lower()\n        else\n            result = result .. char:upper()\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:lower() then\n                new_string = new_string .. char:upper()\n            else\n                new_string = new_string .. char:lower()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    return string:gsub(\"%a\", function(c)\n        if c:lower() == c then\n            return c:upper()\n        else\n            return c:lower()\n        end\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%u\") then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local c = string:sub(i, i)\n        if c:match(\"%a\") then\n            if c == c:lower() then\n                c = c:upper()\n            else\n                c = c:lower()\n            end\n        end\n        result = result .. c\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local toggled = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            toggled = toggled .. char:lower()\n        else\n            toggled = toggled .. char:upper()\n        end\n    end\n    return toggled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:upper() then\n                new_string = new_string .. char:lower()\n            else\n                new_string = new_string .. char:upper()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  local new_string = \"\"\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char == char:upper() then\n      new_string = new_string .. char:lower()\n    else\n      new_string = new_string .. char:upper()\n    end\n  end\n  return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local toggled = {}\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%l\") then\n            table.insert(toggled, char:upper())\n        elseif char:match(\"%u\") then\n            table.insert(toggled, char:lower())\n        else\n            table.insert(toggled, char)\n        end\n    end\n    return table.concat(toggled)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:upper() then\n                new_string = new_string .. char:lower()\n            else\n                new_string = new_string .. char:upper()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n  return string:gsub(\"%a\", function(c)\n    if c == c:lower() then\n      return c:upper()\n    else\n      return c:lower()\n    end\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n            if char == char:lower() then\n                new_string = new_string .. char:upper()\n            else\n                new_string = new_string .. char:lower()\n            end\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:lower() then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%l\") then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%l\") then\n            char = char:upper()\n        elseif char:match(\"%u\") then\n            char = char:lower()\n        end\n        result = result .. char\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%l\") then\n            new_string = new_string .. char:upper()\n        elseif char:match(\"%u\") then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:lower() then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local result = \"\"\n    for i = 1, #string do\n        local c = string:sub(i, i)\n        if c:lower() == c then\n            result = result .. c:upper()\n        else\n            result = result .. c:lower()\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123856,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%l\") then\n            new_string = new_string .. char:upper()\n        elseif char:match(\"%u\") then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:match(\"%l\") then\n            new_string = new_string .. char:upper()\n        elseif char:match(\"%u\") then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local toggled = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            toggled = toggled .. char:lower()\n        else\n            toggled = toggled .. char:upper()\n        end\n    end\n    return toggled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:upper() then\n            new_string = new_string .. char:lower()\n        else\n            new_string = new_string .. char:upper()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == char:lower() then\n            new_string = new_string .. char:upper()\n        else\n            new_string = new_string .. char:lower()\n        end\n    end\n    return new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509670,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}