{
  "name": "mbpp_773_occurance_substring",
  "language": "lua",
  "prompt": "-- Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nlocal function occurance_substring(text, pattern)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = occurance_substring\n    lu.assertEquals(candidate('python programming, python language', 'python'), {'python', 0, 6})\n    lu.assertEquals(candidate('python programming,programming language', 'programming'), {'programming', 7, 18})\n    lu.assertEquals(candidate('python programming,programming language', 'language'), {'language', 31, 39})\n    lu.assertEquals(candidate('c++ programming, c++ language', 'python'), None)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local result = {}\n    local i = 0\n    while true do\n        i = string.find(text, pattern, i+1, true)\n        if i == nil then\n            break\n        end\n        table.insert(result, i)\n    end\n    return result\nend",
    "    local result = {}\n    local start_pos = 1\n    local end_pos = #text\n    while true do\n        local start_index, end_index = string.find(text, pattern, start_pos, true)\n        if start_index == nil then\n            break\n        end\n        table.insert(result, {start_index, end_index})\n        start_pos = end_index + 1\n    end\n    return result\nend",
    "    local result = {}\n    local pos = 1\n    while true do\n        local start_pos, end_pos = text:find(pattern, pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n    end\n    return result\nend",
    "    local result = {}\n    local pos = 1\n    while true do\n        local start, stop = text:find(pattern, pos, true)\n        if start then\n            result[#result + 1] = {start, stop}\n            pos = stop + 1\n        else\n            break\n        end\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start, stop = string.find(text, pattern, pos)\n        if start == nil then\n            break\n        end\n        table.insert(result, {start, stop})\n        pos = stop + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    while true do\n        local from, to = string.find(text, pattern, start)\n        if from == nil then\n            break\n        end\n        table.insert(result, {from, to})\n        start = to + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    local i = 1\n    while true do\n        local from, to = string.find(text, pattern, start)\n        if from == nil then\n            break\n        end\n        result[i] = {from, to}\n        start = to + 1\n        i = i + 1\n    end\n    return result\nend",
    "    local i = 1\n    local j = 1\n    local k = 1\n    local pos = {}\n    while i <= #text and j <= #pattern do\n        if text[i] == pattern[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n        if j > #pattern then\n            pos[k] = i - #pattern\n            k = k + 1\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if #pos == 0 then\n        return nil\n    else\n        return pos\n    end\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = text:find(pattern, pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n    end\n    return result\nend",
    "    local result = {}\n    local index = 1\n    while true do\n        local start_index, end_index = string.find(text, pattern, index)\n        if start_index == nil then\n            break\n        end\n        table.insert(result, {start_index, end_index})\n        index = end_index + 1\n    end\n    return result\nend",
    "    local pos = 0\n    local result = {}\n    local count = 0\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then break end\n        count = count + 1\n        result[count] = pos\n    end\n    if count == 0 then return nil end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    local index = 1\n    while true do\n        local start_index, end_index = string.find(text, pattern, start)\n        if start_index == nil then\n            break\n        end\n        result[index] = {start_index, end_index}\n        start = end_index + 1\n        index = index + 1\n    end\n    return result\nend",
    "    local result = {}\n    local pos = 0\n    local start_pos, end_pos = string.find(text, pattern, pos)\n    while start_pos do\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n        start_pos, end_pos = string.find(text, pattern, pos)\n    end\n    return result\nend",
    "    local start_pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, start_pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        start_pos = end_pos + 1\n    end\n    return result\nend",
    "    local pos = 0\n    local result = {}\n    while true do\n        local start, finish = string.find(text, pattern, pos, true)\n        if start == nil then\n            break\n        end\n        table.insert(result, {start, finish})\n        pos = finish + 1\n    end\n    if #result > 0 then\n        return result\n    end\nend",
    "    local result = {}\n    local i = 0\n    while true do\n        i = string.find(text, pattern, i + 1)\n        if i == nil then\n            break\n        end\n        table.insert(result, i)\n    end\n    return result\nend",
    "    local result = {}\n    local start_pos = 1\n    local end_pos = 1\n    local pattern_len = string.len(pattern)\n    while true do\n        start_pos, end_pos = string.find(text, pattern, start_pos)\n        if start_pos == nil then\n            break\n        end\n        result[#result + 1] = {start_pos, end_pos}\n        start_pos = end_pos + 1\n    end\n    return result\nend",
    "    local result = {}\n    local pos = 1\n    while true do\n        local start, stop = string.find(text, pattern, pos)\n        if start then\n            table.insert(result, {start, stop})\n            pos = stop + 1\n        else\n            break\n        end\n    end\n    return result\nend",
    "    local index = 1\n    local result = {}\n    while true do\n        local start_index, end_index = string.find(text, pattern, index)\n        if start_index == nil then\n            break\n        end\n        table.insert(result, {start_index, end_index})\n        index = end_index + 1\n    end\n    if #result == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local result = {}\n    local start = 1\n    local i = 1\n    while true do\n        local s, e = string.find(text, pattern, start)\n        if s == nil then\n            break\n        end\n        result[i] = {s, e}\n        i = i + 1\n        start = e + 1\n    end\n    if #result == 0 then\n        return nil\n    end\n    return result\nend"
  ]
}