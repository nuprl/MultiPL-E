{
  "name": "mbpp_773_occurance_substring",
  "language": "lua",
  "prompt": "-- Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nlocal function occurance_substring(text, pattern)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = occurance_substring\n    lu.assertEquals(candidate('python programming, python language', 'python'), {'python', 0, 6})\n    lu.assertEquals(candidate('python programming,programming language', 'programming'), {'programming', 7, 18})\n    lu.assertEquals(candidate('python programming,programming language', 'language'), {'language', 31, 39})\n    lu.assertEquals(candidate('c++ programming, c++ language', 'python'), None)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local result = {}\n    local i = 0\n    while true do\n        i = string.find(text, pattern, i+1, true)\n        if i == nil then\n            break\n        end\n        table.insert(result, i)\n    end\n    return result\nend",
    "    local result = {}\n    local start_pos = 1\n    local end_pos = #text\n    while true do\n        local start_index, end_index = string.find(text, pattern, start_pos, true)\n        if start_index == nil then\n            break\n        end\n        table.insert(result, {start_index, end_index})\n        start_pos = end_index + 1\n    end\n    return result\nend",
    "    local result = {}\n    local pos = 1\n    while true do\n        local start_pos, end_pos = text:find(pattern, pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n    end\n    return result\nend",
    "    local result = {}\n    local pos = 1\n    while true do\n        local start, stop = text:find(pattern, pos, true)\n        if start then\n            result[#result + 1] = {start, stop}\n            pos = stop + 1\n        else\n            break\n        end\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start, stop = string.find(text, pattern, pos)\n        if start == nil then\n            break\n        end\n        table.insert(result, {start, stop})\n        pos = stop + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    while true do\n        local from, to = string.find(text, pattern, start)\n        if from == nil then\n            break\n        end\n        table.insert(result, {from, to})\n        start = to + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    local i = 1\n    while true do\n        local from, to = string.find(text, pattern, start)\n        if from == nil then\n            break\n        end\n        result[i] = {from, to}\n        start = to + 1\n        i = i + 1\n    end\n    return result\nend",
    "    local i = 1\n    local j = 1\n    local k = 1\n    local pos = {}\n    while i <= #text and j <= #pattern do\n        if text[i] == pattern[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n        if j > #pattern then\n            pos[k] = i - #pattern\n            k = k + 1\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if #pos == 0 then\n        return nil\n    else\n        return pos\n    end\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = text:find(pattern, pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n    end\n    return result\nend",
    "    local result = {}\n    local index = 1\n    while true do\n        local start_index, end_index = string.find(text, pattern, index)\n        if start_index == nil then\n            break\n        end\n        table.insert(result, {start_index, end_index})\n        index = end_index + 1\n    end\n    return result\nend",
    "    local pos = 0\n    local result = {}\n    local count = 0\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then break end\n        count = count + 1\n        result[count] = pos\n    end\n    if count == 0 then return nil end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    local index = 1\n    while true do\n        local start_index, end_index = string.find(text, pattern, start)\n        if start_index == nil then\n            break\n        end\n        result[index] = {start_index, end_index}\n        start = end_index + 1\n        index = index + 1\n    end\n    return result\nend",
    "    local result = {}\n    local pos = 0\n    local start_pos, end_pos = string.find(text, pattern, pos)\n    while start_pos do\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n        start_pos, end_pos = string.find(text, pattern, pos)\n    end\n    return result\nend",
    "    local start_pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, start_pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        start_pos = end_pos + 1\n    end\n    return result\nend",
    "    local pos = 0\n    local result = {}\n    while true do\n        local start, finish = string.find(text, pattern, pos, true)\n        if start == nil then\n            break\n        end\n        table.insert(result, {start, finish})\n        pos = finish + 1\n    end\n    if #result > 0 then\n        return result\n    end\nend",
    "    local result = {}\n    local i = 0\n    while true do\n        i = string.find(text, pattern, i + 1)\n        if i == nil then\n            break\n        end\n        table.insert(result, i)\n    end\n    return result\nend",
    "    local result = {}\n    local start_pos = 1\n    local end_pos = 1\n    local pattern_len = string.len(pattern)\n    while true do\n        start_pos, end_pos = string.find(text, pattern, start_pos)\n        if start_pos == nil then\n            break\n        end\n        result[#result + 1] = {start_pos, end_pos}\n        start_pos = end_pos + 1\n    end\n    return result\nend",
    "    local result = {}\n    local pos = 1\n    while true do\n        local start, stop = string.find(text, pattern, pos)\n        if start then\n            table.insert(result, {start, stop})\n            pos = stop + 1\n        else\n            break\n        end\n    end\n    return result\nend",
    "    local index = 1\n    local result = {}\n    while true do\n        local start_index, end_index = string.find(text, pattern, index)\n        if start_index == nil then\n            break\n        end\n        table.insert(result, {start_index, end_index})\n        index = end_index + 1\n    end\n    if #result == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local result = {}\n    local start = 1\n    local i = 1\n    while true do\n        local s, e = string.find(text, pattern, start)\n        if s == nil then\n            break\n        end\n        result[i] = {s, e}\n        i = i + 1\n        start = e + 1\n    end\n    if #result == 0 then\n        return nil\n    end\n    return result\nend",
    "  local result = {}\n  local start = 1\n  local index = 1\n  while true do\n    local first, last = string.find(text, pattern, start)\n    if first == nil then\n      break\n    end\n    result[index] = {first, last}\n    start = last + 1\n    index = index + 1\n  end\n  return result\nend",
    "    local start_pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, start_pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        start_pos = end_pos + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    local index = string.find(text, pattern, start)\n    while index do\n        table.insert(result, index)\n        start = index + 1\n        index = string.find(text, pattern, start)\n    end\n    return result\nend",
    "    local pos = 0\n    local count = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        count = count + 1\n        result[count] = pos\n    end\n    if count == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local pos = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        table.insert(result, pos)\n    end\n    return result\nend",
    "    local pos = string.find(text, pattern)\n    if pos then\n        return pos\n    else\n        return nil\n    end\nend",
    "    local text_len = #text\n    local pattern_len = #pattern\n    local result = {}\n    local i = 1\n    while i <= text_len do\n        local j = 1\n        while j <= pattern_len do\n            if text:sub(i, i + j - 1) == pattern:sub(1, j) then\n                j = j + 1\n            else\n                break\n            end\n        end\n        if j == pattern_len + 1 then\n            table.insert(result, i)\n        end\n        i = i + 1\n    end\n    return result\nend",
    "    local start_pos = 1\n    local end_pos = 1\n    local result = {}\n    while true do\n        start_pos, end_pos = string.find(text, pattern, start_pos)\n        if start_pos == nil then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        start_pos = end_pos + 1\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, pos)\n        if start_pos == nil then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n    end\n    return result\nend",
    "  local pos = 0\n  local result = {}\n  local count = 0\n  while true do\n    pos = text:find(pattern, pos + 1)\n    if not pos then break end\n    count = count + 1\n    result[count] = pos\n  end\n  if count == 0 then\n    return nil\n  else\n    return result\n  end\nend",
    "    local result = {}\n    local start = 1\n    local index = 1\n    while true do\n        local s, e = string.find(text, pattern, start)\n        if s == nil then\n            break\n        end\n        result[index] = {s, e}\n        start = e + 1\n        index = index + 1\n    end\n    return result\nend",
    "    local index = 1\n    local result = {}\n    while index do\n        index = string.find(text, pattern, index)\n        if index then\n            table.insert(result, index)\n            index = index + 1\n        end\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    while true do\n        local from, to = string.find(text, pattern, start)\n        if from == nil then\n            break\n        end\n        table.insert(result, {from, to})\n        start = to + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start_pos = 1\n    local end_pos = string.len(text)\n    while start_pos <= end_pos do\n        local start_index, end_index = string.find(text, pattern, start_pos)\n        if start_index == nil then\n            break\n        end\n        table.insert(result, {start_index, end_index})\n        start_pos = end_index + 1\n    end\n    return result\nend",
    "\tlocal pos = 0\n\tlocal result = {}\n\twhile true do\n\t\tlocal start, finish = string.find(text, pattern, pos, true)\n\t\tif start then\n\t\t\ttable.insert(result, {start, finish})\n\t\t\tpos = finish + 1\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start, finish = string.find(text, pattern, pos)\n        if start == nil then\n            break\n        end\n        table.insert(result, {start, finish})\n        pos = finish + 1\n    end\n    return result\nend",
    "    local start_pos = 1\n    local result = {}\n    while true do\n        local s, e = string.find(text, pattern, start_pos)\n        if s == nil then\n            break\n        end\n        table.insert(result, {s, e})\n        start_pos = e + 1\n    end\n    if #result == 0 then\n        return nil\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start, stop = text:find(pattern, pos)\n        if start == nil then\n            break\n        end\n        table.insert(result, {start, stop})\n        pos = stop + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    while true do\n        local pos = string.find(text, pattern, start)\n        if not pos then break end\n        table.insert(result, pos)\n        start = pos + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    local finish = string.len(text)\n    local index = string.find(text, pattern, start, true)\n    while index do\n        result[#result + 1] = index\n        start = index + 1\n        index = string.find(text, pattern, start, true)\n    end\n    return result\nend",
    "    local result = {}\n    local i = 1\n    while true do\n        local j = string.find(text, pattern, i, true)\n        if j == nil then\n            break\n        end\n        table.insert(result, j)\n        i = j + 1\n    end\n    return result\nend",
    "\tlocal start = 1\n\tlocal result = {}\n\twhile true do\n\t\tlocal s, e = string.find(text, pattern, start)\n\t\tif s == nil then\n\t\t\tbreak\n\t\tend\n\t\ttable.insert(result, {s, e})\n\t\tstart = e + 1\n\tend\n\tif #result == 0 then\n\t\treturn nil\n\telse\n\t\treturn result\n\tend\nend",
    "    local pos = 0\n    local count = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        count = count + 1\n        result[count] = pos\n    end\n    if count == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local i = 1\n    local j = 1\n    local k = 1\n    local pos = {}\n    local n = #text\n    local m = #pattern\n    while i <= n and j <= m do\n        if text[i] == pattern[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n        if j > m then\n            pos[k] = i - m\n            k = k + 1\n            i = i - m + 2\n            j = 1\n        end\n    end\n    if k == 1 then\n        return nil\n    else\n        return pos\n    end\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start, stop = text:find(pattern, pos)\n        if start == nil then\n            break\n        end\n        table.insert(result, {start, stop})\n        pos = stop + 1\n    end\n    return result\nend",
    "    local position = 0\n    local occurance = 0\n    local index = 0\n    while true do\n        index = string.find(text, pattern, position + 1, true)\n        if index == nil then\n            break\n        end\n        position = index\n        occurance = occurance + 1\n    end\n    return occurance, position\nend",
    "    local pos = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        table.insert(result, pos)\n    end\n    if #result > 0 then\n        return result\n    end\n    return nil\nend",
    "    local result = {}\n    local index = 1\n    local start, finish = string.find(text, pattern, index)\n    while start do\n        table.insert(result, {start, finish})\n        index = finish + 1\n        start, finish = string.find(text, pattern, index)\n    end\n    return result\nend",
    "    local result = {}\n    local pos = 1\n    local start_pos, end_pos = string.find(text, pattern, pos)\n    while start_pos do\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n        start_pos, end_pos = string.find(text, pattern, pos)\n    end\n    return result\nend",
    "    local pos = string.find(text, pattern)\n    if pos then\n        return pos\n    else\n        return nil\n    end\nend",
    "    local pos = 0\n    local count = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        count = count + 1\n        result[count] = pos\n    end\n    if count == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local pos = 0\n    local count = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        count = count + 1\n        result[count] = pos\n    end\n    if count == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local pos = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        table.insert(result, pos)\n    end\n    if #result == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start, finish = string.find(text, pattern, pos)\n        if start == nil then\n            break\n        end\n        table.insert(result, {start, finish})\n        pos = finish + 1\n    end\n    if #result == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local result = {}\n    local start = 1\n    while true do\n        local s, e = string.find(text, pattern, start)\n        if s == nil then\n            break\n        end\n        table.insert(result, {s, e})\n        start = e + 1\n    end\n    return result\nend",
    "\tlocal result = {}\n\tlocal index = 1\n\tlocal start_index = 1\n\twhile index do\n\t\tindex = string.find(text, pattern, start_index)\n\t\tif index then\n\t\t\ttable.insert(result, index)\n\t\t\tstart_index = index + 1\n\t\tend\n\tend\n\treturn result\nend",
    "    local pos = 0\n    local result = {}\n    local count = 0\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        count = count + 1\n        result[count] = pos\n    end\n    return count, result\nend",
    "    local pos = 0\n    local count = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        count = count + 1\n        result[count] = pos\n    end\n    if count > 0 then\n        return count, result\n    end\n    return nil\nend",
    "    local start_pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, start_pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        start_pos = end_pos + 1\n    end\n    if #result == 0 then\n        return nil\n    end\n    return result\nend",
    "    local start_pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, start_pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        start_pos = end_pos + 1\n    end\n    return result\nend",
    "    local pos = string.find(text, pattern)\n    if pos then\n        return pos\n    else\n        return nil\n    end\nend",
    "    local pos = 0\n    local result = {}\n    local count = 0\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        count = count + 1\n        result[count] = pos\n    end\n    if count == 0 then\n        return nil\n    end\n    return result\nend",
    "    local pos = 0\n    local result = {}\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n    end\n    if #result > 0 then\n        return result\n    end\n    return nil\nend",
    "    local pos = string.find(text, pattern)\n    if pos then\n        return pos, string.len(pattern)\n    end\nend",
    "    local start = 1\n    local result = {}\n    while true do\n        local pos = string.find(text, pattern, start)\n        if not pos then\n            return result\n        end\n        table.insert(result, pos)\n        start = pos + 1\n    end\nend",
    "    local pos = 0\n    local result = {}\n    local count = 0\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        count = count + 1\n        result[count] = pos\n    end\n    if count == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local result = {}\n    local start_pos = 1\n    local end_pos = string.len(text)\n    local pattern_len = string.len(pattern)\n    local pattern_pos = 1\n    local text_pos = 1\n    local pattern_found = false\n    local pattern_start_pos = 0\n    local pattern_end_pos = 0\n    while start_pos <= end_pos do\n        if string.sub(text, start_pos, start_pos) == string.sub(pattern, pattern_pos, pattern_pos) then\n            if pattern_found == false then\n                pattern_start_pos = start_pos\n                pattern_found = true\n            end\n            pattern_pos = pattern_pos + 1\n            if pattern_pos > pattern_len then\n                pattern_end_pos = start_pos\n                table.insert(result, {pattern_start_pos, pattern_end_pos})\n                pattern_found = false\n                pattern_pos = 1\n            end\n        else\n            pattern_found = false\n            pattern_pos = 1\n        end\n        start_pos = start_pos + 1\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    local count = 0\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, pos)\n        if not start_pos then\n            break\n        end\n        pos = end_pos + 1\n        count = count + 1\n        table.insert(result, {start_pos, end_pos})\n    end\n    if count == 0 then\n        return nil\n    end\n    return result\nend",
    "\tlocal pos = 1\n\tlocal result = {}\n\twhile true do\n\t\tlocal start, stop = text:find(pattern, pos)\n\t\tif not start then break end\n\t\ttable.insert(result, {start, stop})\n\t\tpos = stop + 1\n\tend\n\treturn result\nend",
    "    local result = {}\n    local start = 1\n    local index = 1\n    while true do\n        local first, last = string.find(text, pattern, start)\n        if first then\n            result[index] = {first, last}\n            start = last + 1\n            index = index + 1\n        else\n            break\n        end\n    end\n    return result\nend",
    "    local index = 0\n    local result = {}\n    while true do\n        index = string.find(text, pattern, index + 1)\n        if index == nil then\n            break\n        end\n        table.insert(result, index)\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = text:find(pattern, pos)\n        if start_pos == nil then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    local index = 1\n    while true do\n        local first, last = string.find(text, pattern, start, true)\n        if first then\n            result[index] = first\n            index = index + 1\n            start = last + 1\n        else\n            break\n        end\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start, finish = string.find(text, pattern, pos)\n        if start == nil then\n            break\n        end\n        result[#result + 1] = {start, finish}\n        pos = finish + 1\n    end\n    if #result == 0 then\n        return nil\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    while true do\n        local from, to = string.find(text, pattern, start)\n        if from == nil then\n            break\n        end\n        table.insert(result, {from, to})\n        start = to + 1\n    end\n    if #result == 0 then\n        return nil\n    end\n    return result\nend",
    "    local pos = 0\n    local count = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        count = count + 1\n        result[count] = pos\n    end\n    if count > 0 then\n        return result\n    end\n    return nil\nend",
    "    local start_pos = 1\n    local end_pos = string.len(text)\n    local result = {}\n    local count = 0\n    while start_pos <= end_pos do\n        local pos = string.find(text, pattern, start_pos)\n        if pos ~= nil then\n            count = count + 1\n            result[count] = pos\n            start_pos = pos + 1\n        else\n            break\n        end\n    end\n    if count == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "  local pos = 0\n  local result = {}\n  while true do\n    pos = string.find(text, pattern, pos + 1)\n    if not pos then\n      break\n    end\n    result[#result + 1] = pos\n  end\n  if #result > 0 then\n    return result\n  end\nend",
    "    local result = {}\n    local i = 1\n    while i <= #text do\n        local j = text:find(pattern, i, true)\n        if j then\n            result[#result+1] = j\n            i = j + 1\n        else\n            break\n        end\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start, stop = text:find(pattern, pos)\n        if start == nil then\n            break\n        end\n        table.insert(result, {start, stop})\n        pos = stop + 1\n    end\n    return result\nend",
    "    local i = 1\n    local j = 1\n    local k = 1\n    local found = false\n    local pos = 0\n    local count = 0\n    local len_text = string.len(text)\n    local len_pattern = string.len(pattern)\n    while i <= len_text and j <= len_pattern do\n        if text[i] == pattern[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n        if j > len_pattern then\n            found = true\n            pos = i - len_pattern\n            count = count + 1\n            j = 1\n        end\n    end\n    if found then\n        return pos, count\n    else\n        return nil\n    end\nend",
    "    local start = 1\n    local result = {}\n    while true do\n        local s, e = string.find(text, pattern, start)\n        if s == nil then\n            break\n        end\n        table.insert(result, {s, e})\n        start = e + 1\n    end\n    if #result == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local aa = 1\n    local ab = 1\n    local ac = 1\n    local ad = 1\n    local ae = 1\n    local af = 1\n    local ag = 1\n    local ah = 1\n    local ai = 1\n    local aj = 1\n    local ak = 1\n    local al = 1\n    local am = 1\n    local an = 1\n    local ao = 1\n    local ap = 1\n    local aq = 1\n    local ar = 1\n    local as = 1\n    local at = 1\n    local au = 1\n    local av = 1\n    local aw = 1\n    local ax = 1\n    local ay = 1\n    local az = 1\n    local ba = 1\n    local bb = 1\n    local bc = 1\n    local bd = 1\n    local be = 1\n    local bf = 1\n    local bg = 1\n    local bh = 1\n    local bi = 1\n    local bj = 1\n    local bk = 1\n    local bl = 1\n    local bm = 1\n    local bn = 1\n    local bo = 1\n    local bp = 1\n    local bq = 1\n    local br = 1\n    local bs = 1\n    local bt = 1\n    local bu = 1\n    local bv = 1\n    local bw = 1\n    local bx = 1\n    local by = 1\n    local bz = 1\n    local ca = 1\n    local cb = 1\n    local cc = 1\n    local cd = 1\n    local ce = 1\n    local cf = 1\n    local cg = 1\n    local ch = 1\n    local ci = 1\n    local cj = 1\n    local ck",
    "    local result = {}\n    local index = 1\n    while true do\n        local start, finish = string.find(text, pattern, index)\n        if start == nil then\n            break\n        end\n        result[#result + 1] = {start, finish}\n        index = finish + 1\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n    end\n    return result\nend",
    "    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local aa = 1\n    local ab = 1\n    local ac = 1\n    local ad = 1\n    local ae = 1\n    local af = 1\n    local ag = 1\n    local ah = 1\n    local ai = 1\n    local aj = 1\n    local ak = 1\n    local al = 1\n    local am = 1\n    local an = 1\n    local ao = 1\n    local ap = 1\n    local aq = 1\n    local ar = 1\n    local as = 1\n    local at = 1\n    local au = 1\n    local av = 1\n    local aw = 1\n    local ax = 1\n    local ay = 1\n    local az = 1\n    local ba = 1\n    local bb = 1\n    local bc = 1\n    local bd = 1\n    local be = 1\n    local bf = 1\n    local bg = 1\n    local bh = 1\n    local bi = 1\n    local bj = 1\n    local bk = 1\n    local bl = 1\n    local bm = 1\n    local bn = 1\n    local bo = 1\n    local bp = 1\n    local bq = 1\n    local br = 1\n    local bs = 1\n    local bt = 1\n    local bu = 1\n    local bv = 1\n    local bw = 1\n    local bx = 1\n    local by = 1\n    local bz = 1\n    local ca = 1\n    local cb = 1\n    local cc = 1\n    local cd = 1\n    local ce = 1\n    local cf = 1\n    local cg = 1\n    local ch = 1\n    local ci = 1\n    local cj = 1\n    local ck",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n    end\n    return result\nend",
    "    local result = {}\n    local i = 1\n    while i <= #text do\n        local j = text:find(pattern, i, true)\n        if j then\n            table.insert(result, j)\n            i = j + 1\n        else\n            break\n        end\n    end\n    return #result > 0 and result or nil\nend",
    "    local pos = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos+1, true)\n        if not pos then\n            break\n        end\n        result[#result+1] = pos\n    end\n    if #result == 0 then\n        return nil\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start, stop = text:find(pattern, pos)\n        if not start then\n            break\n        end\n        table.insert(result, {start, stop})\n        pos = stop + 1\n    end\n    return result\nend",
    "    local pos = 0\n    local result = {}\n    local pattern_len = #pattern\n    local text_len = #text\n    while pos < text_len do\n        local start_pos, end_pos = string.find(text, pattern, pos, true)\n        if start_pos then\n            table.insert(result, {start_pos, end_pos})\n            pos = end_pos + 1\n        else\n            break\n        end\n    end\n    if #result == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local result = {}\n    local start = 1\n    local index = 1\n    while true do\n        local from, to = string.find(text, pattern, start)\n        if from == nil then\n            break\n        end\n        result[index] = {from, to}\n        start = to + 1\n        index = index + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    while true do\n        local from, to = string.find(text, pattern, start)\n        if from == nil then\n            break\n        end\n        table.insert(result, {from, to})\n        start = to + 1\n    end\n    return result\nend",
    "    local pos = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        table.insert(result, pos)\n    end\n    if #result > 0 then\n        return result\n    else\n        return nil\n    end\nend",
    "    local start, finish = string.find(text, pattern)\n    if start == nil then\n        return nil\n    end\n    return start, finish\nend",
    "\tlocal pos = 1\n\tlocal result = {}\n\twhile true do\n\t\tlocal start, stop = text:find(pattern, pos)\n\t\tif start == nil then\n\t\t\treturn result\n\t\tend\n\t\ttable.insert(result, {start, stop})\n\t\tpos = stop + 1\n\tend\nend",
    "    local result = {}\n    local pos = 1\n    while true do\n        local start, stop = string.find(text, pattern, pos)\n        if start then\n            table.insert(result, {start, stop})\n            pos = stop + 1\n        else\n            break\n        end\n    end\n    return result\nend",
    "    local result = {}\n    local i = 1\n    local j = 1\n    local k = 1\n    local n = #text\n    local m = #pattern\n    while i <= n do\n        if text[i] == pattern[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n        if j > m then\n            result[k] = i - m\n            k = k + 1\n            i = i - m + 2\n            j = 1\n        end\n    end\n    if #result > 0 then\n        return result\n    else\n        return nil\n    end\nend",
    "    local start_pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, start_pos)\n        if not start_pos then\n            return result\n        end\n        table.insert(result, {start_pos, end_pos})\n        start_pos = end_pos + 1\n    end\nend",
    "\tlocal pos = 1\n\tlocal result = {}\n\twhile true do\n\t\tlocal start, finish = string.find(text, pattern, pos)\n\t\tif start == nil then\n\t\t\tbreak\n\t\tend\n\t\ttable.insert(result, {start, finish})\n\t\tpos = finish + 1\n\tend\n\treturn result\nend",
    "    local result = {}\n    local start = 1\n    local i = 1\n    while true do\n        local s, e = string.find(text, pattern, start)\n        if s == nil then\n            break\n        end\n        result[i] = {s, e}\n        start = e + 1\n        i = i + 1\n    end\n    return result\nend",
    "    local result = {}\n    local pos = 1\n    while true do\n        local start, finish = string.find(text, pattern, pos)\n        if start then\n            result[#result + 1] = {start, finish}\n            pos = finish + 1\n        else\n            break\n        end\n    end\n    return result\nend",
    "    local pos = string.find(text, pattern)\n    if pos then\n        return pos, string.len(pattern)\n    end\nend",
    "    local pos = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if pos == nil then\n            break\n        end\n        table.insert(result, pos)\n    end\n    if #result == 0 then\n        return nil\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start, stop = text:find(pattern, pos)\n        if start == nil then\n            break\n        end\n        table.insert(result, {start, stop})\n        pos = stop + 1\n    end\n    return result\nend",
    "    local pos = 0\n    local result = {}\n    local index = 0\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        index = index + 1\n        result[index] = pos\n    end\n    if index == 0 then\n        return nil\n    end\n    return result\nend",
    "    local pos = 0\n    local count = 0\n    local index = 0\n    while true do\n        index = string.find(text, pattern, pos, true)\n        if index == nil then\n            break\n        end\n        pos = index + 1\n        count = count + 1\n    end\n    return count, index\nend",
    "    local result = {}\n    local start = 1\n    local index = 1\n    local pos = string.find(text, pattern, start)\n    while pos do\n        result[index] = pos\n        index = index + 1\n        start = pos + 1\n        pos = string.find(text, pattern, start)\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start, stop = string.find(text, pattern, pos)\n        if start == nil then\n            break\n        end\n        table.insert(result, {start, stop})\n        pos = stop + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    local index = 1\n    while true do\n        local from, to = string.find(text, pattern, start)\n        if from == nil then\n            break\n        end\n        result[index] = {from, to}\n        index = index + 1\n        start = to + 1\n    end\n    return result\nend",
    "    local pos = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        table.insert(result, pos)\n    end\n    if #result == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local result = {}\n    local start = 1\n    local i = 1\n    while true do\n        local s, e = string.find(text, pattern, start)\n        if s == nil then\n            break\n        end\n        result[i] = {s, e}\n        i = i + 1\n        start = e + 1\n    end\n    return result\nend",
    "    local index = 1\n    local result = {}\n    while true do\n        local start_index, end_index = string.find(text, pattern, index)\n        if start_index == nil then\n            break\n        end\n        table.insert(result, {start_index, end_index})\n        index = end_index + 1\n    end\n    return result\nend",
    "    local start_pos, end_pos = string.find(text, pattern)\n    if start_pos then\n        return start_pos, end_pos\n    else\n        return nil\n    end\nend",
    "    local result = {}\n    local start = 1\n    local index = 1\n    while true do\n        local first, last = string.find(text, pattern, start)\n        if first == nil then\n            break\n        end\n        result[index] = {first, last}\n        start = last + 1\n        index = index + 1\n    end\n    return result\nend",
    "  local result = {}\n  local index = 1\n  while index do\n    index = string.find(text, pattern, index)\n    if index then\n      table.insert(result, index)\n      index = index + 1\n    end\n  end\n  return result\nend",
    "    local pos = 0\n    local count = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        count = count + 1\n        result[count] = pos\n    end\n    if count == 0 then\n        return nil\n    end\n    return count, result\nend",
    "    local pos = 0\n    local count = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        count = count + 1\n        result[count] = pos\n    end\n    if count > 0 then\n        return count, result\n    end\n    return nil\nend",
    "    local result = {}\n    local start = 1\n    while true do\n        local from, to = string.find(text, pattern, start)\n        if from == nil then\n            break\n        end\n        table.insert(result, {from, to})\n        start = to + 1\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n    end\n    return result\nend",
    "    local result = {}\n    local index = 1\n    local start_pos = 1\n    local end_pos = 1\n    while true do\n        start_pos, end_pos = string.find(text, pattern, index)\n        if start_pos == nil then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        index = end_pos + 1\n    end\n    return result\nend",
    "    local start_pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, start_pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        start_pos = end_pos + 1\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, pos)\n        if start_pos == nil then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n    end\n    return result\nend",
    "    local index = 1\n    local result = {}\n    while true do\n        local start_index, end_index = string.find(text, pattern, index)\n        if start_index == nil then\n            break\n        end\n        table.insert(result, {start_index, end_index})\n        index = end_index + 1\n    end\n    if #result == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local pos = 0\n    local count = 0\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        count = count + 1\n    end\n    return count, pos\nend",
    "    local pos = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        table.insert(result, pos)\n    end\n    return result\nend",
    "    local pos = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        table.insert(result, pos)\n    end\n    if #result > 0 then\n        return result\n    else\n        return nil\n    end\nend",
    "    local pos = 0\n    local result = {}\n    local count = 0\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        count = count + 1\n        result[count] = pos\n    end\n    if count == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local pos = text:find(pattern)\n    if pos then\n        return pos, text:len() - pos - pattern:len() + 1\n    else\n        return nil\n    end\nend",
    "  local result = {}\n  local index = 0\n  local start_index = 0\n  local end_index = 0\n  while true do\n    start_index, end_index = string.find(text, pattern, index + 1)\n    if start_index == nil then\n      break\n    end\n    table.insert(result, {start_index, end_index})\n    index = end_index\n  end\n  return result\nend",
    "    local result = {}\n    local pos = 1\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    while true do\n        local index = string.find(text, pattern, start, true)\n        if not index then\n            break\n        end\n        table.insert(result, index)\n        start = index + 1\n    end\n    return result\nend",
    "    local pos = 0\n    local count = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        count = count + 1\n        result[count] = pos\n    end\n    if count == 0 then\n        return nil\n    end\n    return count, result\nend",
    "\tlocal index = 1\n\tlocal result = {}\n\twhile true do\n\t\tlocal start_index, end_index = string.find(text, pattern, index)\n\t\tif start_index == nil then\n\t\t\tbreak\n\t\tend\n\t\ttable.insert(result, {start_index, end_index})\n\t\tindex = end_index + 1\n\tend\n\tif #result == 0 then\n\t\treturn nil\n\tend\n\treturn result\nend",
    "    local pos = string.find(text, pattern)\n    if pos then\n        return pos, pos + string.len(pattern) - 1\n    else\n        return nil\n    end\nend",
    "\tlocal start, finish = string.find(text, pattern)\n\tif start == nil then\n\t\treturn nil\n\tend\n\treturn start, finish\nend",
    "    local result = {}\n    local start = 1\n    local index = 1\n    while true do\n        local first, last = string.find(text, pattern, start)\n        if first == nil then\n            break\n        end\n        result[index] = {first, last}\n        start = last + 1\n        index = index + 1\n    end\n    return result\nend",
    "    local result = {}\n    local i = 1\n    local j = 1\n    local k = 1\n    while i <= #text do\n        if text:sub(i, i) == pattern:sub(j, j) then\n            if j == #pattern then\n                result[k] = i - #pattern + 1\n                k = k + 1\n                j = 1\n            else\n                j = j + 1\n            end\n        else\n            j = 1\n        end\n        i = i + 1\n    end\n    return result\nend",
    "\tlocal result = {}\n\tlocal start = 1\n\tlocal index = 1\n\twhile true do\n\t\tlocal from, to = string.find(text, pattern, start)\n\t\tif from == nil then\n\t\t\tbreak\n\t\tend\n\t\tresult[index] = {from, to}\n\t\tstart = to + 1\n\t\tindex = index + 1\n\tend\n\treturn result\nend",
    "    local start_pos = 1\n    local end_pos = string.len(pattern)\n    local occurance = 0\n    local pos = {}\n    while start_pos <= string.len(text) do\n        local start, last = string.find(text, pattern, start_pos)\n        if start then\n            occurance = occurance + 1\n            pos[occurance] = start\n            start_pos = last + 1\n        else\n            break\n        end\n    end\n    if occurance == 0 then\n        return nil\n    else\n        return occurance, pos\n    end\nend",
    "    local pos = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        table.insert(result, pos)\n    end\n    if #result == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start, stop = string.find(text, pattern, pos)\n        if start == nil then\n            break\n        end\n        table.insert(result, {start, stop})\n        pos = stop + 1\n    end\n    return result\nend",
    "    local result = {}\n    local index = 1\n    while index do\n        index = string.find(text, pattern, index)\n        if index then\n            table.insert(result, index)\n            index = index + 1\n        end\n    end\n    return result\nend",
    "\tlocal start = 1\n\tlocal result = {}\n\twhile true do\n\t\tlocal from, to = string.find(text, pattern, start)\n\t\tif from == nil then\n\t\t\treturn result\n\t\tend\n\t\ttable.insert(result, {from, to})\n\t\tstart = to + 1\n\tend\nend",
    "  local result = {}\n  local i = 1\n  local j = 1\n  local k = 1\n  local n = string.len(text)\n  local m = string.len(pattern)\n  while i <= n do\n    if text:sub(i, i) == pattern:sub(j, j) then\n      if j == m then\n        result[k] = i - m + 1\n        k = k + 1\n        j = 1\n      else\n        i = i + 1\n        j = j + 1\n      end\n    else\n      i = i - j + 2\n      j = 1\n    end\n  end\n  return result\nend",
    "    local result = {}\n    local start = 1\n    while true do\n        local from, to = string.find(text, pattern, start)\n        if from == nil then\n            break\n        end\n        table.insert(result, {from, to})\n        start = to + 1\n    end\n    return result\nend",
    "    local index = 1\n    local result = {}\n    while index do\n        index = string.find(text, pattern, index)\n        if index then\n            table.insert(result, index)\n            index = index + 1\n        end\n    end\n    return result\nend",
    "    local i = 1\n    local j = 1\n    local k = 1\n    local match = false\n    local position = {}\n    while i <= #text do\n        if text[i] == pattern[j] then\n            i = i + 1\n            j = j + 1\n            if j == #pattern then\n                match = true\n                position[k] = i - #pattern\n                k = k + 1\n                j = 1\n            end\n        else\n            i = i + 1\n            j = 1\n        end\n    end\n    if match then\n        return position\n    else\n        return nil\n    end\nend",
    "\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal pos = {}\n\twhile i <= #text do\n\t\tif text[i] == pattern[j] then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\t\tif j == #pattern + 1 then\n\t\t\t\tpos[k] = i - j\n\t\t\t\tk = k + 1\n\t\t\t\tj = 1\n\t\t\tend\n\t\telse\n\t\t\ti = i + 1\n\t\t\tj = 1\n\t\tend\n\tend\n\tif #pos == 0 then\n\t\treturn nil\n\telse\n\t\treturn pos\n\tend\nend",
    "    local result = {}\n    local pos = 1\n    local start_pos, end_pos = string.find(text, pattern, pos)\n    while start_pos do\n        table.insert(result, {start_pos, end_pos})\n        pos = end_pos + 1\n        start_pos, end_pos = string.find(text, pattern, pos)\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    local pos = string.find(text, pattern, start)\n    while pos do\n        table.insert(result, pos)\n        start = pos + 1\n        pos = string.find(text, pattern, start)\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start, stop = string.find(text, pattern, pos)\n        if start == nil then\n            break\n        end\n        result[#result + 1] = {start, stop}\n        pos = stop + 1\n    end\n    if #result == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local result = {}\n    local start = 1\n    local index = string.find(text, pattern, start)\n    while index do\n        table.insert(result, index)\n        start = index + 1\n        index = string.find(text, pattern, start)\n    end\n    return result\nend",
    "    local index = string.find(text, pattern)\n    if index then\n        return index, string.sub(text, index, index + string.len(pattern) - 1)\n    end\nend",
    "    local i, j = 1, 1\n    local result = {}\n    while i <= #text do\n        if text:sub(i, i + #pattern - 1) == pattern then\n            result[#result + 1] = i\n            i = i + #pattern\n        else\n            i = i + 1\n        end\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start, stop = string.find(text, pattern, pos)\n        if start then\n            table.insert(result, {start, stop})\n            pos = stop + 1\n        else\n            break\n        end\n    end\n    return result\nend",
    "    local i = 1\n    local j = 1\n    local k = 1\n    local pos = {}\n    while i <= #text do\n        if text:sub(i, i) == pattern:sub(j, j) then\n            if j == #pattern then\n                pos[k] = i - #pattern + 1\n                k = k + 1\n                j = 1\n            else\n                j = j + 1\n            end\n        else\n            j = 1\n        end\n        i = i + 1\n    end\n    if #pos == 0 then\n        return nil\n    else\n        return pos\n    end\nend",
    "    local pos = 0\n    local occurance = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if pos == nil then\n            break\n        end\n        occurance = occurance + 1\n        result[occurance] = pos\n    end\n    if occurance == 0 then\n        return nil\n    end\n    return result\nend",
    "    local position = 0\n    local count = 0\n    local result = {}\n    while true do\n        position = string.find(text, pattern, position + 1)\n        if position == nil then\n            break\n        end\n        count = count + 1\n        result[count] = position\n    end\n    if count == 0 then\n        return nil\n    end\n    return count, result\nend",
    "    local pos = 0\n    local occurance = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if pos == nil then\n            break\n        end\n        occurance = occurance + 1\n        result[occurance] = pos\n    end\n    if occurance == 0 then\n        return nil\n    end\n    return occurance, result\nend",
    "\tlocal pos = 0\n\tlocal count = 0\n\tlocal result = {}\n\twhile true do\n\t\tpos = string.find(text, pattern, pos + 1)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\t\tresult[count] = pos\n\tend\n\tif count == 0 then\n\t\treturn nil\n\telse\n\t\treturn result\n\tend\nend",
    "    local result = {}\n    local start_pos = 1\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, start_pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        start_pos = end_pos + 1\n    end\n    return result\nend",
    "    local pos = string.find(text, pattern)\n    if pos then\n        return pos\n    else\n        return nil\n    end\nend",
    "\tlocal result = {}\n\tlocal i = 1\n\twhile i <= #text do\n\t\tlocal j = text:find(pattern, i, true)\n\t\tif j then\n\t\t\ttable.insert(result, j)\n\t\t\ti = j + 1\n\t\telse\n\t\t\treturn result\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal start = 1\n\tlocal result = {}\n\twhile true do\n\t\tlocal from, to = string.find(text, pattern, start)\n\t\tif from == nil then\n\t\t\tbreak\n\t\tend\n\t\ttable.insert(result, {from, to})\n\t\tstart = to + 1\n\tend\n\tif #result == 0 then\n\t\treturn nil\n\tend\n\treturn result\nend",
    "    local result = {}\n    local start = 1\n    while true do\n        local pos = string.find(text, pattern, start)\n        if not pos then\n            break\n        end\n        table.insert(result, pos)\n        start = pos + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    while true do\n        local from, to = string.find(text, pattern, start)\n        if from == nil then\n            break\n        end\n        table.insert(result, {from, to})\n        start = to + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    local index = 1\n    while true do\n        local first, last = string.find(text, pattern, start)\n        if first == nil then\n            break\n        end\n        result[index] = {first, last}\n        index = index + 1\n        start = last + 1\n    end\n    return result\nend",
    "    local result = {}\n    local index = 1\n    local start = 1\n    local last = string.len(text)\n    while index do\n        index = string.find(text, pattern, start, true)\n        if index then\n            table.insert(result, index)\n            start = index + 1\n        end\n    end\n    if #result == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local pos = string.find(text, pattern)\n    if pos then\n        return pos, string.len(pattern)\n    end\nend",
    "    local start = 1\n    local result = {}\n    local i = 1\n    while true do\n        local s, e = string.find(text, pattern, start)\n        if s == nil then\n            break\n        end\n        result[i] = {s, e}\n        start = e + 1\n        i = i + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    while true do\n        local index = string.find(text, pattern, start)\n        if index == nil then\n            break\n        end\n        table.insert(result, index)\n        start = index + 1\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    while true do\n        local start, finish = string.find(text, pattern, pos)\n        if start == nil then\n            break\n        end\n        table.insert(result, {start, finish})\n        pos = finish + 1\n    end\n    if #result == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local pattern_len = #pattern\n    local text_len = #text\n    local result = {}\n    local start_pos = 1\n    while start_pos <= text_len do\n        local pos = string.find(text, pattern, start_pos, true)\n        if pos == nil then\n            break\n        end\n        table.insert(result, pos)\n        start_pos = pos + pattern_len\n    end\n    if #result == 0 then\n        return nil\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    while true do\n        local from, to = string.find(text, pattern, start)\n        if from then\n            table.insert(result, {from, to})\n            start = to + 1\n        else\n            break\n        end\n    end\n    return result\nend",
    "    local pos = 0\n    local count = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        count = count + 1\n        result[count] = pos\n    end\n    if count == 0 then\n        return nil\n    end\n    return result\nend",
    "\tlocal pos = 1\n\tlocal result = {}\n\twhile true do\n\t\tlocal start_pos, end_pos = string.find(text, pattern, pos)\n\t\tif not start_pos then\n\t\t\tbreak\n\t\tend\n\t\ttable.insert(result, {start_pos, end_pos})\n\t\tpos = end_pos + 1\n\tend\n\treturn result\nend",
    "    local start = 1\n    local result = {}\n    while true do\n        local start_index, end_index = string.find(text, pattern, start)\n        if start_index == nil then\n            break\n        end\n        table.insert(result, {start_index, end_index})\n        start = end_index + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start_pos = 1\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, start_pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        start_pos = end_pos + 1\n    end\n    return result\nend",
    "    local start_index = 1\n    local result = {}\n    while true do\n        local start_index, end_index = string.find(text, pattern, start_index)\n        if start_index == nil then\n            break\n        end\n        table.insert(result, {start_index, end_index})\n        start_index = end_index + 1\n    end\n    return result\nend",
    "    local pos = 0\n    local result = {}\n    while true do\n        pos = string.find(text, pattern, pos + 1)\n        if not pos then\n            break\n        end\n        result[#result + 1] = pos\n    end\n    return result\nend",
    "    local start_pos = 1\n    local end_pos = string.len(text)\n    local result = {}\n    while start_pos <= end_pos do\n        local pos = string.find(text, pattern, start_pos, true)\n        if not pos then\n            break\n        end\n        table.insert(result, pos)\n        start_pos = pos + 1\n    end\n    return result\nend",
    "    local i = 1\n    local j = 1\n    local k = 1\n    local found = false\n    local pos = {}\n    while i <= #text do\n        if text:sub(i, i) == pattern:sub(j, j) then\n            if j == #pattern then\n                found = true\n                pos[k] = i - #pattern + 1\n                k = k + 1\n                j = 1\n            else\n                j = j + 1\n            end\n        else\n            j = 1\n        end\n        i = i + 1\n    end\n    if found then\n        return pos\n    else\n        return nil\n    end\nend",
    "    local start = 1\n    local result = {}\n    while true do\n        local from, to = string.find(text, pattern, start)\n        if from == nil then\n            break\n        end\n        table.insert(result, {from, to})\n        start = to + 1\n    end\n    return result\nend",
    "    local pos = string.find(text, pattern)\n    if pos then\n        return pos\n    end\n    return nil\nend",
    "    local start_pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, start_pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        start_pos = end_pos + 1\n    end\n    return result\nend",
    "    local result = {}\n    local start = 1\n    while true do\n        local from, to = string.find(text, pattern, start)\n        if from == nil then\n            break\n        end\n        table.insert(result, {from, to})\n        start = to + 1\n    end\n    if #result == 0 then\n        return nil\n    end\n    return result\nend",
    "    local position = 0\n    local occurance = 0\n    local index = 0\n    while true do\n        index = string.find(text, pattern, index + 1, true)\n        if index == nil then\n            break\n        end\n        occurance = occurance + 1\n        position = index\n    end\n    return occurance, position\nend",
    "    local pos = 0\n    local result = {}\n    while true do\n        pos = text:find(pattern, pos + 1)\n        if not pos then\n            break\n        end\n        table.insert(result, pos)\n    end\n    return result\nend",
    "\tlocal pos = 1\n\tlocal result = {}\n\twhile true do\n\t\tlocal start, stop = text:find(pattern, pos)\n\t\tif start then\n\t\t\ttable.insert(result, {start, stop})\n\t\t\tpos = stop + 1\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn result\nend",
    "    local index = 1\n    local result = {}\n    while index do\n        index = string.find(text, pattern, index)\n        if index then\n            table.insert(result, index)\n            index = index + 1\n        end\n    end\n    return result\nend",
    "    local start_pos = 1\n    local result = {}\n    while true do\n        local start_pos, end_pos = string.find(text, pattern, start_pos)\n        if not start_pos then\n            break\n        end\n        table.insert(result, {start_pos, end_pos})\n        start_pos = end_pos + 1\n    end\n    return result\nend",
    "  local result = {}\n  local start = 1\n  local from, to = text:find(pattern, start)\n  while from do\n    result[#result + 1] = {from, to}\n    start = to + 1\n    from, to = text:find(pattern, start)\n  end\n  return result\nend",
    "    local i = 1\n    local j = 1\n    local k = 1\n    local n = #text\n    local m = #pattern\n    local occurance = {}\n    local position = {}\n    while i <= n do\n        if text[i] == pattern[j] then\n            if j == m then\n                occurance[k] = text[i]\n                position[k] = i\n                k = k + 1\n                j = 1\n            else\n                j = j + 1\n            end\n        else\n            j = 1\n        end\n        i = i + 1\n    end\n    if #occurance == 0 then\n        return nil\n    else\n        return occurance, position\n    end\nend",
    "    local result = {}\n    local start = 1\n    local index = string.find(text, pattern, start)\n    while index do\n        table.insert(result, index)\n        start = index + 1\n        index = string.find(text, pattern, start)\n    end\n    return result\nend",
    "    local pos = 1\n    local result = {}\n    local count = 0\n    while true do\n        local start, finish = string.find(text, pattern, pos)\n        if start == nil then\n            break\n        end\n        count = count + 1\n        result[count] = {start, finish}\n        pos = finish + 1\n    end\n    if count == 0 then\n        return nil\n    end\n    return result\nend",
    "    local pos = string.find(text, pattern)\n    if pos then\n        return pos\n    else\n        return nil\n    end\nend",
    "    local position = 0\n    local occurance = 0\n    local start_position = 0\n    local end_position = 0\n    local result = {}\n    while true do\n        start_position, end_position = string.find(text, pattern, position)\n        if start_position == nil then\n            break\n        end\n        occurance = occurance + 1\n        position = end_position + 1\n        result[occurance] = {start_position, end_position}\n    end\n    if occurance == 0 then\n        return nil\n    else\n        return result\n    end\nend",
    "    local result = {}\n    local start = 1\n    local index = 1\n    while true do\n        local from, to = string.find(text, pattern, start)\n        if from == nil then\n            break\n        end\n        result[index] = {from, to}\n        start = to + 1\n        index = index + 1\n    end\n    return result\nend"
  ]
}