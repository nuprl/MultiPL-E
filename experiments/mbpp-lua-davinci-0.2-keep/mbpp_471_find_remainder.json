{
  "name": "mbpp_471_find_remainder",
  "language": "lua",
  "prompt": "-- Write a python function to find the product of the array multiplication modulo n.\nlocal function find_remainder(arr, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_remainder\n    lu.assertEquals(candidate({100, 10, 5, 25, 35, 14}, 11), 9)\n    lu.assertEquals(candidate({1, 1, 1}, 1), 0)\n    lu.assertEquals(candidate({1, 2, 1}, 2), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local product = 1\n    for i = 1, #arr do\n        product = (product * arr[i]) % n\n    end\n    return product\nend",
    "    local product = 1\n    for i = 1, #arr do\n        product = (product * arr[i]) % n\n    end\n    return product\nend",
    "    local prod = 1\n    for i = 1, #arr do\n        prod = (prod * arr[i]) % n\n    end\n    return prod\nend",
    "  local product = 1\n  for i = 1, #arr do\n    product = (product * arr[i]) % n\n  end\n  return product\nend",
    "    local product = 1\n    for i = 1, #arr do\n        product = (product * arr[i]) % n\n    end\n    return product\nend",
    "    local product = 1\n    for i = 1, #arr do\n        product = (product * arr[i]) % n\n    end\n    return product\nend",
    "    local prod = 1\n    for i = 1, #arr do\n        prod = (prod * arr[i]) % n\n    end\n    return prod\nend",
    "    local product = 1\n    for i = 1, #arr do\n        product = (product * arr[i]) % n\n    end\n    return product\nend",
    "  local product = 1\n  for i = 1, #arr do\n    product = (product * arr[i]) % n\n  end\n  return product\nend",
    "    local product = 1\n    for i = 1, #arr do\n        product = (product * arr[i]) % n\n    end\n    return product\nend",
    "    local product = 1\n    for i = 1, #arr do\n        product = (product * arr[i]) % n\n    end\n    return product\nend",
    "    local product = 1\n    for i = 1, #arr do\n        product = (product * arr[i]) % n\n    end\n    return product\nend",
    "    local product = 1\n    for i = 1, #arr do\n        product = (product * arr[i]) % n\n    end\n    return product\nend",
    "    local product = 1\n    for _, v in ipairs(arr) do\n        product = (product * v) % n\n    end\n    return product\nend",
    "    local product = 1\n    for i = 1, #arr do\n        product = (product * arr[i]) % n\n    end\n    return product\nend",
    "  local product = 1\n  for i = 1, #arr do\n    product = (product * arr[i]) % n\n  end\n  return product\nend",
    "    local product = 1\n    for i = 1, #arr do\n        product = (product * arr[i]) % n\n    end\n    return product\nend",
    "    local product = 1\n    for i = 1, #arr do\n        product = (product * arr[i]) % n\n    end\n    return product\nend",
    "  local product = 1\n  for i = 1, #arr do\n    product = (product * arr[i]) % n\n  end\n  return product\nend",
    "    local prod = 1\n    for i = 1, #arr do\n        prod = (prod * arr[i]) % n\n    end\n    return prod\nend"
  ]
}