{
  "name": "mbpp_470_add_pairwise",
  "language": "lua",
  "prompt": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal tup_len = #test_tup\n\tlocal new_tup = {}\n\tfor i = 1, tup_len - 1 do\n\t\tnew_tup[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn new_tup\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_tup - 1 do\n    result[i] = test_tup[i] + test_tup[i + 1]\n  end\n  return result\nend",
    "    local sum = 0\n    for i = 1, #test_tup do\n        if i == #test_tup then\n            sum = sum + test_tup[i]\n        else\n            sum = sum + test_tup[i] + test_tup[i+1]\n        end\n    end\n    return sum\nend",
    "    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend",
    "\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend",
    "\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend",
    "    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend",
    "    local tup_len = #test_tup\n    local new_tup = {}\n    for i = 1, tup_len - 1 do\n        table.insert(new_tup, test_tup[i] + test_tup[i + 1])\n    end\n    return new_tup\nend",
    "\tlocal result = {}\n\tfor i = 1, #test_tup do\n\t\tif i == #test_tup then\n\t\t\tresult[i] = test_tup[i] + test_tup[1]\n\t\telse\n\t\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\t\tend\n\tend\n\treturn result\nend",
    "  local tup_len = #test_tup\n  local result = {}\n  for i = 1, tup_len - 1 do\n    result[i] = test_tup[i] + test_tup[i + 1]\n  end\n  return result\nend",
    "    local tup_len = #test_tup\n    local new_tup = {}\n    for i = 1, tup_len - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend",
    "\tlocal new_tup = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tnew_tup[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn new_tup\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend",
    "    local tup_len = #test_tup\n    local result = {}\n    for i = 1, tup_len - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend"
  ]
}