{
  "name": "mbpp_724_power_base_sum",
  "language": "lua",
  "prompt": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(power_str:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jtsh3nn.lua:6: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8jtsh3nn.lua:6: in local 'candidate'\n\t/tmp/tmp8jtsh3nn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tfor i = 1, power do\n\t\tsum = sum + base\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpma0tn_76.lua:13: expected: 115, actual: 200\nstack traceback:\n\t/tmp/tmpma0tn_76.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal result = base ^ power\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3csyhxz.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpu3csyhxz.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd9brxlh.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpnd9brxlh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(power_str:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jtsh3nn.lua:6: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8jtsh3nn.lua:6: in local 'candidate'\n\t/tmp/tmp8jtsh3nn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + (result % 10)\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxhfidm_.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpoxhfidm_.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local num = base ^ power\n    while num > 0 do\n        local digit = num % 10\n        sum = sum + digit\n        num = math.floor(num / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8fa44_wd.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8fa44_wd.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(power_str:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jtsh3nn.lua:6: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8jtsh3nn.lua:6: in local 'candidate'\n\t/tmp/tmp8jtsh3nn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local result = base ^ power\n  local sum = 0\n  while result > 0 do\n    local digit = result % 10\n    sum = sum + digit\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpviyj6ykc.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpviyj6ykc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local number = base ^ power\n    while number > 0 do\n        sum = sum + number % 10\n        number = math.floor(number / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_kdo86j.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpt_kdo86j.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal power_base = base ^ power\n\twhile power_base > 0 do\n\t\tsum = sum + power_base % 10\n\t\tpower_base = math.floor(power_base / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn08z9lre.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpn08z9lre.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal result = base ^ power\n\tlocal sum = 0\n\twhile result > 0 do\n\t\tsum = sum + (result % 10)\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo45x4hfy.lua:15: expected: 115, actual: -2149578688\nstack traceback:\n\t/tmp/tmpo45x4hfy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8dhcdfta.lua:16: expected: 115, actual: -2149578688\nstack traceback:\n\t/tmp/tmp8dhcdfta.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    for i = 1, power do\n        sum = sum + base\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmtf2nql.lua:13: expected: 115, actual: 200\nstack traceback:\n\t/tmp/tmpdmtf2nql.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(power_str:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jtsh3nn.lua:6: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8jtsh3nn.lua:6: in local 'candidate'\n\t/tmp/tmp8jtsh3nn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local result = base ^ power\n  local sum = 0\n  while result > 0 do\n    local digit = result % 10\n    sum = sum + digit\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpviyj6ykc.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpviyj6ykc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(power_str:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jtsh3nn.lua:6: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8jtsh3nn.lua:6: in local 'candidate'\n\t/tmp/tmp8jtsh3nn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local result = base ^ power\n  local sum = 0\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rqu_165.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp5rqu_165.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local sum = 0\n  local result = base ^ power\n  while result > 0 do\n    local digit = result % 10\n    sum = sum + digit\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6la85ev.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmps6la85ev.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    for digit in tostring(base ^ power):gmatch(\"%d\") do\n        sum = sum + tonumber(digit)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124163,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8v5_2e5.lua:13: expected: 115, actual: 50\nstack traceback:\n\t/tmp/tmpc8v5_2e5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal result = base ^ power\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3csyhxz.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpu3csyhxz.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local result = base ^ power\n  local sum = 0\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rqu_165.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp5rqu_165.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal result = base ^ power\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3csyhxz.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpu3csyhxz.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd9brxlh.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpnd9brxlh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal number = base ^ power\n\twhile number > 0 do\n\t\tsum = sum + number % 10\n\t\tnumber = math.floor(number / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124163,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8semoq4h.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8semoq4h.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal result = base ^ power\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3csyhxz.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpu3csyhxz.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd9brxlh.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpnd9brxlh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(power_str:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jtsh3nn.lua:6: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8jtsh3nn.lua:6: in local 'candidate'\n\t/tmp/tmp8jtsh3nn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124163,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbzpy808q.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal power_base = base ^ power\n\twhile power_base > 0 do\n\t\tsum = sum + power_base % 10\n\t\tpower_base = math.floor(power_base / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn08z9lre.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpn08z9lre.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(power_str:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jtsh3nn.lua:6: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8jtsh3nn.lua:6: in local 'candidate'\n\t/tmp/tmp8jtsh3nn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = (result - digit) / 10\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124163,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3es4letg.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp3es4letg.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd9brxlh.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpnd9brxlh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal result = base ^ power\n\tlocal sum = 0\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5lojubh.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpp5lojubh.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal result = base ^ power\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3csyhxz.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpu3csyhxz.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd9brxlh.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpnd9brxlh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local base_power = math.pow(base, power)\n    local base_power_str = tostring(base_power)\n    for i = 1, #base_power_str do\n        local num = tonumber(string.sub(base_power_str, i, i))\n        sum = sum + num\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124163,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgifkexuo.lua:8: attempt to perform arithmetic on a nil value (local 'num')\nstack traceback:\n\t/tmp/tmpgifkexuo.lua:8: in local 'candidate'\n\t/tmp/tmpgifkexuo.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local sum = 0\n  local result = base ^ power\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpornd6woc.lua:15: expected: 115, actual: -2149578688\nstack traceback:\n\t/tmp/tmpornd6woc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local sum = 0\n  local power_base = base ^ power\n  while power_base > 0 do\n    sum = sum + power_base % 10\n    power_base = math.floor(power_base / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmi7d0_s5.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpmi7d0_s5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        power_base = math.floor(power_base / 10)\n        sum = sum + digit\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp548x90u0.lua:16: expected: 115, actual: -2149578688\nstack traceback:\n\t/tmp/tmp548x90u0.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    for i = 1, power do\n        local num = base ^ i\n        while num > 0 do\n            local digit = num % 10\n            sum = sum + digit\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124163,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb4m34y3u.lua:18: expected: 115, actual: 7005.0\nstack traceback:\n\t/tmp/tmpb4m34y3u.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        result = result + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf_a3zre.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmphf_a3zre.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(power_str:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jtsh3nn.lua:6: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8jtsh3nn.lua:6: in local 'candidate'\n\t/tmp/tmp8jtsh3nn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd9brxlh.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpnd9brxlh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local result = base ^ power\n  local sum = 0\n  while result > 0 do\n    local digit = result % 10\n    sum = sum + digit\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpviyj6ykc.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpviyj6ykc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local sum = 0\n  local result = base ^ power\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpornd6woc.lua:15: expected: 115, actual: -2149578688\nstack traceback:\n\t/tmp/tmpornd6woc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local result = base ^ power\n  local sum = 0\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rqu_165.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp5rqu_165.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal result = base ^ power\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3csyhxz.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpu3csyhxz.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd9brxlh.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpnd9brxlh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd9brxlh.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpnd9brxlh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    for digit in tostring(base ^ power):gmatch(\"%d\") do\n        sum = sum + tonumber(digit)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124163,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8v5_2e5.lua:13: expected: 115, actual: 50\nstack traceback:\n\t/tmp/tmpc8v5_2e5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local result = base ^ power\n  local sum = 0\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rqu_165.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp5rqu_165.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(power_str:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jtsh3nn.lua:6: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8jtsh3nn.lua:6: in local 'candidate'\n\t/tmp/tmp8jtsh3nn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local result = base ^ power\n  local sum = 0\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rqu_165.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp5rqu_165.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local sum = 0\n  local result = base ^ power\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpornd6woc.lua:15: expected: 115, actual: -2149578688\nstack traceback:\n\t/tmp/tmpornd6woc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal result = base ^ power\n\tlocal sum = 0\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5lojubh.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpp5lojubh.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local result = 0\n  for i = 0, power do\n    result = result + base ^ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124163,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6x440igy.lua:13: expected: 115, actual: 2.5353012004565e+30\nstack traceback:\n\t/tmp/tmp6x440igy.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = 0\n    local power_result = base ^ power\n    while power_result > 0 do\n        result = result + power_result % 10\n        power_result = math.floor(power_result / 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2iurth7w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp2iurth7w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local num = base ^ power\n    while num > 0 do\n        sum = sum + num % 10\n        num = math.floor(num / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfikyk8cv.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpfikyk8cv.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(power_str:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jtsh3nn.lua:6: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8jtsh3nn.lua:6: in local 'candidate'\n\t/tmp/tmp8jtsh3nn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(power_str:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jtsh3nn.lua:6: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8jtsh3nn.lua:6: in local 'candidate'\n\t/tmp/tmp8jtsh3nn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local sum = 0\n  local result = base ^ power\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpornd6woc.lua:15: expected: 115, actual: -2149578688\nstack traceback:\n\t/tmp/tmpornd6woc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd9brxlh.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpnd9brxlh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local sum = 0\n  local result = base ^ power\n  while result > 0 do\n    local digit = result % 10\n    sum = sum + digit\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6la85ev.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmps6la85ev.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd9brxlh.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpnd9brxlh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local sum = 0\n  local result = base ^ power\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124163,
      "stdout": "",
      "stderr": "lua: /tmp/tmpktgmg1cy.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        local last_digit = result % 10\n        sum = sum + last_digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0j2ptl0t.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp0j2ptl0t.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd9brxlh.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpnd9brxlh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local sum = 0\n  local power_base = base ^ power\n  while power_base > 0 do\n    sum = sum + power_base % 10\n    power_base = math.floor(power_base / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmi7d0_s5.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpmi7d0_s5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + (result % 10)\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxhfidm_.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpoxhfidm_.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = 1\n    for i = 1, power do\n        result = result * base\n    end\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124163,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzijii98.lua:18: expected: 115, actual: 0\nstack traceback:\n\t/tmp/tmpyzijii98.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(power_str:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jtsh3nn.lua:6: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8jtsh3nn.lua:6: in local 'candidate'\n\t/tmp/tmp8jtsh3nn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = math.pow(base, power)\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124163,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6oib7p6u.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp6oib7p6u.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local sum = 0\n  local result = base ^ power\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpornd6woc.lua:15: expected: 115, actual: -2149578688\nstack traceback:\n\t/tmp/tmpornd6woc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal power_base = base ^ power\n\twhile power_base > 0 do\n\t\tsum = sum + power_base % 10\n\t\tpower_base = math.floor(power_base / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn08z9lre.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpn08z9lre.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local result = base ^ power\n  local sum = 0\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rqu_165.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp5rqu_165.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal result = base ^ power\n\tlocal sum = 0\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5lojubh.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpp5lojubh.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = math.pow(base, power)\n    local sum = 0\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124163,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpak51ntfp.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpak51ntfp.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local base_power = base ^ power\n    while base_power > 0 do\n        sum = sum + base_power % 10\n        base_power = math.floor(base_power / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81dswnam.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp81dswnam.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    for i = 1, power do\n        sum = sum + base\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmtf2nql.lua:13: expected: 115, actual: 200\nstack traceback:\n\t/tmp/tmpdmtf2nql.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local sum = 0\n  local result = base ^ power\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpornd6woc.lua:15: expected: 115, actual: -2149578688\nstack traceback:\n\t/tmp/tmpornd6woc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal result = base ^ power\n\tlocal sum = 0\n\twhile result > 0 do\n\t\tsum = sum + (result % 10)\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo45x4hfy.lua:15: expected: 115, actual: -2149578688\nstack traceback:\n\t/tmp/tmpo45x4hfy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local base_power = base ^ power\n    while base_power > 0 do\n        local digit = base_power % 10\n        sum = sum + digit\n        base_power = math.floor(base_power / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqr5w4vh.lua:16: expected: 115, actual: -2149578688\nstack traceback:\n\t/tmp/tmphqr5w4vh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local sum = 0\n  local power_base = base ^ power\n  while power_base > 0 do\n    sum = sum + power_base % 10\n    power_base = math.floor(power_base / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmi7d0_s5.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpmi7d0_s5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local base_power = base ^ power\n    while base_power > 0 do\n        local digit = base_power % 10\n        sum = sum + digit\n        base_power = math.floor(base_power / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqr5w4vh.lua:16: expected: 115, actual: -2149578688\nstack traceback:\n\t/tmp/tmphqr5w4vh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local sum = 0\n  local result = base ^ power\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpornd6woc.lua:15: expected: 115, actual: -2149578688\nstack traceback:\n\t/tmp/tmpornd6woc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal result = base ^ power\n\tlocal sum = 0\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5lojubh.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpp5lojubh.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal power_base = base ^ power\n\twhile power_base > 0 do\n\t\tsum = sum + power_base % 10\n\t\tpower_base = math.floor(power_base / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn08z9lre.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpn08z9lre.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    for i = 1, power do\n        sum = sum + base ^ i\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124163,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59g0rco1.lua:13: expected: 115, actual: 2.5353012004565e+30\nstack traceback:\n\t/tmp/tmp59g0rco1.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local sum = 0\n  local num = base ^ power\n  while num > 0 do\n    sum = sum + num % 10\n    num = math.floor(num / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124163,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_lw_sq99.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp_lw_sq99.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\treturn sum_digits(base ^ power)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124163,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpibcoqcj1.lua:3: attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpibcoqcj1.lua:3: in local 'candidate'\n\t/tmp/tmpibcoqcj1.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal result = base ^ power\n\tlocal sum = 0\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5lojubh.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpp5lojubh.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd9brxlh.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpnd9brxlh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local result = base ^ power\n  local sum = 0\n  while result > 0 do\n    sum = sum + (result % 10)\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptofbxinm.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmptofbxinm.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local sum = 0\n  local result = base ^ power\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpornd6woc.lua:15: expected: 115, actual: -2149578688\nstack traceback:\n\t/tmp/tmpornd6woc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal result = base ^ power\n\twhile result > 0 do\n\t\tsum = sum + (result % 10)\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpedtvap.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpxpedtvap.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal result = base ^ power\n\tlocal sum = 0\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5lojubh.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpp5lojubh.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd9brxlh.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpnd9brxlh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd9brxlh.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpnd9brxlh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal result = base ^ power\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3csyhxz.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpu3csyhxz.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local result = base ^ power\n  local sum = 0\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rqu_165.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp5rqu_165.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemyazun6.lua:16: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpemyazun6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(string.sub(power_str, i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg060n5a3.lua:6: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpg060n5a3.lua:6: in function 'candidate'\n\t/tmp/tmpg060n5a3.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(power_str:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jtsh3nn.lua:6: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8jtsh3nn.lua:6: in local 'candidate'\n\t/tmp/tmp8jtsh3nn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h4bjfeb.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp8h4bjfeb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(power_str:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jtsh3nn.lua:6: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8jtsh3nn.lua:6: in local 'candidate'\n\t/tmp/tmp8jtsh3nn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n  local result = base ^ power\n  local sum = 0\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124162,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rqu_165.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp5rqu_165.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal power_base = base ^ power\n\twhile power_base > 0 do\n\t\tsum = sum + power_base % 10\n\t\tpower_base = math.floor(power_base / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn08z9lre.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpn08z9lre.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal base_power = base ^ power\n\twhile base_power > 0 do\n\t\tsum = sum + base_power % 10\n\t\tbase_power = math.floor(base_power / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124163,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrtm1m1x.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpbrtm1m1x.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal result = base ^ power\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3csyhxz.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpu3csyhxz.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662a164w.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmp662a164w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n\tlocal sum = 0\n\tlocal result = base ^ power\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3csyhxz.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpu3csyhxz.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1uw1aql.lua:15: expected: 115, actual: 114.0\nstack traceback:\n\t/tmp/tmpi1uw1aql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8dhcdfta.lua:16: expected: 115, actual: -2149578688\nstack traceback:\n\t/tmp/tmp8dhcdfta.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}