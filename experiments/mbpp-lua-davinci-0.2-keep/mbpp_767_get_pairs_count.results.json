{
  "name": "mbpp_767_get_pairs_count",
  "language": "lua",
  "prompt": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i+1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n\tlocal count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] + arr[j] == sum then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n\tlocal count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] + arr[j] == sum then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i=1, #arr do\n    for j=i+1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123001,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  local hash = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123001,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9kt1ryo_.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n\tlocal count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] + arr[j] == sum then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local pairs = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        pairs = pairs + 1\n      end\n    end\n  end\n  return pairs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123001,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    local hash = {}\n    for i, v in ipairs(arr) do\n        if hash[sum - v] then\n            count = count + 1\n        end\n        hash[v] = true\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123001,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptslzvt85.lua:17: expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmptslzvt85.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n\tlocal count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] + arr[j] == sum then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    local hash = {}\n    for i, v in ipairs(arr) do\n        if hash[sum - v] then\n            count = count + 1\n        end\n        hash[v] = true\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123001,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptslzvt85.lua:17: expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmptslzvt85.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n\tlocal count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] + arr[j] == sum then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n\tlocal count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] + arr[j] == sum then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i=1, #arr do\n    for j=i+1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123001,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i, v in ipairs(arr) do\n        for j, w in ipairs(arr) do\n            if i ~= j and v + w == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123001,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbl62mxp.lua:17: expected: 6, actual: 12\nstack traceback:\n\t/tmp/tmpdbl62mxp.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n\tlocal count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] + arr[j] == sum then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i, v in ipairs(arr) do\n        for j, w in ipairs(arr) do\n            if i ~= j and v + w == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123001,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbl62mxp.lua:17: expected: 6, actual: 12\nstack traceback:\n\t/tmp/tmpdbl62mxp.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    local hash = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123001,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyt2zj2jt.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i=1, #arr do\n        for j=i+1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123001,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] + arr[j] == sum then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] + arr[j] == sum then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509801,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}