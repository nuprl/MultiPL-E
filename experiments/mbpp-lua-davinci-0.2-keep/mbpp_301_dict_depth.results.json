{
  "name": "mbpp_301_dict_depth",
  "language": "lua",
  "prompt": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max = 0\n    for _, v in pairs(d) do\n        local depth = dict_depth(v)\n        if depth > max then\n            max = depth\n        end\n    end\n    return max + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4t7gxno_.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmp4t7gxno_.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmp4t7gxno_.lua:5: in local 'candidate'\n\t/tmp/tmp4t7gxno_.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == 'table' then\n      local d = dict_depth(v)\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for _, v in pairs(d) do\n        if type(v) == \"table\" then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for _, v in pairs(d) do\n        local depth = 0\n        while type(v) == 'table' do\n            depth = depth + 1\n            v = v[1]\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwijg1ije.lua:20: expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmpwijg1ije.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k,v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpred7170u.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpred7170u.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpred7170u.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpred7170u.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v) + 1\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqidrdg_.lua:18: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpgqidrdg_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = dict_depth(v)\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps49b59fa.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmps49b59fa.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmps49b59fa.lua:5: in local 'candidate'\n\t/tmp/tmps49b59fa.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpred7170u.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpred7170u.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local depth = dict_depth(v) + 1\n            if depth > max then\n                max = depth\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0s775ys.lua:18: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpy0s775ys.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 1\n        if type(v) == 'table' then\n            depth = depth + dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqavft2lh.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpqavft2lh.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyukz65qk.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpyukz65qk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    local d = dict_depth(v)\n    if d > depth then\n      depth = d\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ch9u709.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmp2ch9u709.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmp2ch9u709.lua:5: in local 'candidate'\n\t/tmp/tmp2ch9u709.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for _, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            local depth = dict_depth(v)\n            if depth > max_depth then\n                max_depth = depth\n            end\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for _, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        max_depth = math.max(max_depth, depth)\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 1\n    for _, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd61gwx7y.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpd61gwx7y.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpd61gwx7y.lua:5: in local 'candidate'\n\t/tmp/tmpd61gwx7y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd61gwx7y.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpd61gwx7y.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpd61gwx7y.lua:5: in local 'candidate'\n\t/tmp/tmpd61gwx7y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd61gwx7y.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpd61gwx7y.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpd61gwx7y.lua:5: in local 'candidate'\n\t/tmp/tmpd61gwx7y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for _, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd61gwx7y.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpd61gwx7y.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpd61gwx7y.lua:5: in local 'candidate'\n\t/tmp/tmpd61gwx7y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k,v in pairs(d) do\n        if type(v) == \"table\" then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpred7170u.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpred7170u.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            local d = dict_depth(v) + 1\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyrko645.lua:18: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpxyrko645.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for k, v in pairs(d) do\n    local depth = 0\n    if type(v) == \"table\" then\n      depth = dict_depth(v)\n    end\n    if depth > max_depth then\n      max_depth = depth\n    end\n  end\n  return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for _, v in pairs(d) do\n    local depth = 0\n    if type(v) == 'table' then\n      depth = dict_depth(v)\n    end\n    if depth > max_depth then\n      max_depth = depth\n    end\n  end\n  return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth\n        if type(v) == \"table\" then\n            depth = dict_depth(v) + 1\n        else\n            depth = 1\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzl9vhnd_.lua:21: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpzl9vhnd_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for _, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    if type(d) ~= \"table\" then\n        return 0\n    end\n    local max = 0\n    for _, v in pairs(d) do\n        local depth = dict_depth(v)\n        if depth > max then\n            max = depth\n        end\n    end\n    return max + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for k, v in pairs(d) do\n    local depth = 0\n    if type(v) == 'table' then\n      depth = dict_depth(v)\n    end\n    if depth > max_depth then\n      max_depth = depth\n    end\n  end\n  return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for k,v in pairs(d) do\n    local depth = 0\n    if type(v) == 'table' then\n      depth = dict_depth(v)\n    end\n    if depth > max_depth then\n      max_depth = depth\n    end\n  end\n  return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    local d = dict_depth(v)\n    if d > depth then\n      depth = d\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ch9u709.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmp2ch9u709.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmp2ch9u709.lua:5: in local 'candidate'\n\t/tmp/tmp2ch9u709.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == 'table' then\n      local d = dict_depth(v)\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpred7170u.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpred7170u.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for _, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuptic_w.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpzuptic_w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for k, v in pairs(d) do\n    local depth = 1\n    if type(v) == 'table' then\n      depth = depth + dict_depth(v)\n    end\n    max_depth = math.max(max_depth, depth)\n  end\n  return max_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3r2csge.lua:17: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpt3r2csge.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == \"table\" then\n      depth = math.max(depth, dict_depth(v) + 1)\n    end\n  end\n  return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperzfnrio.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmperzfnrio.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for _, v in pairs(d) do\n    if type(v) == 'table' then\n      depth = math.max(depth, dict_depth(v))\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 1\n    for _, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v) + 1\n        end\n        max_depth = math.max(max_depth, depth)\n    end\n    return max_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for _, v in pairs(d) do\n        local depth = 1\n        if type(v) == 'table' then\n            depth = depth + dict_depth(v)\n        end\n        max_depth = math.max(max_depth, depth)\n    end\n    return max_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi779hz4q.lua:17: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpi779hz4q.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd61gwx7y.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpd61gwx7y.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpd61gwx7y.lua:5: in local 'candidate'\n\t/tmp/tmpd61gwx7y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == 'table' then\n      local d = dict_depth(v)\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == \"table\" then\n      depth = math.max(depth, dict_depth(v))\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local depth = dict_depth(v) + 1\n            if depth > max then\n                max = depth\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0s775ys.lua:18: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpy0s775ys.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd61gwx7y.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpd61gwx7y.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpd61gwx7y.lua:5: in local 'candidate'\n\t/tmp/tmpd61gwx7y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == 'table' then\n      depth = math.max(depth, dict_depth(v))\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for k, v in pairs(d) do\n    local depth = 0\n    if type(v) == 'table' then\n      depth = dict_depth(v)\n    end\n    if depth > max_depth then\n      max_depth = depth\n    end\n  end\n  return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for _, v in pairs(d) do\n    if type(v) == 'table' then\n      depth = math.max(depth, dict_depth(v))\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == 'table' then\n      depth = math.max(depth, dict_depth(v) + 1)\n    end\n  end\n  return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0x8y93p.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpj0x8y93p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == \"table\" then\n      local d = dict_depth(v)\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for _, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        max_depth = math.max(max_depth, depth)\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  if type(d) ~= 'table' then return 0 end\n  local max = 0\n  for k, v in pairs(d) do\n    local depth = dict_depth(v)\n    if depth > max then max = depth end\n  end\n  return max + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd61gwx7y.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpd61gwx7y.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpd61gwx7y.lua:5: in local 'candidate'\n\t/tmp/tmpd61gwx7y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpred7170u.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpred7170u.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == 'table' then\n      local d = dict_depth(v)\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd61gwx7y.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpd61gwx7y.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpd61gwx7y.lua:5: in local 'candidate'\n\t/tmp/tmpd61gwx7y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    if type(d) ~= 'table' then\n        return 0\n    end\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == 'table' then\n      depth = math.max(depth, dict_depth(v))\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = dict_depth(v)\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps49b59fa.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmps49b59fa.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmps49b59fa.lua:5: in local 'candidate'\n\t/tmp/tmps49b59fa.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for _, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for _, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v) + 1\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpes_jt_u8.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpes_jt_u8.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for _, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for _, v in pairs(d) do\n    local depth = 0\n    if type(v) == 'table' then\n      depth = dict_depth(v)\n    end\n    if depth > max_depth then\n      max_depth = depth\n    end\n  end\n  return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for k, v in pairs(d) do\n    local depth = 0\n    if type(v) == \"table\" then\n      depth = dict_depth(v)\n    end\n    if depth > max_depth then\n      max_depth = depth\n    end\n  end\n  return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for _, v in pairs(d) do\n    if type(v) == 'table' then\n      depth = math.max(depth, dict_depth(v) + 1)\n    end\n  end\n  return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzaos2zqc.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpzaos2zqc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for k, v in pairs(d) do\n    local depth = 0\n    if type(v) == \"table\" then\n      depth = dict_depth(v)\n    end\n    if depth > max_depth then\n      max_depth = depth\n    end\n  end\n  return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 1\n    for _, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == 'table' then\n      local d = dict_depth(v)\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for _, v in pairs(d) do\n    if type(v) == \"table\" then\n      depth = math.max(depth, dict_depth(v) + 1)\n    end\n  end\n  return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3n5m5lx2.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmp3n5m5lx2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for k, v in pairs(d) do\n    local depth = 0\n    if type(v) == 'table' then\n      depth = dict_depth(v)\n    end\n    if depth > max_depth then\n      max_depth = depth\n    end\n  end\n  return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k,v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd61gwx7y.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpd61gwx7y.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpd61gwx7y.lua:5: in local 'candidate'\n\t/tmp/tmpd61gwx7y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == \"table\" then\n      local d = dict_depth(v)\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        max_depth = math.max(max_depth, depth + 1)\n    end\n    return max_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9i_po1f6.lua:17: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmp9i_po1f6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == 'table' then\n      local d = dict_depth(v)\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for _, v in pairs(d) do\n        if type(v) == 'table' then\n            local depth = dict_depth(v)\n            if depth > max_depth then\n                max_depth = depth\n            end\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k,v in pairs(d) do\n    if type(v) == 'table' then\n      local d = dict_depth(v)\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == \"table\" then\n      local d = dict_depth(v)\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for k, v in pairs(d) do\n    local depth = 0\n    if type(v) == \"table\" then\n      depth = dict_depth(v)\n    end\n    if depth > max_depth then\n      max_depth = depth\n    end\n  end\n  return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max = 0\n    for k, v in pairs(d) do\n        local depth = dict_depth(v)\n        if depth > max then\n            max = depth\n        end\n    end\n    return max + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgvb60wpf.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpgvb60wpf.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpgvb60wpf.lua:5: in local 'candidate'\n\t/tmp/tmpgvb60wpf.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == 'table' then\n      depth = math.max(depth, dict_depth(v) + 1)\n    end\n  end\n  return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0x8y93p.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpj0x8y93p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd61gwx7y.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpd61gwx7y.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpd61gwx7y.lua:5: in local 'candidate'\n\t/tmp/tmpd61gwx7y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd61gwx7y.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpd61gwx7y.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpd61gwx7y.lua:5: in local 'candidate'\n\t/tmp/tmpd61gwx7y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    if type(d) ~= 'table' then\n        return 0\n    end\n    local max_depth = 0\n    for _, v in pairs(d) do\n        local depth = dict_depth(v)\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for _, v in pairs(d) do\n    if type(v) == \"table\" then\n      depth = math.max(depth, dict_depth(v) + 1)\n    end\n  end\n  return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3n5m5lx2.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmp3n5m5lx2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == 'table' then\n      local d = dict_depth(v)\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == 'table' then\n      depth = math.max(depth, dict_depth(v))\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for _, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyukz65qk.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpyukz65qk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for _, v in pairs(d) do\n        if type(v) == \"table\" then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 1\n        if type(v) == 'table' then\n            depth = depth + dict_depth(v)\n        end\n        max_depth = math.max(max_depth, depth)\n    end\n    return max_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgu1crju0.lua:17: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpgu1crju0.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for k, v in pairs(d) do\n    local depth = 0\n    if type(v) == \"table\" then\n      depth = dict_depth(v)\n    end\n    max_depth = math.max(max_depth, depth)\n  end\n  return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    if type(d) ~= 'table' then\n        return 0\n    end\n    local max = 0\n    for k, v in pairs(d) do\n        local depth = dict_depth(v)\n        if depth > max then\n            max = depth\n        end\n    end\n    return max + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for k, v in pairs(d) do\n    local depth = 0\n    if type(v) == 'table' then\n      depth = dict_depth(v)\n    end\n    if depth > max_depth then\n      max_depth = depth\n    end\n  end\n  return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == 'table' then\n      local d = dict_depth(v)\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for _, v in pairs(d) do\n    if type(v) == 'table' then\n      local d = dict_depth(v) + 1\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ez1qoes.lua:18: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmp8ez1qoes.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for k, v in pairs(d) do\n    local depth = 0\n    if type(v) == 'table' then\n      depth = dict_depth(v)\n    end\n    max_depth = math.max(max_depth, depth)\n  end\n  return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for _, v in pairs(d) do\n    local depth = 0\n    if type(v) == \"table\" then\n      depth = dict_depth(v)\n    end\n    if depth > max_depth then\n      max_depth = depth\n    end\n  end\n  return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    local d = dict_depth(v)\n    if d > depth then\n      depth = d\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ch9u709.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmp2ch9u709.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmp2ch9u709.lua:5: in local 'candidate'\n\t/tmp/tmp2ch9u709.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    local d = dict_depth(v)\n    if d > depth then\n      depth = d\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ch9u709.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmp2ch9u709.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmp2ch9u709.lua:5: in local 'candidate'\n\t/tmp/tmp2ch9u709.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd61gwx7y.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpd61gwx7y.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpd61gwx7y.lua:5: in local 'candidate'\n\t/tmp/tmpd61gwx7y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 1\n        if type(v) == 'table' then\n            depth = depth + dict_depth(v)\n        end\n        max_depth = math.max(max_depth, depth)\n    end\n    return max_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgu1crju0.lua:17: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpgu1crju0.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for k, v in pairs(d) do\n    local depth = 0\n    if type(v) == 'table' then\n      depth = dict_depth(v)\n    end\n    if depth > max_depth then\n      max_depth = depth\n    end\n  end\n  return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    local t = type(v)\n    if t == 'table' then\n      depth = math.max(depth, dict_depth(v) + 1)\n    elseif t == 'string' then\n      depth = math.max(depth, 1)\n    end\n  end\n  return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrd6i44j.lua:18: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpbrd6i44j.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k,v in pairs(d) do\n    if type(v) == \"table\" then\n      local d = dict_depth(v)\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpred7170u.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpred7170u.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  if type(d) ~= \"table\" then\n    return 0\n  end\n  local max = 0\n  for k, v in pairs(d) do\n    local depth = dict_depth(v)\n    if depth > max then\n      max = depth\n    end\n  end\n  return max + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 1\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            local depth = dict_depth(v) + 1\n            if depth > max_depth then\n                max_depth = depth\n            end\n        end\n    end\n    return max_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    local d = dict_depth(v)\n    if d > depth then\n      depth = d\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ch9u709.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmp2ch9u709.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmp2ch9u709.lua:5: in local 'candidate'\n\t/tmp/tmp2ch9u709.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 1\n    for _, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == \"table\" then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = dict_depth(v)\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps49b59fa.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmps49b59fa.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmps49b59fa.lua:5: in local 'candidate'\n\t/tmp/tmps49b59fa.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpred7170u.lua:15: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpred7170u.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for _, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    if type(d) ~= \"table\" then\n        return 0\n    end\n    local max = 0\n    for _, v in pairs(d) do\n        local depth = dict_depth(v)\n        if depth > max then\n            max = depth\n        end\n    end\n    return max + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 1\n    for _, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == 'table' then\n      local d = dict_depth(v)\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    if type(d) ~= 'table' then\n        return 0\n    end\n    local max = 0\n    for _, v in pairs(d) do\n        local depth = dict_depth(v)\n        if depth > max then\n            max = depth\n        end\n    end\n    return max + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122505,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd61gwx7y.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpd61gwx7y.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpd61gwx7y.lua:5: in local 'candidate'\n\t/tmp/tmpd61gwx7y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for _, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max = 0\n    for _, v in pairs(d) do\n        if type(v) == 'table' then\n            local depth = dict_depth(v)\n            if depth > max then\n                max = depth\n            end\n        end\n    end\n    return max + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122505,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd61gwx7y.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpd61gwx7y.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpd61gwx7y.lua:5: in local 'candidate'\n\t/tmp/tmpd61gwx7y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for _, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd61gwx7y.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpd61gwx7y.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpd61gwx7y.lua:5: in local 'candidate'\n\t/tmp/tmpd61gwx7y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n  local max_depth = 0\n  for k, v in pairs(d) do\n    if type(v) == \"table\" then\n      local depth = dict_depth(v)\n      if depth > max_depth then\n        max_depth = depth\n      end\n    end\n  end\n  return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122505,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local depth = dict_depth(v)\n            if depth > max_depth then\n                max_depth = depth\n            end\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122505,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = 0\n        if type(v) == 'table' then\n            depth = dict_depth(v)\n        end\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510009,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the depth of a dictionary.\nlocal function dict_depth(d)\n    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd61gwx7y.lua:4: bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\t/tmp/tmpd61gwx7y.lua:4: in upvalue 'dict_depth'\n\t/tmp/tmpd61gwx7y.lua:5: in local 'candidate'\n\t/tmp/tmpd61gwx7y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}