{
  "name": "mbpp_391_convert_list_dictionary",
  "language": "lua",
  "prompt": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i, v in ipairs(l1) do\n    d[v] = {}\n    for j, w in ipairs(l2) do\n      d[v][w] = l3[i][j]\n    end\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph79hobit.lua:7: attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmph79hobit.lua:7: in local 'candidate'\n\t/tmp/tmph79hobit.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        result[l1[i]] = {\n            [l2[i]] = l3[i]\n        }\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1otxt3z0.lua:15: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\"=85},\n    S002={\"Leyton Marsh\"=98},\n    S003={\"Duncan Boyle\"=89},\n    S004={\"Saim Richards\"=92}\n}\nstack traceback:\n\t/tmp/tmp1otxt3z0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        result[l1[i]] = {l2[i], l3[i]}\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3uvs2tp.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpo3uvs2tp.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = { l2[i], l3[i] }\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvz2i_mef.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpvz2i_mef.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        result[l1[i]] = {l2[i], l3[i]}\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3uvs2tp.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpo3uvs2tp.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local dict = {}\n  for i = 1, #l1 do\n    dict[l1[i]] = {\n      [l2[i]] = l3[i]\n    }\n  end\n  return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_wiy2ro.lua:15: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\"=85},\n    S002={\"Leyton Marsh\"=98},\n    S003={\"Duncan Boyle\"=89},\n    S004={\"Saim Richards\"=92}\n}\nstack traceback:\n\t/tmp/tmps_wiy2ro.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    result[l1[i]] = {l2[i], l3[i]}\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgayjfwu.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmphgayjfwu.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local dict = {}\n  for i = 1, #l1 do\n    dict[l1[i]] = {l2[i], l3[i]}\n  end\n  return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_gjjbg0.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpp_gjjbg0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local dict = {}\n  for i = 1, #l1 do\n    dict[l1[i]] = {l2[i], l3[i]}\n  end\n  return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_gjjbg0.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpp_gjjbg0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {[l2[i]] = l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11vcs2ws.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\"=85},\n    S002={\"Leyton Marsh\"=98},\n    S003={\"Duncan Boyle\"=89},\n    S004={\"Saim Richards\"=92}\n}\nstack traceback:\n\t/tmp/tmp11vcs2ws.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = { l2[i], l3[i] }\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3u9o6fmy.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp3u9o6fmy.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i, v in ipairs(l1) do\n    d[v] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxxwugvw.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpjxxwugvw.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i=1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdehirdze.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpdehirdze.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {}\n        for j, w in ipairs(l2) do\n            d[v][w] = l3[i][j]\n        end\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk1qmi26q.lua:7: attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpk1qmi26q.lua:7: in local 'candidate'\n\t/tmp/tmpk1qmi26q.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        result[l1[i]] = {l2[i], l3[i]}\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3uvs2tp.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpo3uvs2tp.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {}\n        for j, w in ipairs(l2) do\n            d[v][w] = l3[i][j]\n        end\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk1qmi26q.lua:7: attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpk1qmi26q.lua:7: in local 'candidate'\n\t/tmp/tmpk1qmi26q.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {}\n        for j, w in ipairs(l2) do\n            d[v][w] = l3[i][j]\n        end\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk1qmi26q.lua:7: attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpk1qmi26q.lua:7: in local 'candidate'\n\t/tmp/tmpk1qmi26q.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local dict = {}\n  for i = 1, #l1 do\n    dict[l1[i]] = {l2[i], l3[i]}\n  end\n  return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_gjjbg0.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpp_gjjbg0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i, v in ipairs(l1) do\n        dict[v] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yt50svp.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp_yt50svp.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local l1_len = #l1\n    local l2_len = #l2\n    local l3_len = #l3\n    local d = {}\n    for i = 1, l1_len do\n        d[l1[i]] = {}\n        for j = 1, l2_len do\n            d[l1[i]][l2[j]] = l3[i][j]\n        end\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3adg1uh3.lua:10: attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp3adg1uh3.lua:10: in local 'candidate'\n\t/tmp/tmp3adg1uh3.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dictionary = {}\n    for i = 1, #l1 do\n        dictionary[l1[i]] = {l2[i], l3[i]}\n    end\n    return dictionary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9msdquwf.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9msdquwf.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d1 = convert_list_dictionary(l1)\n    local d2 = convert_list_dictionary(l2)\n    local d3 = convert_list_dictionary(l3)\n    return {d1, d2, d3}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptivg76_4.lua:3: stack overflow\nstack traceback:\n\t/tmp/tmptivg76_4.lua:3: in upvalue 'convert_list_dictionary'\n\t/tmp/tmptivg76_4.lua:3: in upvalue 'convert_list_dictionary'\n\t/tmp/tmptivg76_4.lua:3: in upvalue 'convert_list_dictionary'\n\t/tmp/tmptivg76_4.lua:3: in upvalue 'convert_list_dictionary'\n\t/tmp/tmptivg76_4.lua:3: in upvalue 'convert_list_dictionary'\n\t/tmp/tmptivg76_4.lua:3: in upvalue 'convert_list_dictionary'\n\t/tmp/tmptivg76_4.lua:3: in upvalue 'convert_list_dictionary'\n\t/tmp/tmptivg76_4.lua:3: in upvalue 'convert_list_dictionary'\n\t/tmp/tmptivg76_4.lua:3: in upvalue 'convert_list_dictionary'\n\t...\t(skipping 249971 levels)\n\t/tmp/tmptivg76_4.lua:3: in local 'candidate'\n\t/tmp/tmptivg76_4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.120 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local dict = {}\n  for i = 1, #l1 do\n    dict[l1[i]] = {l2[i], l3[i]}\n  end\n  return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_gjjbg0.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpp_gjjbg0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {\n            [l2[i]] = l3[i]\n        }\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpclozkqdq.lua:15: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\"=85},\n    S002={\"Leyton Marsh\"=98},\n    S003={\"Duncan Boyle\"=89},\n    S004={\"Saim Richards\"=92}\n}\nstack traceback:\n\t/tmp/tmpclozkqdq.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local l1_len = #l1\n    local l2_len = #l2\n    local l3_len = #l3\n    local l1_dict = {}\n    local l2_dict = {}\n    local l3_dict = {}\n    for i = 1, l1_len do\n        l1_dict[l1[i]] = l1[i]\n    end\n    for i = 1, l2_len do\n        l2_dict[l2[i]] = l2[i]\n    end\n    for i = 1, l3_len do\n        l3_dict[l3[i]] = l3[i]\n    end\n    return l1_dict, l2_dict, l3_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao4zjhl.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9ao4zjhl.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n\tlocal d = {}\n\tfor i = 1, #l1 do\n\t\td[l1[i]] = {l2[i], l3[i]}\n\tend\n\treturn d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4tbe0j4l.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp4tbe0j4l.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {\n            [l2[i]] = l3[i]\n        }\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgru5y4nd.lua:15: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\"=85},\n    S002={\"Leyton Marsh\"=98},\n    S003={\"Duncan Boyle\"=89},\n    S004={\"Saim Richards\"=92}\n}\nstack traceback:\n\t/tmp/tmpgru5y4nd.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao4zjhl.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9ao4zjhl.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao4zjhl.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9ao4zjhl.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao4zjhl.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9ao4zjhl.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local l1_len = #l1\n    local l2_len = #l2\n    local l3_len = #l3\n    local max_len = math.max(l1_len, l2_len, l3_len)\n    local result = {}\n    for i = 1, max_len do\n        local l1_item = l1[i] or \"\"\n        local l2_item = l2[i] or \"\"\n        local l3_item = l3[i] or \"\"\n        result[i] = {\n            l1_item,\n            l2_item,\n            l3_item\n        }\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjohjpuwj.lua:24: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    {\"S001\", \"Adina Park\", 85},\n    {\"S002\", \"Leyton Marsh\", 98},\n    {\"S003\", \"Duncan Boyle\", 89},\n    {\"S004\", \"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpjohjpuwj.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    result[l1[i]] = {l2[i], l3[i]}\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgayjfwu.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmphgayjfwu.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        local key = l1[i]\n        local value = l2[i]\n        local value2 = l3[i]\n        dict[key] = {value, value2}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5amztud.lua:16: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpw5amztud.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        result[l1[i]] = {l2[i], l3[i]}\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3uvs2tp.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpo3uvs2tp.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao4zjhl.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9ao4zjhl.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao4zjhl.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9ao4zjhl.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n\tlocal d = {}\n\tfor i = 1, #l1 do\n\t\td[l1[i]] = { l2[i], l3[i] }\n\tend\n\treturn d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3y1y2rc.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmph3y1y2rc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {[l2[i]] = l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnp897dck.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\"=85},\n    S002={\"Leyton Marsh\"=98},\n    S003={\"Duncan Boyle\"=89},\n    S004={\"Saim Richards\"=92}\n}\nstack traceback:\n\t/tmp/tmpnp897dck.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao4zjhl.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9ao4zjhl.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local dict = {}\n  for i = 1, #l1 do\n    dict[l1[i]] = {l2[i], l3[i]}\n  end\n  return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_gjjbg0.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpp_gjjbg0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao4zjhl.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9ao4zjhl.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        result[l1[i]] = {l2[i], l3[i]}\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3uvs2tp.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpo3uvs2tp.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao4zjhl.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9ao4zjhl.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao4zjhl.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9ao4zjhl.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = { l2[i], l3[i] }\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3u9o6fmy.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp3u9o6fmy.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao4zjhl.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9ao4zjhl.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao4zjhl.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9ao4zjhl.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i, v in ipairs(l1) do\n    d[v] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxxwugvw.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpjxxwugvw.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i, v in ipairs(l1) do\n    d[v] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxxwugvw.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpjxxwugvw.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    result[l1[i]] = {l2[i], l3[i]}\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgayjfwu.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmphgayjfwu.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local dict = {}\n  for i, v in ipairs(l1) do\n    dict[v] = {l2[i], l3[i]}\n  end\n  return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfiy4xyg.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmphfiy4xyg.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    result[l1[i]] = {l2[i], l3[i]}\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgayjfwu.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmphgayjfwu.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    local dict_list = {l1, l2, l3}\n    for i = 1, #dict_list do\n        for j = 1, #dict_list[i] do\n            dict[dict_list[i][j]] = dict_list[i][j]\n        end\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37ooz1n9.lua:16: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    85=85,\n    89=89,\n    92=92,\n    98=98,\n    \"Adina Park\"=\"Adina Park\",\n    \"Duncan Boyle\"=\"Duncan Boyle\",\n    \"Leyton Marsh\"=\"Leyton Marsh\",\n    S001=\"S001\",\n    S002=\"S002\",\n    S003=\"S003\",\n    S004=\"S004\",\n    \"Saim Richards\"=\"Saim Richards\"\n}\nstack traceback:\n\t/tmp/tmp37ooz1n9.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i, v in ipairs(l1) do\n    d[v] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxxwugvw.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpjxxwugvw.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i, v in ipairs(l1) do\n    d[v] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxxwugvw.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpjxxwugvw.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {\n      [l2[i]] = l3[i]\n    }\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgj_slcx.lua:15: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\"=85},\n    S002={\"Leyton Marsh\"=98},\n    S003={\"Duncan Boyle\"=89},\n    S004={\"Saim Richards\"=92}\n}\nstack traceback:\n\t/tmp/tmpzgj_slcx.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao4zjhl.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9ao4zjhl.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        result[l1[i]] = {l2[i], l3[i]}\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3uvs2tp.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpo3uvs2tp.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i=1, #l1 do\n    d[l1[i]] = { l2[i], l3[i] }\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpluvfrb5e.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpluvfrb5e.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = { l2[i], l3[i] }\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvz2i_mef.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpvz2i_mef.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n\tlocal d = {}\n\tfor i, v in ipairs(l1) do\n\t\td[v] = {l2[i], l3[i]}\n\tend\n\treturn d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqp7jf5jp.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpqp7jf5jp.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i, v in ipairs(l1) do\n        d[v] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao4zjhl.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9ao4zjhl.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        result[l1[i]] = {l2[i], l3[i]}\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3uvs2tp.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpo3uvs2tp.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i, v in ipairs(l1) do\n    d[v] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxxwugvw.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpjxxwugvw.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i = 1, #l1 do\n    d[l1[i]] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z47ew4g.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp9z47ew4g.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    local dict_list = {l1, l2, l3}\n    for i, v in ipairs(dict_list) do\n        for j, k in ipairs(v) do\n            dict[k] = j\n        end\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpc511fd.lua:16: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    85=1,\n    89=3,\n    92=4,\n    98=2,\n    \"Adina Park\"=1,\n    \"Duncan Boyle\"=3,\n    \"Leyton Marsh\"=2,\n    S001=1,\n    S002=2,\n    S003=3,\n    S004=4,\n    \"Saim Richards\"=4\n}\nstack traceback:\n\t/tmp/tmprpc511fd.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local dict = {}\n    for i = 1, #l1 do\n        dict[l1[i]] = {l2[i], l3[i]}\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2f_xp3y.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpq2f_xp3y.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n  local d = {}\n  for i, v in ipairs(l1) do\n    d[v] = {l2[i], l3[i]}\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxxwugvw.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpjxxwugvw.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        result[l1[i]] = {l2[i], l3[i]}\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3uvs2tp.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpo3uvs2tp.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = { l2[i], l3[i] }\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvz2i_mef.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmpvz2i_mef.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n\tlocal d = {}\n\tfor i = 1, #l1 do\n\t\td[l1[i]] = {l2[i], l3[i]}\n\tend\n\treturn d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123536,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4tbe0j4l.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp4tbe0j4l.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n    local d = {}\n    for i = 1, #l1 do\n        d[l1[i]] = {l2[i], l3[i]}\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509672,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hck_0kk.lua:13: expected: \n{\n    {S001={\"Adina Park\"=85}},\n    {S002={\"Leyton Marsh\"=98}},\n    {S003={\"Duncan Boyle\"=89}},\n    {S004={\"Saim Richards\"=92}}\n}\nactual: \n{\n    S001={\"Adina Park\", 85},\n    S002={\"Leyton Marsh\", 98},\n    S003={\"Duncan Boyle\", 89},\n    S004={\"Saim Richards\", 92}\n}\nstack traceback:\n\t/tmp/tmp2hck_0kk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}