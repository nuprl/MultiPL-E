{
  "name": "mbpp_95_Find_Min_Length",
  "language": "lua",
  "prompt": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local length = #v\n            if length < min_length then\n                min_length = length\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_len = math.huge\n\tfor i,v in ipairs(lst) do\n\t\tif type(v) ~= \"table\" then\n\t\t\terror(\"Argument must be a list of lists.\")\n\t\tend\n\t\tif #v < min_len then\n\t\t\tmin_len = #v\n\t\tend\n\tend\n\treturn min_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = #lst[1]\n\tfor i = 2, #lst do\n\t\tif #lst[i] < min then\n\t\t\tmin = #lst[i]\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == 'table' then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal l = #v\n\t\t\tif l < min then\n\t\t\t\tmin = l\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tmin = math.min(min, #v)\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local length = #v\n            if length < min_length then\n                min_length = length\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in pairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local length = #v\n            if length < min_length then\n                min_length = length\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_len = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min_len then\n                min_len = len\n            end\n        end\n    end\n    return min_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, l in ipairs(lst) do\n        min_length = math.min(min_length, #l)\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, sub_lst in ipairs(lst) do\n        local sub_lst_length = #sub_lst\n        if sub_lst_length < min_length then\n            min_length = sub_lst_length\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n  local min = math.huge\n  for i = 1, #lst do\n    if #lst[i] < min then\n      min = #lst[i]\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _,v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_length = math.huge\n\tfor i = 1, #lst do\n\t\tif #lst[i] < min_length then\n\t\t\tmin_length = #lst[i]\n\t\tend\n\tend\n\treturn min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_length = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal length = #v\n\t\t\tif length < min_length then\n\t\t\t\tmin_length = length\n\t\t\tend\n\t\tend\n\tend\n\treturn min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, sub_lst in ipairs(lst) do\n        min_length = math.min(min_length, #sub_lst)\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in pairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for i = 1, #lst do\n        if #lst[i] < min_length then\n            min_length = #lst[i]\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local length = #v\n            if length < min_length then\n                min_length = length\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor i = 1, #lst do\n\t\tlocal len = #lst[i]\n\t\tif len < min then\n\t\t\tmin = len\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _,v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for i = 1, #lst do\n        if #lst[i] < min_length then\n            min_length = #lst[i]\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_length = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal length = #v\n\t\t\tif length < min_length then\n\t\t\t\tmin_length = length\n\t\t\tend\n\t\tend\n\tend\n\treturn min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if #v < min then\n            min = #v\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor i, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == 'table' then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min_length then\n                min_length = len\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor i = 1, #lst do\n\t\tif #lst[i] < min then\n\t\t\tmin = #lst[i]\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tmin = math.min(min, #v)\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n  local min = math.huge\n  for _, v in ipairs(lst) do\n    if type(v) == \"table\" then\n      local l = #v\n      if l < min then\n        min = l\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _,v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, sub_lst in ipairs(lst) do\n        local length = #sub_lst\n        if length < min_length then\n            min_length = length\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tmin = math.min(min, #v)\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            min = math.min(min, #v)\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n  local min = math.huge\n  for _, v in ipairs(lst) do\n    if type(v) == \"table\" then\n      local len = #v\n      if len < min then\n        min = len\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_length = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif #v < min_length then\n\t\t\tmin_length = #v\n\t\tend\n\tend\n\treturn min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == 'table' then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in pairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n  local min_length = math.huge\n  for _, v in ipairs(lst) do\n    if type(v) == \"table\" then\n      local length = #v\n      if length < min_length then\n        min_length = length\n      end\n    end\n  end\n  return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif #v < min then\n\t\t\tmin = #v\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, sub_lst in ipairs(lst) do\n        local length = #sub_lst\n        if length < min_length then\n            min_length = length\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local length = #v\n            if length < min_length then\n                min_length = length\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, sublist in ipairs(lst) do\n        if #sublist < min then\n            min = #sublist\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for i = 1, #lst do\n        if #lst[i] < min then\n            min = #lst[i]\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n  local min_len = math.huge\n  for _, v in ipairs(lst) do\n    local len = #v\n    if len < min_len then\n      min_len = len\n    end\n  end\n  return min_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _,v in ipairs(lst) do\n        if #v < min then\n            min = #v\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tmin = math.min(min, #v)\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _,v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tmin = math.min(min, #v)\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tmin = math.min(min, #v)\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, sublist in ipairs(lst) do\n        if #sublist < min then\n            min = #sublist\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for i,v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local length = #v\n            if length < min_length then\n                min_length = length\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            min = math.min(min, #v)\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _,v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = #lst[1]\n\tfor i = 2, #lst do\n\t\tif #lst[i] < min then\n\t\t\tmin = #lst[i]\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for i = 1, #lst do\n        if #lst[i] < min then\n            min = #lst[i]\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min_length then\n                min_length = len\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_len = math.huge\n    for _,v in ipairs(lst) do\n        if type(v) == \"table\" then\n            min_len = math.min(min_len, #v)\n        end\n    end\n    return min_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            min = math.min(min, #v)\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, sub_lst in ipairs(lst) do\n        local sub_lst_length = #sub_lst\n        if sub_lst_length < min_length then\n            min_length = sub_lst_length\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local length = #v\n            if length < min_length then\n                min_length = length\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local length = #v\n            if length < min_length then\n                min_length = length\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _,v in ipairs(lst) do\n\t\tif #v < min then\n\t\t\tmin = #v\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for i, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = #lst[1]\n\tfor i = 2, #lst do\n\t\tif #lst[i] < min then\n\t\t\tmin = #lst[i]\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n  local min = math.huge\n  for i = 1, #lst do\n    if #lst[i] < min then\n      min = #lst[i]\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor i,v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _,v in ipairs(lst) do\n\t\tif #v < min then\n\t\t\tmin = #v\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_length = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tmin_length = math.min(min_length, #v)\n\t\tend\n\tend\n\treturn min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor i = 1, #lst do\n\t\tlocal len = #lst[i]\n\t\tif len < min then\n\t\t\tmin = len\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _,v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tmin = math.min(min, #v)\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_len = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min_len then\n\t\t\t\tmin_len = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for i, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local length = #v\n            if length < min_length then\n                min_length = length\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local length = #v\n            if length < min_length then\n                min_length = length\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor i = 1, #lst do\n\t\tif #lst[i] < min then\n\t\t\tmin = #lst[i]\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n  local min = math.huge\n  for _, v in ipairs(lst) do\n    if type(v) == \"table\" then\n      local len = #v\n      if len < min then\n        min = len\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local length = #v\n            if length < min_length then\n                min_length = length\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_len = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min_len then\n                min_len = len\n            end\n        end\n    end\n    return min_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n  local min = math.huge\n  for _, v in ipairs(lst) do\n    if type(v) == 'table' then\n      local len = #v\n      if len < min then\n        min = len\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor i = 1, #lst do\n\t\tif #lst[i] < min then\n\t\t\tmin = #lst[i]\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _,v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_length = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal length = #v\n\t\t\tif length < min_length then\n\t\t\t\tmin_length = length\n\t\t\tend\n\t\tend\n\tend\n\treturn min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if #v < min_length then\n            min_length = #v\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            min = math.min(min, #v)\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tmin = math.min(min, #v)\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tmin = math.min(min, #v)\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _,v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tmin = math.min(min, #v)\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min_length then\n                min_length = len\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, sub_lst in ipairs(lst) do\n        local length = #sub_lst\n        if length < min_length then\n            min_length = length\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tmin = math.min(min, #v)\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _,v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min_length then\n                min_length = len\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, sublist in ipairs(lst) do\n        if #sublist < min_length then\n            min_length = #sublist\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor i = 1, #lst do\n\t\tif #lst[i] < min then\n\t\t\tmin = #lst[i]\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_length = math.huge\n\tfor i = 1, #lst do\n\t\tif #lst[i] < min_length then\n\t\t\tmin_length = #lst[i]\n\t\tend\n\tend\n\treturn min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_length = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tmin_length = math.min(min_length, #v)\n\tend\n\treturn min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local length = #v\n            if length < min_length then\n                min_length = length\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, sub_lst in ipairs(lst) do\n        local length = #sub_lst\n        if length < min_length then\n            min_length = length\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min_length then\n                min_length = len\n            end\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, l in ipairs(lst) do\n        if #l < min_length then\n            min_length = #l\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n  local min = math.huge\n  for _, v in ipairs(lst) do\n    min = math.min(min, #v)\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_len = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif #v < min_len then\n\t\t\tmin_len = #v\n\t\tend\n\tend\n\treturn min_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_length = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal length = #v\n\t\t\tif length < min_length then\n\t\t\t\tmin_length = length\n\t\t\tend\n\t\tend\n\tend\n\treturn min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_length = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal length = #v\n\t\t\tif length < min_length then\n\t\t\t\tmin_length = length\n\t\t\tend\n\t\tend\n\tend\n\treturn min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_len = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min_len then\n                min_len = len\n            end\n        end\n    end\n    return min_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = #lst[1]\n    for i = 2, #lst do\n        if #lst[i] < min then\n            min = #lst[i]\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_length = math.huge\n\tfor _, sub_lst in pairs(lst) do\n\t\tlocal length = #sub_lst\n\t\tif length < min_length then\n\t\t\tmin_length = length\n\t\tend\n\tend\n\treturn min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, l in ipairs(lst) do\n        if #l < min_length then\n            min_length = #l\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, sub_lst in ipairs(lst) do\n        local length = #sub_lst\n        if length < min_length then\n            min_length = length\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n  local min_length = math.huge\n  for _, l in ipairs(lst) do\n    if #l < min_length then\n      min_length = #l\n    end\n  end\n  return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tmin = math.min(min, #v)\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_length = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal length = #v\n\t\t\tif length < min_length then\n\t\t\t\tmin_length = length\n\t\t\tend\n\t\tend\n\tend\n\treturn min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        local length = #v\n        if length < min_length then\n            min_length = length\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in pairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for i = 1, #lst do\n        if #lst[i] < min then\n            min = #lst[i]\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, v in ipairs(lst) do\n        min_length = math.min(min_length, #v)\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_len = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min_len then\n                min_len = len\n            end\n        end\n    end\n    return min_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, l in ipairs(lst) do\n        if #l < min_length then\n            min_length = #l\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_length = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tmin_length = math.min(min_length, #v)\n\tend\n\treturn min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n  local min = math.huge\n  for _, v in ipairs(lst) do\n    if type(v) == \"table\" then\n      local len = #v\n      if len < min then\n        min = len\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n  local min_len = math.huge\n  for _, v in ipairs(lst) do\n    if type(v) == \"table\" then\n      local len = #v\n      if len < min_len then\n        min_len = len\n      end\n    end\n  end\n  return min_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_len = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min_len then\n                min_len = len\n            end\n        end\n    end\n    return min_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, sub_lst in ipairs(lst) do\n        local length = #sub_lst\n        if length < min_length then\n            min_length = length\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor i = 1, #lst do\n\t\tif #lst[i] < min then\n\t\t\tmin = #lst[i]\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for i = 1, #lst do\n        local length = #lst[i]\n        if length < min_length then\n            min_length = length\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, l in ipairs(lst) do\n        local length = #l\n        if length < min_length then\n            min_length = length\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_length = math.huge\n\tfor _, l in ipairs(lst) do\n\t\tif #l < min_length then\n\t\t\tmin_length = #l\n\t\tend\n\tend\n\treturn min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tmin = math.min(min, #v)\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_length = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal length = #v\n\t\t\tif length < min_length then\n\t\t\t\tmin_length = length\n\t\t\tend\n\t\tend\n\tend\n\treturn min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n  local min = math.huge\n  for _, v in ipairs(lst) do\n    if type(v) == \"table\" then\n      local len = #v\n      if len < min then\n        min = len\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor i,v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _,v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tmin = math.min(min, #v)\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tmin = math.min(min, #v)\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min_len = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tmin_len = math.min(min_len, #v)\n\tend\n\treturn min_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, sub_lst in ipairs(lst) do\n        if #sub_lst < min_length then\n            min_length = #sub_lst\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, l in ipairs(lst) do\n        if #l < min_length then\n            min_length = #l\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n  local min = math.huge\n  for _, v in ipairs(lst) do\n    if type(v) == \"table\" then\n      local len = #v\n      if len < min then\n        min = len\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in pairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len < min then\n                min = len\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n  local min = math.huge\n  for _, v in ipairs(lst) do\n    if type(v) == \"table\" then\n      local len = #v\n      if len < min then\n        min = len\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min_length = math.huge\n    for _, sub_lst in ipairs(lst) do\n        local length = #sub_lst\n        if length < min_length then\n            min_length = length\n        end\n    end\n    return min_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tmin = math.min(min, #v)\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n  local min_len = math.huge\n  for _, v in ipairs(lst) do\n    if type(v) == \"table\" then\n      local len = #v\n      if len < min_len then\n        min_len = len\n      end\n    end\n  end\n  return min_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n    local min = math.huge\n    for _, v in ipairs(lst) do\n        if #v < min then\n            min = #v\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123962,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n\tlocal min = math.huge\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509978,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}