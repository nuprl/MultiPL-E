{
  "name": "mbpp_11_remove_Occ",
  "language": "lua",
  "prompt": "-- Write a python function to remove first and last occurrence of a given character from the string.\nlocal function remove_Occ(s, ch)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_Occ\n    lu.assertEquals(candidate('hello', 'l'), 'heo')\n    lu.assertEquals(candidate('abcda', 'a'), 'bcd')\n    lu.assertEquals(candidate('PHP', 'P'), 'H')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local i = s:find(ch)\n    local j = s:find(ch, -1, true)\n    return s:sub(1, i - 1) .. s:sub(j + 1)\nend",
    "  local i = s:find(ch)\n  local j = s:find(ch, -1, true)\n  return s:sub(1, i - 1) .. s:sub(i + 1, j - 1) .. s:sub(j + 1)\nend",
    "    local i = s:find(ch)\n    local j = s:find(ch, -1, true)\n    return s:sub(1, i - 1) .. s:sub(i + 1, j - 1) .. s:sub(j + 1)\nend",
    "    local i = s:find(ch)\n    local j = s:find(ch, -1, true)\n    return s:sub(1, i - 1) .. s:sub(i + 1, j - 1) .. s:sub(j + 1)\nend",
    "    local i = s:find(ch)\n    local j = s:reverse():find(ch)\n    return s:sub(1, i-1) .. s:sub(i+1, -j) .. s:sub(-j+2)\nend",
    "    local i = s:find(ch)\n    local j = s:find(ch, -1, true)\n    return s:sub(1, i - 1) .. s:sub(i + 1, j - 1) .. s:sub(j + 1)\nend",
    "  local i = s:find(ch)\n  local j = s:find(ch, -1, true)\n  if i and j then\n    return s:sub(1, i-1) .. s:sub(i+1, j-1) .. s:sub(j+1)\n  else\n    return s\n  end\nend",
    "\tlocal s1 = s:gsub(\"^\"..ch, \"\")\n\tlocal s2 = s1:gsub(ch..\"$\", \"\")\n\treturn s2\nend",
    "  local i = s:find(ch)\n  local j = s:find(ch, i + 1)\n  return s:sub(1, i - 1) .. s:sub(j + 1)\nend",
    "    local i = s:find(ch)\n    local j = s:find(ch, -1, true)\n    return s:sub(1, i - 1) .. s:sub(i + 1, j - 1) .. s:sub(j + 1)\nend",
    "  local i = s:find(ch)\n  local j = s:reverse():find(ch)\n  local k = s:len() - j + 1\n  return s:sub(1, i - 1) .. s:sub(i + 1, k - 1) .. s:sub(k + 1)\nend",
    "  local i = s:find(ch)\n  local j = s:find(ch, -1, true)\n  return s:sub(1, i - 1) .. s:sub(j + 1)\nend",
    "    local i = s:find(ch)\n    local j = s:reverse():find(ch)\n    return s:sub(1, i - 1) .. s:sub(i + 1, -j - 1) .. s:sub(-j + 1)\nend",
    "    local i = s:find(ch)\n    if i == nil then\n        return s\n    end\n    local j = s:find(ch, i + 1)\n    if j == nil then\n        return s:sub(1, i - 1)\n    end\n    return s:sub(1, i - 1) .. s:sub(j + 1)\nend",
    "    local i = s:find(ch)\n    local j = s:find(ch, i + 1)\n    local k = s:find(ch, j + 1)\n    return s:sub(1, i - 1) .. s:sub(j + 1, k - 1) .. s:sub(k + 1)\nend",
    "    local i = s:find(ch)\n    local j = s:reverse():find(ch)\n    return s:sub(1, i-1) .. s:sub(i+1, -j) .. s:sub(-j+2)\nend",
    "    local i = s:find(ch)\n    if i then\n        s = s:sub(1, i - 1) .. s:sub(i + 1)\n    end\n    local j = s:find(ch)\n    if j then\n        s = s:sub(1, j - 1) .. s:sub(j + 1)\n    end\n    return s\nend",
    "    local i, j = s:find(ch)\n    local k, l = s:find(ch, -1, true)\n    return s:sub(1, i-1) .. s:sub(j+1, k-1) .. s:sub(l+1)\nend",
    "    local s1 = s:gsub(ch, \"\")\n    local s2 = s1:gsub(ch, \"\")\n    return s2\nend",
    "  local i, j = s:find(ch)\n  if i and j then\n    return s:sub(1, i-1) .. s:sub(j+1)\n  else\n    return s\n  end\nend"
  ]
}