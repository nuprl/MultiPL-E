{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "lua",
  "prompt": "-- Write a function to remove consecutive duplicates of a given list.\nlocal function consecutive_duplicates(nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = consecutive_duplicates\n    lu.assertEquals(candidate({0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4})\n    lu.assertEquals(candidate({10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}), {10, 15, 19, 18, 17, 26, 17, 18, 10})\n    lu.assertEquals(candidate({'a', 'a', 'b', 'c', 'd', 'd'}), {'a', 'b', 'c', 'd'})\n    lu.assertEquals(candidate({'a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'}), {'a', 'b', 'c', 'd', 'a'})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local result = {}\n  local last = nil\n  for _, n in ipairs(nums) do\n    if n ~= last then\n      result[#result + 1] = n\n      last = n\n    end\n  end\n  return result\nend",
    "  local result = {}\n  local last = nil\n  for _, num in ipairs(nums) do\n    if num ~= last then\n      table.insert(result, num)\n      last = num\n    end\n  end\n  return result\nend",
    "    local result = {}\n    local last = nil\n    for _, num in ipairs(nums) do\n        if num ~= last then\n            table.insert(result, num)\n            last = num\n        end\n    end\n    return result\nend",
    "  local result = {}\n  local last = nil\n  for _, num in ipairs(nums) do\n    if num ~= last then\n      table.insert(result, num)\n      last = num\n    end\n  end\n  return result\nend",
    "  local result = {}\n  local last = nil\n  for _, num in ipairs(nums) do\n    if num ~= last then\n      table.insert(result, num)\n      last = num\n    end\n  end\n  return result\nend",
    "  local result = {}\n  local last = nil\n  for _, num in ipairs(nums) do\n    if num ~= last then\n      table.insert(result, num)\n      last = num\n    end\n  end\n  return result\nend",
    "    local result = {}\n    local last = nil\n    for _, num in ipairs(nums) do\n        if num ~= last then\n            table.insert(result, num)\n            last = num\n        end\n    end\n    return result\nend",
    "    local result = {}\n    local last = nil\n    for _, num in ipairs(nums) do\n        if num ~= last then\n            table.insert(result, num)\n            last = num\n        end\n    end\n    return result\nend",
    "  local result = {}\n  local last = nil\n  for _, num in ipairs(nums) do\n    if num ~= last then\n      table.insert(result, num)\n      last = num\n    end\n  end\n  return result\nend",
    "  local result = {}\n  local last = nil\n  for _, num in ipairs(nums) do\n    if num ~= last then\n      table.insert(result, num)\n      last = num\n    end\n  end\n  return result\nend",
    "  local result = {}\n  local last = nil\n  for _, num in ipairs(nums) do\n    if num ~= last then\n      table.insert(result, num)\n      last = num\n    end\n  end\n  return result\nend",
    "  local result = {}\n  local last = nil\n  for i, v in ipairs(nums) do\n    if v ~= last then\n      result[#result + 1] = v\n      last = v\n    end\n  end\n  return result\nend",
    "  local result = {}\n  local last = nil\n  for _, num in ipairs(nums) do\n    if num ~= last then\n      result[#result + 1] = num\n      last = num\n    end\n  end\n  return result\nend",
    "    local result = {}\n    local last = nil\n    for _, num in ipairs(nums) do\n        if num ~= last then\n            table.insert(result, num)\n            last = num\n        end\n    end\n    return result\nend",
    "  local result = {}\n  local last = nil\n  for _, n in ipairs(nums) do\n    if n ~= last then\n      table.insert(result, n)\n      last = n\n    end\n  end\n  return result\nend",
    "  local result = {}\n  local last = nil\n  for _, n in ipairs(nums) do\n    if n ~= last then\n      table.insert(result, n)\n      last = n\n    end\n  end\n  return result\nend",
    "  local result = {}\n  local last = nil\n  for _, num in ipairs(nums) do\n    if num ~= last then\n      result[#result + 1] = num\n      last = num\n    end\n  end\n  return result\nend",
    "  local result = {}\n  local last_num = nil\n  for _, num in ipairs(nums) do\n    if num ~= last_num then\n      table.insert(result, num)\n      last_num = num\n    end\n  end\n  return result\nend",
    "    local result = {}\n    local last = nil\n    for _, num in ipairs(nums) do\n        if num ~= last then\n            table.insert(result, num)\n            last = num\n        end\n    end\n    return result\nend",
    "  local result = {}\n  local last = nil\n  for _, n in ipairs(nums) do\n    if n ~= last then\n      table.insert(result, n)\n      last = n\n    end\n  end\n  return result\nend"
  ]
}