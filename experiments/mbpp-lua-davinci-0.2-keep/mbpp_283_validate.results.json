{
  "name": "mbpp_283_validate",
  "language": "lua",
  "prompt": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    digits[d] = (digits[d] or 0) + 1\n  end\n  for d, c in pairs(digits) do\n    if c > tonumber(d) then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local n = tostring(n)\n    local freq = {}\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        freq[digit] = (freq[digit] or 0) + 1\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        if freq[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for i = 0, 9 do\n    digits[i] = 0\n  end\n  while n > 0 do\n    local digit = n % 10\n    digits[digit] = digits[digit] + 1\n    n = math.floor(n / 10)\n  end\n  for i = 0, 9 do\n    if digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local n = tostring(n)\n    local count = {}\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        count[digit] = (count[digit] or 0) + 1\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        if count[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 0, 9 do\n        if digits[i] ~= nil and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = math.abs(n)\n  while n > 0 do\n    local digit = n % 10\n    if digits[digit] then\n      digits[digit] = digits[digit] + 1\n    else\n      digits[digit] = 1\n    end\n    n = math.floor(n / 10)\n  end\n  for digit, count in pairs(digits) do\n    if count > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local n = tostring(n)\n    local digits = {}\n    for i = 1, #n do\n        local digit = n:sub(i,i)\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 1, #n do\n        local digit = n:sub(i,i)\n        if digits[digit] > tonumber(digit) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        if digits[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 0, 9 do\n        if digits[i] ~= nil and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local n = tostring(n)\n  local digits = {}\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] then\n      digits[digit] = digits[digit] + 1\n    else\n      digits[digit] = 1\n    end\n  end\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for digit, count in pairs(digits) do\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i,i))\n\t\tif digits[digit] then\n\t\t\tdigits[digit] = digits[digit] + 1\n\t\telse\n\t\t\tdigits[digit] = 1\n\t\tend\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i,i))\n    if digits[digit] then\n      digits[digit] = digits[digit] + 1\n    else\n      digits[digit] = 1\n    end\n  end\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i,i))\n    if digits[digit] > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    digits[d] = (digits[d] or 0) + 1\n  end\n  for d, count in pairs(digits) do\n    if count > tonumber(d) then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local n = tostring(n)\n    local digits = {}\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] then\n            digits[digit] = digits[digit] + 1\n        else\n            digits[digit] = 1\n        end\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for i = 0, 9 do\n    digits[i] = 0\n  end\n  while n > 0 do\n    local digit = n % 10\n    digits[digit] = digits[digit] + 1\n    n = math.floor(n / 10)\n  end\n  for i = 0, 9 do\n    if digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    digits[d] = (digits[d] or 0) + 1\n  end\n  for d, f in pairs(digits) do\n    if f > tonumber(d) then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i, i))\n\t\tdigits[digit] = (digits[digit] or 0) + 1\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for i = 0, 9 do\n    digits[i] = 0\n  end\n  while n > 0 do\n    local digit = n % 10\n    digits[digit] = digits[digit] + 1\n    n = math.floor(n / 10)\n  end\n  for i = 0, 9 do\n    if digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i,i))\n\t\tif digits[digit] then\n\t\t\tdigits[digit] = digits[digit] + 1\n\t\telse\n\t\t\tdigits[digit] = 1\n\t\tend\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local freq = {}\n    for i = 0, 9 do\n        freq[i] = 0\n    end\n    while n > 0 do\n        local d = n % 10\n        freq[d] = freq[d] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if freq[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        digits[d] = (digits[d] or 0) + 1\n    end\n    for d, f in pairs(digits) do\n        if f > tonumber(d) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] and digits[digit] + 1 or 1\n        n = math.floor(n / 10)\n    end\n    for k, v in pairs(digits) do\n        if v > k then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] then\n            digits[digit] = digits[digit] + 1\n        else\n            digits[digit] = 1\n        end\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal t = {}\n\twhile n > 0 do\n\t\tlocal d = n % 10\n\t\tt[d] = (t[d] or 0) + 1\n\t\tn = math.floor(n / 10)\n\tend\n\tfor i = 0, 9 do\n\t\tif t[i] and t[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for i = 0, 9 do\n    digits[i] = 0\n  end\n  while n > 0 do\n    local digit = n % 10\n    digits[digit] = digits[digit] + 1\n    n = math.floor(n / 10)\n  end\n  for i = 0, 9 do\n    if digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        if digits[n:sub(i, i)] then\n            digits[n:sub(i, i)] = digits[n:sub(i, i)] + 1\n        else\n            digits[n:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #n do\n        if digits[n:sub(i, i)] > tonumber(n:sub(i, i)) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local digits_count = {}\n  local n_str = tostring(n)\n  for i = 1, #n_str do\n    local digit = tonumber(n_str:sub(i, i))\n    if digits[digit] == nil then\n      digits[digit] = true\n      digits_count[digit] = 1\n    else\n      digits_count[digit] = digits_count[digit] + 1\n    end\n  end\n  for digit, count in pairs(digits_count) do\n    if count > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = math.abs(n)\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for digit, count in pairs(digits) do\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for i = 0, 9 do\n    digits[i] = 0\n  end\n  while n > 0 do\n    local digit = n % 10\n    digits[digit] = digits[digit] + 1\n    n = math.floor(n / 10)\n  end\n  for i = 0, 9 do\n    if digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local d = tonumber(n:sub(i, i))\n        if digits[d] == nil then\n            digits[d] = 1\n        else\n            digits[d] = digits[d] + 1\n        end\n    end\n    for i = 1, #n do\n        local d = tonumber(n:sub(i, i))\n        if digits[d] > d then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local n = tostring(n)\n    local digits = {}\n    for i = 1, #n do\n        local digit = n:sub(i, i)\n        digits[digit] = (digits[digit] or 0) + 1\n    end\n    for i = 1, #n do\n        local digit = n:sub(i, i)\n        if digits[digit] > tonumber(digit) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local freq = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i,i))\n    if not digits[digit] then\n      digits[digit] = true\n      freq[digit] = 1\n    else\n      freq[digit] = freq[digit] + 1\n    end\n  end\n  for i = 0, 9 do\n    if freq[i] and freq[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        digits[digit] = (digits[digit] or 0) + 1\n    end\n    for i = 0, 9 do\n        if digits[i] and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tfor i = 0, 9 do\n\t\tdigits[i] = 0\n\tend\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\tdigits[digit] = digits[digit] + 1\n\t\tn = math.floor(n / 10)\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = n\n    while n > 0 do\n        local d = n % 10\n        n = math.floor(n / 10)\n        digits[d] = (digits[d] or 0) + 1\n    end\n    for k, v in pairs(digits) do\n        if v > k then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for digit, count in pairs(digits) do\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for i = 0, 9 do\n    digits[i] = 0\n  end\n  while n > 0 do\n    local digit = n % 10\n    digits[digit] = digits[digit] + 1\n    n = math.floor(n / 10)\n  end\n  for i = 0, 9 do\n    if digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] then\n            digits[digit] = digits[digit] + 1\n        else\n            digits[digit] = 1\n        end\n    end\n    for i = 0, 9 do\n        if digits[i] and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal n = tostring(n)\n\tlocal freq = {}\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i, i))\n\t\tif freq[digit] == nil then\n\t\t\tfreq[digit] = 1\n\t\telse\n\t\t\tfreq[digit] = freq[digit] + 1\n\t\tend\n\tend\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i, i))\n\t\tif freq[digit] > digit then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i,i))\n\t\tif digits[digit] == nil then\n\t\t\tdigits[digit] = 1\n\t\telse\n\t\t\tdigits[digit] = digits[digit] + 1\n\t\tend\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] ~= nil and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = n\n  while n > 0 do\n    local digit = n % 10\n    if digits[digit] == nil then\n      digits[digit] = 1\n    else\n      digits[digit] = digits[digit] + 1\n    end\n    n = math.floor(n / 10)\n  end\n  for k, v in pairs(digits) do\n    if v > k then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = math.abs(n)\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for digit, count in pairs(digits) do\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    digits[n:sub(i,i)] = (digits[n:sub(i,i)] or 0) + 1\n  end\n  for i = 1, #n do\n    if digits[n:sub(i,i)] > tonumber(n:sub(i,i)) then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        local count = 0\n        for j = 1, #n do\n            if n:sub(j,j) == n:sub(i,i) then\n                count = count + 1\n            end\n        end\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = n\n    while n > 0 do\n        local digit = n % 10\n        n = math.floor(n / 10)\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for k, v in pairs(digits) do\n        if v > k then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        n = math.floor(n / 10)\n        digits[digit] = (digits[digit] or 0) + 1\n    end\n    for digit, count in pairs(digits) do\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local str = tostring(n)\n    local count = {}\n    for i = 1, #str do\n        local c = str:sub(i, i)\n        count[c] = (count[c] or 0) + 1\n    end\n    for i = 1, #str do\n        local c = str:sub(i, i)\n        if count[c] > tonumber(c) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i,i))\n\t\tif not digits[digit] then\n\t\t\tdigits[digit] = 1\n\t\telse\n\t\t\tdigits[digit] = digits[digit] + 1\n\t\tend\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for i = 0, 9 do\n    digits[i] = 0\n  end\n  while n > 0 do\n    local d = n % 10\n    digits[d] = digits[d] + 1\n    n = math.floor(n / 10)\n  end\n  for i = 0, 9 do\n    if digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] then\n            digits[digit] = digits[digit] + 1\n        else\n            digits[digit] = 1\n        end\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] == nil then\n      digits[digit] = 1\n    else\n      digits[digit] = digits[digit] + 1\n    end\n  end\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local d = n % 10\n        digits[d] = (digits[d] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    digits[d] = (digits[d] or 0) + 1\n  end\n  for d, f in pairs(digits) do\n    if f > tonumber(d) then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  while n > 0 do\n    local digit = n % 10\n    if digits[digit] == nil then\n      digits[digit] = 1\n    else\n      digits[digit] = digits[digit] + 1\n    end\n    n = math.floor(n / 10)\n  end\n  for k, v in pairs(digits) do\n    if v > k then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i, i))\n\t\tdigits[digit] = (digits[digit] or 0) + 1\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local str = tostring(n)\n    local count = {}\n    for i = 1, #str do\n        local c = str:sub(i, i)\n        count[c] = (count[c] or 0) + 1\n    end\n    for i = 1, #str do\n        local c = str:sub(i, i)\n        if count[c] > tonumber(c) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local t = {}\n  for i = 0, 9 do\n    t[i] = 0\n  end\n  while n > 0 do\n    local d = n % 10\n    t[d] = t[d] + 1\n    n = math.floor(n / 10)\n  end\n  for i = 0, 9 do\n    if t[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local t = {}\n    for i = 1, #n do\n        local c = n:sub(i, i)\n        t[c] = (t[c] or 0) + 1\n    end\n    for i = 1, #n do\n        local c = n:sub(i, i)\n        if t[c] > tonumber(c) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyvy1ct8l.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmpyvy1ct8l.lua:4: in local 'candidate'\n\t/tmp/tmpyvy1ct8l.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local n_str = tostring(n)\n    local n_len = #n_str\n    local freq = {}\n    for i = 1, n_len do\n        local digit = tonumber(n_str:sub(i, i))\n        if freq[digit] == nil then\n            freq[digit] = 1\n        else\n            freq[digit] = freq[digit] + 1\n        end\n    end\n    for i = 1, n_len do\n        local digit = tonumber(n_str:sub(i, i))\n        if freq[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal n = tostring(n)\n\tlocal freq = {}\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i, i))\n\t\tif freq[digit] == nil then\n\t\t\tfreq[digit] = 1\n\t\telse\n\t\t\tfreq[digit] = freq[digit] + 1\n\t\tend\n\tend\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i, i))\n\t\tif freq[digit] > digit then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal str = tostring(n)\n\tlocal freq = {}\n\tfor i = 1, #str do\n\t\tlocal digit = tonumber(str:sub(i, i))\n\t\tif freq[digit] then\n\t\t\tfreq[digit] = freq[digit] + 1\n\t\telse\n\t\t\tfreq[digit] = 1\n\t\tend\n\tend\n\tfor i = 1, #str do\n\t\tlocal digit = tonumber(str:sub(i, i))\n\t\tif freq[digit] > digit then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local n = tostring(n)\n    local freq = {}\n    for i = 1, #n do\n        freq[n:sub(i,i)] = (freq[n:sub(i,i)] or 0) + 1\n    end\n    for i = 1, #n do\n        if freq[n:sub(i,i)] > tonumber(n:sub(i,i)) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for digit, count in pairs(digits) do\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        digits[d] = (digits[d] or 0) + 1\n    end\n    for d, c in pairs(digits) do\n        if c > tonumber(d) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] == nil then\n      digits[digit] = 1\n    else\n      digits[digit] = digits[digit] + 1\n    end\n  end\n  for i = 0, 9 do\n    if digits[i] ~= nil and digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i, i))\n\t\tif digits[digit] then\n\t\t\tdigits[digit] = digits[digit] + 1\n\t\telse\n\t\t\tdigits[digit] = 1\n\t\tend\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        digits[d] = (digits[d] or 0) + 1\n    end\n    for d, f in pairs(digits) do\n        if f > tonumber(d) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal t = {}\n\twhile n > 0 do\n\t\tlocal d = n % 10\n\t\tn = math.floor(n / 10)\n\t\tt[d] = (t[d] or 0) + 1\n\tend\n\tfor i = 0, 9 do\n\t\tif t[i] and t[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for d in tostring(n):gmatch('%d') do\n        digits[d] = (digits[d] or 0) + 1\n    end\n    for d, f in pairs(digits) do\n        if tonumber(d) < f then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for digit, count in pairs(digits) do\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = n\n    while n > 0 do\n        local digit = n % 10\n        if digits[digit] then\n            digits[digit] = digits[digit] + 1\n        else\n            digits[digit] = 1\n        end\n        n = math.floor(n / 10)\n    end\n    for k, v in pairs(digits) do\n        if v > k then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    digits[d] = (digits[d] or 0) + 1\n  end\n  for d, f in pairs(digits) do\n    if f > tonumber(d) then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local t = {}\n    local s = tostring(n)\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        t[c] = (t[c] or 0) + 1\n    end\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if t[c] > tonumber(c) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        n = math.floor(n / 10)\n        digits[digit] = (digits[digit] or 0) + 1\n    end\n    for digit, count in pairs(digits) do\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local s = tostring(n)\n    local t = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if t[c] then\n            t[c] = t[c] + 1\n        else\n            t[c] = 1\n        end\n    end\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if t[c] > tonumber(c) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for i, count in pairs(digits) do\n        if count > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        digits[d] = (digits[d] or 0) + 1\n    end\n    for d, c in pairs(digits) do\n        if c > tonumber(d) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tfor d in tostring(n):gmatch(\"%d\") do\n\t\tdigits[d] = (digits[d] or 0) + 1\n\tend\n\tfor d, f in pairs(digits) do\n\t\tif f > tonumber(d) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = n\n  while n > 0 do\n    local digit = n % 10\n    n = math.floor(n / 10)\n    digits[digit] = (digits[digit] or 0) + 1\n  end\n  for i = 0, 9 do\n    if digits[i] and digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local str = tostring(n)\n    local freq = {}\n    for i = 1, #str do\n        local c = str:sub(i, i)\n        freq[c] = (freq[c] or 0) + 1\n    end\n    for i = 1, #str do\n        local c = str:sub(i, i)\n        if freq[c] > tonumber(c) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 0, 9 do\n        if digits[i] ~= nil and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = math.abs(n)\n    while n > 0 do\n        local d = n % 10\n        digits[d] = (digits[d] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] then\n            digits[digit] = digits[digit] + 1\n        else\n            digits[digit] = 1\n        end\n    end\n    for i = 0, 9 do\n        if digits[i] and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local n = tostring(n)\n    local freq = {}\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        if freq[digit] == nil then\n            freq[digit] = 1\n        else\n            freq[digit] = freq[digit] + 1\n        end\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        if freq[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] then\n      digits[digit] = digits[digit] + 1\n    else\n      digits[digit] = 1\n    end\n  end\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for i = 0, 9 do\n    digits[i] = 0\n  end\n  while n > 0 do\n    local digit = n % 10\n    digits[digit] = digits[digit] + 1\n    n = math.floor(n / 10)\n  end\n  for i = 0, 9 do\n    if digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for digit, count in pairs(digits) do\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 0, 9 do\n        if digits[i] ~= nil and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        digits[d] = (digits[d] or 0) + 1\n    end\n    for d, f in pairs(digits) do\n        if f > tonumber(d) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local t = {}\n    for i = 0, 9 do\n        t[i] = 0\n    end\n    while n > 0 do\n        local d = n % 10\n        t[d] = t[d] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if t[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        if digits[n:sub(i,i)] then\n            digits[n:sub(i,i)] = digits[n:sub(i,i)] + 1\n        else\n            digits[n:sub(i,i)] = 1\n        end\n    end\n    for i = 1, #n do\n        if digits[n:sub(i,i)] > tonumber(n:sub(i,i)) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    digits[d] = (digits[d] or 0) + 1\n  end\n  for d, f in pairs(digits) do\n    if f > tonumber(d) then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i,i))\n\t\tif digits[digit] then\n\t\t\tdigits[digit] = digits[digit] + 1\n\t\telse\n\t\t\tdigits[digit] = 1\n\t\tend\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] then\n            digits[digit] = digits[digit] + 1\n        else\n            digits[digit] = 1\n        end\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        digits[digit] = (digits[digit] or 0) + 1\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for i=0,9 do\n    digits[i] = 0\n  end\n  while n > 0 do\n    local digit = n % 10\n    digits[digit] = digits[digit] + 1\n    n = math.floor(n / 10)\n  end\n  for i=0,9 do\n    if digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tdigits[n:sub(i,i)] = (digits[n:sub(i,i)] or 0) + 1\n\tend\n\tfor i = 1, #n do\n\t\tif digits[n:sub(i,i)] > tonumber(n:sub(i,i)) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal s = tostring(n)\n\tlocal freq = {}\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tif not freq[c] then\n\t\t\tfreq[c] = 1\n\t\telse\n\t\t\tfreq[c] = freq[c] + 1\n\t\tend\n\tend\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tif tonumber(c) < freq[c] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] then\n      digits[digit] = digits[digit] + 1\n    else\n      digits[digit] = 1\n    end\n  end\n  for i = 0, 9 do\n    if digits[i] and digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] then\n      digits[digit] = digits[digit] + 1\n    else\n      digits[digit] = 1\n    end\n  end\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal num = n\n\twhile num > 0 do\n\t\tlocal digit = num % 10\n\t\tnum = math.floor(num / 10)\n\t\tif digits[digit] == nil then\n\t\t\tdigits[digit] = 1\n\t\telse\n\t\t\tdigits[digit] = digits[digit] + 1\n\t\tend\n\tend\n\tfor k, v in pairs(digits) do\n\t\tif v > k then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for digit, count in pairs(digits) do\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 0, 9 do\n        if digits[i] ~= nil and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i,i))\n\t\tdigits[digit] = (digits[digit] or 0) + 1\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local num = n\n  while num > 0 do\n    local digit = num % 10\n    digits[digit] = (digits[digit] or 0) + 1\n    num = math.floor(num / 10)\n  end\n  for i = 0, 9 do\n    if digits[i] and digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i, i))\n\t\tdigits[digit] = (digits[digit] or 0) + 1\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    digits[digit] = (digits[digit] or 0) + 1\n  end\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local function count(n, d)\n    local c = 0\n    while n > 0 do\n      if n % 10 == d then\n        c = c + 1\n      end\n      n = math.floor(n / 10)\n    end\n    return c\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": "",
      "stderr": "lua: /tmp/tmpk5ed9xkf.lua:22: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] then\n            digits[digit] = digits[digit] + 1\n        else\n            digits[digit] = 1\n        end\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local t = {}\n    local s = tostring(n)\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if t[c] then\n            t[c] = t[c] + 1\n        else\n            t[c] = 1\n        end\n    end\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if t[c] > tonumber(c) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local str = tostring(n)\n  for i = 1, #str do\n    local digit = tonumber(str:sub(i, i))\n    if digits[digit] then\n      digits[digit] = digits[digit] + 1\n    else\n      digits[digit] = 1\n    end\n  end\n  for i = 0, 9 do\n    if digits[i] and digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    local freq = {}\n    for _, v in ipairs(digits) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    for _, v in ipairs(digits) do\n        if freq[v] > v then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal freq = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i, i))\n\t\tdigits[i] = digit\n\t\tfreq[digit] = (freq[digit] or 0) + 1\n\tend\n\tfor i = 1, #digits do\n\t\tif freq[digits[i]] > digits[i] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for i = 0, 9 do\n    digits[i] = 0\n  end\n  while n > 0 do\n    digits[n % 10] = digits[n % 10] + 1\n    n = math.floor(n / 10)\n  end\n  for i = 0, 9 do\n    if digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] then\n      digits[digit] = digits[digit] + 1\n    else\n      digits[digit] = 1\n    end\n  end\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbgrrj5fm.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for i = 0, 9 do\n    digits[i] = 0\n  end\n  while n > 0 do\n    local digit = n % 10\n    digits[digit] = digits[digit] + 1\n    n = math.floor(n / 10)\n  end\n  for i = 0, 9 do\n    if digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] then\n      digits[digit] = digits[digit] + 1\n    else\n      digits[digit] = 1\n    end\n  end\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for i = 0, 9 do\n    digits[i] = 0\n  end\n  while n > 0 do\n    local digit = n % 10\n    digits[digit] = digits[digit] + 1\n    n = math.floor(n / 10)\n  end\n  for i = 0, 9 do\n    if digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = math.abs(n)\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for digit, count in pairs(digits) do\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    digits[d] = (digits[d] or 0) + 1\n  end\n  for d, f in pairs(digits) do\n    if f > tonumber(d) then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    digits[digit] = (digits[digit] or 0) + 1\n  end\n  for i = 0, 9 do\n    if digits[i] and digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] == nil then\n      digits[digit] = 1\n    else\n      digits[digit] = digits[digit] + 1\n    end\n  end\n  for i = 0, 9 do\n    if digits[i] ~= nil and digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i, i))\n\t\tif not digits[digit] then\n\t\t\tdigits[digit] = 1\n\t\telse\n\t\t\tdigits[digit] = digits[digit] + 1\n\t\tend\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal freq = {}\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\tn = math.floor(n / 10)\n\t\ttable.insert(digits, digit)\n\t\tfreq[digit] = (freq[digit] or 0) + 1\n\tend\n\tfor _, digit in ipairs(digits) do\n\t\tif freq[digit] > digit then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        digits[d] = (digits[d] or 0) + 1\n    end\n    for d, c in pairs(digits) do\n        if c > tonumber(d) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local str = tostring(n)\n    local freq = {}\n    for i = 1, #str do\n        local c = str:sub(i, i)\n        if freq[c] == nil then\n            freq[c] = 1\n        else\n            freq[c] = freq[c] + 1\n        end\n    end\n    for i = 1, #str do\n        local c = str:sub(i, i)\n        if freq[c] > tonumber(c) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local num = n\n    while num > 0 do\n        local digit = num % 10\n        if digits[digit] then\n            digits[digit] = digits[digit] + 1\n        else\n            digits[digit] = 1\n        end\n        num = math.floor(num / 10)\n    end\n    for k, v in pairs(digits) do\n        if v > k then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        digits[d] = (digits[d] or 0) + 1\n    end\n    for d, count in pairs(digits) do\n        if count > tonumber(d) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = math.abs(n)\n  while n > 0 do\n    local digit = n % 10\n    digits[digit] = (digits[digit] or 0) + 1\n    n = math.floor(n / 10)\n  end\n  for digit, count in pairs(digits) do\n    if count > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        digits[d] = (digits[d] or 0) + 1\n    end\n    for d, f in pairs(digits) do\n        if f > tonumber(d) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\tn = math.floor(n / 10)\n\t\tdigits[digit] = (digits[digit] or 0) + 1\n\tend\n\tfor digit, count in pairs(digits) do\n\t\tif count > digit then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for i = 0, 9 do\n    digits[i] = 0\n  end\n  while n > 0 do\n    local d = n % 10\n    digits[d] = digits[d] + 1\n    n = math.floor(n / 10)\n  end\n  for i = 0, 9 do\n    if digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local t = {}\n  for i = 0, 9 do\n    t[i] = 0\n  end\n  while n > 0 do\n    local d = n % 10\n    t[d] = t[d] + 1\n    n = math.floor(n / 10)\n  end\n  for i = 0, 9 do\n    if t[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local n = tostring(n)\n    local freq = {}\n    for i = 1, #n do\n        if not freq[n:sub(i, i)] then\n            freq[n:sub(i, i)] = 0\n        end\n        freq[n:sub(i, i)] = freq[n:sub(i, i)] + 1\n    end\n    for i = 1, #n do\n        if freq[n:sub(i, i)] > tonumber(n:sub(i, i)) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal t = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i, i))\n\t\tif t[digit] then\n\t\t\tt[digit] = t[digit] + 1\n\t\telse\n\t\t\tt[digit] = 1\n\t\tend\n\tend\n\tfor i = 0, 9 do\n\t\tif t[i] and t[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i, i))\n\t\tdigits[digit] = (digits[digit] or 0) + 1\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        digits[digit] = (digits[digit] or 0) + 1\n    end\n    for i = 0, 9 do\n        if digits[i] and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i,i))\n\t\tif digits[digit] then\n\t\t\tdigits[digit] = digits[digit] + 1\n\t\telse\n\t\t\tdigits[digit] = 1\n\t\tend\n\tend\n\tfor k, v in pairs(digits) do\n\t\tif v > k then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local n = tostring(n)\n    local digits = {}\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        digits[digit] = (digits[digit] or 0) + 1\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for k, v in pairs(digits) do\n        if v > k then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for digit, count in pairs(digits) do\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local n = tostring(n)\n    local digits = {}\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  while n > 0 do\n    local digit = n % 10\n    digits[digit] = (digits[digit] or 0) + 1\n    n = math.floor(n / 10)\n  end\n  for digit, count in pairs(digits) do\n    if count > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i, i))\n\t\tif not digits[digit] then\n\t\t\tdigits[digit] = 1\n\t\telse\n\t\t\tdigits[digit] = digits[digit] + 1\n\t\tend\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local n = tostring(n)\n    local count = {}\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        count[digit] = (count[digit] or 0) + 1\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        if count[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for digit, count in pairs(digits) do\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for digit, count in pairs(digits) do\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\tdigits[digit] = (digits[digit] or 0) + 1\n\t\tn = math.floor(n / 10)\n\tend\n\tfor digit, count in pairs(digits) do\n\t\tif count > digit then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\tn = math.floor(n / 10)\n\t\tdigits[digit] = (digits[digit] or 0) + 1\n\tend\n\tfor digit, count in pairs(digits) do\n\t\tif count > digit then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local count = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i,i))\n        if count[digit] == nil then\n            count[digit] = 1\n        else\n            count[digit] = count[digit] + 1\n        end\n        if count[digit] > digits[digit] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wih9hn6.lua:32: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4wih9hn6.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if not digits[digit] then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digits[digit] > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = math.abs(n)\n  while n > 0 do\n    local digit = n % 10\n    if digits[digit] then\n      digits[digit] = digits[digit] + 1\n    else\n      digits[digit] = 1\n    end\n    n = math.floor(n / 10)\n  end\n  for digit, count in pairs(digits) do\n    if count > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local str = tostring(n)\n  local freq = {}\n  for i = 1, #str do\n    local digit = tonumber(str:sub(i, i))\n    if freq[digit] == nil then\n      freq[digit] = 1\n    else\n      freq[digit] = freq[digit] + 1\n    end\n  end\n  for i = 1, #str do\n    local digit = tonumber(str:sub(i, i))\n    if freq[digit] > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    digits[d] = (digits[d] or 0) + 1\n  end\n  for d, f in pairs(digits) do\n    if f > tonumber(d) then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        digits[d] = (digits[d] or 0) + 1\n    end\n    for d, c in pairs(digits) do\n        if c > tonumber(d) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i, i))\n\t\tdigits[digit] = (digits[digit] or 0) + 1\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n_str = tostring(n)\n  for i = 1, #n_str do\n    local digit = tonumber(n_str:sub(i, i))\n    if digits[digit] == nil then\n      digits[digit] = 1\n    else\n      digits[digit] = digits[digit] + 1\n    end\n  end\n  for i = 1, #n_str do\n    local digit = tonumber(n_str:sub(i, i))\n    if digits[digit] > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for d in tostring(n):gmatch('%d') do\n        digits[d] = (digits[d] or 0) + 1\n    end\n    for d, c in pairs(digits) do\n        if c > tonumber(d) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n_str = tostring(n)\n    for i = 1, #n_str do\n        local digit = tonumber(n_str:sub(i,i))\n        if digits[digit] == nil then\n            digits[digit] = 1\n        else\n            digits[digit] = digits[digit] + 1\n        end\n    end\n    for i = 0, 9 do\n        if digits[i] ~= nil and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] then\n      digits[digit] = digits[digit] + 1\n    else\n      digits[digit] = 1\n    end\n  end\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    digits[digit] = (digits[digit] or 0) + 1\n  end\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\tdigits[digit] = (digits[digit] or 0) + 1\n\t\tn = math.floor(n / 10)\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  for i = 0, 9 do\n    digits[i] = 0\n  end\n  while n > 0 do\n    local digit = n % 10\n    digits[digit] = digits[digit] + 1\n    n = math.floor(n / 10)\n  end\n  for i = 0, 9 do\n    if digits[i] > i then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\tlocal n = tostring(n)\n\tfor i = 1, #n do\n\t\tlocal digit = tonumber(n:sub(i,i))\n\t\tif digits[digit] then\n\t\t\tdigits[digit] = digits[digit] + 1\n\t\telse\n\t\t\tdigits[digit] = 1\n\t\tend\n\tend\n\tfor i = 0, 9 do\n\t\tif digits[i] and digits[i] > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local str = tostring(n)\n  for i = 1, #str do\n    digits[i] = tonumber(str:sub(i, i))\n  end\n  local freq = {}\n  for i = 1, #digits do\n    if not freq[digits[i]] then\n      freq[digits[i]] = 1\n    else\n      freq[digits[i]] = freq[digits[i]] + 1\n    end\n  end\n  for i = 1, #digits do\n    if freq[digits[i]] > digits[i] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local n = tostring(n)\n    local t = {}\n    for i = 1, #n do\n        local c = n:sub(i, i)\n        if not t[c] then\n            t[c] = 1\n        else\n            t[c] = t[c] + 1\n        end\n    end\n    for i = 1, #n do\n        local c = n:sub(i, i)\n        if tonumber(c) < t[c] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n\tlocal digits = {}\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\tdigits[digit] = (digits[digit] or 0) + 1\n\t\tn = math.floor(n / 10)\n\tend\n\tfor digit, count in pairs(digits) do\n\t\tif count > digit then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = math.abs(n)\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = (digits[digit] or 0) + 1\n        n = math.floor(n / 10)\n    end\n    for digit, count in pairs(digits) do\n        if count > digit then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    for i = 0, 9 do\n        digits[i] = 0\n    end\n    while n > 0 do\n        local digit = n % 10\n        digits[digit] = digits[digit] + 1\n        n = math.floor(n / 10)\n    end\n    for i = 0, 9 do\n        if digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n  local digits = {}\n  local n = tostring(n)\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] == nil then\n      digits[digit] = 1\n    else\n      digits[digit] = digits[digit] + 1\n    end\n  end\n  for i = 1, #n do\n    local digit = tonumber(n:sub(i, i))\n    if digits[digit] > digit then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n    local digits = {}\n    local n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        digits[digit] = (digits[digit] or 0) + 1\n    end\n    for i = 0, 9 do\n        if digits[i] and digits[i] > i then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122877,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}