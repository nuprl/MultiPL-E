{
  "name": "mbpp_295_sum_div",
  "language": "lua",
  "prompt": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 1\n\tfor i = 2, number/2 do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123390,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i=1,number-1 do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123389,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number - 1 do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number - 1 do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number - 1 do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number - 1 do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 1\n  for i = 2, math.floor(math.sqrt(number)) do\n    if number % i == 0 then\n      sum = sum + i + number / i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123389,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 1\n\tfor i = 2, math.floor(math.sqrt(number)) do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\t\tif number / i ~= i then\n\t\t\t\tsum = sum + number / i\n\t\t\tend\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123390,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i=1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123390,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi06b65ag.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpi06b65ag.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 1\n\tfor i = 2, number/2 do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123390,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number - 1 do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6kvl5nu.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpw6kvl5nu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n  local sum = 0\n  for i = 1, number do\n    if number % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52stcmr0.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmp52stcmr0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n\tlocal sum = 0\n\tfor i = 1, number do\n\t\tif number % i == 0 then\n\t\t\tsum = sum + i\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665510044,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7p6x7tc.lua:15: expected: 7, actual: 15\nstack traceback:\n\t/tmp/tmpk7p6x7tc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}