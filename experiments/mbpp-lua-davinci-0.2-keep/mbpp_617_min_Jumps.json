{
  "name": "mbpp_617_min_Jumps",
  "language": "lua",
  "prompt": "-- Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nlocal function min_Jumps(steps, d)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Jumps\n    lu.assertEquals(candidate({3, 4}, 11), 3.5)\n    lu.assertEquals(candidate({3, 4}, 0), 0)\n    lu.assertEquals(candidate({11, 14}, 11), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local jumps = 0\n  local x = 0\n  local y = 0\n  while x < d or y < d do\n    if x < d then\n      x = x + steps\n      jumps = jumps + 1\n    end\n    if y < d then\n      y = y + steps\n      jumps = jumps + 1\n    end\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps[i]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps[i]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    local i = 1\n    while pos < d do\n        pos = pos + steps[i]\n        jumps = jumps + 1\n        i = i + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local curr = 0\n    local i = 1\n    while curr < d do\n        curr = curr + steps[i]\n        i = i + 1\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local curr = 0\n    while curr < d do\n        jumps = jumps + 1\n        curr = curr + steps\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i <= d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local x = 0\n  local y = 0\n  while x < d do\n    if x + steps <= d then\n      x = x + steps\n      jumps = jumps + 1\n    else\n      x = x + 1\n      jumps = jumps + 1\n    end\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 0\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal pos = 0\n\tfor i = 1, #steps do\n\t\tlocal step = steps[i]\n\t\tif pos + step < d then\n\t\t\tpos = pos + step\n\t\telseif pos + step == d then\n\t\t\tpos = pos + step\n\t\t\tjumps = jumps + 1\n\t\t\tbreak\n\t\telse\n\t\t\tjumps = jumps + 1\n\t\t\tpos = pos - step\n\t\tend\n\tend\n\treturn jumps\nend",
    "\tlocal jumps = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal i = 1\n\twhile i <= #steps do\n\t\tif x == d then\n\t\t\treturn jumps\n\t\tend\n\t\tif x + steps[i] <= d then\n\t\t\tx = x + steps[i]\n\t\t\tjumps = jumps + 1\n\t\t\ti = i + 1\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i <= d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        if pos + steps >= d then\n            return jumps + 1\n        end\n        pos = pos + steps\n        steps = steps - 1\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal current = 0\n\twhile current < d do\n\t\tjumps = jumps + 1\n\t\tcurrent = current + steps\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local i = 0\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend"
  ]
}