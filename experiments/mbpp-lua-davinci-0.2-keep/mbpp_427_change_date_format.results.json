{
  "name": "mbpp_427_change_date_format",
  "language": "lua",
  "prompt": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local year, month, day = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return day..\"-\"..month..\"-\"..year\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d%d%d%d)-(%d%d)-(%d%d)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local year, month, day = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%s-%s-%s\", day, month, year)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local year, month, day = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n  return day..\"-\"..month..\"-\"..year\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local dt_table = {}\n  for i in string.gmatch(dt, \"%d+\") do\n    table.insert(dt_table, i)\n  end\n  return dt_table[3] .. \"-\" .. dt_table[2] .. \"-\" .. dt_table[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d%d%d%d)-(%d%d)-(%d%d)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local year, month, day = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return day .. \"-\" .. month .. \"-\" .. year\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123456,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local year, month, day = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return day .. \"-\" .. month .. \"-\" .. year\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123456,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal year, month, day = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", day, month, year)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123456,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local year, month, day = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", day, month, year)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d%d%d%d)-(%d%d)-(%d%d)\")\n  return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal year, month, day = dt:match(\"(%d+)-(%d+)-(%d+)\")\n\treturn day..\"-\"..month..\"-\"..year\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123456,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return d .. \"-\" .. m .. \"-\" .. y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d%d%d%d)-(%d%d)-(%d%d)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123456,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal year, month, day = dt:match(\"(%d+)-(%d+)-(%d+)\")\n\treturn day .. \"-\" .. month .. \"-\" .. year\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123456,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match('(%d%d%d%d)-(%d%d)-(%d%d)')\n    return string.format('%s-%s-%s', d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local year, month, day = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return day..\"-\"..month..\"-\"..year\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d%d%d%d)-(%d%d)-(%d%d)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123456,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    return string.sub(dt, 9, 10) .. \"-\" .. string.sub(dt, 6, 7) .. \"-\" .. string.sub(dt, 1, 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123456,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d%d%d%d)-(%d%d)-(%d%d)\")\n  return d..\"-\"..m..\"-\"..y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal year, month, day = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", day, month, year)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d%d%d%d)-(%d%d)-(%d%d)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d%d%d%d)-(%d%d)-(%d%d)\")\n  return d..\"-\"..m..\"-\"..y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d%d%d%d)-(%d%d)-(%d%d)\")\n  return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local year, month, day = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return day..\"-\"..month..\"-\"..year\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123456,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match('(%d%d%d%d)-(%d%d)-(%d%d)')\n  return string.format('%s-%s-%s', d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n\treturn d .. \"-\" .. m .. \"-\" .. y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local dt_split = {}\n  for i in string.gmatch(dt, \"%d+\") do\n    table.insert(dt_split, i)\n  end\n  return dt_split[3] .. \"-\" .. dt_split[2] .. \"-\" .. dt_split[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local year, month, day = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%s-%s-%s\", day, month, year)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local year, month, day = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n  return day .. \"-\" .. month .. \"-\" .. year\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123456,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local year, month, day = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return day .. \"-\" .. month .. \"-\" .. year\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123456,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d%d%d%d)-(%d%d)-(%d%d)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d%d%d%d)-(%d%d)-(%d%d)\")\n  return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local year, month, day = dt:match(\"(%d%d%d%d)-(%d%d)-(%d%d)\")\n    return day..\"-\"..month..\"-\"..year\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  return string.gsub(dt, \"(%d+)-(%d+)-(%d+)\", \"%3-%2-%1\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123456,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match('(%d%d%d%d)-(%d%d)-(%d%d)')\n    return string.format('%s-%s-%s', d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local year, month, day = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", day, month, year)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123457,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123456,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d%d%d%d)-(%d%d)-(%d%d)\")\n    return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d%d%d%d)-(%d%d)-(%d%d)\")\n  return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local year, month, day = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return day .. \"-\" .. month .. \"-\" .. year\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123456,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal year, month, day = dt:match(\"(%d+)-(%d+)-(%d+)\")\n\treturn day..\"-\"..month..\"-\"..year\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123456,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n\tlocal y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n\treturn string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123456,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n  local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n  return string.format(\"%s-%s-%s\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = dt:match(\"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    local y, m, d = string.match(dt, \"(%d+)-(%d+)-(%d+)\")\n    return string.format(\"%02d-%02d-%04d\", d, m, y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}