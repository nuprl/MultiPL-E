{
  "name": "mbpp_120_max_product_tuple",
  "language": "lua",
  "prompt": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        local product = math.abs(list1[i][1] * list1[j][2])\n        if product > max then\n          max = product\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jrnyiq7.lua:20: expected: 36, actual: 32\nstack traceback:\n\t/tmp/tmp1jrnyiq7.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max = -math.huge\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        local prod = math.abs(list1[i][1] * list1[j][1])\n        if prod > max then\n          max = prod\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__alb3h3.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmp__alb3h3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for _, tuple in ipairs(list1) do\n        local product = math.abs(tuple[1] * tuple[2])\n        if product > max then\n            max = product\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbqtjawx.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpqbqtjawx.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1]) * math.abs(list1[i][2] * list1[j][2])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbgpxi59.lua:18: expected: 36, actual: 504\nstack traceback:\n\t/tmp/tmpxbgpxi59.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i, tuple1 in ipairs(list1) do\n    for j, tuple2 in ipairs(list1) do\n      if i ~= j then\n        local product = math.abs(tuple1[1] * tuple2[1])\n        if product > max_product then\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1n1kyo5.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpe1n1kyo5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbqtjawx.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpqbqtjawx.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9frrc98.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpd9frrc98.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1[i] do\n\t\t\tfor k = 1, #list1[i] do\n\t\t\t\tif math.abs(list1[i][j] * list1[i][k]) > max then\n\t\t\t\t\tmax = math.abs(list1[i][j] * list1[i][k])\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4igobdsb.lua:19: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmp4igobdsb.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  local max_product_tuple = {}\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][2])\n      if product > max_product then\n        max_product = product\n        max_product_tuple = {list1[i], list1[j]}\n      end\n    end\n  end\n  return max_product_tuple\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtzic__h.lua:20: expected: 36, actual: <table 02> {<table 01> {4, 9}, <table 01>}\nstack traceback:\n\t/tmp/tmpbtzic__h.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbqtjawx.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpqbqtjawx.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i, tuple1 in ipairs(list1) do\n        for j, tuple2 in ipairs(list1) do\n            if i ~= j then\n                local product = math.abs(tuple1[1] * tuple2[1])\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6t2j49sn.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmp6t2j49sn.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][2])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xkci4na.lua:18: expected: 36, actual: 18\nstack traceback:\n\t/tmp/tmp2xkci4na.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][2])\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqq5ct5on.lua:20: expected: 36, actual: 32\nstack traceback:\n\t/tmp/tmpqq5ct5on.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i, tuple in ipairs(list1) do\n\t\tlocal product = math.abs(tuple[1] * tuple[2])\n\t\tif product > max_product then\n\t\t\tmax_product = product\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i, tuple1 in ipairs(list1) do\n    for j, tuple2 in ipairs(list1) do\n      if i ~= j then\n        local product = math.abs(tuple1[1] * tuple2[1])\n        if product > max_product then\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1n1kyo5.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpe1n1kyo5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][2])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcno0kmew.lua:19: expected: 200, actual: 300\nstack traceback:\n\t/tmp/tmpcno0kmew.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][2])\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqq5ct5on.lua:20: expected: 36, actual: 32\nstack traceback:\n\t/tmp/tmpqq5ct5on.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbqtjawx.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpqbqtjawx.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbqtjawx.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpqbqtjawx.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max then\n\t\t\t\tmax = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmblsl1ry.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpmblsl1ry.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][2])\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqq5ct5on.lua:20: expected: 36, actual: 32\nstack traceback:\n\t/tmp/tmpqq5ct5on.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        local product = math.abs(list1[i][1] * list1[i][2] * list1[j][1] * list1[j][2])\n        if product > max_product then\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzncik97.lua:20: expected: 36, actual: 504\nstack traceback:\n\t/tmp/tmpwzncik97.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i+1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_syrldx.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpd_syrldx.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max then\n\t\t\t\tmax = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmblsl1ry.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpmblsl1ry.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1]) + math.abs(list1[i][2] * list1[j][2])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zhzvxb.lua:18: expected: 36, actual: 76\nstack traceback:\n\t/tmp/tmpx6zhzvxb.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbqtjawx.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpqbqtjawx.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][1])\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkqatupw.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpvkqatupw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][2])\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqq5ct5on.lua:20: expected: 36, actual: 32\nstack traceback:\n\t/tmp/tmpqq5ct5on.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1]) + math.abs(list1[i][2] * list1[j][2])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zhzvxb.lua:18: expected: 36, actual: 76\nstack traceback:\n\t/tmp/tmpx6zhzvxb.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbqtjawx.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpqbqtjawx.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1[i] do\n\t\t\tfor k = 1, #list1[i] do\n\t\t\t\tif i ~= k and j ~= k then\n\t\t\t\t\tlocal product = list1[i][j] * list1[i][k]\n\t\t\t\t\tif product > max then\n\t\t\t\t\t\tmax = product\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][2])\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqq5ct5on.lua:20: expected: 36, actual: 32\nstack traceback:\n\t/tmp/tmpqq5ct5on.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9frrc98.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpd9frrc98.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9frrc98.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpd9frrc98.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product > max then\n            max = product\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for _, tuple in ipairs(list1) do\n        local product = math.abs(tuple[1] * tuple[2])\n        if product > max then\n            max = product\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    local a, b = list1[i][1], list1[i][2]\n    local product = math.abs(a * b)\n    if product > max then\n      max = product\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i, v in ipairs(list1) do\n        for j, w in ipairs(list1) do\n            if i ~= j then\n                local product = math.abs(v[1] * w[1])\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiaipu0j9.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpiaipu0j9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max then\n\t\t\t\tmax = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmblsl1ry.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpmblsl1ry.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  local max_product_tuple = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1]) * math.abs(list1[i][2] * list1[j][2])\n      if product > max_product then\n        max_product = product\n        max_product_tuple = {list1[i], list1[j]}\n      end\n    end\n  end\n  return max_product, max_product_tuple\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4w1cqzp4.lua:20: expected: 36, actual: 504\nstack traceback:\n\t/tmp/tmp4w1cqzp4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max then\n\t\t\t\tmax = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmblsl1ry.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpmblsl1ry.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][2])\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayo1ezo9.lua:20: expected: 36, actual: 32\nstack traceback:\n\t/tmp/tmpayo1ezo9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][2])\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqq5ct5on.lua:20: expected: 36, actual: 32\nstack traceback:\n\t/tmp/tmpqq5ct5on.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product > max then\n      max = product\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i, tuple1 in ipairs(list1) do\n        for j, tuple2 in ipairs(list1) do\n            if i ~= j then\n                local product = math.abs(tuple1[1] * tuple2[1])\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6t2j49sn.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmp6t2j49sn.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max then\n\t\t\t\tmax = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmblsl1ry.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpmblsl1ry.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][1])\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpcjwq8q.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpxpcjwq8q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i, v in ipairs(list1) do\n        for j, w in ipairs(list1) do\n            if i ~= j then\n                local product = math.abs(v[1] * w[1])\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiaipu0j9.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpiaipu0j9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for _, tuple in ipairs(list1) do\n        local product = math.abs(tuple[1] * tuple[2])\n        if product > max then\n            max = product\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1 do\n\t\t\tif i ~= j then\n\t\t\t\tlocal prod = math.abs(list1[i][1] * list1[j][2])\n\t\t\t\tif prod > max then\n\t\t\t\t\tmax = prod\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0s5et4w5.lua:20: expected: 36, actual: 32\nstack traceback:\n\t/tmp/tmp0s5et4w5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i, v in ipairs(list1) do\n\t\tfor j, w in ipairs(list1) do\n\t\t\tif i ~= j then\n\t\t\t\tlocal product = math.abs(v[1] * w[1])\n\t\t\t\tif product > max then\n\t\t\t\t\tmax = product\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5c52nfu.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpp5c52nfu.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9frrc98.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpd9frrc98.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9frrc98.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpd9frrc98.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i=1,#list1 do\n        for j=i+1,#list1 do\n            local product = math.abs(list1[i][1]*list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fjj73h1.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmp1fjj73h1.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][1])\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkqatupw.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpvkqatupw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i, tuple1 in ipairs(list1) do\n        for j, tuple2 in ipairs(list1) do\n            if i ~= j then\n                local product = math.abs(tuple1[1] * tuple2[1])\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6t2j49sn.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmp6t2j49sn.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][2])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdasry6h.lua:19: expected: 200, actual: 300\nstack traceback:\n\t/tmp/tmpsdasry6h.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_prod = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1 do\n\t\t\tif i ~= j then\n\t\t\t\tlocal prod = math.abs(list1[i][1] * list1[j][1])\n\t\t\t\tif prod > max_prod then\n\t\t\t\t\tmax_prod = prod\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqiv44fc.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpvqiv44fc.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbqtjawx.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpqbqtjawx.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = -math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4didyqtb.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmp4didyqtb.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9frrc98.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpd9frrc98.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max then\n\t\t\t\tmax = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmblsl1ry.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpmblsl1ry.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i, v in ipairs(list1) do\n\t\tfor j, w in ipairs(list1) do\n\t\t\tlocal product = math.abs(v[1] * w[1])\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_6scto4.lua:18: expected: 36, actual: 16\nstack traceback:\n\t/tmp/tmpg_6scto4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][2])\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqq5ct5on.lua:20: expected: 36, actual: 32\nstack traceback:\n\t/tmp/tmpqq5ct5on.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][2])\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayo1ezo9.lua:20: expected: 36, actual: 32\nstack traceback:\n\t/tmp/tmpayo1ezo9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = -math.huge\n    for i = 1, #list1 do\n        local tuple = list1[i]\n        local product = math.abs(tuple[1] * tuple[2])\n        if product > max_product then\n            max_product = product\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbqtjawx.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpqbqtjawx.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][1])\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkqatupw.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpvkqatupw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbqtjawx.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpqbqtjawx.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][1])\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkqatupw.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpvkqatupw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local prod = math.abs(list1[i][1] * list1[j][1])\n            if prod > max then\n                max = prod\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15v5ylud.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmp15v5ylud.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9frrc98.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpd9frrc98.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        local product = math.abs(list1[i][1] * list1[j][2])\n        if product > max then\n          max = product\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jrnyiq7.lua:20: expected: 36, actual: 32\nstack traceback:\n\t/tmp/tmp1jrnyiq7.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i, t1 in ipairs(list1) do\n        for j, t2 in ipairs(list1) do\n            if i ~= j then\n                local product = math.abs(t1[1] * t2[1])\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9zy51kq.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpn9zy51kq.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        local product = math.abs(list1[i][1] * list1[j][2])\n        if product > max then\n          max = product\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jrnyiq7.lua:20: expected: 36, actual: 32\nstack traceback:\n\t/tmp/tmp1jrnyiq7.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][1])\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkqatupw.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpvkqatupw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][1])\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkqatupw.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpvkqatupw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 1\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1[i] do\n\t\t\tif list1[i][j] > max_product then\n\t\t\t\tmax_product = list1[i][j]\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4iyqted.lua:17: expected: 36, actual: 9\nstack traceback:\n\t/tmp/tmph4iyqted.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[i][2] * list1[j][1] * list1[j][2])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkopxo7q.lua:18: expected: 36, actual: 504\nstack traceback:\n\t/tmp/tmprkopxo7q.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][1])\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpcjwq8q.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpxpcjwq8q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1]) + math.abs(list1[i][2] * list1[j][2])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu8dsgps.lua:18: expected: 36, actual: 76\nstack traceback:\n\t/tmp/tmpbu8dsgps.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max then\n\t\t\t\tmax = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmblsl1ry.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpmblsl1ry.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = -math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4didyqtb.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmp4didyqtb.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbqtjawx.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpqbqtjawx.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 1\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklamh_w9.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpklamh_w9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][2])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdasry6h.lua:19: expected: 200, actual: 300\nstack traceback:\n\t/tmp/tmpsdasry6h.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1[i] do\n\t\t\tfor k = 1, #list1[i] do\n\t\t\t\tif i ~= k and j ~= k then\n\t\t\t\t\tlocal product = math.abs(list1[i][j] * list1[i][k])\n\t\t\t\t\tif product > max then\n\t\t\t\t\t\tmax = product\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = -math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4didyqtb.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmp4didyqtb.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1]) + math.abs(list1[i][2] * list1[j][2])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6zhzvxb.lua:18: expected: 36, actual: 76\nstack traceback:\n\t/tmp/tmpx6zhzvxb.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i+1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl58f405m.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl58f405m.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local prod = math.abs(list1[i][1] * list1[j][1])\n            if prod > max then\n                max = prod\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15v5ylud.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmp15v5ylud.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1]) + math.abs(list1[i][2] * list1[j][2])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu8dsgps.lua:18: expected: 36, actual: 76\nstack traceback:\n\t/tmp/tmpbu8dsgps.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohueu4vk.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpohueu4vk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbqtjawx.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpqbqtjawx.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max then\n\t\t\t\tmax = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmblsl1ry.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpmblsl1ry.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][1])\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9frrc98.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpd9frrc98.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbqtjawx.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpqbqtjawx.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbuhjsu.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgjbuhjsu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = -math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kpa43ch.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmp3kpa43ch.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product > max_product then\n            max_product = product\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124157,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = math.abs(list1[i][1] * list1[j][1])\n\t\t\tif product > max then\n\t\t\t\tmax = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmblsl1ry.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpmblsl1ry.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = math.abs(list1[i][1] * list1[j][2])\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqq5ct5on.lua:20: expected: 36, actual: 32\nstack traceback:\n\t/tmp/tmpqq5ct5on.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = math.abs(list1[i][1] * list1[j][1])\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509953,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0y4cqt7.lua:18: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpl0y4cqt7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}