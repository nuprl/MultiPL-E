{
  "name": "mbpp_640_remove_parenthesis",
  "language": "lua",
  "prompt": "-- Write a function to remove the parenthesis and what is inbetween them from a string.\nlocal function remove_parenthesis(items)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_parenthesis\n    lu.assertEquals(candidate({'python (chrome)'}), 'python')\n    lu.assertEquals(candidate({'string(.abc)'}), 'string')\n    lu.assertEquals(candidate({'alpha(num)'}), 'alpha')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal new_items = {}\n\tfor _, item in ipairs(items) do\n\t\tif item:sub(1, 1) == \"(\" then\n\t\t\titem = item:sub(2, -2)\n\t\tend\n\t\ttable.insert(new_items, item)\n\tend\n\treturn new_items\nend",
    "\tlocal new_items = {}\n\tfor i = 1, #items do\n\t\tlocal item = items[i]\n\t\tif item:sub(1, 1) == \"(\" and item:sub(-1) == \")\" then\n\t\t\titem = item:sub(2, -2)\n\t\tend\n\t\ttable.insert(new_items, item)\n\tend\n\treturn new_items\nend",
    "    local new_items = {}\n    for _, item in ipairs(items) do\n        local new_item = item:gsub(\"%b()\", \"\")\n        table.insert(new_items, new_item)\n    end\n    return new_items\nend",
    "  local new_items = {}\n  for _, item in ipairs(items) do\n    local new_item = item:gsub(\"%b()\", \"\")\n    table.insert(new_items, new_item)\n  end\n  return new_items\nend",
    "    local new_items = {}\n    for i, item in ipairs(items) do\n        if item:sub(1, 1) == \"(\" and item:sub(-1) == \")\" then\n            item = item:sub(2, -2)\n        end\n        table.insert(new_items, item)\n    end\n    return new_items\nend",
    "\tlocal new_items = {}\n\tfor _, item in ipairs(items) do\n\t\tif not item:match(\"%(.*%)\") then\n\t\t\ttable.insert(new_items, item)\n\t\tend\n\tend\n\treturn new_items\nend",
    "\tlocal new_items = {}\n\tfor _, item in ipairs(items) do\n\t\tif type(item) == \"string\" then\n\t\t\titem = item:gsub(\"%b()\", \"\")\n\t\tend\n\t\ttable.insert(new_items, item)\n\tend\n\treturn new_items\nend",
    "  local new_items = {}\n  for _, item in ipairs(items) do\n    if not item:match('%(') then\n      table.insert(new_items, item)\n    end\n  end\n  return new_items\nend",
    "  local new_items = {}\n  for _, item in ipairs(items) do\n    if type(item) == \"string\" then\n      item = item:gsub(\"%b()\", \"\")\n    end\n    table.insert(new_items, item)\n  end\n  return new_items\nend",
    "    local new_items = {}\n    for _, item in ipairs(items) do\n        if item:sub(1, 1) == \"(\" and item:sub(-1) == \")\" then\n            item = item:sub(2, -2)\n        end\n        table.insert(new_items, item)\n    end\n    return new_items\nend",
    "    local result = {}\n    for _, item in ipairs(items) do\n        local new_item = item:gsub(\"%b()\", \"\")\n        table.insert(result, new_item)\n    end\n    return result\nend",
    "\tlocal new_items = {}\n\tfor _, item in ipairs(items) do\n\t\tif item.type == \"text\" then\n\t\t\tlocal new_text = item.text:gsub(\"%b()\", \"\")\n\t\t\tif new_text ~= \"\" then\n\t\t\t\ttable.insert(new_items, {type = \"text\", text = new_text})\n\t\t\tend\n\t\telse\n\t\t\ttable.insert(new_items, item)\n\t\tend\n\tend\n\treturn new_items\nend",
    "  local new_items = {}\n  for _, item in ipairs(items) do\n    local new_item = item:gsub(\"%b()\", \"\")\n    table.insert(new_items, new_item)\n  end\n  return new_items\nend",
    "    local new_items = {}\n    for _, item in ipairs(items) do\n        local new_item = item:gsub(\"%b()\", \"\")\n        table.insert(new_items, new_item)\n    end\n    return new_items\nend",
    "\tlocal new_items = {}\n\tfor _, item in ipairs(items) do\n\t\tif item:find(\"%(\") then\n\t\t\tlocal new_item = item:gsub(\"%(.*%)\", \"\")\n\t\t\ttable.insert(new_items, new_item)\n\t\telse\n\t\t\ttable.insert(new_items, item)\n\t\tend\n\tend\n\treturn new_items\nend",
    "    local new_items = {}\n    for _, item in ipairs(items) do\n        if item.type == \"text\" then\n            local new_text = item.text:gsub(\"%b()\", \"\")\n            if new_text ~= \"\" then\n                table.insert(new_items, {type = \"text\", text = new_text})\n            end\n        else\n            table.insert(new_items, item)\n        end\n    end\n    return new_items\nend",
    "\tlocal new_items = {}\n\tfor _, item in ipairs(items) do\n\t\tif item.type == \"text\" then\n\t\t\tlocal new_text = item.text:gsub(\"%b()\", \"\")\n\t\t\tnew_items[#new_items + 1] = {type = \"text\", text = new_text}\n\t\telse\n\t\t\tnew_items[#new_items + 1] = item\n\t\tend\n\tend\n\treturn new_items\nend",
    "    local result = {}\n    for _, item in ipairs(items) do\n        local s = item:gsub(\"%b()\", \"\")\n        table.insert(result, s)\n    end\n    return result\nend",
    "\tlocal items_new = {}\n\tfor i, item in ipairs(items) do\n\t\tlocal item_new = item:gsub(\"%(.*%)\", \"\")\n\t\titems_new[i] = item_new\n\tend\n\treturn items_new\nend",
    "  local new_items = {}\n  for _, item in ipairs(items) do\n    local new_item = item:gsub(\"%b()\", \"\")\n    table.insert(new_items, new_item)\n  end\n  return new_items\nend"
  ]
}