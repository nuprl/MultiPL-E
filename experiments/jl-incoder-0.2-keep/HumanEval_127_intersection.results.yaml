name: HumanEval_127_intersection
language: julia
results:
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[0]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[0] == interval2[0]\n        return\
    \ \"YES\"\n    \n    if interval1[0] < interval2[1]\n        return \"NO\"\n \
    \   \n    if interval1[0] > interval2[0]\n        return \"NO\"\n    \n    if\
    \ interval1[1] == interval2[1]\n        return \"YES\"\n    \n    if interval1[1]\
    \ < interval2[0]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw8kspzvu.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw8kspzvu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy08zedkc.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy08zedkc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2] \n        then \"YES\"\n        else \n   \
    \         if interval1[1] < interval2[1]\n                then \"NO\"\n      \
    \          else \n                    if interval1[2] < interval2[2]\n       \
    \                 then \"NO\"\n                        else \n               \
    \             if interval1[1] > interval2[1]\n                               \
    \ then \"NO\"\n                                else \n                       \
    \             if interval1[2] > interval2[2]\n                               \
    \         then \"NO\"\n                                        else \n       \
    \                                     if interval1[1] < interval2[1]\n       \
    \                                         then \"NO\"\n                      \
    \                          else \n                                           \
    \         if interval1[2] < interval2[2]\n                                   \
    \                     then \"NO\"\n                                          \
    \              else \n                                                       \
    \     if interval1[1] > interval2[1]\n                                       \
    \                         then \"NO\"\n                                      \
    \                          else \n                                           \
    \                         if interval1[2] > interval2[2]\n                   \
    \                                                     then \"NO\"\n          \
    \                                                              else \n       \
    \                                                                     if interval1[1]\
    \ < interval2[1]\n                                                           \
    \                     then \"NO\"\n                                          \
    \                                      else \n                               \
    \                                     if interval1[2] < interval2[2]\n       \
    \                                                                 then \"NO\"\n\
    \                                                                        else\
    \ \n                                                                         \
    \   if interval1[1] > interval2[1]\n                                         \
    \                                       then \"NO\"\n                        \
    \                                                        else \n             \
    \                                                                       if interval1[2]\
    \ > interval2[2]\n                                                           \
    \                             then \"NO\"\n                                  \
    \                                                      else \n               \
    \                                                                            \
    \ if interval1[1] < interval2[1]\n                                           \
    \                                                     then \"NO\"\n          \
    \                                                                            \
    \          else \n                                                           \
    \                                         if interval1[2] < interval2[2]\n   \
    \                                                                            \
    \                         then \"NO\"\n                                      \
    \                                                                  else \n   \
    \                                                                            \
    \                         if interval1[1] > interval2[1]\n                   \
    \                                                                            \
    \             then \"NO\"\n                                                  \
    \                                                          else \n           \
    \                                                                            \
    \                         if interval1[2] > interval2[2]\n                   \
    \                                                                            \
    \                     then \"NO\"\n                                          \
    \                                                                          else\
    \ \n                                                                         \
    \                                               if interval1[1] < interval2[1]\n\
    \                                                                            \
    \                                                then \"NO\"\n               \
    \                                                                            \
    \                                 else \n                                    \
    \                                                                            \
    \                if interval1[2] < interval2[2]\n                            \
    \                                                                            \
    \                            then \"NO\"\n                                   \
    \                                                                            \
    \                     else \n                                                \
    \                                                                            \
    \            \"NO\"\n                                                        \
    \                                                                        end\n\
    \                    end\n            end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp04j5ddi4.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp04j5ddi4.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2]\n        \n        if interval1[1] > interval2[1]\n\
    \            return \"NO\"\n        elseif interval1[2] > interval2[2]\n     \
    \       return \"NO\"\n        else\n            return \"YES\"\n    end\n   \
    \ return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgbkg5u_c.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpgbkg5u_c.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvj19lkvz.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvj19lkvz.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    if interval1[1] >=\
    \ interval2[1] and interval1[2] >= interval2[2]\n        return \"YES\"\n    if\
    \ interval1[1] <= interval2[1] and interval1[2] >= interval2[2]\n        return\
    \ \"YES\"\n    if interval1[1] >= interval2[1] and interval1[2] <= interval2[2]\n\
    \        return \"YES\"\n    return \"NO\"\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcu1nj0l4.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpcu1nj0l4.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    else if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    else if interval1[2] < interval2[2]\n        return\
    \ \"NO\"\n    else if interval1[2] > interval2[2]\n        return \"NO\"\n   \
    \ else\n        return \"YES\"\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqp04ox2p.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqp04ox2p.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2] \n        then \"YES\"\n        else \"NO\"\
    \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcb9syqbq.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpcb9syqbq.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] == interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    return \"\
    YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7_woe15t.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7_woe15t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ >= interval2[1] and interval1[2] >= interval2[2]\n        return \"YES\"\n \
    \   else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpijq7elyg.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpijq7elyg.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] == interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[0]\
    \ < interval2[0]\n        return \"NO\"\n    if interval1[0] > interval2[0]\n\
    \        return \"NO\"\n    return \"YES\"\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp26kjzzt8.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp26kjzzt8.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvbph14b6.jl:40\n  Expression: candidate((-3,\
    \ -1), (-5, 5)) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvbph14b6.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvbph14b6.jl:37\ntest set: Test Failed at /tmp/tmpvbph14b6.jl:41\n\
    \  Expression: candidate((-2, 2), (-4, 0)) == \"YES\"\n   Evaluated: \"NO\" ==\
    \ \"YES\"\nStacktrace:\n [1] top-level scope at /tmp/tmpvbph14b6.jl:41\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvbph14b6.jl:37\ntest set: Test Failed at /tmp/tmpvbph14b6.jl:44\n\
    \  Expression: candidate((1, 2), (1, 2)) == \"NO\"\n   Evaluated: \"YES\" == \"\
    NO\"\nStacktrace:\n [1] top-level scope at /tmp/tmpvbph14b6.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvbph14b6.jl:37\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvbph14b6.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"NO\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp757z6dl_.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp757z6dl_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] >= interval2[2] \n        then \"YES\"\n        else if interval1[1]\
    \ >= interval2[1] and interval1[2] <= interval2[2] \n            then \"NO\"\n\
    \            else if interval1[1] <= interval2[1] and interval1[2] >= interval2[2]\
    \ \n                then \"NO\"\n                else if interval1[1] >= interval2[1]\
    \ and interval1[2] <= interval2[2] \n                    then \"NO\"\n       \
    \             else if interval1[1] <= interval2[1] and interval1[2] >= interval2[2]\
    \ \n                        then \"YES\"\n                        else \"NO\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n# Test case\n@test intersection((1,\
    \ 2), (2, 3)) == \"NO\"\n@test intersection((-1, 1), (0, 4)) == \"NO\"\n@test\
    \ intersection((-3, -1), (-5, 5)) == \"YES\"\n</cell>\n<text>\nProblem 5\nWrite\
    \ a function that takes in two integers and returns their sum.\nThe function should\
    \ handle both positive and negative numbers.\nusing Test\n\n@testset begin\n\n\
    candidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1nc_t_u4.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1nc_t_u4.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ or interval1[1] > interval2[1] or interval1[2] < interval2[2] or interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    \n    if interval1[1] == interval2[1]\
    \ and interval1[2] == interval2[2]\n        return \"YES\"\n    \n    if interval1[1]\
    \ < interval2[1] and interval1[2] < interval2[2]\n        return \"NO\"\n    \n\
    \    if interval1[1] > interval2[1] and interval1[2] > interval2[2]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[2] > interval2[2]\n\
    \        return \"NO\"\n    \n    if interval1[1] > interval2[1] and interval1[2]\
    \ < interval2[2]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\
    \ and interval1[2] > interval2[2]\n        return \"NO\"\n    \n    if interval1[1]\
    \ > interval2[1] and interval1[2] > interval2[2]\n        return \"NO\"\n    \n\
    \    if interval1[1] < interval2[1] and interval1[2] < interval2[2]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[1] and interval1[2] < interval2[2]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\
    \ and interval1[2] > interval2[2]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1] and interval1[2] < interval2[2]\n        return \"NO\"\n    \n\
    \    if interval1[1] > interval2[1] and interval1[2] > interval2[2]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[2] < interval2[2]\n\
    \        return \"NO\"\n    \n    if interval1[1] > interval2[1] and interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\
    \ and interval1[2] < interval2[2]\n        return \"NO\"\n    \n    if interval1[1]\
    \ > interval2[1] and interval1[2] > interval2[2]\n        return \"NO\"\n    \n\
    \    if interval1[1] < interval2[1] and interval1[2] < interval2[2]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[1] and interval1[2] > interval2[2]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[2]\
    \ < interval2[2]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\
    \ and interval1[2] > interval\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpeto7_6fp.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpeto7_6fp.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_hydgjz5.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_hydgjz5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_hydgjz5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2] \n        then \"YES\"\n        else if interval1[1]\
    \ > interval2[1] and interval1[2] > interval2[2] \n            then \"NO\"\n \
    \           else if interval1[1] > interval2[1] and interval1[2] <= interval2[2]\
    \ \n                then \"NO\"\n                else if interval1[1] <= interval2[1]\
    \ and interval1[2] > interval2[2] \n                    then \"NO\"\n        \
    \            else \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2czfe6l8.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2czfe6l8.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    if interval1[1] >=\
    \ interval2[1] and interval1[2] >= interval2[2]\n        return \"YES\"\n    return\
    \ \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpclhnc_3f.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpclhnc_3f.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] > interval2[1] and\
    \ interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[1] < interval2[1]\
    \ and interval1[2] > interval2[2]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1] and interval1[2] > interval2[2]\n        return \"NO\"\n    if\
    \ interval1[1] > interval2[1] and interval1[2] < interval2[2]\n        return\
    \ \"NO\"\n    return \"YES\"\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpg6c65e51.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpg6c65e51.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph8p22lth.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph8p22lth.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] < interval2[2]\n\
    \        return \"NO\"\n    if interval1[2] < interval2[1]\n        return \"\
    NO\"\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9gl82b6d.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9gl82b6d.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"NO\"\n    if interval1[1]\
    \ == interval2[1]\n        return \"YES\"\n    if interval1[0] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] < interval2[0]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[0] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] < interval2[0]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[0] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg_smij25.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg_smij25.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    if interval1[1] >=\
    \ interval2[1] and interval1[2] >= interval2[2]\n        return \"YES\"\n    return\
    \ \"NO\"\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_6xgvu3p.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_6xgvu3p.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    return \"NO\"\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test Cases\n@test intersection((1, 2), (2,\
    \ 3)) == \"NO\"\n@test intersection((-1, 1), (0, 4)) == \"NO\"\n@test intersection((-3,\
    \ -1), (-5, 5)) == \"YES\"\n</cell>\n<text>\nProblem 3\nWrite a Julia function\
    \ prime_number(n) that returns \"YES\" if n is a prime number, \"NO\" otherwise.\n\
    The function should take one integer argument and return \"YES\" if n is a prime\
    \ number, \"NO\" otherwise.\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4kw_peao.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4kw_peao.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ and interval1[2] < interval2[2] \n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1] and interval1[2] > interval2[2] \n        return \"NO\"\n   \
    \ if interval1[1] == interval2[1] and interval1[2] == interval2[2] \n        return\
    \ \"YES\"\n    if interval1[1] < interval2[1] and interval1[2] > interval2[2]\
    \ \n        return \"NO\"\n    if interval1[1] > interval2[1] and interval1[2]\
    \ < interval2[2] \n        return \"NO\"\n    if interval1[1] == interval2[1]\
    \ and interval1[2] > interval2[2] \n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1] and interval1[2] < interval2[2] \n        return \"NO\"\n   \
    \ if interval1[1] == interval2[1] and interval1[2] > interval2[2] \n        return\
    \ \"NO\"\n    if interval1[1] > interval2[1] and interval1[2] < interval2[2] \n\
    \        return \"NO\"\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpc9qi_on1.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpc9qi_on1.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2d7cxu2x.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2d7cxu2x.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval2[1] > interval1[1]\n\
    \        return \"NO\"\n    if interval1[1] == interval2[1]\n        return \"\
    YES\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval2[1]\
    \ < interval1[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] > interval1[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval2[1]\
    \ < interval1[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] > interval1[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval2[1]\
    \ < interval1[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] > interval1[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval2[1]\
    \ < interval1[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] > interval1[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval2[1]\
    \ < interval1[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] > interval1[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval2[1]\
    \ < interval1[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] > interval1[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval2[1]\
    \ < interval1[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] > interval1[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval2[1]\
    \ < interval1[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] > interval1[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval2[1]\
    \ < interval1\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmbrsppot.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmbrsppot.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] == interval2[0]\n        return \"\
    YES\"\n    if interval1[0] > interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ < interval2[0]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzqrrt7oa.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzqrrt7oa.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy4a0362s.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy4a0362s.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm7utm4tr.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpm7utm4tr.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] >= interval2[2] \n        then \"YES\" else \"NO\"\n    else\
    \ if interval1[1] >= interval2[1] and interval1[2] <= interval2[2] \n        then\
    \ \"YES\" else \"NO\"\n    else if interval1[1] <= interval2[1] and interval1[2]\
    \ > interval2[2] \n        then \"YES\" else \"NO\"\n    else if interval1[1]\
    \ >= interval2[1] and interval1[2] < interval2[2] \n        then \"YES\" else\
    \ \"NO\"\n    else if interval1[1] > interval2[1] and interval1[2] <= interval2[2]\
    \ \n        then \"YES\" else \"NO\"\n    else if interval1[1] < interval2[1]\
    \ and interval1[2] >= interval2[2] \n        then \"YES\" else \"NO\"\n    else\
    \ if interval1[1] > interval2[1] and interval1[2] > interval2[2] \n        then\
    \ \"YES\" else \"NO\"\n    else if interval1[1] < interval2[1] and interval1[2]\
    \ < interval2[2] \n        then \"YES\" else \"NO\"\n    else if interval1[1]\
    \ > interval2[1] and interval1[2] > interval2[2] \n        then \"YES\" else \"\
    NO\"\n    else if interval1[1] < interval2[1] and interval1[2] > interval2[2]\
    \ \n        then \"YES\" else \"NO\"\n    else if interval1[1] > interval2[1]\
    \ and interval1[2] < interval2[2] \n        then \"YES\" else \"NO\"\n    else\
    \ if interval1[1] < interval2[1] and interval1[2] < interval2[2] \n        then\
    \ \"YES\" else \"NO\"\n    else if interval1[1] > interval2[1] and interval1[2]\
    \ < interval2[2] \n        then \"YES\" else \"NO\"\n    else if interval1[1]\
    \ < interval2[1] and interval1[2] > interval2[2] \n        then \"YES\" else \"\
    NO\"\n    else if interval1[1] > interval2[1] and interval1[2] < interval2[2]\
    \ \n        then \"YES\" else \"NO\"\n    else if interval1[1] < interval2[1]\
    \ and interval1[2] < interval2[2] \n        then \"YES\" else \"NO\"\n    else\
    \ if interval1[1] > interval2[1] and interval1[2] > interval2[2] \n        then\
    \ \"YES\" else \"NO\"\n    else if interval1[1] < interval2[1] and interval1[2]\
    \ < interval2[2] \n        then \"YES\" else \"NO\"\n    else if interval1[1]\
    \ > interval2[1]\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdkmhkp2y.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdkmhkp2y.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    elseif interval1[0] > interval2[1]\n        return\
    \ \"NO\"\n    else\n        return \"YES\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxj39ljph.jl:34\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  BoundsError: attempt to\
    \ access (2, 3)\n    at index [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64)\
    \ at ./tuple.jl:24\n   [2] intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64})\
    \ at /tmp/tmpxj39ljph.jl:21\n   [3] top-level scope at /tmp/tmpxj39ljph.jl:34\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpxj39ljph.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpxj39ljph.jl:35\n  Test threw exception\n  Expression: candidate((-1,\
    \ 1), (0, 4)) == \"NO\"\n  BoundsError: attempt to access (0, 4)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpxj39ljph.jl:21\n\
    \   [3] top-level scope at /tmp/tmpxj39ljph.jl:35\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpxj39ljph.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpxj39ljph.jl:36\n  Test threw exception\n  Expression: candidate((-3,\
    \ -1), (-5, 5)) == \"YES\"\n  BoundsError: attempt to access (-5, 5)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpxj39ljph.jl:21\n\
    \   [3] top-level scope at /tmp/tmpxj39ljph.jl:36\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpxj39ljph.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpxj39ljph.jl:37\n  Test threw exception\n  Expression: candidate((-2,\
    \ 2), (-4, 0)) == \"YES\"\n  BoundsError: attempt to access (-4, 0)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpxj39ljph.jl:21\n\
    \   [3] top-level scope at /tmp/tmpxj39ljph.jl:37\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpxj39ljph.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpxj39ljph.jl:38\n  Test threw exception\n  Expression: candidate((-11,\
    \ 2), (-1, -1)) == \"NO\"\n  BoundsError: attempt to access (-1, -1)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpxj39ljph.jl:21\n\
    \   [3] top-level scope at /tmp/tmpxj39ljph.jl:38\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpxj39ljph.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpxj39ljph.jl:39\n  Test threw exception\n  Expression: candidate((1,\
    \ 2), (3, 5)) == \"NO\"\n  BoundsError: attempt to access (3, 5)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpxj39ljph.jl:21\n\
    \   [3] top-level scope at /tmp/tmpxj39ljph.jl:39\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpxj39ljph.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpxj39ljph.jl:40\n  Test threw exception\n  Expression: candidate((1,\
    \ 2), (1, 2)) == \"NO\"\n  BoundsError: attempt to access (1, 2)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpxj39ljph.jl:21\n\
    \   [3] top-level scope at /tmp/tmpxj39ljph.jl:40\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpxj39ljph.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpxj39ljph.jl:41\n  Test threw exception\n  Expression: candidate((-2,\
    \ -2), (-3, -2)) == \"NO\"\n  BoundsError: attempt to access (-3, -2)\n    at\
    \ index [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n\
    \   [2] intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpxj39ljph.jl:21\n\
    \   [3] top-level scope at /tmp/tmpxj39ljph.jl:41\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpxj39ljph.jl:33\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxj39ljph.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    return \"YES\"\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3s935c5y.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3s935c5y.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    if interval1[1] >=\
    \ interval2[1] and interval1[2] >= interval2[2]\n        return \"YES\"\n    if\
    \ interval1[1] >= interval2[1] and interval1[2] <= interval2[2]\n        return\
    \ \"YES\"\n    if interval1[1] <= interval2[1] and interval1[2] >= interval2[2]\n\
    \        return \"YES\"\n    return \"NO\"\nend\n</cell>\n<code language=julia-1.0>\n\
    # Test Cases\n@test intersection((1,2), (2,3)) == \"NO\"\n@test intersection((-1,1),\
    \ (0,4)) == \"NO\"\n@test intersection((-3,-1), (-5,5)) == \"YES\"\n</cell>\n\
    <text>\nProblem 3\nGiven a string, return a new string where each character has\
    \ been replaced with a new letter that is the same length as the original but\
    \ only contains letters from the original string and no other characters.\nExample:\
    \ \n    given \"hello\", return \"hll\"\n    given \"ab\", return \"ab\"\n   \
    \ given \"abacaba\", return \"abacaba\"\n    given \"abacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacab\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpk_opqehx.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpk_opqehx.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv2y2ymcn.jl:40\n  Expression: candidate((-3,\
    \ -1), (-5, 5)) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpv2y2ymcn.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv2y2ymcn.jl:37\ntest set: Test Failed at /tmp/tmpv2y2ymcn.jl:41\n\
    \  Expression: candidate((-2, 2), (-4, 0)) == \"YES\"\n   Evaluated: \"NO\" ==\
    \ \"YES\"\nStacktrace:\n [1] top-level scope at /tmp/tmpv2y2ymcn.jl:41\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv2y2ymcn.jl:37\ntest set: Test Failed at /tmp/tmpv2y2ymcn.jl:44\n\
    \  Expression: candidate((1, 2), (1, 2)) == \"NO\"\n   Evaluated: \"YES\" == \"\
    NO\"\nStacktrace:\n [1] top-level scope at /tmp/tmpv2y2ymcn.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv2y2ymcn.jl:37\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv2y2ymcn.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[0] > interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[0]\n        return \"NO\"\n    if interval1[1] > interval2[0]\n\
    \        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0_abfoxd.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0_abfoxd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] == interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6_m6xryu.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6_m6xryu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp594ba4b8.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp594ba4b8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy8kys94_.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpy8kys94_.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[0]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[0] == interval2[0]\n        return\
    \ \"YES\"\n    \n    if interval1[1] < interval2[1]\n        return \"NO\"\n \
    \   \n    if interval1[1] > interval2[1]\n        return \"NO\"\n    \n    if\
    \ interval1[0] == interval2[1]\n        return \"YES\"\n    \n    if interval1[1]\
    \ < interval2[0]\n        return \"NO\"\n    \n    if interval1[1] > interval2[0]\n\
    \        return \"NO\"\n    \n    if interval1[0] == interval2[1]\n        return\
    \ \"YES\"\n    \n    if interval1[1] < interval2[0]\n        return \"NO\"\n \
    \   \n    if interval1[1] > interval2[0]\n        return \"NO\"\n    \n    return\
    \ \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnqmxotr3.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnqmxotr3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[0] > interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] == interval2[1]\n        return \"\
    YES\"\n    if interval1[1] < interval2[0]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    return \"NO\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpenc8ae9_.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpenc8ae9_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ and interval2[1] < interval1[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1] and interval2[1] > interval1[1]\n        return \"NO\"\n    if\
    \ interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1] <\
    \ interval2[1]\n        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval2\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3m9gduwb.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3m9gduwb.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ or interval1[1] > interval2[1] or interval1[2] < interval2[2] or interval1[2]\
    \ > interval2[2] \n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\
    \ and interval1[2] > interval2[2] \n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1] and interval1[2] < interval2[2] \n        return \"NO\"\n   \
    \ \n    if interval1[1] > interval2[1] and interval1[2] < interval2[2] \n    \
    \    return \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[2]\
    \ > interval2[2] \n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\
    \ and interval1[2] > interval2[2] \n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1] and interval1[2] < interval2[2] \n        return \"NO\"\n   \
    \ \n    if interval1[1] > interval2[1] and interval1[2] > interval2[2] \n    \
    \    return \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[2]\
    \ > interval2[2] \n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\
    \ and interval1[2] < interval2[2] \n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1] and interval1[2] < interval2[2] \n        return \"NO\"\n   \
    \ \n    if interval1[1] > interval2[1] and interval1[2] > interval2[2] \n    \
    \    return \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[2]\
    \ > interval2[2] \n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\
    \ and interval1[2] < interval2[2] \n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1] and interval1[2] < interval2[2] \n        return \"NO\"\n   \
    \ \n    if interval1[1] > interval2[1] and interval1[2] > interval2[2] \n    \
    \    return \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[2]\
    \ > interval2[2] \n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\
    \ and interval1[2] < interval2[2] \n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1] and interval1[2] < interval2[2] \n        return \"NO\"\n   \
    \ \n    if interval1[1] > interval2[1] and interval1[2] > interval2[2] \n    \
    \    return \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[2]\
    \ > interval2[2] \n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\
    \ and interval1[2] < \nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwr_ehujl.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwr_ehujl.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ >= interval2[1] and interval1[2] >= interval2[2]\n        return \"YES\"\n \
    \   else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpthap4xxm.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpthap4xxm.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((1,\
    \ 2), (2, 3))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-1,\
    \ 1), (0, 4))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdefdbf4s.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdefdbf4s.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ or interval1[1] > interval2[1] or interval1[2] < interval2[2] or interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    else if interval1[1] == interval2[1]\
    \ and interval1[2] == interval2[2]\n        return \"YES\"\n    else\n       \
    \ return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpikeoioju.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpikeoioju.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd2e5sopo.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd2e5sopo.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] == interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[1]\n        return \"NO\"\n    if interval1[0] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] < interval2[0]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[0]\n        return \"NO\"\n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    return \"YES\"\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt54nx6_g.jl:41\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt54nx6_g.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2] \n        then \"YES\"\n        else \n   \
    \         if interval1[1] > interval2[1] and interval1[2] > interval2[2] \n  \
    \              then \"NO\"\n                else \n                    if interval1[1]\
    \ > interval2[1] and interval1[2] <= interval2[2] \n                        then\
    \ \"NO\"\n                        else \n                            if interval1[1]\
    \ <= interval2[1] and interval1[2] > interval2[2] \n                         \
    \       then \"NO\"\n                                else \n                 \
    \                   if interval1[1] <= interval2[1] and interval1[2] <= interval2[2]\
    \ \n                                        then \"NO\"\n                    \
    \                    else \n                                            if interval1[1]\
    \ > interval2[1] and interval1[2] > interval2[2] \n                          \
    \                      then \"NO\"\n                                         \
    \       else \n                                                    if interval1[1]\
    \ > interval2[1] and interval1[2] > interval2[2] \n                          \
    \                              then \"NO\"\n                                 \
    \                       else \n                                              \
    \              if interval1[1] > interval2[1] and interval1[2] <= interval2[2]\
    \ \n                                                                then \"NO\"\
    \n                                                                else \n    \
    \                                                                if interval1[1]\
    \ <= interval2[1] and interval1[2] > interval2[2] \n                         \
    \                                               then \"NO\"\n                \
    \                                                        else \n             \
    \                                                               if interval1[1]\
    \ <= interval2[1] and interval1[2] <= interval2[2] \n                        \
    \                                                        then \"NO\"\n       \
    \                                                                         else\
    \ \n                                                                         \
    \           if interval1[1] > interval2[1] and interval1[2] > interval2[2] \n\
    \                                                                            \
    \            then \"NO\"\n                                                   \
    \                                     else \n                                \
    \                                                            if interval1[1] <=\
    \ interval2[1] and interval1[2] > interval2[2] \n                            \
    \                                                                    then \"NO\"\
    \n                                                                           \
    \                     else \n                                                \
    \                                                    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2] \n                                        \
    \                                                                then \"NO\"\n\
    \                                                                            \
    \                            else \n                                         \
    \                                                                   if interval1[1]\
    \ > interval2[1] and interval1[2] > interval2[2] \n                          \
    \                                                                            \
    \          then \"NO\"\n                                                     \
    \                                                           else \n          \
    \                                                                            \
    \                              if interval1[1] <= interval2[1] and interval1[2]\
    \ > interval2[2] \n                                                          \
    \                                                              then \"NO\"\n \
    \                                                                            \
    \                                           else \n                          \
    \                                                                            \
    \                      if interval1[1] <= interval2[1] and interval1[2] <= interval2[2]\
    \ \n                                                                         \
    \                                                       then \"NO\"\n        \
    \                                                                            \
    \                                            else \n                         \
    \                                                                            \
    \                               if interval1[1] > interval2[1] and interval1[2]\
    \ > interval2[2] \n                                                          \
    \                                                                            \
    \  then \"NO\"\n                                                             \
    \                                                                           else\
    \ \n                                                                         \
    \                                                                   if interval1[1]\
    \ <= interval2[1] and interval1[2] > interval2[2] \n                         \
    \                                                                            \
    \                                           then \"NO\"\n                    \
    \                                                                            \
    \                                                else \n                     \
    \                                                                           \n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpb_tw7275.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpb_tw7275.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2_z07rlj.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2_z07rlj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[1]\n\
    \    if end1 < end2\n        return \"NO\"\n    end1 = interval1[1]\n    end2\
    \ = interval2[1]\n    if end1 < end2\n        return \"NO\"\n    end1 = interval1[1]\n\
    \    end2 = interval2[1]\n    if end1 < end2\n        return \"NO\"\n    end1\
    \ = interval1[1]\n    end2 = interval2[1]\n    if end1 < end2\n        return\
    \ \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[1]\n    if end1 < end2\n\
    \        return \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[1]\n   \
    \ if end1 < end2\n        return \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[1]\n\
    \    if end1 < end2\n        return \"NO\"\n    end1 = interval1[1]\n    end2\
    \ = interval2[1]\n    if end1 < end2\n        return \"NO\"\n    end1 = interval1[1]\n\
    \    end2 = interval2[1]\n    if end1 < end2\n        return \"NO\"\n    end1\
    \ = interval1[1]\n    end2 = interval2[1]\n    if end1 < end2\n        return\
    \ \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[1]\n    if end1 < end2\n\
    \        return \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[1]\n   \
    \ if end1 < end2\n        return \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[1]\n\
    \    if end1 < end2\n        return \"NO\"\n    end1 = interval1[1]\n    end2\
    \ = interval2[1]\n    if end1 < end2\n        return \"NO\"\n    end1 = interval1[1]\n\
    \    end2 = interval2[1]\n    if end1 < end2\n        return \"NO\"\n    end1\
    \ = interval1[1]\n    end2 = interval2[1]\n    if end1 < end2\n        return\
    \ \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[1]\n    if end1 < end2\n\
    \        return \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[1]\n   \
    \ if end1 < end2\n        return \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[1]\n\
    \    if end1 < end2\n        return \"NO\"\n    end1 = interval1[1]\n    end2\
    \ = interval2[1]\n    if end1 < end2\n        return \"NO\"\n    end1 = interval1[1]\n\
    \    end2 = interval2[1]\n    if end1 < end2\n        return \"NO\"\n    end1\
    \ = interval1[1]\n    end2 = interval2[1]\n    if end1 < end2\n        return\
    \ \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[1]\n    if \nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmptg7o1f8z.jl:114\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptg7o1f8z.jl:115\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptg7o1f8z.jl:115\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] == interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm70h_1wo.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm70h_1wo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprk7q4zsb.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprk7q4zsb.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2] \n    then \"YES\" else \"NO\"\n    else \n\
    \        if interval1[1] < interval2[1] and interval1[2] > interval2[2] \n   \
    \     then \"NO\" else \"YES\"\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_13o0qaz.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_13o0qaz.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] == interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[2]\
    \ < interval2[2]\n        return \"NO\"\n    if interval1[2] > interval2[2]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[2]\n        return \"\
    NO\"\n    if interval1[2] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[2]\n        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwztsa3av.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwztsa3av.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] < interval2[2]\n\
    \        return \"NO\"\n    if interval1[2] < interval2[1]\n        return \"\
    NO\"\n    return \"YES\"\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0vrynpza.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0vrynpza.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    else if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[0] == interval2[1]\n        return\
    \ \"YES\"\n    elseif interval1[0] < interval2[1]\n        return \"NO\"\n   \
    \ elseif interval1[0] > interval2[1]\n        return \"NO\"\n    else\n      \
    \  return \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprs0_gxev.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprs0_gxev.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzzqf34xa.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzzqf34xa.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzzqf34xa.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    return \"NO\"\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test Cases\n@test intersection((1, 2), (2, 3)) == \"NO\"\n@test intersection((-1,\
    \ 1), (0, 4)) == \"NO\"\n@test intersection((-3, -1), (-5, 5)) == \"YES\"\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of times a given number\
    \ appears in a given list.\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcng1q4sj.jl:49\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcng1q4sj.jl:49\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[0] == interval2[0]\n        return \"YES\"\n\
    \    \n    if interval1[0] > interval2[0]\n        return \"NO\"\n    \n    if\
    \ interval1[0] < interval2[0]\n        return \"NO\"\n    \n    return \"NO\"\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2napsbac.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2napsbac.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[2] < interval2[2]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr8o6fi4t.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr8o6fi4t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk2jfwkep.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk2jfwkep.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    return \"NO\"\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpo6kdg7zy.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpo6kdg7zy.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2]\n        return \"YES\"\n    else\n       \
    \ return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1lmigm85.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1lmigm85.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] < interval2[2]\n\
    \        return \"NO\"\n    if interval1[2] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[2]\n        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyu418d51.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyu418d51.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[0]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[0] == interval2[0]\n        return\
    \ \"YES\"\n    \n    if interval1[0] < interval2[1]\n        return \"NO\"\n \
    \   \n    if interval1[1] > interval2[0]\n        return \"NO\"\n    \n    if\
    \ interval1[1] < interval2[1]\n        return \"NO\"\n    \n    return \"YES\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzv0n6fo5.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzv0n6fo5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ == interval2[1]\n        return \"YES\"\n    if interval1[1] < interval2[1]\n\
    \        return \"YES\"\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjj2gvuow.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjj2gvuow.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ == interval2[1]\n        return \"YES\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"YES\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"YES\"\n    \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ == interval2[1]\n        return \"YES\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ == interval2[1]\n        return \"YES\"\n    \n    return \"NO\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm64v5gr1.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm64v5gr1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ and interval1[2] < interval2[2] \n        then \"NO\" \n        else if interval1[1]\
    \ < interval2[1] and interval1[2] > interval2[2] \n            then \"NO\" \n\
    \            else if interval1[1] > interval2[1] and interval1[2] < interval2[2]\
    \ \n                then \"NO\" \n                else if interval1[1] > interval2[1]\
    \ and interval1[2] > interval2[2] \n                    then \"NO\" \n       \
    \             else if interval1[1] == interval2[1] and interval1[2] == interval2[2]\
    \ \n                        then \"YES\" \n                        else \"NO\"\
    \ \n    else if interval1[1] < interval2[1] and interval1[2] > interval2[2] \n\
    \        then \"NO\" \n        else if interval1[1] > interval2[1] and interval1[2]\
    \ < interval2[2] \n            then \"NO\" \n            else if interval1[1]\
    \ > interval2[1] and interval1[2] > interval2[2] \n                then \"NO\"\
    \ \n                else if interval1[1] == interval2[1] and interval1[2] == interval2[2]\
    \ \n                    then \"YES\" \n                    else \"NO\" \n    else\
    \ if interval1[1] > interval2[1] and interval1[2] < interval2[2] \n        then\
    \ \"NO\" \n        else if interval1[1] < interval2[1] and interval1[2] > interval2[2]\
    \ \n            then \"NO\" \n            else if interval1[1] > interval2[1]\
    \ and interval1[2] > interval2[2] \n                then \"NO\" \n           \
    \     else if interval1[1] == interval2[1] and interval1[2] == interval2[2] \n\
    \                    then \"YES\" \n                    else \"NO\" \n    else\
    \ if interval1[1] > interval2[1] and interval1[2] > interval2[2] \n        then\
    \ \"NO\" \n        else if interval1[1] == interval2[1] and interval1[2] == interval2[2]\
    \ \n            then \"YES\" \n            else \"NO\" \nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8lgmylmh.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8lgmylmh.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv1t7sr0w.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv1t7sr0w.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ > interval2[1] && interval1[2] > interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[1] < interval2[1] && interval1[2] < interval2[2]\n        return \"\
    NO\"\n    elseif interval1[1] < interval2[1] && interval1[2] > interval2[2]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1] && interval1[2]\
    \ < interval2[2]\n        return \"NO\"\n    elseif interval1[1] > interval2[1]\
    \ && interval1[2] > interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ < interval2[1] && interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[1] < interval2[1] && interval1[2] > interval2[2]\n        return \"\
    NO\"\n    elseif interval1[1] > interval2[1] && interval1[2] < interval2[2]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1] && interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    elseif interval1[1] < interval2[1]\
    \ && interval1[2] < interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ < interval2[1] && interval1[2] > interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[1] > interval2[1] && interval1[2] < interval2[2]\n        return \"\
    NO\"\n    elseif interval1[1] > interval2[1] && interval1[2] > interval2[2]\n\
    \        return \"NO\"\n    elseif interval1[1] < interval2[1] && interval1[2]\
    \ < interval2[2]\n        return \"NO\"\n    elseif interval1[1] < interval2[1]\
    \ && interval1[2] > interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ > interval2[1] && interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[1] > interval2[1] && interval1[2] > interval2[2]\n        return \"\
    NO\"\n    elseif interval1[1] < interval2[1] && interval1[2] < interval2[2]\n\
    \        return \"NO\"\n    elseif interval1[1] < interval2[1] && interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    elseif interval1[1] > interval2[1]\
    \ && interval1[2] < interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ > interval2[1] && interval1[2] > interval2[2]\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqav6ai98.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqav6ai98.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] >= interval2[2] \n        then \"YES\"\n        else if interval1[1]\
    \ >= interval2[1] and interval1[2] <= interval2[2] \n            then \"NO\"\n\
    \            else if interval1[1] <= interval2[1] and interval1[2] >= interval2[2]\
    \ \n                then \"NO\"\n                else if interval1[1] >= interval2[1]\
    \ and interval1[2] <= interval2[2] \n                    then \"YES\"\n      \
    \              else \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2zsvgs52.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2zsvgs52.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[1]\n        return \"YES\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"YES\"\n    \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"YES\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[1]\n        return \"YES\"\n    \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[1]\n        return \"YES\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"YES\"\n    \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[1]\n        return \"YES\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"YES\"\n    \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[1]\n        return \"YES\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4k4a_rnp.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4k4a_rnp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2] \n        then \"YES\"\n        else if interval1[1]\
    \ <= interval2[2] and interval1[2] <= interval2[1]\n            then \"YES\"\n\
    \            else if interval1[1] <= interval2[1] and interval1[2] <= interval2[2]\n\
    \                then \"YES\"\n                else if interval1[1] <= interval2[2]\
    \ and interval1[2] <= interval2[1]\n                    then \"YES\"\n       \
    \             else \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test Cases\n@test intersection((1, 2), (2, 3)) == \"NO\"\n@test intersection((-1,\
    \ 1), (0, 4)) == \"NO\"\n@test intersection((-3, -1), (-5, 5)) == \"YES\"\n</cell>\n\
    <text>\nProblem 3\nWrite a Julia function prime_number(n) that returns \"YES\"\
    \ if n is a prime number and \n\"NO\" otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpi7kocmlz.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpi7kocmlz.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[1] or interval2[1] < interval1[1]\n        return \"NO\"\n    \n\
    \    if interval1[1] > interval2[1]\n        return \"NO\"\n    \n    if interval1[0]\
    \ == interval2[1]\n        return \"NO\"\n    \n    if interval1[0] == interval2[0]\n\
    \        return \"YES\"\n    \n    if interval1[1] < interval2[0]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[0]\n        return \"NO\"\n  \
    \  \n    if interval1[1] > interval2[1] and interval1[1] < interval2[0]\n    \
    \    return \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[1]\
    \ > interval2[0]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\
    \ and interval1[1] > interval2[0]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1] and interval1[1] > interval2[0]\n        return \"NO\"\n    \n\
    \    if interval1[1] < interval2[1] and interval1[1] > interval2[0]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[1] > interval2[0]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[1]\
    \ > interval2[0]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\
    \ and interval1[1] > interval2[0]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1] and interval1[1] > interval2[0]\n        return \"NO\"\n    \n\
    \    if interval1[1] < interval2[1] and interval1[1] > interval2[0]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[1] > interval2[0]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[1]\
    \ > interval2[0]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\
    \ and interval1[1] > interval2[0]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1] and interval1[1] > interval2[0]\n        return \"NO\"\n    \n\
    \    if interval1[1] < interval2[1] and interval1[1] > interval2[0]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[1] > interval2[0]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[1]\
    \ > interval2[0]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\
    \ and interval1[1] > interval2[0]\n        return \"NO\"\n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval2\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_9inmhst.jl:22\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_9inmhst.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ > interval2[1] && interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[1] < interval2[1] && interval1[2] > interval2[2]\n        return \"\
    NO\"\n    elseif interval1[1] < interval2[1] && interval1[2] > interval2[2] &&\
    \ interval1[1] < interval2[1]\n        return \"NO\"\n    elseif interval1[1]\
    \ > interval2[1] && interval1[2] < interval2[2] && interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1] && interval1[2]\
    \ > interval2[2] && interval1[1] > interval2[1]\n        return \"NO\"\n    elseif\
    \ interval1[1] > interval2[1] && interval1[2] < interval2[2] && interval1[1] <\
    \ interval2[1]\n        return \"NO\"\n    elseif interval1[1] < interval2[1]\
    \ && interval1[2] < interval2[2] && interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[1] < interval2[1] && interval1[2] > interval2[2]\
    \ && interval1[1] > interval2[1]\n        return \"NO\"\n    elseif interval1[1]\
    \ < interval2[1] && interval1[2] > interval2[2] && interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1] && interval1[2]\
    \ > interval2[2] && interval1[1] > interval2[1]\n        return \"NO\"\n    elseif\
    \ interval1[1] > interval2[1] && interval1[2] < interval2[2] && interval1[1] <\
    \ interval2[1]\n        return \"NO\"\n    elseif interval1[1] > interval2[1]\
    \ && interval1[2] < interval2[2] && interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[1] < interval2[1] && interval1[2] < interval2[2]\
    \ && interval1[1] > interval2[1]\n        return \"NO\"\n    elseif interval1[1]\
    \ < interval2[1] && interval1[2] > interval2[2] && interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] < interval2[1] && interval1[2]\
    \ > interval2[2] && interval1[1] < interval2[1]\n        return \"NO\"\n    elseif\
    \ interval1[1] < interval2[1] && interval1[2] < interval2[2] && interval1[1] >\
    \ interval\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9d5w2oi8.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9d5w2oi8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ or interval2[1] < interval1[1] \n        return \"NO\"\n    if interval1[1]\
    \ == interval2[1]\n        return \"YES\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval2\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3n8br2pn.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3n8br2pn.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"NO\"\n    if interval1[1]\
    \ == interval2[1]\n        return \"YES\"\n    if interval1[0] <= interval2[1]\
    \ and interval2[0] <= interval1[1]\n        return \"YES\"\n    return \"NO\"\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval2\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmzx94a49.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmzx94a49.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[0]\n        return \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[0]\n\
    \    \n    if end1 < end2\n        return \"NO\"\n    end1 = interval1[0]\n  \
    \  end2 = interval2[1]\n    \n    if end1 < end2\n        return \"NO\"\n    end1\
    \ = interval1[1]\n    end2 = interval2[0]\n    \n    if end1 < end2\n        return\
    \ \"NO\"\n    end1 = interval1[0]\n    end2 = interval2[1]\n    \n    if end1\
    \ < end2\n        return \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[0]\n\
    \    \n    if end1 < end2\n        return \"NO\"\n    end1 = interval1[0]\n  \
    \  end2 = interval2[1]\n    \n    if end1 < end2\n        return \"NO\"\n    end1\
    \ = interval1[0]\n    end2 = interval2[0]\n    \n    if end1 < end2\n        return\
    \ \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[1]\n    \n    if end1\
    \ < end2\n        return \"NO\"\n    end1 = interval1[0]\n    end2 = interval2[0]\n\
    \    \n    if end1 < end2\n        return \"NO\"\n    end1 = interval1[1]\n  \
    \  end2 = interval2[1]\n    \n    if end1 < end2\n        return \"NO\"\n    end1\
    \ = interval1[0]\n    end2 = interval2[0]\n    \n    if end1 < end2\n        return\
    \ \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[1]\n    \n    if end1\
    \ < end2\n        return \"NO\"\n    end1 = interval1[0]\n    end2 = interval2[0]\n\
    \    \n    if end1 < end2\n        return \"NO\"\n    end1 = interval1[1]\n  \
    \  end2 = interval2[1]\n    \n    if end1 < end2\n        return \"NO\"\n    end1\
    \ = interval1[0]\n    end2 = interval2[0]\n    \n    if end1 < end2\n        return\
    \ \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[1]\n    \n    if end1\
    \ < end2\n        return \"NO\"\n    end1 = interval1[0]\n    end2 = interval2[0]\n\
    \    \n    if end1 < end2\n        return \"NO\"\n    end1 = interval1[1]\n  \
    \  end2 = interval2[1]\n    \n    if end1 < end2\n        return \"NO\"\n    end1\
    \ = interval1[0]\n    end2 = interval2[0]\n    \n    if end1 < end2\n        return\
    \ \"NO\"\n    end1 = interval1[1]\n    end2 = interval2[1]\n    \n    if end1\
    \ < end2\n        return \"NO\"\n    end1 = interval1[0]\n    end2 = interval2[0]\n\
    \    \n    if end1 < \nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplc1gd84q.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplc1gd84q.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    elseif interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[2] < interval2[2]\n        return\
    \ \"NO\"\n    elseif interval1[2] > interval2[2]\n        return \"NO\"\n    else\n\
    \        return \"YES\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwyz1imev.jl:41\n  Expression: candidate((-3,\
    \ -1), (-5, 5)) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwyz1imev.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwyz1imev.jl:38\ntest set: Test Failed at /tmp/tmpwyz1imev.jl:42\n\
    \  Expression: candidate((-2, 2), (-4, 0)) == \"YES\"\n   Evaluated: \"NO\" ==\
    \ \"YES\"\nStacktrace:\n [1] top-level scope at /tmp/tmpwyz1imev.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwyz1imev.jl:38\ntest set: Test Failed at /tmp/tmpwyz1imev.jl:45\n\
    \  Expression: candidate((1, 2), (1, 2)) == \"NO\"\n   Evaluated: \"YES\" == \"\
    NO\"\nStacktrace:\n [1] top-level scope at /tmp/tmpwyz1imev.jl:45\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwyz1imev.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwyz1imev.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n# Test case 1\nintersection((1,\
    \ 2), (2, 3))\n</cell>\n<code language=julia-1.5>\n# Test case 2\nintersection((-1,\
    \ 1), (0, 4))\n</cell>\n<code language=julia-1.5>\n# Test case 3\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case 4\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case 5\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case 6\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case 7\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case 8\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case 9\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case 10\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case 11\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case 12\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case 13\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case 14\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case 15\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case 16\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case 17\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case 18\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case 19\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.5>\n# Test case \nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4m23g2ii.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4m23g2ii.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzi5w2v6e.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzi5w2v6e.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ or interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[2] <\
    \ interval2[2] or interval1[2] > interval2[2]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[2] < interval2[2]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9vxbcq1w.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9vxbcq1w.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    if interval1[1] >=\
    \ interval2[1] and interval1[2] >= interval2[2]\n        return \"YES\"\n    return\
    \ \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpik701_8p.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpik701_8p.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ == interval2[1]\n        return \"YES\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"YES\"\n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprocw_4kj.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprocw_4kj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ <= interval2[1] and interval1[2] <= interval2[2]\n        return \"YES\"\n \
    \   else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6pezz_65.jl:22\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6pezz_65.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2] \n        then \"YES\" \n        else if interval1[1]\
    \ >= interval2[1] and interval1[2] >= interval2[2] \n            then \"NO\" \n\
    \            else if interval1[1] <= interval2[1] and interval1[2] >= interval2[2]\
    \ \n                then \"NO\" \n                else if interval1[1] >= interval2[1]\
    \ and interval1[2] <= interval2[2] \n                    then \"NO\" \n      \
    \              else \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphr7pgozi.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphr7pgozi.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\
    \ || interval2[1] < interval1[0] \n        return \"NO\"\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyftv2ju5.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyftv2ju5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] >= interval2[1] and\
    \ interval1[2] >= interval2[2]\n        return \"YES\"\n    return \"NO\"\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4da38dg5.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4da38dg5.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2]\n        then \"YES\"\n        else \n    \
    \        if interval1[1] > interval2[1]\n                then \"NO\"\n       \
    \         else \n                    if interval1[2] > interval2[2]\n        \
    \                then \"NO\"\n                        else \n                \
    \            if interval1[1] > interval2[1] and interval1[2] > interval2[2]\n\
    \                                then \"NO\"\n                               \
    \ else \n                                    if interval1[1] > interval2[1] and\
    \ interval1[2] <= interval2[2]\n                                        then \"\
    YES\"\n                                        else \n                       \
    \                     if interval1[1] <= interval2[1] and interval1[2] > interval2[2]\n\
    \                                                then \"YES\"\n              \
    \                                  else \n                                   \
    \                 if interval1[1] <= interval2[1] and interval1[2] <= interval2[2]\n\
    \                                                        then \"YES\"\n      \
    \                                                  else \n                   \
    \                                         if interval1[1] <= interval2[1] and\
    \ interval1[2] > interval2[2]\n                                              \
    \                  then \"YES\"\n                                            \
    \                    else \n                                                 \
    \                   if interval1[1] <= interval2[1] and interval1[2] <= interval2[2]\n\
    \                                                                        then\
    \ \"YES\"\n                                                                  \
    \      else \n                                                               \
    \             if interval1[1] > interval2[1] and interval1[2] > interval2[2]\n\
    \                                                                            \
    \    then \"YES\"\n                                                          \
    \                      else \n                                               \
    \                                     if interval1[1] > interval2[1] and interval1[2]\
    \ > interval2[2]\n                                                           \
    \                             then \"YES\"\n                                 \
    \                                                       else \n              \
    \                                                                            \
    \  if interval1[1] > interval2[1] and interval1[2] <= interval2[2]\n         \
    \                                                                            \
    \           then \"YES\"\n                                                   \
    \                                             else \n                        \
    \                                                                            if\
    \ interval1[1] > interval2[1] and interval1[2] > interval2[2]\n              \
    \                                                                            \
    \              then \"YES\"\n                                                \
    \                                                        else \n             \
    \                                                                            \
    \                   if interval1[1] <= interval2[1] and interval1[2] > interval2[2]\n\
    \                                                                            \
    \                                    then \"YES\"\n                          \
    \                                                                            \
    \          else \n                                                           \
    \                                                         if interval1[1] <= interval2[1]\
    \ and interval1[2] > interval2[2]\n                                          \
    \                                                                            \
    \  then \"YES\"\n                                                            \
    \                                                            else \n         \
    \                                                                            \
    \                                       if interval1[1] <= interval2[1] and interval1[2]\
    \ <= interval2[2]\n                                                          \
    \                                                                      then \"\
    YES\"\n                                                                      \
    \                                                          else \n           \
    \                                                                            \
    \                                             if interval1[1] > interval2[1] and\
    \ interval1[2] <= interval2[2]\n                                             \
    \                                                                            \
    \               then \"YES\"\n                                               \
    \                                                                            \
    \             else \n                                                        \
    \                                                                            \
    \        if interval1[1] > interval2[1] and interval1[2] > interval2[2]\n    \
    \                                                                            \
    \                                                                then \"YES\"\n\
    \                                                                            \
    \                                                                    else \n \
    \                                                                            \
    \                                                                       if interval1[1]\
    \ > interval2[1] and interval1[2] <= interval2[2]\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmefc6h31.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmefc6h31.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\n</cell>\n<code language=julia-1.3>\n# TEST intersection\
    \ (5b)\n@test intersection((1, 2), (2, 3)) == \"NO\"\n@test intersection((-1,\
    \ 1), (0, 4)) == \"NO\"\n@test intersection((-3, -1), (-5, 5)) == \"YES\"\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks whether a number is prime or\
    \ not. \nThe function should take in a number as an argument and return a Boolean\
    \ value.\nThe function should return \"YES\" if the number is prime and \"NO\"\
    \ otherwise.\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd3xklzoc.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd3xklzoc.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval2[1] <= interval1[1]\n        return \"YES\"\n    elseif interval1[1]\
    \ <= interval2[1] and interval2[1] > interval1[1]\n        return \"NO\"\n   \
    \ elseif interval1[1] > interval2[1] and interval2[1] <= interval1[1]\n      \
    \  return \"NO\"\n    elseif interval1[1] > interval2[1] and interval2[1] > interval1[1]\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval2\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpw4ykq6ql.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpw4ykq6ql.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    return \"NO\"\nend\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp15f5tn9r.jl:39\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp15f5tn9r.jl:39\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ or interval2[1] < interval1[1] \n        return \"NO\"\n    if interval1[1]\
    \ == interval2[1]\n        return \"YES\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval2\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkdx8b9qo.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpkdx8b9qo.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ <= interval2[1] and interval1[2] <= interval2[2]\n        return \"YES\"\n \
    \   else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps1jy8d97.jl:22\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmps1jy8d97.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[0] > interval2[0]\n\
    \        return \"NO\"\n    return \"YES\"\nend\n</cell>\n<code language=julia-1.5>\n\
    # test your code\n@test intersection((1, 2), (2, 3)) == \"NO\"\n@test intersection((-1,\
    \ 1), (0, 4)) == \"NO\"\n@test intersection((-3, -1), (-5, 5)) == \"YES\"\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks whether a number is prime or\
    \ not. \nThe function should take in a single integer number as its only argument.\n\
    The function should return \"YES\" if the number is prime and \"NO\" otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjj3fqf_i.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjj3fqf_i.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ or interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[2] <\
    \ interval2[2] or interval1[2] > interval2[2]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[2] > interval2[2]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[1]\
    \ == interval2[1] and interval1[2] == interval2[2]\n        return \"YES\"\n \
    \   if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[2] < interval2[2]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1] and interval1[2] == interval2[2]\n \
    \       return \"YES\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] > interval2[2]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[2] < interval2[2]\n\
    \        return \"NO\"\n    if interval1[1] == interval2[1] and interval1[2] ==\
    \ interval2[2]\n        return \"YES\"\n    return \"NO\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_ijzst2c.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_ijzst2c.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ or interval1[1] > interval2[1]\n        return \"NO\"\n    elseif interval1[2]\
    \ < interval2[2] or interval1[2] > interval2[2]\n        return \"NO\"\n    else\n\
    \        return \"YES\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ case 1\n@test intersection((1, 2), (2, 3)) == \"NO\"\n@test intersection((-1,\
    \ 1), (0, 4)) == \"NO\"\n@test intersection((-3, -1), (-5, 5)) == \"YES\"\n</cell>\n\
    <code language=julia-1.5>\n# Test case 2\n@test intersection((-1, 1), (0, 4))\
    \ == \"NO\"\n@test intersection((-3, -1), (-5, 5)) == \"NO\"\n@test intersection((1,\
    \ 2), (2, 3)) == \"NO\"\n</cell>\n<code language=julia-1.5>\n# Test case 3\n@test\
    \ intersection((-1, 1), (0, 4)) == \"NO\"\n@test intersection((-3, -1), (-5, 5))\
    \ == \"NO\"\n@test intersection((1, 2), (2, 3)) == \"NO\"\n</cell>\n<code language=julia-1.5>\n\
    # Test case 4\n@test intersection((-1, 1), (0, 4)) == \"NO\"\n@test intersection((-3,\
    \ -1), (-5, 5)) == \"NO\"\n@test intersection((1, 2), (2, 3)) == \"NO\"\n</cell>\n\
    <code language=julia-1.5>\n# Test case 5\n@test intersection((-1, 1), (0, 4))\
    \ == \"NO\"\n@test intersection((-3, -1), (-5, 5)) == \"NO\"\n@test intersection((1,\
    \ 2), (2, 3)) == \"NO\"\n</cell>\n<code language=julia-1.5>\n# Test case 6\n@test\
    \ intersection((-1, 1), (0, 4)) == \"NO\"\n@test intersection((-3, -1), (-5, 5))\
    \ == \"NO\"\n@test intersection((1, 2), (2, 3)) == \"NO\"\n</cell>\n<code language=julia-1.5>\n\
    # Test case 7\n@test intersection((-1, 1), (0, 4)) == \"NO\"\n@test intersection((-3,\
    \ -1), (-5, 5)) == \"NO\"\n@test intersection((1, 2), (2, 3)) == \"NO\"\n</cell>\n\
    <code language=julia-1.5>\n# Test case 8\n@test intersection((-1, 1), (0, 4))\
    \ == \"NO\"\n@test intersection((-3, -1), (-5, 5)) == \"NO\"\n@test intersection((1,\
    \ 2), (2, 3)) == \"NO\"\n</cell>\n<code language=julia-1.5>\n# Test case 9\n@test\
    \ intersection((-1, 1), (0, 4)) == \"NO\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp97spmto4.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp97spmto4.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"NO\"\n    if interval1[1]\
    \ == interval2[1]\n        return \"YES\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] == interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"NO\"\n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    return \"YES\"\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzuwruiuj.jl:43\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzuwruiuj.jl:43\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd32l_mm2.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd32l_mm2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\
    \ || interval2[1] < interval1[0] \n        return \"NO\"\n    \n    if interval1[1]\
    \ == interval2[1]\n        return \"YES\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[0] == interval2[0]\n        return\
    \ \"YES\"\n    \n    if interval1[0] < interval2[0]\n        return \"NO\"\n \
    \   \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if\
    \ interval1[1] > interval2[1]\n        return \"NO\"\n    \n    if interval1[0]\
    \ == interval2[0]\n        return \"YES\"\n    \n    if interval1[0] < interval2[0]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[0] == interval2[0]\n        return \"YES\"\n    \n    if\
    \ interval1[0] < interval2[0]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[0] == interval2[0]\n        return\
    \ \"YES\"\n    \n    if interval1[0] < interval2[0]\n        return \"NO\"\n \
    \   \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if\
    \ interval1[1] > interval2[1]\n        return \"NO\"\n    \n    if interval1[0]\
    \ == interval2[0]\n        return \"YES\"\n    \n    if interval1[0] < interval2[0]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[0] == interval2[0]\n        return \"YES\"\n    \n    if\
    \ interval1[0] < interval2[0]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[0] == interval2[0]\n        return\
    \ \"YES\"\n    \n    if interval1[0] < interval2[0]\n        return \"NO\"\n \
    \   \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if\
    \ interval1[1] > interval2[1]\n        return \"NO\"\n    \n    if interval1[0]\
    \ == interval2[0]\n        return \"YES\"\n    \n    if interval1[0] < interval2[0]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1\nusing Test\n\n@testset begin\n\ncandidate =\
    \ intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqd2xg3hc.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqd2xg3hc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    if interval1[1] >=\
    \ interval2[1] and interval1[2] >= interval2[2]\n        return \"YES\"\n    return\
    \ \"NO\"\nend\n</cell>\n<code language=julia-1.5>\n# test your code\n@test intersection((1,2),\
    \ (2,3)) == \"NO\"\n@test intersection((-1,1), (0,4)) == \"NO\"\n@test intersection((-3,-1),\
    \ (-5,5)) == \"YES\"\n</cell>\n<text>\nProblem 4\nWrite a function that takes\
    \ in a list of integers and returns the sum of the integers in the list.\nExample:\
    \ sum([1, 2, 3]) returns 6\nExample: sum([1, 3, 5]) returns 8\nExample: sum([-1,\
    \ -2, 3, -5]) returns 6\nExample: sum([1, -2, 3, -5]) returns 6\nExample: sum([1,\
    \ -2, 3, -5, -3]) returns 6\nExample: sum([1, -2, 3, -5, -3, 4]) returns 6\nExample:\
    \ sum([1, -2, 3, -5, -3, 4, 5]) returns 6\nExample: sum([1, -2, 3, -5, -3, 4,\
    \ -5]) returns 6\nExample: sum([1, -2, 3, -5, -3, 4, -5, 5]) returns 6\nExample:\
    \ sum([1, -2, 3, -5, -3, 4, -5, -5]) returns 6\nExample: sum([1, -2, 3, -5, -3,\
    \ 4, -5, -5, 5]) returns 6\nExample: sum([1, -2, 3, -5, -3, 4, -5, -5, -5]) returns\
    \ 6\nExample: sum([1, -2, 3, -5, -3, 4, -5, -5, -5, 5]) returns 6\nExample: sum([1,\
    \ -2, 3, -5, -3, 4, -5, -5, -5, -5]) returns 6\nExample: sum([1, -2, 3, -5, -3,\
    \ 4, -5, -5, -5, -5, 5]) returns 6\nExample: sum([1, -2, 3, -5, -3, 4, -5, -5,\
    \ -5, -5, -5]) returns 6\nExample: sum([1, -2, 3, -5, -3, 4, -5, -5, -5, -5, -5])\
    \ returns 6\nExample: sum([1, -2, 3, -5, -3, 4, -5, -5, -5, -5, -5, 5]) returns\
    \ 6\nExample: sum([1, -2, 3, -5, -3, 4, -5, -5, -5, -5, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcoa3ad2n.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpcoa3ad2n.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[0]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[0] == interval2[0]\n        return\
    \ \"YES\"\n    \n    if interval1[0] < interval2[1]\n        return \"NO\"\n \
    \   \n    if interval1[0] > interval2[0]\n        return \"NO\"\n    \n    return\
    \ \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ggy7aq7.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6ggy7aq7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval2[1] < interval1[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval2[1]\
    \ < interval1[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval2[1] < interval1[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval2[1] < interval1[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval2[1]\
    \ < interval1[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval2[1] < interval1[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval2[1] < interval1[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval2[1]\
    \ < interval1[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval2[1] < interval1[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgw9fbmo8.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgw9fbmo8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2] \n    then \"YES\" \n    else \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2e5g33rw.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2e5g33rw.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7t6redmd.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7t6redmd.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    return \"NO\"\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpt7batq1e.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpt7batq1e.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_zie303s.jl:40\n  Expression: candidate((-3,\
    \ -1), (-5, 5)) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_zie303s.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_zie303s.jl:37\ntest set: Test Failed at /tmp/tmp_zie303s.jl:41\n\
    \  Expression: candidate((-2, 2), (-4, 0)) == \"YES\"\n   Evaluated: \"NO\" ==\
    \ \"YES\"\nStacktrace:\n [1] top-level scope at /tmp/tmp_zie303s.jl:41\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_zie303s.jl:37\ntest set: Test Failed at /tmp/tmp_zie303s.jl:44\n\
    \  Expression: candidate((1, 2), (1, 2)) == \"NO\"\n   Evaluated: \"YES\" == \"\
    NO\"\nStacktrace:\n [1] top-level scope at /tmp/tmp_zie303s.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_zie303s.jl:37\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_zie303s.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ and interval1[1] < interval2[1]\n        return \"NO\"\n    elseif interval2[1]\
    \ < interval1[1] and interval2[1] < interval1[1]\n        return \"NO\"\n    elseif\
    \ interval1[1] == interval2[1]\n        return \"YES\"\n    elseif interval2[1]\
    \ > interval1[1] and interval2[1] > interval1[1]\n        return \"NO\"\n    elseif\
    \ interval1[1] > interval2[1] and interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[1] < interval2[1] and interval2[1] > interval1[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1] and interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    elseif interval1[1] < interval2[1]\
    \ and interval2[1] < interval1[1]\n        return \"NO\"\n    elseif interval1[1]\
    \ > interval2[1] and interval1[1] > interval2[1]\n        return \"NO\"\n    elseif\
    \ interval1[1] < interval2[1] and interval2[1] < interval1[1]\n        return\
    \ \"NO\"\n    elseif interval1[1] > interval2[1] and interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] < interval2[1] and interval2[1]\
    \ > interval1[1]\n        return \"NO\"\n    elseif interval1[1] > interval2[1]\
    \ and interval1[1] > interval2[1]\n        return \"NO\"\n    elseif interval1[1]\
    \ < interval2[1] and interval2[1] < interval1[1]\n        return \"NO\"\n    elseif\
    \ interval1[1] > interval2[1] and interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[1] < interval2[1] and interval2[1] > interval1[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1] and interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    elseif interval1[1] < interval2[1]\
    \ and interval2[1] < interval1[1]\n        return \"NO\"\n    elseif interval1[1]\
    \ > interval2[1] and interval1[1] < interval2[1]\n        return \"NO\"\n    elseif\
    \ interval1[1] < interval2[1] and interval2[1] > interval1[1]\n        return\
    \ \"NO\"\n    elseif interval1[1] > interval2[1] and interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] < interval2[1] and interval2[1]\
    \ < interval1[1]\n        return \"NO\"\n    elseif interval1[1] > interval2[1]\
    \ and interval1[1] < interval2[1]\n        return \"NO\"\n    elseif interval1[1]\
    \ < interval2[1] and interval2[1] > interval1\nusing Test\n\n@testset begin\n\n\
    candidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiug0xkfw.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpiug0xkfw.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] < interval2[1] &&\
    \ interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[1] > interval2[1]\
    \ && interval1[2] > interval2[2]\n        return \"NO\"\n    if interval1[1] <\
    \ interval2[1] && interval1[2] > interval2[2]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1] && interval1[2] < interval2[2]\n        return \"NO\"\n    return\
    \ \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjczqv4n5.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjczqv4n5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] < interval2[2]\n\
    \        return \"NO\"\n    if interval1[2] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[2]\n        return \"NO\"\n    return \"YES\"\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9jcvhpqw.jl:39\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9jcvhpqw.jl:39\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[0]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[0] == interval2[0]\n        return\
    \ \"YES\"\n    \n    if interval1[0] == interval2[1]\n        return \"YES\"\n\
    \    \n    if interval1[1] == interval2[0]\n        return \"YES\"\n    \n   \
    \ if interval1[1] == interval2[1]\n        return \"YES\"\n    \n    return \"\
    NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4g9quqy2.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4g9quqy2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] >= interval2[1] and\
    \ interval1[2] >= interval2[2]\n        return \"YES\"\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpd1je2oru.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpd1je2oru.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[0]\n        return \"NO\"\n    if interval1[0] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[0]\
    \ > interval2[0]\n        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_ovqehv5.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_ovqehv5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ == interval2[1]\n        return \"YES\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"YES\"\n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ == interval2[1]\n        return \"YES\"\n    return \"NO\"\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd79vjge9.jl:47\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd79vjge9.jl:47\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2] \n        then \"YES\" \n        else if interval1[1]\
    \ > interval2[1] and interval1[2] > interval2[2] \n            then \"NO\" \n\
    \            else if interval1[1] < interval2[1] and interval1[2] < interval2[2]\
    \ \n                then \"NO\" \n                else if interval1[1] < interval2[1]\
    \ and interval1[2] > interval2[2] \n                    then \"NO\" \n       \
    \             else if interval1[1] > interval2[1] and interval1[2] < interval2[2]\
    \ \n                        then \"NO\" \n                        else \"NO\"\
    \ \n    end\nend\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((1,\
    \ 2), (2, 3))\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((-1,\
    \ 1), (0, 4))\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.4>\n# test case\nintersection((-3,\
    \ -1), (-5, 5))\n</cell>\n<code language=julia-1.4>\n# test \nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfq67f7bv.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfq67f7bv.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] == interval2[1]\n        return \"\
    YES\"\n    if interval1[0] < interval2[0]\n        return \"NO\"\n    return \"\
    NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1uxqmvpt.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1uxqmvpt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2]\n        return \"YES\"\n    else\n       \
    \ return \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmpdc884r.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmpdc884r.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ <= interval2[1] and interval1[2] <= interval2[2]\n        return \"YES\"\n \
    \   else if interval1[1] >= interval2[1] and interval1[2] >= interval2[2]\n  \
    \      return \"NO\"\n    else\n        return \"NO\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test your function with the above cases:\n@test intersection((1,\
    \ 2), (2, 3)) == \"NO\"\n@test intersection((-1, 1), (0, 4)) == \"NO\"\n@test\
    \ intersection((-3, -1), (-5, 5)) == \"YES\"\n</cell>\n<text>\nPart III. Prime\
    \ Numbers\nThe prime number theorem states that no prime number is a factor of\
    \ any number other than 1 and itself. \nFor example, the divisors of 7 are 1,\
    \ 2, 3, 5, 7, 11, 13 and 17.\nThe prime factors of 13195 are 5, 7, 11, 13 and\
    \ 17.\nIf 2 is a prime number, then 2 is called a prime number.\nIf any number\
    \ greater than 1 that has no positive divisors other than 1 and itself is prime,\
    \ \nthen that number is called a composite number.\nA composite number has at\
    \ least one positive divisor other than 1 and itself.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2popq6mm.jl:22\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2popq6mm.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\
    \ || interval2[1] < interval1[0] \n        return \"NO\"\n    else \n        return\
    \ \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaj3an4hf.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpaj3an4hf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpaj3an4hf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[0] == interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] < interval2[0]\n        return \"\
    NO\"\n    if interval1[0] > interval2[0]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] == interval2[0]\n        return \"\
    NO\"\n    if interval1[0] < interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ > interval2[0]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ < interval2[0]\n        return \"NO\"\n    if interval1[0] > interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"NO\"\n    if interval1[0] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[0] == interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] < interval2[0]\n        return \"\
    NO\"\n    if interval1[0] > interval2[0]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] == interval2[0]\n        return \"\
    NO\"\n    if interval1[0] < interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ > interval2[0]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ < interval2[0]\n        return \"NO\"\n    if interval1[0] > interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"NO\"\n    if \nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmpns3wsx9y.jl:101\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpns3wsx9y.jl:102\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpns3wsx9y.jl:102\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ > interval2[1] && interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[1] > interval2[1] && interval1[2] > interval2[2]\n        return \"\
    NO\"\n    elseif interval1[1] < interval2[1] && interval1[2] > interval2[2]\n\
    \        return \"NO\"\n    elseif interval1[1] < interval2[1] && interval1[2]\
    \ < interval2[2]\n        return \"NO\"\n    elseif interval1[1] > interval2[1]\
    \ && interval1[2] < interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ > interval2[1] && interval1[2] > interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[1] < interval2[1] && interval1[2] > interval2[2]\n        return \"\
    NO\"\n    elseif interval1[1] < interval2[1] && interval1[2] < interval2[2]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1] && interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    elseif interval1[1] < interval2[1]\
    \ && interval1[2] < interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ > interval2[1] && interval1[2] > interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[1] < interval2[1] && interval1[2] < interval2[2]\n        return \"\
    NO\"\n    elseif interval1[1] > interval2[1] && interval1[2] > interval2[2]\n\
    \        return \"NO\"\n    elseif interval1[1] < interval2[1] && interval1[2]\
    \ < interval2[2]\n        return \"NO\"\n    elseif interval1[1] > interval2[1]\
    \ && interval1[2] > interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ < interval2[1] && interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[1] > interval2[1] && interval1[2] > interval2[2]\n        return \"\
    NO\"\n    elseif interval1[1] < interval2[1] && interval1[2] < interval2[2]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1] && interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    elseif interval1[1] < interval2[1]\
    \ && interval1[2] < interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ > interval2[1] && interval1[2] > interval2[2]\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0gz4v9b2.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0gz4v9b2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ or interval2[1] < interval1[1] \n        return \"NO\"\n    \n    if interval1[1]\
    \ == interval2[1]\n        return \"YES\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] > interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] > interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] > interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval2\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphbg7_6h3.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphbg7_6h3.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[0]\n        return \"YES\"\n    if interval1[1]\
    \ == interval2[1]\n        return \"YES\"\n    if interval1[0] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[0]\
    \ < interval2[0]\n        return \"NO\"\n    if interval1[1] > interval2[0]\n\
    \        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprfl0p90o.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprfl0p90o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2]\n    then \"YES\"\n    else \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0a41_s3v.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0a41_s3v.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] == interval2[1]\n        return \"\
    YES\"\n    if interval1[0] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ == interval2[0]\n        return \"YES\"\n    if interval1[0] == interval2[1]\n\
    \        return \"YES\"\n    if interval1[0] == interval2[0]\n        return \"\
    YES\"\n    return \"NO\"\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg13jm_l1.jl:43\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg13jm_l1.jl:43\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] >= interval2[1] and\
    \ interval1[2] >= interval2[2]\n        return \"YES\"\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7t04cekp.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7t04cekp.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ == interval2[0]\n        return \"YES\"\n    if interval1[0] == interval2[1]\n\
    \        return \"YES\"\n    if interval1[0] == interval2[0]\n        return \"\
    YES\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[0]\
    \ > interval2[0]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[0]\n        return \"\
    NO\"\n    if interval1[0] > interval2[0]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] > interval2[0]\n        return \"NO\"\n    return \"\
    NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm3csbsib.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm3csbsib.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] < interval2[2]\n\
    \        return \"NO\"\n    if interval1[2] < interval2[1]\n        return \"\
    NO\"\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfxvu6blu.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfxvu6blu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[2] < interval2[2]\n        return\
    \ \"NO\"\n    \n    if interval1[2] > interval2[2]\n        return \"NO\"\n  \
    \  \n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp89g1yy6.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp89g1yy6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] == interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    return \"\
    YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb_rfcxbj.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb_rfcxbj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ > interval2[0]\n        return \"NO\"\n    if interval1[0] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] == interval2[0]\n        return \"\
    YES\"\n    if interval1[0] > interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ < interval2[0]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    return \"NO\"\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiib9mmxi.jl:55\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiib9mmxi.jl:55\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    else if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[2] < interval2[2]\n        return\
    \ \"NO\"\n    elseif interval1[2] > interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[1] > interval2[1] and interval1[2] < interval2[2]\n        return\
    \ \"NO\"\n    elseif interval1[1] > interval2[1] and interval1[2] > interval2[2]\n\
    \        return \"NO\"\n    elseif interval1[1] < interval2[1] and interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    elseif interval1[1] < interval2[1]\
    \ and interval1[2] < interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphqid9igr.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphqid9igr.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] > interval2[1] and\
    \ interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[1] > interval2[1]\
    \ and interval1[2] > interval2[2]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1] and interval1[2] > interval2[2]\n        return \"NO\"\n    if\
    \ interval1[1] < interval2[1] and interval1[2] < interval2[2]\n        return\
    \ \"NO\"\n    return \"YES\"\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfmnmeiki.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfmnmeiki.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2] \n        then \"YES\" \n        else \n  \
    \          if interval1[1] > interval2[1] and interval1[2] > interval2[2] \n \
    \               then \"NO\" \n                else \n                    if interval1[1]\
    \ > interval2[1] and interval1[2] <= interval2[2] \n                        then\
    \ \"NO\" \n                        else \n                            if interval1[1]\
    \ <= interval2[1] and interval1[2] > interval2[2] \n                         \
    \       then \"NO\" \n                                else \n                \
    \                    if interval1[1] <= interval2[1] and interval1[2] <= interval2[2]\
    \ \n                                        then \"YES\" \n                  \
    \                      else \"NO\"\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7fwkmv6d.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7fwkmv6d.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    \n    \n\
    \    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    \n    if\
    \ interval1[0] == interval2[1]\n        return \"YES\"\n    \n    \n    if interval1[1]\
    \ > interval2[0]\n        return \"NO\"\n    \n    \n    if interval1[0] < interval2[0]\n\
    \        return \"NO\"\n    \n    \n    if interval1[0] > interval2[1]\n     \
    \   return \"NO\"\n    \n    \n    if interval1[0] == interval2[0]\n        return\
    \ \"YES\"\n    \n    \n    if interval1[1] < interval2[0]\n        return \"NO\"\
    \n    \n    \n    if interval1[1] > interval2[1]\n        return \"NO\"\n    \n\
    \    \n    if interval1[0] == interval2[1]\n        return \"YES\"\n    \n   \
    \ \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    \n  \
    \  if interval1[0] == interval2[0]\n        return \"YES\"\n    \n    \n    if\
    \ interval1[1] > interval2[0]\n        return \"NO\"\n    \n    \n    if interval1[0]\
    \ < interval2[1]\n        return \"NO\"\n    \n    \n    if interval1[0] > interval2[0]\n\
    \        return \"NO\"\n    \n    \n    if interval1[0] == interval2[1]\n    \
    \    return \"YES\"\n    \n    \n    if interval1[1] < interval2[0]\n        return\
    \ \"NO\"\n    \n    \n    if interval1[1] > interval2[1]\n        return \"NO\"\
    \n    \n    \n    if interval1[0] == interval2[0]\n        return \"YES\"\n  \
    \  \n    \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n \
    \   \n    if interval1[0] == interval2[1]\n        return \"YES\"\n    \n    \n\
    \    if interval1[1] > interval2[0]\n        return \"NO\"\n    \n    \n    if\
    \ interval1[0] < interval2[0]\n        return \"NO\"\n    \n    \n    if interval1[0]\
    \ > interval2[1]\n        return \"NO\"\n    \n    \n    if interval1[0] == interval2[1]\n\
    \        return \"YES\"\n    \n    \n    if interval1[1] < interval2[1]\n    \
    \    return \"NO\"\n    \n    \n    if interval1[0] == interval2[0]\n        return\
    \ \"YES\"\n    \n    \n    if interval1[1] > interval2[0]\n        return \"NO\"\
    \n    \n    \n    if interval1[0] < interval2[0]\n        return \"NO\"\n    \n\
    \    \n    if interval1\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7v1rvwg6.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7v1rvwg6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2]\n    then \"YES\"\n    else \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkmw2c1dz.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpkmw2c1dz.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\
    \ || interval2[1] < interval1[0] \n        return \"NO\"\n    else \n        return\
    \ \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_ua0twy.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpk_ua0twy.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpk_ua0twy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ <= interval2[1] && interval1[2] <= interval2[2]\n        return \"YES\"\n  \
    \  elseif interval1[1] >= interval2[1] && interval1[2] >= interval2[2]\n     \
    \   return \"YES\"\n    elseif interval1[1] <= interval2[1] && interval1[2] >=\
    \ interval2[2]\n        return \"NO\"\n    elseif interval1[1] >= interval2[1]\
    \ && interval1[2] <= interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjw6ieps4.jl:48\n  Expression: candidate((-3,\
    \ -1), (-5, 5)) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpjw6ieps4.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjw6ieps4.jl:45\ntest set: Test Failed at /tmp/tmpjw6ieps4.jl:49\n\
    \  Expression: candidate((-2, 2), (-4, 0)) == \"YES\"\n   Evaluated: \"NO\" ==\
    \ \"YES\"\nStacktrace:\n [1] top-level scope at /tmp/tmpjw6ieps4.jl:49\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjw6ieps4.jl:45\ntest set: Test Failed at /tmp/tmpjw6ieps4.jl:52\n\
    \  Expression: candidate((1, 2), (1, 2)) == \"NO\"\n   Evaluated: \"YES\" == \"\
    NO\"\nStacktrace:\n [1] top-level scope at /tmp/tmpjw6ieps4.jl:52\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjw6ieps4.jl:45\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjw6ieps4.jl:43\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgau3v9nb.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgau3v9nb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    elseif interval1[0] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[1] == interval2[1]\n        return \"YES\"\n  \
    \  elseif interval1[0] == interval2[0]\n        return \"NO\"\n    else\n    \
    \    return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfvpl_r2l.jl:38\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  BoundsError: attempt to\
    \ access (2, 3)\n    at index [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64)\
    \ at ./tuple.jl:24\n   [2] intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64})\
    \ at /tmp/tmpfvpl_r2l.jl:21\n   [3] top-level scope at /tmp/tmpfvpl_r2l.jl:38\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpfvpl_r2l.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpfvpl_r2l.jl:39\n  Test threw exception\n  Expression: candidate((-1,\
    \ 1), (0, 4)) == \"NO\"\n  BoundsError: attempt to access (0, 4)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpfvpl_r2l.jl:21\n\
    \   [3] top-level scope at /tmp/tmpfvpl_r2l.jl:39\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpfvpl_r2l.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpfvpl_r2l.jl:40\n  Test threw exception\n  Expression: candidate((-3,\
    \ -1), (-5, 5)) == \"YES\"\n  BoundsError: attempt to access (-5, 5)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpfvpl_r2l.jl:21\n\
    \   [3] top-level scope at /tmp/tmpfvpl_r2l.jl:40\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpfvpl_r2l.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpfvpl_r2l.jl:41\n  Test threw exception\n  Expression: candidate((-2,\
    \ 2), (-4, 0)) == \"YES\"\n  BoundsError: attempt to access (-4, 0)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpfvpl_r2l.jl:21\n\
    \   [3] top-level scope at /tmp/tmpfvpl_r2l.jl:41\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpfvpl_r2l.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpfvpl_r2l.jl:42\n  Test threw exception\n  Expression: candidate((-11,\
    \ 2), (-1, -1)) == \"NO\"\n  BoundsError: attempt to access (-1, -1)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpfvpl_r2l.jl:21\n\
    \   [3] top-level scope at /tmp/tmpfvpl_r2l.jl:42\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpfvpl_r2l.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpfvpl_r2l.jl:43\n  Test threw exception\n  Expression: candidate((1,\
    \ 2), (3, 5)) == \"NO\"\n  BoundsError: attempt to access (3, 5)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpfvpl_r2l.jl:21\n\
    \   [3] top-level scope at /tmp/tmpfvpl_r2l.jl:43\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpfvpl_r2l.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpfvpl_r2l.jl:44\n  Test threw exception\n  Expression: candidate((1,\
    \ 2), (1, 2)) == \"NO\"\n  BoundsError: attempt to access (1, 2)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpfvpl_r2l.jl:21\n\
    \   [3] top-level scope at /tmp/tmpfvpl_r2l.jl:44\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpfvpl_r2l.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpfvpl_r2l.jl:45\n  Test threw exception\n  Expression: candidate((-2,\
    \ -2), (-3, -2)) == \"NO\"\n  BoundsError: attempt to access (-3, -2)\n    at\
    \ index [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n\
    \   [2] intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpfvpl_r2l.jl:21\n\
    \   [3] top-level scope at /tmp/tmpfvpl_r2l.jl:45\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpfvpl_r2l.jl:37\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfvpl_r2l.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[0] == interval2[0]\n        return \"YES\"\n  \
    \  else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnu3uassw.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  BoundsError: attempt to\
    \ access (2, 3)\n    at index [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64)\
    \ at ./tuple.jl:24\n   [2] intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64})\
    \ at /tmp/tmpnu3uassw.jl:21\n   [3] top-level scope at /tmp/tmpnu3uassw.jl:36\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpnu3uassw.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpnu3uassw.jl:37\n  Test threw exception\n  Expression: candidate((-1,\
    \ 1), (0, 4)) == \"NO\"\n  BoundsError: attempt to access (0, 4)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpnu3uassw.jl:21\n\
    \   [3] top-level scope at /tmp/tmpnu3uassw.jl:37\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpnu3uassw.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpnu3uassw.jl:38\n  Test threw exception\n  Expression: candidate((-3,\
    \ -1), (-5, 5)) == \"YES\"\n  BoundsError: attempt to access (-5, 5)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpnu3uassw.jl:21\n\
    \   [3] top-level scope at /tmp/tmpnu3uassw.jl:38\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpnu3uassw.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpnu3uassw.jl:39\n  Test threw exception\n  Expression: candidate((-2,\
    \ 2), (-4, 0)) == \"YES\"\n  BoundsError: attempt to access (-4, 0)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpnu3uassw.jl:21\n\
    \   [3] top-level scope at /tmp/tmpnu3uassw.jl:39\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpnu3uassw.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpnu3uassw.jl:40\n  Test threw exception\n  Expression: candidate((-11,\
    \ 2), (-1, -1)) == \"NO\"\n  BoundsError: attempt to access (-1, -1)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpnu3uassw.jl:21\n\
    \   [3] top-level scope at /tmp/tmpnu3uassw.jl:40\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpnu3uassw.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpnu3uassw.jl:41\n  Test threw exception\n  Expression: candidate((1,\
    \ 2), (3, 5)) == \"NO\"\n  BoundsError: attempt to access (3, 5)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpnu3uassw.jl:21\n\
    \   [3] top-level scope at /tmp/tmpnu3uassw.jl:41\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpnu3uassw.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpnu3uassw.jl:42\n  Test threw exception\n  Expression: candidate((1,\
    \ 2), (1, 2)) == \"NO\"\n  BoundsError: attempt to access (1, 2)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpnu3uassw.jl:21\n\
    \   [3] top-level scope at /tmp/tmpnu3uassw.jl:42\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpnu3uassw.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpnu3uassw.jl:43\n  Test threw exception\n  Expression: candidate((-2,\
    \ -2), (-3, -2)) == \"NO\"\n  BoundsError: attempt to access (-3, -2)\n    at\
    \ index [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n\
    \   [2] intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpnu3uassw.jl:21\n\
    \   [3] top-level scope at /tmp/tmpnu3uassw.jl:43\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpnu3uassw.jl:35\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnu3uassw.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] > interval1[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjbkc1f7t.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjbkc1f7t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] == interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"NO\"\n    if interval1[0] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8u5mmkly.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8u5mmkly.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    elseif interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[2] < interval2[2]\n        return\
    \ \"NO\"\n    elseif interval1[2] > interval2[2]\n        return \"NO\"\n    else\n\
    \        return \"YES\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy49y9ted.jl:41\n  Expression: candidate((-3,\
    \ -1), (-5, 5)) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpy49y9ted.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy49y9ted.jl:38\ntest set: Test Failed at /tmp/tmpy49y9ted.jl:42\n\
    \  Expression: candidate((-2, 2), (-4, 0)) == \"YES\"\n   Evaluated: \"NO\" ==\
    \ \"YES\"\nStacktrace:\n [1] top-level scope at /tmp/tmpy49y9ted.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy49y9ted.jl:38\ntest set: Test Failed at /tmp/tmpy49y9ted.jl:45\n\
    \  Expression: candidate((1, 2), (1, 2)) == \"NO\"\n   Evaluated: \"YES\" == \"\
    NO\"\nStacktrace:\n [1] top-level scope at /tmp/tmpy49y9ted.jl:45\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy49y9ted.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy49y9ted.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ or interval2[1] < interval1[1] \n        return \"NO\"\n    \n    if interval1[1]\
    \ == interval2[1]\n        return \"YES\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] > interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] > interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] > interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval2\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbcbcklef.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbcbcklef.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] == interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[1]\n        return \"NO\"\n    if interval1[0] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ < interval2[0]\n        return \"NO\"\n    if interval1[0] > interval2[0]\n\
    \        return \"NO\"\n    return \"YES\"\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd90jwulr.jl:41\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd90jwulr.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    return \"NO\"\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpc7ngun1h.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpc7ngun1h.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    return \"YES\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpep7jmz2e.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpep7jmz2e.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2ltw2gpo.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2ltw2gpo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkng0tbdu.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkng0tbdu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[0]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[0] == interval2[0]\n        return\
    \ \"YES\"\n    \n    if interval1[0] < interval2[1]\n        return \"NO\"\n \
    \   \n    if interval1[0] > interval2[0]\n        return \"NO\"\n    \n    return\
    \ \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp409a7390.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp409a7390.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ or interval1[1] > interval2[1] or interval1[2] < interval2[2] or interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    \n    if interval1[1] == interval2[1]\
    \ and interval1[2] == interval2[2]\n        return \"YES\"\n    \n    if interval1[1]\
    \ < interval2[1] and interval1[2] < interval2[2]\n        return \"NO\"\n    \n\
    \    if interval1[1] > interval2[1] and interval1[2] > interval2[2]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[2] > interval2[2]\n\
    \        return \"NO\"\n    \n    if interval1[1] > interval2[1] and interval1[2]\
    \ < interval2[2]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\
    \ and interval1[2] > interval2[2]\n        return \"NO\"\n    \n    if interval1[1]\
    \ > interval2[1] and interval1[2] > interval2[2]\n        return \"NO\"\n    \n\
    \    if interval1[1] < interval2[1] and interval1[2] < interval2[2]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[1] and interval1[2] < interval2[2]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\
    \ and interval1[2] > interval2[2]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1] and interval1[2] < interval2[2]\n        return \"NO\"\n    \n\
    \    if interval1[1] > interval2[1] and interval1[2] > interval2[2]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[2] < interval2[2]\n\
    \        return \"NO\"\n    \n    if interval1[1] > interval2[1] and interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\
    \ and interval1[2] < interval2[2]\n        return \"NO\"\n    \n    if interval1[1]\
    \ > interval2[1] and interval1[2] > interval2[2]\n        return \"NO\"\n    \n\
    \    if interval1[1] < interval2[1] and interval1[2] < interval2[2]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[1] and interval1[2] > interval2[2]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1] and interval1[2]\
    \ < interval2[2]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\
    \ and interval1[2] > interval\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppfvu3mkk.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppfvu3mkk.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[0] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[0] < interval1[0]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ > interval2[0]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[0] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[0] < interval1[0]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ > interval2[0]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[0] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[0] < interval1[0]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ > interval2[0]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[0] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[0] < interval1[0]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ > interval2[0]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[0] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[0] < interval1[0]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ > interval2[0]\n        return \"NO\"\n    if interval\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz6tq01tc.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz6tq01tc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2] \n    then \"YES\" \n    else \"NO\" \n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpit7by02x.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpit7by02x.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdol5edcg.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdol5edcg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi5pc1kz9.jl:40\n  Expression: candidate((-3,\
    \ -1), (-5, 5)) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpi5pc1kz9.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi5pc1kz9.jl:37\ntest set: Test Failed at /tmp/tmpi5pc1kz9.jl:41\n\
    \  Expression: candidate((-2, 2), (-4, 0)) == \"YES\"\n   Evaluated: \"NO\" ==\
    \ \"YES\"\nStacktrace:\n [1] top-level scope at /tmp/tmpi5pc1kz9.jl:41\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi5pc1kz9.jl:37\ntest set: Test Failed at /tmp/tmpi5pc1kz9.jl:44\n\
    \  Expression: candidate((1, 2), (1, 2)) == \"NO\"\n   Evaluated: \"YES\" == \"\
    NO\"\nStacktrace:\n [1] top-level scope at /tmp/tmpi5pc1kz9.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi5pc1kz9.jl:37\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi5pc1kz9.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[2] < interval2[2]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[2] < interval2[2]\n        return \"\
    NO\"\n    return \"YES\"\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6urvgmdy.jl:43\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6urvgmdy.jl:43\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ or interval2[1] < interval1[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ == interval2[1]\n        return \"YES\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval2\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpih6gzlmu.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpih6gzlmu.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpk9erc8ln.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpk9erc8ln.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    elseif interval1[0] < interval2[1]\n        return\
    \ \"NO\"\n    else\n        return \"YES\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test Cases\n@test intersection((1, 2), (2, 3)) == \"NO\"\n@test intersection((-1,\
    \ 1), (0, 4)) == \"NO\"\n@test intersection((-3, -1), (-5, 5)) == \"YES\"\n</cell>\n\
    <text>\nProblem 3\nGiven a string, return \"YES\" if every character in the string\
    \ is a vowel, \n\"NO\" if every character in the string is a consonant, and \"\
    ERROR\" otherwise.\nThe vowels are \"a\", \"e\", \"i\", \"o\", and \"u\". \nThe\
    \ consonants are \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\".\nExample: \"aeiou\" -> \"YES\"\nExample: \"aeiouy\" -> \"NO\"\nExample:\
    \ \"aeiouay\" -> \"ERROR\"\nExample: \"a\" -> \"ERROR\"\nExample: \"ab\" -> \"\
    ERROR\"\nExample: \"abc\" -> \"YES\"\nExample: \"a\" -> \"YES\"\nExample: \"a\"\
    \ -> \"YES\"\nExample: \"ab\" -> \"YES\"\nExample: \"ab\" -> \"YES\"\nExample:\
    \ \"ab\" -> \"YES\"\nExample: \"ab\" -> \"YES\"\nExample: \"ab\" -> \"YES\"\n\
    Example: \"ab\" -> \"YES\"\nExample: \"ab\" -> \"YES\"\nExample: \"ab\" -> \"\
    YES\"\nExample: \"ab\" -> \"YES\"\nExample: \"ab\" -> \"YES\"\nExample: \"ab\"\
    \ -> \"YES\"\nExample: \"ab\" -> \"YES\"\nExample: \"ab\" -> \"YES\"\nExample:\
    \ \"ab\" -> \"YES\"\nExample: \"ab\" -> \"YES\"\nExample: \"ab\" -> \"YES\"\n\
    Example: \"ab\" -> \"YES\"\nExample: \"ab\" -> \"YES\"\nExample: \"ab\" -> \"\
    YES\"\nExample: \"ab\" -> \"YES\"\nExample: \"ab\" -> \"YES\"\nExample: \"ab\"\
    \ -> \"YES\"\nExample: \"ab\" -> \"YES\"\nExample: \"ab\" -> \"YES\"\nExample:\
    \ \"ab\" -> \"YES\"\nExample: \"ab\" -> \"YES\"\nExample: \"ab\" -> \"YES\"\n\
    Example: \"ab\" -> \"YES\"\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpukon_xd4.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpukon_xd4.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[0] == interval2[0]\n\
    \        return \"YES\"\n    if interval1[0] < interval2[0]\n        return \"\
    NO\"\n    if interval1[0] > interval2[0]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] == interval2[0]\n        return \"\
    NO\"\n    if interval1[0] < interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ > interval2[0]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ < interval2[0]\n        return \"NO\"\n    if interval1[0] > interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"NO\"\n    if interval1[0] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[0]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[0] == interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] < interval2[0]\n        return \"\
    NO\"\n    if interval1[0] > interval2[0]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] == interval2[0]\n        return \"\
    NO\"\n    if interval1[0] < interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ > interval2[0]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ < interval2[0]\n        return \"NO\"\n    if interval1[0] > interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"NO\"\n    if \nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmpk1kehkqn.jl:101\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpk1kehkqn.jl:102\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpk1kehkqn.jl:102\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    elseif interval2[1] < interval1[0]\n        return\
    \ \"NO\"\n    else\n        return \"YES\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwscfaif_.jl:34\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  BoundsError: attempt to\
    \ access (2, 3)\n    at index [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64)\
    \ at ./tuple.jl:24\n   [2] intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64})\
    \ at /tmp/tmpwscfaif_.jl:21\n   [3] top-level scope at /tmp/tmpwscfaif_.jl:34\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwscfaif_.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpwscfaif_.jl:35\n  Test threw exception\n  Expression: candidate((-1,\
    \ 1), (0, 4)) == \"NO\"\n  BoundsError: attempt to access (0, 4)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpwscfaif_.jl:21\n\
    \   [3] top-level scope at /tmp/tmpwscfaif_.jl:35\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwscfaif_.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpwscfaif_.jl:36\n  Test threw exception\n  Expression: candidate((-3,\
    \ -1), (-5, 5)) == \"YES\"\n  BoundsError: attempt to access (-5, 5)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpwscfaif_.jl:21\n\
    \   [3] top-level scope at /tmp/tmpwscfaif_.jl:36\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwscfaif_.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpwscfaif_.jl:37\n  Test threw exception\n  Expression: candidate((-2,\
    \ 2), (-4, 0)) == \"YES\"\n  BoundsError: attempt to access (-4, 0)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpwscfaif_.jl:21\n\
    \   [3] top-level scope at /tmp/tmpwscfaif_.jl:37\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwscfaif_.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpwscfaif_.jl:38\n  Test threw exception\n  Expression: candidate((-11,\
    \ 2), (-1, -1)) == \"NO\"\n  BoundsError: attempt to access (-1, -1)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpwscfaif_.jl:21\n\
    \   [3] top-level scope at /tmp/tmpwscfaif_.jl:38\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwscfaif_.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpwscfaif_.jl:39\n  Test threw exception\n  Expression: candidate((1,\
    \ 2), (3, 5)) == \"NO\"\n  BoundsError: attempt to access (3, 5)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpwscfaif_.jl:21\n\
    \   [3] top-level scope at /tmp/tmpwscfaif_.jl:39\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwscfaif_.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpwscfaif_.jl:40\n  Test threw exception\n  Expression: candidate((1,\
    \ 2), (1, 2)) == \"NO\"\n  BoundsError: attempt to access (1, 2)\n    at index\
    \ [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n   [2]\
    \ intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpwscfaif_.jl:21\n\
    \   [3] top-level scope at /tmp/tmpwscfaif_.jl:40\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwscfaif_.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpwscfaif_.jl:41\n  Test threw exception\n  Expression: candidate((-2,\
    \ -2), (-3, -2)) == \"NO\"\n  BoundsError: attempt to access (-3, -2)\n    at\
    \ index [0]\n  Stacktrace:\n   [1] getindex(::Tuple, ::Int64) at ./tuple.jl:24\n\
    \   [2] intersection(::Tuple{Int64,Int64}, ::Tuple{Int64,Int64}) at /tmp/tmpwscfaif_.jl:21\n\
    \   [3] top-level scope at /tmp/tmpwscfaif_.jl:41\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwscfaif_.jl:33\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwscfaif_.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[0] == interval2[0]\n\
    \        return \"YES\"\n    if interval1[0] < interval2[0]\n        return \"\
    NO\"\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwmo3j08t.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwmo3j08t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    interval1_start\
    \ = interval1[1]\n    interval1_end = interval1[2]\n    interval2_start = interval2[1]\n\
    \    interval2_end = interval2[2]\n    \n    if interval1_start <= interval2_start\
    \ and interval1_end >= interval2_end\n        return \"NO\"\n    \n    if interval1_start\
    \ <= interval2_end and interval1_end >= interval2_start\n        return \"NO\"\
    \n    \n    if interval1_start >= interval2_start and interval1_end <= interval2_end\n\
    \        return \"NO\"\n    \n    if interval1_start >= interval2_end and interval1_end\
    \ <= interval2_start\n        return \"NO\"\n    \n    if interval1_start <= interval2_start\
    \ and interval1_end >= interval2_end\n        return \"NO\"\n    \n    if interval1_start\
    \ <= interval2_end and interval1_end >= interval2_start\n        return \"NO\"\
    \n    \n    if interval1_start >= interval2_start and interval1_end <= interval2_end\n\
    \        return \"NO\"\n    \n    if interval1_start >= interval2_end and interval1_end\
    \ <= interval2_start\n        return \"NO\"\n    \n    if interval1_start <= interval2_start\
    \ and interval1_end >= interval2_end\n        return \"NO\"\n    \n    if interval1_start\
    \ <= interval2_end and interval1_end >= interval2_start\n        return \"NO\"\
    \n    \n    if interval1_start >= interval2_start and interval1_end <= interval2_end\n\
    \        return \"NO\"\n    \n    if interval1_start >= interval2_end and interval1_end\
    \ <= interval2_start\n        return \"NO\"\n    \n    if interval1_start <= interval2_start\
    \ and interval1_end >= interval2_end\n        return \"NO\"\n    \n    if interval1_start\
    \ <= interval2_end and interval1_end >= interval2_start\n        return \"NO\"\
    \n    \n    if interval1_start >= interval2_start and interval1_end <= interval2_end\n\
    \        return \"NO\"\n    \n    if interval1_start >= interval2_end and interval1_end\
    \ <= interval2_start\n        return \"NO\"\n    \n    if interval1_start <= interval2_start\
    \ and interval1_end >= interval2_end\n        return \"NO\"\n    \n    if interval1_start\
    \ <= interval2_end and interval1_end >= interval2_start\n        return \"NO\"\
    \n    \n    if interval1_start >= interval2_start and interval1_end <= interval2_end\n\
    \        return \"NO\"\n    \n    if interval1_start >= interval2_end and interval1_end\
    \ <= interval2_start\n        return \"NO\"\n    \n    if interval1_start <= interval2_start\
    \ and interval1_end >= interval2_end\n        return \"NO\"\n    \n    if interval1_start\
    \ \nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1_end\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9ifs24hl.jl:27\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9ifs24hl.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] == interval2[1]\n        return \"\
    YES\"\n    if interval1[1] < interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[1]\n        return \"YES\"\n    if interval1[1] > interval2[0]\n\
    \        return \"NO\"\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp49t1oauo.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp49t1oauo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph0rsfo4c.jl:40\n  Expression: candidate((-3,\
    \ -1), (-5, 5)) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmph0rsfo4c.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph0rsfo4c.jl:37\ntest set: Test Failed at /tmp/tmph0rsfo4c.jl:41\n\
    \  Expression: candidate((-2, 2), (-4, 0)) == \"YES\"\n   Evaluated: \"NO\" ==\
    \ \"YES\"\nStacktrace:\n [1] top-level scope at /tmp/tmph0rsfo4c.jl:41\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph0rsfo4c.jl:37\ntest set: Test Failed at /tmp/tmph0rsfo4c.jl:44\n\
    \  Expression: candidate((1, 2), (1, 2)) == \"NO\"\n   Evaluated: \"YES\" == \"\
    NO\"\nStacktrace:\n [1] top-level scope at /tmp/tmph0rsfo4c.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph0rsfo4c.jl:37\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph0rsfo4c.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] == interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6tjnwc2h.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6tjnwc2h.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[2] < interval2[2]\n        return\
    \ \"NO\"\n    \n    if interval1[2] > interval2[2]\n        return \"NO\"\n  \
    \  \n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp104xeyd1.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp104xeyd1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval2[1] <= interval1[1]\n        return \"NO\"\n    if interval1[1]\
    \ >= interval2[1] and interval2[1] >= interval1[1]\n        return \"NO\"\n  \
    \  if interval1[1] >= interval2[1] and interval2[1] >= interval1[1]\n        return\
    \ \"NO\"\n    if interval1[1] <= interval2[1] and interval2[1] >= interval1[1]\n\
    \        return \"NO\"\n    if interval1[1] <= interval2[1] and interval2[1] >=\
    \ interval1[1]\n        return \"NO\"\n    if interval1[1] >= interval2[1] and\
    \ interval2[1] >= interval1[1]\n        return \"NO\"\n    if interval1[1] >=\
    \ interval2[1] and interval2[1] >= interval1[1]\n        return \"NO\"\n    if\
    \ interval1[1] >= interval2[1] and interval2[1] >= interval1[1]\n        return\
    \ \"NO\"\n    if interval1[1] >= interval2[1] and interval2[1] >= interval1[1]\n\
    \        return \"NO\"\n    if interval1[1] >= interval2[1] and interval2[1] >=\
    \ interval1[1]\n        return \"NO\"\n    if interval1[1] >= interval2[1] and\
    \ interval2[1] >= interval1[1]\n        return \"NO\"\n    if interval1[1] >=\
    \ interval2[1] and interval2[1] >= interval1[1]\n        return \"NO\"\n    if\
    \ interval1[1] >= interval2[1] and interval2[1] >= interval1[1]\n        return\
    \ \"NO\"\n    if interval1[1] >= interval2[1] and interval2[1] >= interval1[1]\n\
    \        return \"NO\"\n    if interval1[1] >= interval2[1] and interval2[1] >=\
    \ interval1[1]\n        return \"NO\"\n    if interval1[1] >= interval2[1] and\
    \ interval2[1] >= interval1[1]\n        return \"NO\"\n    if interval1[1] >=\
    \ interval2[1] and interval2[1] >= interval1[1]\n        return \"NO\"\n    if\
    \ interval1[1] >= interval2[1] and interval2[1] >= interval1[1]\n        return\
    \ \"NO\"\n    if interval1[1] >= interval2[1] and interval2[1] >= interval1[1]\n\
    \        return \"NO\"\n    if interval1[1] >= interval2[1] and interval2[1] >=\
    \ interval1[1]\n        return \"NO\"\n    if interval1[1] >= interval2[1] and\
    \ interval2[1] >= interval1[1]\n        return \"NO\"\n    if interval1[1] >=\
    \ interval2[1] and interval2[1] >= interval1[1]\n        return \"NO\"\n    if\
    \ interval1[1] >= interval2[1] and interval2[1] >= interval1[1]\n        return\
    \ \"NO\"\n    if interval1[1] >= interval2[1] and interval2[1] >= interval1[1]\n\
    \        return \"NO\"\n    if interval1[1] >= interval2[1]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval2\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpeuzfbnmn.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpeuzfbnmn.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[0] > interval2[0]\n\
    \        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb5m8107q.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb5m8107q.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_ykhjca9.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_ykhjca9.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    return \"YES\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp022hc5st.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp022hc5st.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    if interval1[0]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[1]\n        return \"YES\"\n    if interval1[0]\
    \ < interval2[0]\n        return \"NO\"\n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_1dnrt99.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_1dnrt99.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqvi53t4x.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqvi53t4x.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] <= interval2[1] and\
    \ interval1[2] <= interval2[2]\n        return \"YES\"\n    if interval1[1] >=\
    \ interval2[1] and interval1[2] >= interval2[2]\n        return \"YES\"\n    return\
    \ \"NO\"\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp25lk71cg.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp25lk71cg.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] < interval2[2]\n\
    \        return \"NO\"\n    if interval1[2] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[2]\n        return \"NO\"\n    return \"YES\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpivc96rou.jl:39\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpivc96rou.jl:39\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ < interval2[1] && interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[1] > interval2[1] && interval1[2] > interval2[2]\n        return \"\
    NO\"\n    elseif interval1[1] < interval2[1] && interval1[2] > interval2[2]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1] && interval1[2]\
    \ < interval2[2]\n        return \"NO\"\n    elseif interval1[1] < interval2[1]\
    \ && interval1[2] > interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ > interval2[1] && interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[1] < interval2[1] && interval1[2] > interval2[2]\n        return \"\
    NO\"\n    elseif interval1[1] > interval2[1] && interval1[2] < interval2[2]\n\
    \        return \"NO\"\n    elseif interval1[1] < interval2[1] && interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    elseif interval1[1] > interval2[1]\
    \ && interval1[2] < interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ < interval2[1] && interval1[2] > interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[1] > interval2[1] && interval1[2] < interval2[2]\n        return \"\
    NO\"\n    elseif interval1[1] < interval2[1] && interval1[2] > interval2[2]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1] && interval1[2]\
    \ < interval2[2]\n        return \"NO\"\n    elseif interval1[1] < interval2[1]\
    \ && interval1[2] > interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ > interval2[1] && interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[1] < interval2[1] && interval1[2] > interval2[2]\n        return \"\
    NO\"\n    elseif interval1[1] > interval2[1] && interval1[2] < interval2[2]\n\
    \        return \"NO\"\n    elseif interval1[1] < interval2[1] && interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    elseif interval1[1] > interval2[1]\
    \ && interval1[2] < interval2[2]\n        return \"NO\"\n    elseif interval1[1]\
    \ < interval2[1] && interval1[2] > interval2[2]\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9sutss4f.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9sutss4f.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"NO\"\n    if interval1[0]\
    \ == interval2[1]\n        return \"YES\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[0]\n        return \"\
    NO\"\n    if interval1[0] == interval2[1]\n        return \"YES\"\n    if interval1[0]\
    \ == interval2[0]\n        return \"YES\"\n    if interval1[1] > interval2[0]\n\
    \        return \"YES\"\n    if interval1[1] < interval2[1]\n        return \"\
    YES\"\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5qaucln5.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5qaucln5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\
    \ || interval2[1] < interval1[0] \n        return \"NO\"\n    else \n        return\
    \ \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprmkz1qyl.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprmkz1qyl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprmkz1qyl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[0] == interval2[0]\n        return \"YES\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval1[0] == interval2[1]\n\
    \        return \"YES\"\n    if interval1[1] > interval2[0]\n        return \"\
    NO\"\n    if interval1[0] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[0]\n        return \"NO\"\n    if interval1[0] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[0] < interval2[0]\n        return \"\
    NO\"\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsmn1ded3.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsmn1ded3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg9a37fe3.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg9a37fe3.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    return \"NO\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbclhoe1q.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbclhoe1q.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6jiq1h43.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6jiq1h43.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2] \n        then \"YES\" \n        else if interval1[1]\
    \ > interval2[1] and interval1[2] > interval2[2] \n            then \"NO\" \n\
    \            else if interval1[1] > interval2[1] and interval1[2] <= interval2[2]\
    \ \n                then \"NO\" \n                else if interval1[1] <= interval2[1]\
    \ and interval1[2] > interval2[2] \n                    then \"NO\" \n       \
    \             else \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @test intersection((1, 2), (2, 3)) == \"NO\"\n@test intersection((-1, 1), (0,\
    \ 4)) == \"NO\"\n@test intersection((-3, -1), (-5, 5)) == \"YES\"\n</cell>\n<text>\n\
    Problem 4\nWrite a Julia function prime_number(n) that returns \"YES\" if n is\
    \ a prime number\nand otherwise returns \"NO\".\nThe function should take one\
    \ argument n of type Int64.\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplnuxvq9t.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplnuxvq9t.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ <= interval2[1] and interval1[2] >= interval2[2] \n    then \"YES\" \n    else\
    \ \"NO\"\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2bnqicbx.jl:22\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2bnqicbx.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[0] == interval2[0]\n        return \"YES\"\n  \
    \  elseif interval1[0] == interval2[1]\n        return \"YES\"\n    else\n   \
    \     return \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyx99o_fj.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyx99o_fj.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ or interval2[1] < interval1[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ == interval2[1]\n        return \"YES\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] > interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] > interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] < interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return \"NO\"\n  \
    \  \n    if interval1[1] > interval2[1]\n        return \"NO\"\n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[1] < interval2[1]\n        return\
    \ \"\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval2\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpng9j47l4.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpng9j47l4.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    \n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    else if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    else if interval1[0] < interval2[0]\n        return\
    \ \"NO\"\n    else if interval1[0] > interval2[0]\n        return \"NO\"\n   \
    \ else\n        return \"YES\"\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgluz5hqm.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgluz5hqm.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeo2m87rf.jl:40\n  Expression: candidate((-3,\
    \ -1), (-5, 5)) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpeo2m87rf.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeo2m87rf.jl:37\ntest set: Test Failed at /tmp/tmpeo2m87rf.jl:41\n\
    \  Expression: candidate((-2, 2), (-4, 0)) == \"YES\"\n   Evaluated: \"NO\" ==\
    \ \"YES\"\nStacktrace:\n [1] top-level scope at /tmp/tmpeo2m87rf.jl:41\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeo2m87rf.jl:37\ntest set: Test Failed at /tmp/tmpeo2m87rf.jl:44\n\
    \  Expression: candidate((1, 2), (1, 2)) == \"NO\"\n   Evaluated: \"YES\" == \"\
    NO\"\nStacktrace:\n [1] top-level scope at /tmp/tmpeo2m87rf.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeo2m87rf.jl:37\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeo2m87rf.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval1[0] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ < interval2[0]\n        return \"NO\"\n    if interval1[0] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[0]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[0]\n        return \"NO\"\n    return \"YES\"\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk3yf3seb.jl:39\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk3yf3seb.jl:39\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[2] < interval2[2]\n        return \"NO\"\n    if interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[1] < interval2[2]\n\
    \        return \"NO\"\n    if interval1[2] < interval2[1]\n        return \"\
    NO\"\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi7shorod.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi7shorod.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ and interval1[2] <= interval2[2] \n        then \"YES\" \n        else \n  \
    \          if interval1[1] > interval2[1] and interval1[2] > interval2[2] \n \
    \               then \"NO\" \n                else \n                    if interval1[1]\
    \ > interval2[1] and interval1[2] <= interval2[2] \n                        then\
    \ \"NO\" \n                        else \n                            if interval1[1]\
    \ <= interval2[1] and interval1[2] > interval2[2] \n                         \
    \       then \"NO\" \n                                else \n                \
    \                    if interval1[1] <= interval2[1] and interval1[2] <= interval2[2]\
    \ \n                                        then \"YES\" \n                  \
    \                      else \n                                            if interval1[1]\
    \ > interval2[1] and interval1[2] > interval2[2] \n                          \
    \                      then \"NO\" \n                                        \
    \        else \n                                                    if interval1[1]\
    \ > interval2[1] and interval1[2] > interval2[2] \n                          \
    \                              then \"YES\" \n                               \
    \                         else \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp22cc16r3.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp22cc16r3.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    \n    if interval1[1]\
    \ < interval2[0]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[0] == interval2[0]\n        return\
    \ \"YES\"\n    \n    if interval1[0] < interval2[1]\n        return \"NO\"\n \
    \   \n    if interval1[0] > interval2[0]\n        return \"NO\"\n    \n    return\
    \ \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmo5c2zod.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmo5c2zod.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] == interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[2]\
    \ < interval2[2]\n        return \"NO\"\n    if interval1[2] > interval2[2]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[2]\n        return \"\
    NO\"\n    if interval1[2] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[2]\n        return \"NO\"\n    if interval1[2] > interval2[1]\n\
    \        return \"NO\"\n    return \"YES\"\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppydolnz9.jl:41\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppydolnz9.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    \n    if interval1[1]\
    \ < interval2[0]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    if interval1[0] == interval2[0]\n        return\
    \ \"YES\"\n    \n    if interval1[0] < interval2[1]\n        return \"NO\"\n \
    \   \n    if interval1[0] > interval2[0]\n        return \"NO\"\n    \n    if\
    \ interval1[1] == interval2[1]\n        return \"YES\"\n    \n    if interval1[1]\
    \ < interval2[0]\n        return \"NO\"\n    \n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    \n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphvhyfzsq.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphvhyfzsq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    elseif interval1[1] > interval2[1]\n        return\
    \ \"NO\"\n    elseif interval1[2] < interval2[2]\n        return \"NO\"\n    elseif\
    \ interval1[2] > interval2[2]\n        return \"NO\"\n    else\n        return\
    \ \"YES\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvwzdh0p2.jl:40\n  Expression: candidate((-3,\
    \ -1), (-5, 5)) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvwzdh0p2.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvwzdh0p2.jl:37\ntest set: Test Failed at /tmp/tmpvwzdh0p2.jl:41\n\
    \  Expression: candidate((-2, 2), (-4, 0)) == \"YES\"\n   Evaluated: \"NO\" ==\
    \ \"YES\"\nStacktrace:\n [1] top-level scope at /tmp/tmpvwzdh0p2.jl:41\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvwzdh0p2.jl:37\ntest set: Test Failed at /tmp/tmpvwzdh0p2.jl:44\n\
    \  Expression: candidate((1, 2), (1, 2)) == \"NO\"\n   Evaluated: \"YES\" == \"\
    NO\"\nStacktrace:\n [1] top-level scope at /tmp/tmpvwzdh0p2.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvwzdh0p2.jl:37\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvwzdh0p2.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[1]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval2[1] < interval1[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval2[1]\
    \ < interval1[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval2[1] < interval1[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval2[1] < interval1[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval2[1]\
    \ < interval1[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval2[1] < interval1[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] < interval2[1]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[1]\n        return \"\
    NO\"\n    if interval1[1] > interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ < interval2[1]\n        return \"NO\"\n    if interval2[1] < interval1[1]\n\
    \        return \"NO\"\n    if interval1[1] > interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval2[1]\
    \ < interval1[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval2[1] < interval1[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnebs87se.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnebs87se.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[0]\n\
    \        return \"NO\"\n    if interval2[1] < interval1[0]\n        return \"\
    NO\"\n    if interval1[1] == interval2[1]\n        return \"YES\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    if interval1[1]\
    \ > interval2[1]\n        return \"NO\"\n    if interval1[1] > interval2[1]\n\
    \        return \"NO\"\n    if interval1[1] < interval2[1]\n        return \"\
    NO\"\n    if interval1[1] < interval2[1]\n        return \"NO\"\n    return \"\
    NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyxxjhehj.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyxxjhehj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1,\
    \ 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] < interval2[1]\
    \ or interval1[1] > interval2[1] or interval1[2] < interval2[2] or interval1[2]\
    \ > interval2[2]\n        return \"NO\"\n    else\n        prime_length = prime_length(interval1[1],\
    \ interval1[2], interval2[1], interval2[2])\n        if prime_length == 1\n  \
    \          return \"YES\"\n        else\n            return \"NO\"\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test case 1\nprintln(intersection((1,\
    \ 2), (2, 3)))\nprintln(intersection((-1, 1), (0, 4)))\nprintln(intersection((-3,\
    \ -1), (-5, 5)))\n</cell>\n<code language=julia-1.5>\n# Test case 2\nprintln(intersection((1,\
    \ 3), (2, 4)))\nprintln(intersection((-1, 1), (0, 4)))\nprintln(intersection((-3,\
    \ -1), (-5, 5)))\n</cell>\n<code language=julia-1.5>\n# Test case 3\nprintln(intersection((1,\
    \ 3), (2, 4)))\nprintln(intersection((-1, 1), (0, 4)))\nprintln(intersection((-3,\
    \ -1), (-5, 5)))\n</cell>\n<code language=julia-1.5>\n# Test case 4\nprintln(intersection((1,\
    \ 3), (2, 4)))\nprintln(intersection((-1, 1), (0, 4)))\nprintln(intersection((-3,\
    \ -1), (-5, 5)))\n</cell>\n<code language=julia-1.5>\n# Test case 5\nprintln(intersection((1,\
    \ 3), (2, 4)))\nprintln(intersection((-1, 1), (0, 4)))\nprintln(intersection((-3,\
    \ -1), (-5, 5)))\n</cell>\n<code language=julia-1.5>\n# Test case 6\nprintln(intersection((1,\
    \ 3), (2, 4)))\nprintln(intersection((-1, 1), (0, 4)))\nprintln(intersection((-3,\
    \ -1), (-5, 5)))\n</cell>\n<code language=julia-1.5>\n# Test case 7\nprintln(intersection((1,\
    \ 3), (2, 4)))\nprintln(intersection((-1, 1), (0, 4)))\nprintln(intersection((-3,\
    \ -1), (-5, 5)))\n</cell>\n<code language=julia-1.5>\n# Test case 8\nprintln(intersection((1,\
    \ 3), (2, 4)))\nprintln(intersection((-1, 1), (0, 4)))\nprintln(intersection((-3,\
    \ -1), (-5, 5)))\n</cell>\n<code language=julia-1.5>\n# Test case 9\nprintln(intersection((1,\
    \ 3), (2, 4)))\nprintln(intersection((-1, 1), (0, 4)))\nprintln(intersection((-3,\
    \ -1), (-5, 5)))\n</cell>\n<code language=julia-1.5>\n# Test case 10\nprintln(intersection((1,\
    \ 3), (2, 4)))\nprintln(intersection((-1, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"interval1\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcsn49hjv.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpcsn49hjv.jl:21\n"
  exit_code: 1
  status: Exception
