name: HumanEval_23_strlen
language: julia
prompt: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
  \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\"\
  ) == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
  end\n"
completions: ["    local len::Int64 = 0\n    for char in string:\n        len = len\
    \ + 1\n    return len\n</code>\n<|/ a |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/11956271)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to count\
    \ the number of characters in a string. He also asked how to do this in Julia.\
    \ He also asked how to do this in Python. He also asked how to do this in R. He\
    \ also asked how to do this in Haskell. He also asked how to do this in Julia.\
    \ He also asked how to do this in R. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. ",
  "    local len = string.len()\n    return len\nend", "    local len::Int64 = 0\n\
    \    for char in string do \n        len = len + 1\n    end\n    return len\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"", "    \"\"\"\n    Return length of given string\n\
    \    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    local\
    \ len::Int64 = 0\n    for c in string\n        len = len + 1\n    end\n    return\
    \ len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given string is a palindrome,\
    \ and false otherwise.", "    if string == \"\" then 0 else string.length\nend\n\
    </cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring", "    \"\"\"\n    Return length of\
    \ given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\
    \"\"", "    length::Int64 = 0\n    for char in string\n        length += 1\n \
    \   return length\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe `length` variable\
    \ is unnecessary and can be replaced with `length::Int64 = 0`.\n<|/ c |>\n<| c\
    \ |>\nI agree, thanks for pointing that out. I was just trying to keep it close\
    \ to the original code as much as possible.\n<|/ c |>\n<| a |>\n<code>", "   \
    \ local result = 1\n    for char in string:\n        result = result + 1\n   \
    \ return result\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of characters in\
    \ a given string. \nThe function should take a string as input, and return an\
    \ Int64.", "    local result = 1\n    for char in string:\n        result = result\
    \ * len(char)\n    return result\nend", "    \"\"\"\n    Compute length of given\
    \ string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"",
  "    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n    return\
    \ len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of words in the string. \nWrite a function that takes a string and returns the\
    \ number of sentences in the string. \nWrite a function that takes a string and\
    \ returns the number of characters in the string divided by the number of words\
    \ in the string.", "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    \"\"\"\n    Return length\
    \ of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n \
    \   \"\"\"", "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    if string == \"\" then\
    \ 0 else string.length\nend\n</cell>\n<code language=julia-1.5>", "    \"\"\"\n\
    \    Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n\
    \    3\n    \"\"\"", "    if string == \"\" then 0 else string.length\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\nReturn length of given string\n\"\"\"", " \
    \   length = 0\n    for c in string\n        length += 1\n    return length\n\
    </code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nThe shortest way\
    \ is to use length\n<code>\njulia> length(\"hello\")\n5\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\n`length` also works on `Char` arrays, e.g. `length([\"h\", \"e\"\
    , \"l\", \"l\", \"o\"])` returns `5`.\n<|/ c |>\n<| a |>\nThe shortest way is\
    \ to use length\n<code>\njulia> length(\"hello\")\n5\n</code>\n<|/ a tags=julia,string\
    \ dscore=5 |>\n<| a dscore=5 |>\nThe shortest way is to use length\n<code>\njulia>\
    \ length(\"hello\")\n5\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nThe shortest way is to use length\n<code>\njulia> length(\"hello\")\n5\n\
    </code>\n<|/ a dscore=4 |>\n<| a |>\nThe shortest way is to use length\n<code>\n\
    julia> length(\"hello\")\n5\n</code>\n<|/ a tags=julia,string dscore=4 |>\n<|\
    \ a dscore=4 |>\nThe shortest way is to use length\n<code>\njulia> length(\"hello\"\
    )\n5\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=4 |>\nThe shortest way\
    \ is to use length\n<code>\njulia> length(\"hello\")\n5\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nThe shortest way is to use length\n<code>\njulia>\
    \ length(\"hello\")\n5\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\nThe shortest\
    \ way is to use length\n<code>\njulia> length(\"hello\")\n5\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a |>\nThe shortest way is to use length\n<code>\njulia> length(\"hello\"\
    )\n5\n</code>\n<|/ a dscore=3 tags=julia,string |>\n<| a tags=julia,string |>\n\
    The shortest way is to use length\n<code>\njulia> length(\"hello\")\n5\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>\nThe shortest way is to use length\n", " \
    \   \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n   \
    \ >>> strlen('abc')\n    3\n    \"\"\"", "    \n    if string == \"\" then \n\
    \        return 0\n    else \n        return string.length()\nend\n</cell>\n<code\
    \ language=julia-1.1>\nstrlen(\"\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of characters in a string that are not spaces.", " \
    \   \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n   \
    \ >>> strlen('abc')\n    3\n    \"\"\"", "    \"\"\"\n    Return length of given\
    \ string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"",
  "    if string == nil\n        0\n    else\n        string.len()\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nstrcat(string,\
    \ string...)", "    local result = 1\n    for char in string:\n        result\
    \ = result * len(char)\n    return result\nend", "    \"\"\"\n    Return length\
    \ of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n \
    \   \"\"\"", "    if string == \"\" then 0 else string.length\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\nstrlen(string::AbstractString)", "    local\
    \ len::Int64 = 0\n    for char in string:\n        len = len + 1\n    return len\n\
    end", "    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable in Julia\nStrings are\
    \ immutable in Julia. This means that we cannot change a string. Instead, we have\
    \ to create a new string with the desired changes.", "    Int64(string.len())\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\
    \ extraction\nJulia has many string extraction functions. Here are some examples:",
  "    \n    if string == \"\"\n        return 0\n    \n    length = 0\n    for char\
    \ in string\n        length += 1\n    \n    return length\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are uppercase letters.",
  "    local len::Int64 = 0\n    for char in string\n        len = len + 1\n    end\n\
    \    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given string contains\
    \ only letters, false otherwise.", "    Int64(string.len())\nend", "    \"\"\"\
    \n    Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n\
    \    3\n    \"\"\"", "    local result = 1\n    for char in string:\n        result\
    \ = result * len(char)\n    return result\nend", "    string.length\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\nReturn\
    \ substring from given string from given start index to given end index", "  \
    \  \"\"\"\n    Calculate the length of given string\n    >>> strlen('abc')\n \
    \   3\n    \"\"\"", "    if string == \"\" then 0 else string.length\nend\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring", "   \
    \ Int64(string.len())\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given ", "    if string == \"\" then\
    \ 0 else string.length\nend", "    \"\"\"\n    Return length of given string\n\
    \    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    \"\
    \"\"\n    Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n\
    \    3\n    \"\"\"", "    len = length(string)\n    if len == 0 \n        0\n\
    \    else\n        len\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\
    \"\nReturn length of given string\n\"\"\"", "    if string == \"\" then 0 else\
    \ string.length\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    charindex(string::String,\
    \ character::Char)::Int64", "    length::Int64 = 0\n    for char in string\n \
    \       length += 1\n    return length\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    This is not the correct answer, as `length` does not count the null character.\
    \ `length(\"abc\")` returns 3, not 4.\n<|/ c |>\n<| c |>\nI agree with you, I\
    \ have edited my answer to reflect this and to also include a link to the relevant\
    \ documentation.\n<|/ c |>\n<| a dscore=4 tags=julia |>\nThe most efficient way\
    \ is to use length. \n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a |>\n<|\
    \ a tags=julia |>\nThe most efficient way is to use length. \n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a dscore=4 |>\n<| a |>\nThe most efficient way is to use\
    \ length. \n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=4 tags=julia\
    \ |>\n<| a tags=julia |>\nThe most efficient way is to use length. \n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nThe most\
    \ efficient way is to use length. \n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=3 |>\nThe most efficient way is to use length.\
    \ \n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\nThe most efficient way is to use length. \n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia |>\nThe most efficient way is\
    \ to use length. \n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3\
    \ |>\n<| a |>\nThe most efficient way is to use length. \n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a dscore=3 tags=julia |>\n<| a tags=julia |>\nThe most\
    \ efficient way is to use length. \n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=julia |>\nThe most efficient way is to use length.\
    \ \n<code>\njulia> ", "    \"\"\"\n    Return length of given string\n    >>>\
    \ strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    if string\
    \ == ''\n        return 0\n    else \n        return string.length()\nend\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring", "   \
    \ if string == \"\" then 0 else string.length()\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nReturn length of given string\n\"\"\"", "    local result = 1\n    for\
    \ char in string:\n        result = result * len(char)\n    return result\nend\n\
    </cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of characters in a string that are\
    \ not in the given set.", "    \"\"\"\n    Calculate the length of given string\n\
    \    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    length\
    \ = 0\n    for c in string:\n        length = length + 1\n    return length\n\
    </code>\n<|/ a tags=julia,string |>\n<| c |>\nThis doesn't work for me. `strlen(\"\
    abc\")` returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.0\
    \ and it works fine. Maybe you have a different version?\n<|/ c |>\n<| c |>\n\
    I tested it on 0.6.1 and it works fine. Maybe you have a different version?\n\
    <|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works fine. Maybe you have a different\
    \ version?\n<|/ c |>\n<| c |>\nI tested it on 0.6.3 and it works fine. Maybe you\
    \ have a different version?\n<|/ c |>\n<| a dscore=4 |>\nIn Julia 0.6.1 you can\
    \ use the function length\n<code>\njulia> length(\"abc\")\n2\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nThis doesn't work for me. `length(\"abc\")` returns `3` instead\
    \ of `2`.\n<|/ c |>\n<| c |>\nIt works for me on Julia 0.6.1. What version are\
    \ you using?\n<|/ c |>\n<| c |>\nI tested it on 0.6.1 and it works fine. Maybe\
    \ you have a different version?\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and it\
    \ works fine. Maybe you have a different version?\n<|/ c |>\n<| c |>\nI tested\
    \ it on 0.6.3 and it works fine. Maybe you have a different version?\n<|/ c |>\n\
    <| a |>\nIn Julia 0.6.1 you can use the function length\n<code>\njulia> length(\"\
    abc\")\n2\n</code>\n<|/ a tags=julia,string dscore=4 |>\n<| a tags=julia,string\
    \ |>\nIn Julia 0.6.1 you can use the function length\n<code>\njulia> length(\"\
    abc\")\n2\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nIn Julia 0.6.1 you can\
    \ use the function length\n<code>\njulia> length(\"abc\")\n2\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=3 |>\nIn Julia 0.6.1 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n2\n</code>", "    \n    \"\"\"\n    \n    \n    # Your\
    \ code here\n    \n    return string.len()\nend", "    \"\"\"\n    Return length\
    \ of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n \
    \   \"\"\"", "    local string\n    local length\n    local i\n    local j\n \
    \   local length\n    length = 0\n    for i = 1, #string do\n        j = string.sub(i,\
    \ i+1)\n        length = length + j\n    end\n    return length\nend\n</cell>\n\
    <code language=julia-1.5>", "    \"\"\"\n    Return length of given string\n \
    \   >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    if\
    \ string == ''\n        return 0\n    else\n        return string.length\nend\n\
    </cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring",
  "    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nReturn length of given string\n\"\"\"", "    \"\"\"\n    Return length\
    \ of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n \
    \   \"\"\"", "    if string == \"\" then \n        return 0\n    else \n     \
    \   return string.length\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nString concatenation", "    if string == \"\" then 0 else\
    \ string.length\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nSubstring\nReturn a substring of a given string", "    if string == \"\
    \" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\
    abc\")\n</cell>\n<text>\nSubstrings\nJulia has many string functions to work with\
    \ substrings. Here are some examples:", "    \"\"\"\n    Return length of given\
    \ string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"",
  "    local length = 0\n    for char in string:\n        length = length + 1\n  \
    \  return length\nend\n</cell>\n<code language=julia-1.0>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.0>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia. Strings are immutable because Julia\
    \ is designed to avoid copying strings. Strings are immutable because Julia is\
    \ designed to avoid copying strings. Strings are immutable because Julia is designed\
    \ to avoid copying strings. Strings are immutable because Julia is designed to\
    \ avoid copying strings. Strings are immutable because Julia is designed to avoid\
    \ copying strings. Strings are immutable because Julia is designed to avoid copying\
    \ strings. Strings are immutable because Julia is designed to avoid copying strings.\
    \ Strings are immutable because Julia is designed to avoid copying strings. Strings\
    \ are immutable because Julia is designed to avoid copying strings. Strings are\
    \ immutable because Julia is designed to avoid copying strings. Strings are immutable\
    \ because Julia is designed to avoid copying strings. Strings are immutable because\
    \ Julia is designed to avoid copying strings. Strings are immutable because Julia\
    \ is designed to avoid copying strings. Strings are immutable because Julia is\
    \ designed to avoid copying strings. Strings are immutable because Julia is designed\
    \ to avoid copying strings. Strings are immutable because Julia is designed to\
    \ avoid copying strings. Strings are immutable because Julia is designed to avoid\
    \ copying strings. Strings are immutable because Julia is designed to avoid copying\
    \ strings. Strings are immutable because Julia is designed to avoid copying strings.\
    \ Strings are immutable because Julia is designed to avoid copying strings. Strings\
    \ are immutable because Julia is designed to avoid copying strings. Strings are\
    \ immutable because Julia is designed to avoid copying strings. Strings are immutable\
    \ because Julia is designed to avoid copying strings. Strings are immutable because\
    \ Julia is designed to avoid copying strings. Strings are immutable because Julia\
    \ is designed to avoid copying strings. Strings are immutable because Julia is\
    \ designed to avoid copying strings. Strings are immutable because Julia is designed\
    \ to avoid copying strings. Strings are immutable because Julia is de", "    \"\
    \"\"\n    Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n\
    \    3\n    \"\"\"", "    local len::Int64 = 0\n    for char in string\n     \
    \   len = len + 1\n    end\n    return len\nend", "    \"\"\"\n    Return length\
    \ of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n \
    \   \"\"\"", "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    \"\"\"\n    Return length\
    \ of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n \
    \   \"\"\"", "    local result = 1\n    for char in string:\n        result =\
    \ result + 1\n    return result\n</code>\n<|/ a tags=julia,string |>\n<| c |>\n\
    `length` does this for you\n<|/ c |>\n<| c |>\n`length` does this for you, but\
    \ `length` also counts newlines. `length(\"abc\\n\")` returns 3, but `length(\"\
    abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"\
    abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns\
    \ 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"\
    abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"\
    abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns\
    \ 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"\
    abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"\
    abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns\
    \ 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"\
    abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"\
    abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns\
    \ 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"\
    abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"\
    abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns\
    \ 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"\
    abc\")` returns 1. `length(\"abc\\n\")", "    local len::Int64 = 0\n    for char\
    \ in string do \n        len = len + 1\n    end\n    return len\nend\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<text>\nExercise 3.2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are uppercase letters.", "    local len::Int64\n    len = string.len()\n\
    \    return len\nend", "    if string == \"\" then 0 else string.length\nend\n\
    </cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\" abc\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc \")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\" abc def\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\" abc def \")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi\"\
    )\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi \")\n</cell>\n<code\
    \ language=julia-1.5>\nstrlen(\" abc def ghi jkl\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\" abc def ghi jkl \")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc\
    \ def ghi jkl mno\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi\
    \ jkl mno pqr\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi jkl\
    \ mno pqr stu\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi jkl\
    \ mno pqr stu vwx yza\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def\
    \ ghi jkl mno pqr stu vwx yza \")\n</cell>\n<code language=julia-1.5>\nstrlen(\"\
    \ abc def ghi jkl mno pqr stu vwx yza zab\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\" abc def ghi jkl mno pqr stu vwx yza zab cda\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\" abc def ghi jkl mno pqr stu vwx yza zab cda efa\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\" abc def ghi jkl mno pqr stu vwx yza zab cda efa ghi\")\n</cell>\n<code\
    \ language=julia-1.5>\nstrlen(\" abc def ghi jkl mno pqr stu vwx yza zab cda ef",
  "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"", "    local result = 0\n    for char in string:\n\
    \        result = result + 1\n    return result\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nThe `length` function was added in Julia v0.6.0, so this answer\
    \ is no longer valid. `length` was added in v0.6.0, so this answer is no longer\
    \ valid. `length` was added in v0.6.0, so this answer is no longer valid.\n<|/\
    \ c |>\n<| a dscore=4 |>\nThe most efficient way is to use Base.count (as suggested\
    \ by others). \n<code>\njulia> Base.count(\"abc\", \"c\")\n2\n</code>\nThis function\
    \ is implemented in C and is very efficient. \n<code>\njulia> Base.count(\"abc\"\
    , \"c\")\n2\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis should be the\
    \ accepted answer. `Base.count` is implemented in C and is very efficient.\n<|/\
    \ c |>\n<| a tags=julia,string |>\n<code>", "    local len::Int64 = 0\n    for\
    \ char in string do\n        len = len + 1\n    end\n    return len\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings\nStrings\
    \ are immutable sequences of Unicode characters. Strings are represented using\
    \ single quotes (') and double quotes (\").", "    if string == \"\" then 0 else\
    \ string.length\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nStrings are immutable", "    local length = 0\n    for char in string:\n\
    \        length = length + 1\n    return length\nend\n</cell>\n<code language=julia-1.4>",
  "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"", "    if string == \"\" then 0 else string.length\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\nReturn length of given string\n\
    \"\"\"", "    if string == \"\" then 0 else string.length()\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\nReturn length of given string\n\"\"\"", "    local\
    \ result = 1\n    for char in string:\n        result = result * len(char)\n \
    \   return result\nend\n</cell>\n<code language=julia-1.0>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nStrings are immutable", "    local result = 0\n    for char in\
    \ string:\n        result = result + 1\n    return result\n</code>\n<|/ a |>\n\
    <| c |>\nThanks for the answer. I'm new to Julia, so I didn't know about `length`\
    \ function. I tried your solution and it works. But I still don't understand why\
    \ my code doesn't work. Could you please explain why my code doesn't work?\n<|/\
    \ c |>\n<| c |>\nI added some explanation to the answer. Hope it helps.\n<|/ c\
    \ |>\n<| a dscore=2 |>\nThe reason why your function doesn't work is that you\
    \ are trying to iterate over the string using for loop, but you cannot do that\
    \ in Julia. Instead, you should use for loop to iterate over the characters of\
    \ the string and use length to get the length of the string.\n<code>", "    if\
    \ string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring", "    local result = 0\n    for char\
    \ in string:\n        result = result + 1\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring", "    local\
    \ result = 1\n    for char in string:\n        result = result * len(char)\n \
    \   return result\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nStrings are immutable in Julia\nJulia strings are immutable,\
    \ meaning that they cannot be changed. However, they can be converted to a mutable\
    \ string using String() function, which returns a new string.", "    local len::Int64\
    \ = 0\n    for char in string\n        len = len + 1\n    end\n    return len\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in that string that are not letters.", "    if string == \"\" then 0 else string.length\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\nReturn length of given string\n\
    \"\"\"", "    if string == \"\" then 0 else string.length\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\nReturn length of given string\n\"\"\"", "    len\
    \ = length(string.value)\n    if len == 0 \n        0\n    else\n        len\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nSubstrings\nJulia has many string manipulation functions. Here are some\
    \ of them:", "    if string == \"\" then 0 else string.length\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring", "   \
    \ \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"", "    if string == \"\" then 0 else string.length\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstrings\n\
    Julia has many string functions. Here are some of them:", "    local length =\
    \ 0\n    for char in string:\n        length = length + 1\n    return length\n\
    end", "    local len::Int64 = 0\n    for char in string do len = len + 1 end\n\
    \    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nstrcat(string, string...)", "    local len::Int64 = 0\n    for c in string:\n\
    \        len = len + 1\n    return len\n</code>\n<|/ a |>\n<| a dscore=2 |>\n\
    <code>", "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    if string == \"\" then\
    \ \n        return 0\n    else \n        return string.length\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings are immutable\n\
    Strings are immutable in Julia. Strings are immutable because they cannot be changed.\
    \ Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. String", "    local result = 0\n    for char\
    \ in string:\n        result = result + 1\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings in Julia\nStrings\
    \ in Julia are immutable and are represented as a vector of characters. Strings\
    \ are written between single quotes (') and are enclosed in double quotes (\"\
    ).", "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n\
    \    >>> strlen('abc')\n    3\n    \"\"\"", "    \"\"\"\n    Return length of\
    \ given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\
    \"\"", "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n  \
    \  0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    local result = 0\n    for\
    \ char in string:\n        result = result + 1\n    return result\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are uppercase letters.", "    local length = 0\n    for char in string\n\
    \        length = length + 1\n    end\n    return length\nend", "    local string\n\
    \    local length\n    local i\n    local j\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n", "    local result = 0\n    for char in string:\n\
    \        result = result + 1\n    return result\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\n`for char in string` iterates over the characters in the string. `string.len()`\
    \ returns the length of the string. `string.len()` is faster than `string.len()`\n\
    <|/ c |>\n<| c |>\n`string.len()` is faster than `string.len()`? I doubt that.\
    \ `string.len()` iterates over the characters in the string and `string.len()`\
    \ is O(1). `string.len()` is O(1) because it is implemented in C. `string.len()`\
    \ is O(n) because it is implemented in Lua.\n<|/ c |>\n<| c |>\n`string.len()`\
    \ is O(n) because it is implemented in Lua. `string.len()` is O(1) because it\
    \ is implemented in C. `string.len()` is O(1) because it is implemented in Lua.\
    \ `string.len()` is O(1) because it is implemented in C. `string.len()` is O(1)\
    \ because it is implemented in Lua. `string.len()` is O(1) because it is implemented\
    \ in C. `string.len()` is O(1) because it is implemented in Lua. `string.len()`\
    \ is O(1) because it is implemented in C. `string.len()` is O(1) because it is\
    \ implemented in Lua. `string.len()` is O(1) because it is implemented in C. `string.len()`\
    \ is O(1) because it is implemented in Lua. `string.len()` is O(1) because it\
    \ is implemented in C. `string.len()` is O(1) because it is implemented in Lua.\
    \ `string.len()` is O(1) because it is implemented in C. `string.len()` is O(1)\
    \ because it is implemented in Lua. `string.len()` is O(1) because it is implemented\
    \ in C. `string.len()` is O(1) because it is implemented in Lua. `string.len()`\
    \ is O(1) because it is implemented in C. `string.len()` is O(1) because it is\
    \ implemented in Lua. `string.len()` is O(1) because it is implemented in C. `string.len()`\
    \ is O(1) because it is implemented in Lua. `string.len()` is O(1) because it\
    \ is implemented in C. `string.len()` is O(1) because it is implemented in Lua.\
    \ `string.len()` is O(1) because it is implemented in C. `string.len()` is O(1)\
    \ because it is implemented in Lua. `string.len()` is O(1) because it is implemented\
    \ in C. `string.len()` is O(1) because it is implemented in Lu", "    if string\
    \ == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nReturn substring from given string\
    \ from given index to given index", "    if string == \"\" then 0 else string.length\n\
    end", "    if string == \"\" then \n        return 0\n    else \n        return\
    \ string.length()\nend\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nSubstring", "    \"\"\"\n    Return length of given string\n\
    \    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    length\
    \ = 0\n    for c in string:\n        length = length + 1\n    return length\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "    if string == \"\"\n\
    \        return 0\n    else\n        return string.length\nend", "    \"\"\"\n\
    \    Compute length of given string\n    >>> strlen('abc')\n    3\n    \"\"\"",
  "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"", "    local length::Int64 = 0\n    for char\
    \ in string:\n        length = length + 1\n    return length\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of characters in that string that\
    \ are not alphanumeric. For example, if the string was \"abc123\" the function\
    \ should return 3.", "    if string == \"\" then 0 else string.length\nend", " \
    \   local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend", "    if string == \"\"\n        return 0\n    else\n\
    \        return string.length\nend\n</cell>\n<code language=julia-1.0>\nstrlen(\"\
    abc\")\n</cell>\n<text>\nString concatenation", "    if string == ''\n       \
    \ return 0\n    else\n        return string.length()\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given ", "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    \"\"\"\n    Calculate\
    \ the length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n\
    \    3\n    \"\"\"", "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    if string == \"\" then\
    \ 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nSubstring\nSubstring is a function that extracts a substring\
    \ from a given string.", "    \"\"\"\n    Return length of given string\n    >>>\
    \ strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    \"\"\"\n\
    \    Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n\
    \    3\n    \"\"\"", "    if string == \"\" then 0 else string.length\nend\n</cell>\n\
    <code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings are immutable\
    \ in Julia\nJulia strings are immutable, meaning that they cannot be changed.\
    \ Strings are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are im", "    if string == \"\" then 0 else string.length\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring", "    length\
    \ = 0\n    for char in string\n        length += 1\n    return length\n</code>\n\
    <|/ a tags=julia,string |>\n<| c |>\nI guess you meant `length(string)` instead\
    \ of `strlen(string)`\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed\
    \ it.\n<|/ c |>\n<| a tags=julia,string |>\n<code>", "    if string == \"\"\n\
    \        return 0\n    else\n        return string.length()\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nString indexing\nJulia\
    \ has two string indexing operators: [] and []=. [] returns the character at the\
    \ given index. []= assigns the character at the given index. For example, we can\
    \ get the character at index 2 of the string \"abc\" as follows:", "    \"\"\"\
    \n    Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n\
    \    3\n    \"\"\"", "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    local len::Int64 = 0\n\
    \    for c in string:\n        len = len + 1\n    return len\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nThis doesn't work if you have a string with multiple lines. `length`\
    \ counts the number of characters in the first line only.\n<|/ c |>\n<| c |>\n\
    It does work if you have a string with multiple lines. `length` counts the number\
    \ of characters in the first line only.\n<|/ c |>\n<| c |>\nIt does work if you\
    \ have a string with multiple lines. `length` counts the number of characters\
    \ in the first line only.\n<|/ c |>\n<| a tags=julia,string |>\nThe shortest way\
    \ is to use length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=5\
    \ |>\n<| a dscore=4 |>\nThe shortest way is to use length\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=4 |>\nThe shortest\
    \ way is to use length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\n<code>\njulia> \"abc\"\n\"abc\"", "    if string\
    \ == \"\"\n        return 0\n    else\n        return string.length()\nend\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has substring function, which\
    \ returns substring from given string and given starting index. \nSyntax: substring(string::String,\
    \ start::Int, end::Int)", "    \"\"\"\n    Return length of given string\n   \
    \ >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    if string\
    \ == \"\" then 0 else string.length\nend", "    length = 0\n    for c in string:\n\
    \        length = length + 1\n    return length\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\nI wrote a function to count the characters in a string and return\
    \ the number of characters in the string in Julia. \n<code>", "    \"\"\"\n  \
    \  Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n\
    \    3\n    \"\"\"", "    if string == \"\" then 0 else string.length\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring extraction\n\
    Julia has a substring function that extracts a substring from a string. Let's\
    \ see how it works.", "    length = 0\n    for c in string\n        length = length\
    \ + 1\n    return length\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>",
  "    local length = 0\n    for char in string:\n        length = length + 1\n  \
    \  return length\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your answer!\
    \ I didn't know that `length` was a function in Julia. I'm still learning Julia\
    \ so I appreciate your help.\n<|/ c |>\n<| c |>\n`length` is a function in Julia.\
    \ `length(string)` returns the number of characters in the string. `length(string::String)`\
    \ returns the number of characters in the string `string`.\n<|/ c |>\n<| a tags=julia\
    \ |>\nIn Julia 1.2, you can use length(string) instead of length(string(string))\n\
    <|/ a dscore=2 |>\n<| a tags=julia |>\nIn Julia 1.2, you can use length(string)\
    \ instead of length(string(string))\n<|/ a dscore=2 |>\n<| a tags=julia |>\nIn\
    \ Julia 1.2, you can use length(string) instead of length(string(string))\n<|/\
    \ a dscore=1 |>\n<| a tags=julia |>\nIn Julia 1.2, you can use length(string)\
    \ instead of length(string(string))\n<|/ a dscore=1 |>\n<| a |>\nIn Julia 1.2,\
    \ you can use length(string) instead of length(string(string))\n<|/ a tags=julia\
    \ dscore=1 |>\n<| a tags=julia |>\nIn Julia 1.2, you can use length(string) instead\
    \ of length(string(string))\n<|/ a dscore=0 |>\n<| a tags=julia |>\nIn Julia 1.2,\
    \ you can use length(string) instead of length(string(string))\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nIn Julia 1.2, you can use length(string) instead of length(string(string))\n\
    <|/ a tags=julia |>\n<| a dscore=0 |>\nIn Julia 1.2, you can use length(string)\
    \ instead of length(string(string))\n<|/ a tags=julia |>\n<| a dscore=0 |>\nIn\
    \ Julia 1.2, you can use length(string) instead of length(string(string))\n<|/\
    \ a tags=julia |>\n<| a tags=julia |>\nIn Julia 1.2, you can use length(string)\
    \ instead of length(string(string))\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nIn Julia\
    \ 1.2, you can use length(string) instead of length(string(string))\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\nIn Julia 1.2, you can use length(string) instead of\
    \ length(string(string))\n<|/ a dscore=", "    if string == \"\" then 0 else string.length\n\
    end", "    local len::Int64 = 0\n    for char in string:\n        len += 1\n \
    \   return len\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\nI like\
    \ using mapslices for these kinds of things:\n<code>\njulia> mapslices(length,\
    \ [\"a\", \"b\", \"c\"])\n3-element Array{Int64,1}:\n 3\n 3\n 3\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=julia,string |>\n<code>", "    \"\"\"\n    Return length\
    \ of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n \
    \   \"\"\"", "    if string == nil then return 0 else string.length\nend", " \
    \   if string == null then return 0 else string.length\nend", "    local len::Int64\
    \ = 0\n    for char in string do len = len + 1 end\n    return len\nend", "  \
    \  \"\"\"\n    Calculate the length of given string\n    \"\"\"\n    return string.length()\n\
    end", "    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>",
  "    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"abc\")\n</cell>\n<text>\nisascii(character::Char)::Bool", "    \"\"\"\
    \n    Compute length of given string\n    >>> strlen('abc')\n    3\n    \"\"\"",
  "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"", "    \n    if string == \"\" \n        then\
    \ return 0\n    else \n        return string.length()\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring", "    local length::Int64 = 0\n \
    \   for character in string do \n        length = length + 1\n    end\n    return\
    \ length\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of characters in\
    \ a given string.", "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    if string == ''\n    \
    \    return 0\n    else \n        return string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\" \")\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\" a \")\n</cell>\n<code language=julia-1.3>\nstrlen(\"\
    \ a b \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c \")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\" a b c d \")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\" a b c d e \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c d\
    \ e f \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c d e f g \")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\" a b c d e f g h \")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\" a b c d e f g h i \")\n</cell>\n<code language=julia-1.3>\nstrlen(\"\
    \ a b c d e f g h i j \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c\
    \ d e f g h i j k \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c d e\
    \ f g h i j k l \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c d e f\
    \ g h i j k l m \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c d e f\
    \ g h i j k l m n \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c d e\
    \ f g h i j k l m n o \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c\
    \ d e f g h i j k l m n o p \")\n</cell>\n<code language=julia-1.3>\nstrlen(\"\
    \ a b c d e f g h i j k l m n o p q \")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\" a b c d e f g h i j k l m n o p q r \")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\" a b c d e f g h i j k l m ", "    length = 0\n    for char in string\
    \ do length += 1\n    return length\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't answer the question. He wants to know how to use `length` function without\
    \ using it.\n<|/ c |>\n<| c |>\nI added a comment to the question to clarify what\
    \ he is looking for.\n<|/ c |>\n<| c |>\nI added a comment to the question to\
    \ clarify what he is looking for.\n<|/ c |>\n<| a tags=julia,string |>\nIn Julia\
    \ 1.3 you can use the length function on a string without having to import it\
    \ first:\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=2 |>\nIn Julia 1.3 you can use the length function on a string without\
    \ having to import it first:\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/\
    \ a tags=julia,string |>\n<| a tags=julia,string |>\nIn Julia 1.3 you can use\
    \ the length function on a string without having to import it first:\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.3, you can use the length function on a string without having\
    \ to import it first:\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nIn Julia 1.3 you can use the length function on a string\
    \ without having to import it first:\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a tags=julia,string |>\n<| a dscore=0 |>\nIn Julia 1.3 you can use the length\
    \ function on a string without having to import it first:\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn\
    \ Julia 1.3 you can use the length function on a string without having to import\
    \ it first:\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=julia,string |>\nIn Julia 1.3 you can use the length function on a string\
    \ without having to import it first:\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>", "    local len = string.len()\n    if len\
    \ == 0 then \n        return 0\n    else \n        return len\n    end\nend\n\
    </cell>\n<code language=julia-1.3>", "    local len::Int64 = 0\n    for char in\
    \ string:\n        len = len + 1\n    return len\n</code>\n<|/ a tags=julia |>\n\
    <| a tags=julia |>\nIn Julia 1.3 you can use the function length\n<code>\njulia>\
    \ length(\"abc\")\n3\n</code>\n<|/ a dscore=5 |>\n<| a tags=julia |>\nIn Julia\
    \ 1.3 you can use the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=5 |>\n<| a dscore=4 |>\nIn Julia 1.3 you can use the function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\nIn Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a dscore=4 |>\n<| a tags=julia |>\nIn Julia 1.3 you can use\
    \ the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=julia |>\nIn Julia 1.3 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nIn Julia\
    \ 1.3 you can use the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=3 |>\nIn Julia 1.3 you can use the function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a dscore=3\
    \ |>\nIn Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a tags=julia |>\n<| a |>\nIn Julia 1.3 you can use the function\
    \ length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3 tags=julia\
    \ |>\n<| a dscore=3 |>\nIn Julia 1.3 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n\
    In Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a dscore=3 |>\n<| a ", "    \"\"\"\n    Return length of given\
    \ string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"",
  "    if string == ''\n        0\n    else\n        string.len()\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n@which - which function\n\
    @which - which function is a macro that prints the source code of a function or\
    \ expression. \nIt can be used inside functions to print the source code of a\
    \ function or expression.", "    \"\"\"\n    Return length of given string\n \
    \   >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    \"\"\
    \"\n    Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n\
    \    3\n    \"\"\"", "    \"\"\"\n    Compute length of given string\n    \"\"\
    \"\n    return string.len()\nend", "    if string == \"\"\n        return 0\n\
    \    else\n        return string.length()\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable", "    \"\"\"\n    Return\
    \ length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n \
    \   3\n    \"\"\"", "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    \"\"\"\n    Get length\
    \ of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n \
    \   \"\"\"", "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    \"\"\"\n    Return length\
    \ of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n \
    \   \"\"\"", "    local len::Int64 = 0\n    for char in string do \n        len\
    \ = len + 1\n    end\n    return len\nend", "    \"\"\"\n    Return length of\
    \ given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\
    \"\"", "    if string == ''\n        0\n    else\n        string.len()\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\nReturn length of given string\n\"\"\
    \"", "    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has many string manipulation\
    \ functions. One of them is substrings, which extracts a substring from a string.",
  "    local len::Int64 = 0\n    for char in string:\n        len += 1\n    return\
    \ len\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\nThe most efficient\
    \ way is to use Base.strlen\n<code>\njulia> Base.strlen(\"\")\n0", "    if string\
    \ == ''\n        return 0\n    else\n        return string.length\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nReturn length of given string\n\"\"\"", "    local string\n    local len\n\
    \    len = 0\n    for char in string:\n        len = len + 1\n    return len\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of substring in string\nReturn number of occurrences of\
    \ substring in string\nReturn number of occurrences of substring in string\nReturn\
    \ number of occurrences of sub", "    if string == \"\"\n        return 0\n  \
    \  else\n        return string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nReturn substring from given string\
    \ from given index to given length\nIf index is negative then start from end of\
    \ string\nIf length is negative then return empty string", "    local length::Int64\
    \ = 0\n    for char in string:\n        length = length + 1\n    return length\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\
    \ extraction\nJulia has a built-in function substring that extracts a substring\
    \ from a given string.", "    local len::Int64 = 0\n    for char in string:\n\
    \        len = len + 1\n    return len\nend", "    \"\"\"\n    Compute length\
    \ of given string\n    \"\"\"\n    return string.len()", "    length = 0\n   \
    \ for c in string\n        length += 1\n    return length\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like this answer because it uses recursion and is easy to understand.\n\
    <|/ c |>\n<| a tags=string,haskell,string-length |>\n<code>\nstrlen :: String\
    \ -> Int\nstrlen \"\" = 0\nstrlen str = 1 + strlen $ tail str\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a |>\n<code>\nstrlen :: String -> Int\nstrlen \"\" = 0\nstrlen\
    \ str = length str + strlen $ tail str\n</code>\n<|/ a dscore=2 tags=string,haskell,string-length\
    \ |>\n<| a tags=string,haskell,string-length |>\n<code>\nstrlen :: String -> Int\n\
    strlen \"\" = 0\nstrlen str = length str + strlen $ tail str\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,haskell,string-length |>\n<code>\nstrlen :: String -> Int\n\
    strlen \"\" = 0\nstrlen str = 1 + strlen $ tail str\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=string,haskell,string-length |>\n<code>\nstrlen :: String -> Int\nstrlen\
    \ \"\" = 0\nstrlen str = 1 + strlen $ tail str\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=string,haskell,string-length |>\n<code>\nstrlen :: String -> Int\nstrlen\
    \ \"\" = 0\nstrlen str = 1 + strlen $ tail str\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nstrlen :: String -> Int\nstrlen \"\" = 0\nstrlen str\
    \ = 1 + strlen $ tail str\n</code>\n<|/ a tags=string,haskell,string-length |>\n\
    <| a dscore=1 |>\n<code>\nstrlen :: String -> Int\nstrlen \"\" = 0\nstrlen str\
    \ = 1 + strlen $ tail str\n</code>\n<|/ a tags=string,haskell,string-length |>\n\
    <| a |>\n<code>\nstrlen :: String -> Int\nstrlen \"\" = 0\nstrlen str = 1 + strlen\
    \ $ tail str\n</code>\n<|/ a tags=string,haskell,string-length dscore=1 |>\n<|\
    \ a tags=string,haskell,string-length |>\n<code>\nstrlen :: String -> Int\nstrlen\
    \ \"\" = 0\nstrlen ", "    if string == \"\" then 0 else string.length\nend",
  "    length = 0\n    for char in string:\n        length = length + 1\n    return\
    \ length\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your solution\
    \ is very similar to mine. My problem was that I didn't know that `length` was\
    \ a reserved word in Julia. Now I understand why my code didn't work. Thanks again.\n\
    <|/ c |>\n<| a dscore=1 |>\nI believe that your problem is that you are trying\
    \ to use length as a variable name.  In Julia, length is a reserved word.  Try\
    \ using another variable name such as len.\n<|/ a tags=julia |>\n<| c |>\nThanks\
    \ for your answer. Your solution is very similar to mine. My problem was that\
    \ I didn't know that `length` was a reserved word in Julia. Now I understand why\
    \ my code didn't work. Thanks again.\n<|/ c |>\n<| a tags=julia |>\nI believe\
    \ that your problem is that you are trying to use length as a variable name. In\
    \ Julia, length is a reserved word. Try using another variable name such as len.\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your solution is very similar\
    \ to mine. My problem was that I didn't know that `length` was a reserved word\
    \ in Julia. Now I understand why my code didn't work. Thanks again.\n<|/ c |>\n\
    <| a |>\nI believe that your problem is that you are trying to use length as a\
    \ variable name. In Julia, length is a reserved word. Try using another variable\
    \ name such as len.\n<|/ a tags=julia dscore=1 |>\n<| a dscore=1 |>\nI believe\
    \ that your problem is that you are trying to use length as a variable name. In\
    \ Julia, length is a reserved word. Try using another variable name such as len.\n\
    <|/ a tags=julia |>\n<| a dscore=1 |>\nThe issue is that you are trying to use\
    \ length as a variable name. In Julia, length is a reserved word. Try using another\
    \ variable name such as len.\n<|/ a tags=julia |>\n<| a tags=julia |>\nI believe\
    \ that your problem is that you are trying to use length as a variable name. In\
    \ Julia, length is a reserved word. Try using another variable name such as len.\n\
    <|/ a dscore=1 |>\n<| a tags=julia |>\nI believe that your problem is that you\
    \ are trying to use length as a variable name. In Julia, length is a reserved\
    \ word. Try using another variable name such as len.\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\nI believe ", "    if string == nil then return 0 \n    else if\
    \ string.len == 0 then return 0 \n    else return string.len \nend\n</cell>\n\
    <code language=julia-1.5>", "    \"\"\"\n    Return length of given string\n \
    \   >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    if\
    \ string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are ", "    local len::Int64 = 0\n    for char\
    \ in string:\n        len = len + 1\n    return len\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable in Julia\nJulia strings\
    \ are immutable, meaning that once they are created, they cannot be changed. However,\
    \ Julia has several ways to create new strings. One of them is using the function\
    \ string(). For example,", "    local result = 1\n    for char in string:\n  \
    \      result = result * len(char)\n    return result\nend", "    if string ==\
    \ \"\" then \n        return 0\n    else \n        return string.length()\nend\n\
    </cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring",
  "    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"", "    \"\"\"\n    Return length of given string\n\
    \    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    local\
    \ result = 1\n    for char in string:\n        result = result * len(char)\n \
    \   return result\nend", "    \"\"\"\n    Return length of given string\n    >>>\
    \ strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    local len::Int64\
    \ = 0\n    for c in string\n        len = len + 1\n    end\n    return len\nend\n\
    </cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in that string. \nWrite a function that takes a string and returns the number\
    \ of words in that string. \nWrite a function that takes a string and returns\
    \ the number of sentences in that string. \nWrite a function that takes a string\
    \ and returns the number of characters in that string divided by the number of\
    \ words in that string. \nWrite a function that takes a string and returns the\
    \ number of characters in that string divided by the number of sentences in that\
    \ string. \nWrite a function that takes a string and returns the number of characters\
    \ in that string divided by the number of words in that string divided by the\
    \ number of sentences in that string. ", "    if string == ''\n        return\
    \ 0\n    else\n        return string.length\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has many string functions.\
    \ Here are some of them:", "    \"\"\"\n    Return length of given string\n  \
    \  >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "    \"\"\
    \"\n    Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n\
    \    3\n    \"\"\"", "    if string == \"\" then 0 else string.length\nend", " \
    \   \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n   \
    \ >>> strlen('abc')\n    3\n    \"\"\"", "    local len::Int64 = 0\n    for c\
    \ in string:\n        len = len + 1\n    return len\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of characters in a string that are not letters."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
