name: HumanEval_113_odd_count
language: julia
results:
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_digits = Vector{Int}()\n    for str in lst\n        odd_digits\
    \ += count_digits(str)\n    end\n    return odd_digits\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiqs3z9o5.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: count_digits not defined\n  Stacktrace:\n\
    \   [1] odd_count(::Array{String,1}) at /tmp/tmpiqs3z9o5.jl:16\n   [2] top-level\
    \ scope at /tmp/tmpiqs3z9o5.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpiqs3z9o5.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiqs3z9o5.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  UndefVarError:\
    \ count_digits not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpiqs3z9o5.jl:16\n   [2] top-level scope at /tmp/tmpiqs3z9o5.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpiqs3z9o5.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiqs3z9o5.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ count_digits not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpiqs3z9o5.jl:16\n   [2] top-level scope at /tmp/tmpiqs3z9o5.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpiqs3z9o5.jl:24\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiqs3z9o5.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = []\n    for str in lst\n        odd_counts.append(length(filter(x\
    \ -> x % 2 != 0, str)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfp9eh419.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfp9eh419.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}()\n    for str in lst\n        odd_counts\
    \ = append(odd_counts, length(filter(x -> x % 2 == 1, str)))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpate3ft6n.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpate3ft6n.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}()\n    for i in lst\n        odd_counts =\
    \ append(odd_counts, count(i, \"0\"))\n    end\n    return odd_counts\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \nFor example, odd_count(\"abracadabra\"\
    ) should return 5.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgb1m4fky.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgb1m4fky.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkzge0sct.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkzge0sct.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str =\
    \ odd_count_str + odd_count(i)\n    end\n    return odd_count_str\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyfxuud7r.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching odd_count(::String)\n\
    \  Closest candidates are:\n    odd_count(!Matched::Array{String,1}) at /tmp/tmpyfxuud7r.jl:14\n\
    \  Stacktrace:\n   [1] odd_count(::Array{String,1}) at /tmp/tmpyfxuud7r.jl:16\n\
    \   [2] top-level scope at /tmp/tmpyfxuud7r.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyfxuud7r.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpyfxuud7r.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Array{String,1})\
    \ at /tmp/tmpyfxuud7r.jl:14\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpyfxuud7r.jl:16\n   [2] top-level scope at /tmp/tmpyfxuud7r.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyfxuud7r.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpyfxuud7r.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Array{String,1})\
    \ at /tmp/tmpyfxuud7r.jl:14\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpyfxuud7r.jl:16\n   [2] top-level scope at /tmp/tmpyfxuud7r.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyfxuud7r.jl:24\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyfxuud7r.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{String}()\n    for s in lst\n        odd_digits =\
    \ union(odd_digits, findall(x -> x mod 2 != 0, s))\n    end\n    odd_digits\n\
    end\n</cell>\n<code language=julia-1.3>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.3>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string as input and returns the number of characters\
    \ that are not digits. For example, if the input string is \"123abc\", the function\
    \ should return 3.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvovxt06s.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvovxt06s.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = @sprintf \"the number of odd elements \nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps_5v99q7.jl:44\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps_5v99q7.jl:44\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,\"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string. \nThe function\
    \ should ignore all non-numeric characters. \nThe function should ignore all spaces.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmpuagctimh.jl:13\n\
    in expression starting at /tmp/tmpuagctimh.jl:1\nin expression starting at /tmp/tmpuagctimh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    odd_count_str .= \" the number of odd\
    \ elements \"\n    odd_count_str .= \" of the \"\n    odd_count_str .= \" str\"\
    \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str\
    \ .= \" \" \n    odd_count_str .= \" \" \n    odd_count_str .= \" \nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"1234567\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyiyr7289.jl:70\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyiyr7289.jl:70\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odds = Vector{Int}()\n    for i in lst\n        odds = append(odds, count(digits(i)))\n\
    \    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of strings as\
    \ an input and returns a vector of the number of odd characters in each string.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4txx1xmx.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4txx1xmx.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst))\n    odd_count_str = replace(odd_count_str, 4, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 6, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst))\n    odd_count_str = replace(odd_count_str, 8, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 9, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 10, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 11, length(lst))\n    odd_count_str = replace(odd_count_str, 12, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 13, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 14, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 15, length(lst))\n    odd_count_str = replace(odd_count_str, 16, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 17, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 18, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 19, length(lst))\n    odd_count_str = replace(odd_count_str, 20, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 21, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 22, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 23, length(lst))\n    odd_count_str = replace(odd_count_str, 24, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 25, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 26, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 27, length(lst))\n    odd_count_str = replace(odd_count_str, 28, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 29, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 30, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 31, length(lst))\n    odd_count_str = replace(odd_count_str, 32, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 33, length(\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjn4ita_h.jl:49\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjn4ita_h.jl:49\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = join(map(odd_count_str, lst))\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"n-1\")\n    odd_count_str = replace(odd_count_str, \"n+\", \"n+1\"\
    )\n    odd_count_str = replace(odd_count_str, \"n-1\", \"n\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n+1\", \"n\")\n    return split(odd_count_str)\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw657ud3m.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw657ud3m.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef,length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(filter(x -> x % 2 != 0, s))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw5e_t8ay.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw5e_t8ay.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for s in lst\n        odd_digits += findall(x\
    \ -> x % 2 != 0, s)\n    end\n    return [\"the number of odd elements \" <> join(map(str,\
    \ odd_digits)) <> \n        \" of the \" <> join(map(str, lst)) <> \" of the \"\
    \ <> join(map(str, lst)) <> \".\"]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9pvdgzzg.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9pvdgzzg.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 != 0, i))\n    end\n    return odd_count_str\nend\n\
    </cell>\n<code language=julia-1.0>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string that\
    \ are digits. \nFor example, if the input string is \"1234567\", the output should\
    \ be \"6\".\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpza9dxrng.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpza9dxrng.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = []\n    for str in lst\n        odd_counts.append(length(filter(x\
    \ -> x % 2 == 1, str)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_h0amfso.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_h0amfso.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst[1]))\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst[2]))\n    odd_count_str = replace(odd_count_str, 4, length(lst[3]))\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst[4]))\n    odd_count_str\
    \ = replace(odd_count_str, 6, length(lst[5]))\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst[6]))\n    odd_count_str = replace(odd_count_str, 8, length(lst[7]))\n\
    \    odd_count_str = replace(odd_count_str, 9, length(lst[8]))\n    odd_count_str\
    \ = replace(odd_count_str, 10, length(lst[9]))\n    odd_count_str = replace(odd_count_str,\
    \ 11, length(lst[10]))\n    odd_count_str = replace(odd_count_str, 12, length(lst[11]))\n\
    \    odd_count_str = replace(odd_count_str, 13, length(lst[12]))\n    odd_count_str\
    \ = replace(odd_count_str, 14, length(lst[13]))\n    odd_count_str = replace(odd_count_str,\
    \ 15, length(lst[14]))\n    odd_count_str = replace(odd_count_str, 16, length(lst[15]))\n\
    \    odd_count_str = replace(odd_count_str, 17, length(lst[16]))\n    odd_count_str\
    \ = replace(odd_count_str, 18, length(lst[17]))\n    odd_count_str = replace(odd_count_str,\
    \ 19, length(lst[18]))\n    odd_count_str = replace(odd_count_str, 20, length(lst[19]))\n\
    \    odd_count_str = replace(odd_count_str, 21, length(lst[20]))\n    odd_count_str\
    \ = replace(odd_count_str, 22, length(lst[21]))\n    odd_count_str = replace(odd_count_str,\
    \ 23, length(lst[22]))\n    odd_count_str = replace(odd_count_str, 24, length(lst[23]))\n\
    \    odd_count_str = replace(odd_count_str, 25, length(lst[24]))\n    odd_count_str\
    \ = replace(odd_count_str, 26, length(lst[25]))\n    odd_count_str = replace(odd_count_str,\
    \ 27, length(lst[26]))\n    odd_count_str = replace(odd_count_str, 28, length(lst[27]))\n\
    \    odd_count_str = replace(odd_count_str, 29, length(lst[28]))\n    odd_count_str\
    \ = replace(odd_count_str, 30, length(lst[29\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsor7rzkp.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsor7rzkp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for str in lst\n\
    \        odd_counts[findall(str) .== 1] .+= 1\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk2drx_t8.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk2drx_t8.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for s in lst\n        odd_digits += findall(x\
    \ -> x % 2 != 0, s)\n    end\n    return [\"the number of odd elements $n the\
    \ str$n of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list\
    \ of strings and returns a list of strings where each string consists of only\
    \ digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnl1akut1.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnl1akut1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + \" \"\n    end\n    odd_count_str\
    \ = odd_count_str[1:end]\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are digits.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmodkppew.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmodkppew.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== \"1\", i)\n    end\n    return [\"the number of odd elements $n the str$n\
    \ of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are digits.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2zpuikmp.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2zpuikmp.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    odd_digits\nend\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string as input and returns the number of characters in the string.\
    \ For example, the string \"hello\" has 5 characters. The string \"hello\" has\
    \ 5 characters. The string \"hello\" has 5 characters. The string \"hello\" has\
    \ 5 characters. The string \"hello\" has 5 characters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcfk4osac.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcfk4osac.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, s))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string that are digits. \nFor example, if the\
    \ input is \"1234567\", the function should return 5.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5tu1gc72.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5tu1gc72.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str =\
    \ odd_count_str + length(filter(x -> x % 2 == 1, i))\n    end\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of characters\
    \ in that string that are digits.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpon43c64d.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpon43c64d.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3p4maktt.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3p4maktt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3p4maktt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + \" \"\n    end\n    odd_count_str\
    \ = odd_count_str[1:end-1]\n    return odd_count_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpidf_vdxh.jl:26\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching +(::String, ::Int64)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n    +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n\
    \    +(!Matched::Missing, ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n\
    \   [1] +(::String, ::Int64, ::String) at ./operators.jl:529\n   [2] odd_count(::Array{String,1})\
    \ at /tmp/tmpidf_vdxh.jl:16\n   [3] top-level scope at /tmp/tmpidf_vdxh.jl:26\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpidf_vdxh.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpidf_vdxh.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching +(::String, ::Int64)\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    +(!Matched::Complex{Bool},\
    \ ::Real) at complex.jl:301\n    +(!Matched::Missing, ::Number) at missing.jl:115\n\
    \    ...\n  Stacktrace:\n   [1] +(::String, ::Int64, ::String) at ./operators.jl:529\n\
    \   [2] odd_count(::Array{String,1}) at /tmp/tmpidf_vdxh.jl:16\n   [3] top-level\
    \ scope at /tmp/tmpidf_vdxh.jl:27\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpidf_vdxh.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpidf_vdxh.jl:28\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching +(::String, ::Int64)\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    +(!Matched::Complex{Bool},\
    \ ::Real) at complex.jl:301\n    +(!Matched::Missing, ::Number) at missing.jl:115\n\
    \    ...\n  Stacktrace:\n   [1] +(::String, ::Int64, ::String) at ./operators.jl:529\n\
    \   [2] odd_count(::Array{String,1}) at /tmp/tmpidf_vdxh.jl:16\n   [3] top-level\
    \ scope at /tmp/tmpidf_vdxh.jl:28\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpidf_vdxh.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpidf_vdxh.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odds = Vector{Int}()\n    for i in lst\n        odds = odds + count(i)\n\
    \    end\n    return odds\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5u60evmf.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  TypeError: non-boolean (Char) used in boolean context\n\
    \  Stacktrace:\n   [1] count at ./reduce.jl:855 [inlined]\n   [2] count at ./reduce.jl:866\
    \ [inlined]\n   [3] odd_count(::Array{String,1}) at /tmp/tmp5u60evmf.jl:15\n \
    \  [4] top-level scope at /tmp/tmp5u60evmf.jl:24\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp5u60evmf.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp5u60evmf.jl:25\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  TypeError:\
    \ non-boolean (Char) used in boolean context\n  Stacktrace:\n   [1] count at ./reduce.jl:855\
    \ [inlined]\n   [2] count at ./reduce.jl:866 [inlined]\n   [3] odd_count(::Array{String,1})\
    \ at /tmp/tmp5u60evmf.jl:15\n   [4] top-level scope at /tmp/tmp5u60evmf.jl:25\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp5u60evmf.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp5u60evmf.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  TypeError:\
    \ non-boolean (Char) used in boolean context\n  Stacktrace:\n   [1] count at ./reduce.jl:855\
    \ [inlined]\n   [2] count at ./reduce.jl:866 [inlined]\n   [3] odd_count(::Array{String,1})\
    \ at /tmp/tmp5u60evmf.jl:15\n   [4] top-level scope at /tmp/tmp5u60evmf.jl:26\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp5u60evmf.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5u60evmf.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(str)\n    end\n    \n    return odd_count_str\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxvlo68ty.jl:26\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching odd_count(::String)\n\
    \  Closest candidates are:\n    odd_count(!Matched::Array{String,1}) at /tmp/tmpxvlo68ty.jl:14\n\
    \  Stacktrace:\n   [1] odd_count(::Array{String,1}) at /tmp/tmpxvlo68ty.jl:16\n\
    \   [2] top-level scope at /tmp/tmpxvlo68ty.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxvlo68ty.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpxvlo68ty.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Array{String,1})\
    \ at /tmp/tmpxvlo68ty.jl:14\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpxvlo68ty.jl:16\n   [2] top-level scope at /tmp/tmpxvlo68ty.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxvlo68ty.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpxvlo68ty.jl:28\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Array{String,1})\
    \ at /tmp/tmpxvlo68ty.jl:14\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpxvlo68ty.jl:16\n   [2] top-level scope at /tmp/tmpxvlo68ty.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxvlo68ty.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxvlo68ty.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(str, odd_digits)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmputn699l0.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching digits(::String)\n\
    \  Closest candidates are:\n    digits(!Matched::Integer; base, pad) at intfuncs.jl:731\n\
    \    digits(!Matched::Type{#s67} where #s67<:Integer, !Matched::Integer; base,\
    \ pad) at intfuncs.jl:735\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmputn699l0.jl:15\n   [2] top-level scope at /tmp/tmputn699l0.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmputn699l0.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmputn699l0.jl:25\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching digits(::String)\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at intfuncs.jl:731\n    digits(!Matched::Type{#s67} where #s67<:Integer,\
    \ !Matched::Integer; base, pad) at intfuncs.jl:735\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmputn699l0.jl:15\n   [2] top-level scope at /tmp/tmputn699l0.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmputn699l0.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmputn699l0.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching digits(::String)\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at intfuncs.jl:731\n    digits(!Matched::Type{#s67} where #s67<:Integer,\
    \ !Matched::Integer; base, pad) at intfuncs.jl:735\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmputn699l0.jl:15\n   [2] top-level scope at /tmp/tmputn699l0.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmputn699l0.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmputn699l0.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for str in lst\n\
    \        odd_counts[str] =  length(findall(str -> str == \"1\", str))\n    end\n\
    \    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ number of odd characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzg_1tx07.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzg_1tx07.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(str)\n    end\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\",'11111111','11111111'])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\",'11111111','11111111','11111111'])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\",'11111111','11111111','11111111','11111111'])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111','11111111','11111111','11111111','11111111'])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','11111111','\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8j9rgwbb.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8j9rgwbb.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, s))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpriy51aly.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpriy51aly.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmpz4bw9p4b.jl:13\n\
    in expression starting at /tmp/tmpz4bw9p4b.jl:1\nin expression starting at /tmp/tmpz4bw9p4b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + str\n    end\n    odd_count_str = odd_count_str[1:end-1]\n\
    \    odd_count_str = replace(odd_count_str, \"n\", \"1\")\n    odd_count_str =\
    \ replace(odd_count_str, \"m\", \"8\")\n    odd_count_str = replace(odd_count_str,\
    \ \"o\", \"4\")\n    odd_count_str = replace(odd_count_str, \"p\", \"2\")\n  \
    \  odd_count_str = replace(odd_count_str, \"q\", \"10\")\n    odd_count_str =\
    \ replace(odd_count_str, \"s\", \"6\")\n    odd_count_str = replace(odd_count_str,\
    \ \"t\", \"3\")\n    odd_count_str = replace(odd_count_str, \"u\", \"9\")\n  \
    \  odd_count_str = replace(odd_count_str, \"v\", \"7\")\n    odd_count_str = replace(odd_count_str,\
    \ \"w\", \"5\")\n    odd_count_str = replace(odd_count_str, \"x\", \"1\")\n  \
    \  odd_count_str = replace(odd_count_str, \"y\", \"9\")\n    odd_count_str = replace(odd_count_str,\
    \ \"z\", \"7\")\n    odd_count_str = replace(odd_count_str, \"0\", \"0\")\n  \
    \  odd_count_str = replace(odd_count_str, \"1\", \"1\")\n    odd_count_str = replace(odd_count_str,\
    \ \"2\", \"2\")\n    odd_count_str = replace(odd_count_str, \"3\", \"3\")\n  \
    \  odd_count_str = replace(odd_count_str, \"4\", \"4\")\n    odd_count_str = replace(odd_count_str,\
    \ \"5\", \"5\")\n    odd_count_str = replace(odd_count_str, \"6\", \"6\")\n  \
    \  odd_count_str = replace(odd_count_str, \"7\", \"7\")\n    odd_count_str = replace(odd_count_str,\
    \ \"8\", \"8\")\n    odd_count_str = replace(odd_count_str, \"9\", \"9\")\n  \
    \  odd_count_str = replace(odd_count_str, \"a\", \"a\")\n    odd_count_str = replace(odd_count_str,\
    \ \"b\", \"b\")\n    odd_count_str = replace(odd_count_str, \"c\", \"c\")\n  \
    \  odd_count_str = replace(odd_count_str, \"d\", \"d\")\n    odd_count_str = replace(odd_count_str,\
    \ \"e\", \"e\")\n    odd_count_str = replace(odd_count_str, \"f\", \"f\")\n  \
    \  odd_count_str = replace(odd_count_str, \"g\", \"g\")\n    odd_count_str = replace(odd_count_str,\
    \ \"h\", \"h\")\n    odd_count_\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsg81eysz.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpsg81eysz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpsg81eysz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef,0)\n    for str in lst\n        odd_counts\
    \ = push!(odd_counts,length(findall(str,\"\\d\")))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of strings and returns a vector where each\
    \ element is the length of the longest string in the input vector. For example,\
    \ if the input vector is [\"1234567\", \"311111111\"], then the output vector\
    \ should be [\"7\", \"11\"].\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpi4f9ic95.jl:15\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpi4f9ic95.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for str in lst\n        odd_digits +=\
    \ findall(x -> x % 2 == 1, str)\n    end\n    return map(x -> \"the number of\
    \ odd elements \" <> x <> \" of the \" <> x <> \" of the input.\", odd_digits)\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string where\
    \ each character is replaced by the number of times it appears in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpio7nzfxm.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpio7nzfxm.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, lst)\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n@assert odd_count([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
    @assert odd_count([\"3\",\"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\",\n                                         \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string as input and returns the number of characters\
    \ in the string that are odd.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjz3tjmvj.jl:13\n\
    in expression starting at /tmp/tmpjz3tjmvj.jl:1\nin expression starting at /tmp/tmpjz3tjmvj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 0, str))\n    end\n    \n    return\
    \ [\"the number of odd elements \" <> odd_count_str <> \" of the \" <> string(lst[1])\
    \ <> \" of the \" <> string(lst[2]) <> \".\"]\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string as input and returns a list of all the\
    \ characters in the string that are not digits.\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpom5brh9j.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpom5brh9j.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits))\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are digits.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprsv_3k7_.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprsv_3k7_.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + length(findall(str, \"8\"))\n\
    \    end\n    \n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are '1'.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb1amkuld.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb1amkuld.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odds = Vector{Int}()\n    for i in lst\n        odds = odds + count(i)\n\
    \    end\n    return odds\nend\n</cell>\n<code language=julia-1.0>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise: Write a function that takes a string as input and returns\
    \ a string with all the odd characters in it capitalized.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphpxlh3qp.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphpxlh3qp.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + \" \"\n    end\n    return odd_count_str\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8em0yi4_.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8em0yi4_.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    \nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph6hyj2tm.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph6hyj2tm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(str)\n    end\n    return odd_count_str\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9ublw85p.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching odd_count(::String)\n\
    \  Closest candidates are:\n    odd_count(!Matched::Array{String,1}) at /tmp/tmp9ublw85p.jl:14\n\
    \  Stacktrace:\n   [1] odd_count(::Array{String,1}) at /tmp/tmp9ublw85p.jl:16\n\
    \   [2] top-level scope at /tmp/tmp9ublw85p.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9ublw85p.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp9ublw85p.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Array{String,1})\
    \ at /tmp/tmp9ublw85p.jl:14\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmp9ublw85p.jl:16\n   [2] top-level scope at /tmp/tmp9ublw85p.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9ublw85p.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp9ublw85p.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Array{String,1})\
    \ at /tmp/tmp9ublw85p.jl:14\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmp9ublw85p.jl:16\n   [2] top-level scope at /tmp/tmp9ublw85p.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9ublw85p.jl:24\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ublw85p.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(str)\n    end\n    return odd_count_str\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptf4qdv2_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching odd_count(::String)\n\
    \  Closest candidates are:\n    odd_count(!Matched::Array{String,1}) at /tmp/tmptf4qdv2_.jl:14\n\
    \  Stacktrace:\n   [1] odd_count(::Array{String,1}) at /tmp/tmptf4qdv2_.jl:16\n\
    \   [2] top-level scope at /tmp/tmptf4qdv2_.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptf4qdv2_.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmptf4qdv2_.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Array{String,1})\
    \ at /tmp/tmptf4qdv2_.jl:14\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmptf4qdv2_.jl:16\n   [2] top-level scope at /tmp/tmptf4qdv2_.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptf4qdv2_.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmptf4qdv2_.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Array{String,1})\
    \ at /tmp/tmptf4qdv2_.jl:14\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmptf4qdv2_.jl:16\n   [2] top-level scope at /tmp/tmptf4qdv2_.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptf4qdv2_.jl:24\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptf4qdv2_.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== \"1\", i)\n    end\n    return [\"the number of odd elements $n the str$n\
    \ of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of odd characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw7dkwb6v.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw7dkwb6v.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n    \
    \    odd_counts = vcat(odd_counts, count_odd_digits(str))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnsjtl7bf.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnsjtl7bf.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = append(odd_counts, count(str))\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph_7hg51d.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph_7hg51d.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst)+1)\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst)+2)\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst)+3)\n    odd_count_str = replace(odd_count_str, 5, length(lst)+4)\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst)+5)\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst)+6)\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst)+7)\n    odd_count_str = replace(odd_count_str, 9, length(lst)+8)\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst)+9)\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst)+10)\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst)+11)\n    odd_count_str = replace(odd_count_str, 13, length(lst)+12)\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst)+13)\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst)+14)\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst)+15)\n    odd_count_str = replace(odd_count_str, 17, length(lst)+16)\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst)+17)\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst)+18)\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst)+19)\n    odd_count_str = replace(odd_count_str, 21, length(lst)+20)\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst)+21)\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst)+22)\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst)+23)\n    odd_count_str = replace(odd_count_str, 25, length(lst)+24)\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst)+25)\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst)+26)\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst)+27)\n    odd_count_str = replace(odd_count_str, 29, length(lst)+28)\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst)+29)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpym_9mjao.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpym_9mjao.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpym_9mjao.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== \"1\", i)\n    end\n    return [\"the number of odd elements $n the str$n\
    \ $ of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ as input and returns a string with all the odd digits replaced by \"n\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$ \"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkwrzc188.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkwrzc188.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}()\n    for i in lst\n        odd_counts =\
    \ append(odd_counts, length(filter(x -> x % 2 == 1, i)))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string that are digits.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzhsavwyv.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzhsavwyv.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + odd_count(i)\n    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns a string where each character is replaced by the number\
    \ of occurrences of that character in the input string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpce1nm69x.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpce1nm69x.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = findall(x -> x mod 2 != 0, lst)\n    odd_digits_count = length(odd_digits)\n\
    \    odd_count_str = join(map(str, odd_digits_count), \" \")\n    odd_count_str\
    \ = replace(odd_count_str, \"n\", \"s\")\n    odd_count_str = replace(odd_count_str,\
    \ \"s\", \"n\")\n    return [\"the number of odd elements \" + odd_count_str +\
    \ \" of the \" + \n            join(map(str, lst), \" \") + \" input.\"]\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0o1zvl03.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0o1zvl03.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for s in lst\n        odd_counts\
    \ = push!(odd_counts, length(findall(s == \"1\")))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\n@test odd_count([\"1234567\"]) == [4,\
    \ 8]\n@test odd_count([\"3\",  \"11111111\"]) == [1, 8]\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns a string where\
    \ each character is replaced by the number of times it occurs in the input string.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt495gnb9.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt495gnb9.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for str in lst\n        odd_digits +=\
    \ findall(x -> x % 2 != 0, str)\n    end\n    return [\"the number of odd elements\
    \ $n the str$n of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@assert odd_count([\"3\",\"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\",\n                         \
    \                \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns a string where each character is replaced by the number of times\
    \ it appears in the input string.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmkqsndnv.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmkqsndnv.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for str in lst\n        odd_digits +=\
    \ findall(x -> x % 2 == 1, str)\n    end\n    return map(x -> \"the number of\
    \ odd elements $x of the $x string.\", odd_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,\"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are digits.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq2at9p5h.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq2at9p5h.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp491o4h9k.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching digits(::String)\n\
    \  Closest candidates are:\n    digits(!Matched::Integer; base, pad) at intfuncs.jl:731\n\
    \    digits(!Matched::Type{#s67} where #s67<:Integer, !Matched::Integer; base,\
    \ pad) at intfuncs.jl:735\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmp491o4h9k.jl:15\n   [2] top-level scope at /tmp/tmp491o4h9k.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp491o4h9k.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp491o4h9k.jl:25\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching digits(::String)\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at intfuncs.jl:731\n    digits(!Matched::Type{#s67} where #s67<:Integer,\
    \ !Matched::Integer; base, pad) at intfuncs.jl:735\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmp491o4h9k.jl:15\n   [2] top-level scope at /tmp/tmp491o4h9k.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp491o4h9k.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp491o4h9k.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching digits(::String)\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at intfuncs.jl:731\n    digits(!Matched::Type{#s67} where #s67<:Integer,\
    \ !Matched::Integer; base, pad) at intfuncs.jl:735\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmp491o4h9k.jl:15\n   [2] top-level scope at /tmp/tmp491o4h9k.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp491o4h9k.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp491o4h9k.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, lst)\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of odd characters in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2v3uk7j8.jl:13\n\
    in expression starting at /tmp/tmp2v3uk7j8.jl:1\nin expression starting at /tmp/tmp2v3uk7j8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 1, length(lst))\n    return odd_count_str\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns the number\
    \ of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzmgcrvoi.jl:13\n\
    in expression starting at /tmp/tmpzmgcrvoi.jl:1\nin expression starting at /tmp/tmpzmgcrvoi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.0>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise: Write a function that takes a string as input and returns\
    \ a string with all the characters in lower case. For example, \"hello\" should\
    \ return \"hello\".\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpffxy1ttb.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpffxy1ttb.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odds = Vector{String}()\n    for i in lst\n        odds = odds +\
    \ count_odd_digits(i)\n    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpln8ahtaa.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpln8ahtaa.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(str)\n    end\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.0>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz3g8cux8.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz3g8cux8.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, lst)\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.3>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.3>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of odd characters in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1l91wc1e.jl:13\n\
    in expression starting at /tmp/tmp1l91wc1e.jl:1\nin expression starting at /tmp/tmp1l91wc1e.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count_digits(i)\n\
    \    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.0>\nodd_count(['1234567'])\n\
    </cell>\n<code language=julia-1.0>\nodd_count(['3',\"11111111\"])\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string as input and returns a string with\
    \ the number of odd characters in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqjb_1b8q.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqjb_1b8q.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string(_), odd_digits)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string where each character\
    \ is replaced by the number of occurrences of the character in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: all-underscore identifier used as rvalue around\
    \ /tmp/tmp9pm_tx1a.jl:17\nStacktrace:\n [1] top-level scope at /tmp/tmp9pm_tx1a.jl:1\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9pm_tx1a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count_digits(i)\n\
    \    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcvacj042.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcvacj042.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i),\
    \ 2)\n    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are digits.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp69ba8dqz.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp69ba8dqz.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(s == \"1\", s))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj5sfqof1.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj5sfqof1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst))\n    odd_count_str = replace(odd_count_str, 4, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 6, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst))\n    odd_count_str = replace(odd_count_str, 8, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 9, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 10, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 11, length(lst))\n    odd_count_str = replace(odd_count_str, 12, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 13, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 14, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 15, length(lst))\n    odd_count_str = replace(odd_count_str, 16, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 17, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 18, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 19, length(lst))\n    odd_count_str = replace(odd_count_str, 20, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 21, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 22, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 23, length(lst))\n    odd_count_str = replace(odd_count_str, 24, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 25, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 26, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 27, length(lst))\n    odd_count_str = replace(odd_count_str, 28, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 29, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 30, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 31, length(lst))\n    odd_count_str = replace(odd_count_str, 32, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 33, length(\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxwv49lv4.jl:49\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxwv49lv4.jl:49\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = Vector{String}()\n    for str in lst\n        odd_count_str\
    \ .= str\n    end\n    return odd_count_str\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5zmrr1gn.jl:25\n  Expression: candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
    \   Evaluated: String[] == [\"the number of odd elements 4n the str4ng 4 of the\
    \ 4nput.\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp5zmrr1gn.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5zmrr1gn.jl:24\ntest set: Test Failed at /tmp/tmp5zmrr1gn.jl:26\n\
    \  Expression: candidate([\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"]\n   Evaluated: String[] == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp5zmrr1gn.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5zmrr1gn.jl:24\ntest set: Test Failed at /tmp/tmp5zmrr1gn.jl:27\n\
    \  Expression: candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the\
    \ str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the\
    \ 2nput.\"]\n   Evaluated: String[] == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5zmrr1gn.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5zmrr1gn.jl:24\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5zmrr1gn.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits))\nend\n</cell>\n<code language=julia-1.5>\n\
    @test odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@test odd_count([\"3\",\"11111111\"]) == [\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\",\n                            \
    \          \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n\
    <text>\nExercise: Write a function that takes a string as input and returns the\
    \ number of odd characters in that string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ky7_28m.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9ky7_28m.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + odd_count(str)\n    end\n    return odd_count_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgv8sxseg.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching odd_count(::String)\n\
    \  Closest candidates are:\n    odd_count(!Matched::Array{String,1}) at /tmp/tmpgv8sxseg.jl:13\n\
    \  Stacktrace:\n   [1] odd_count(::Array{String,1}) at /tmp/tmpgv8sxseg.jl:15\n\
    \   [2] top-level scope at /tmp/tmpgv8sxseg.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgv8sxseg.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpgv8sxseg.jl:25\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Array{String,1})\
    \ at /tmp/tmpgv8sxseg.jl:13\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpgv8sxseg.jl:15\n   [2] top-level scope at /tmp/tmpgv8sxseg.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgv8sxseg.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpgv8sxseg.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Array{String,1})\
    \ at /tmp/tmpgv8sxseg.jl:13\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpgv8sxseg.jl:15\n   [2] top-level scope at /tmp/tmpgv8sxseg.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgv8sxseg.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgv8sxseg.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str =\
    \ odd_count_str + length(filter(x -> x == \"1\", i))\n    end\n    return [\"\
    the number of odd elements \" + odd_count_str + \" of the \" + string(lst[1])]\n\
    end\n</cell>\n<code language=julia-1.4>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.4>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string as input and returns the number of characters\
    \ in the string that are odd.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbpe0k1vc.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbpe0k1vc.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmrkxppuk.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching digits(::String)\n\
    \  Closest candidates are:\n    digits(!Matched::Integer; base, pad) at intfuncs.jl:731\n\
    \    digits(!Matched::Type{#s67} where #s67<:Integer, !Matched::Integer; base,\
    \ pad) at intfuncs.jl:735\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpmrkxppuk.jl:15\n   [2] top-level scope at /tmp/tmpmrkxppuk.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmrkxppuk.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpmrkxppuk.jl:25\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching digits(::String)\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at intfuncs.jl:731\n    digits(!Matched::Type{#s67} where #s67<:Integer,\
    \ !Matched::Integer; base, pad) at intfuncs.jl:735\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpmrkxppuk.jl:15\n   [2] top-level scope at /tmp/tmpmrkxppuk.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmrkxppuk.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpmrkxppuk.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching digits(::String)\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at intfuncs.jl:731\n    digits(!Matched::Type{#s67} where #s67<:Integer,\
    \ !Matched::Integer; base, pad) at intfuncs.jl:735\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpmrkxppuk.jl:15\n   [2] top-level scope at /tmp/tmpmrkxppuk.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmrkxppuk.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmrkxppuk.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}()\n    for i in lst\n        odd_counts[i]\
    \ = length(filter(x -> x % 2 == 1, i))\n    end\n    return odd_counts\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and returns a vector where each element is the length\
    \ of the longest string in the input vector.\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppj1q5kid.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppj1q5kid.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ number of odd characters in that string. Test it on some examples:\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmpgyka15uz.jl:13\n\
    in expression starting at /tmp/tmpgyka15uz.jl:1\nin expression starting at /tmp/tmpgyka15uz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef,0)\n    for s in lst\n        odd_counts\
    \ = push!(odd_counts,length(findall(x -> x mod 2 != 0, s)))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Given a list of strings,\
    \ where each string consists of only digits, return a list.\n    Each element\
    \ i of the output should be \"the number of even elements in the\n    string i\
    \ of the input.\" where all the i's should be replaced by the number\n    of even\
    \ digits in the i'th string of the input.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmponrq17qq.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmponrq17qq.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{String}(undef, 0)\n    for str in lst\n        odd_digits\
    \ += findall(x -> x % 2 == 1, str)\n    end\n    return odd_digits\nend\n</cell>\n\
    <code language=julia-1.0>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a string as input and returns a string where each character is replaced\
    \ by the number of times it appears in the original string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprmc15ht7.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprmc15ht7.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string(\"the number of odd elements \", odd_digits),\
    \ lst)\nend\n</cell>\n<text>\nExercise\nWrite a function that takes a string and\
    \ returns a string where each character is replaced by the number of times it\
    \ appears in the string.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvibuat4c.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvibuat4c.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits))\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string with all\
    \ the characters in lowercase and uppercase letters replaced by underscores.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxjqxg507.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxjqxg507.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odds = Vector{Int}()\n    for i in lst\n        odds = odds + count(i)\n\
    \    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\n@assert odd_count([\"\
    1234567\"]) == [4, 8]\n@assert odd_count([\"3\", \"11111111\"]) == [1, 8]\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ a string where each character is replaced by the number of times that character\
    \ appears in the input string. For example, if the input string is \"abcabc\"\
    , the output should be \"3abc3\".\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp30pc6wyz.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp30pc6wyz.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 4, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 1, length(lst[1]))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst[2]))\n    odd_count_str = replace(odd_count_str,\
    \ 2, length(lst[3]))\n    odd_count_str = replace(odd_count_str, 7, length(lst[4]))\n\
    \    odd_count_str = replace(odd_count_str, 3, length(lst[5]))\n    odd_count_str\
    \ = replace(odd_count_str, 6, length(lst[6]))\n    odd_count_str = replace(odd_count_str,\
    \ 5, length(lst[7]))\n    odd_count_str = replace(odd_count_str, 1, length(lst[8]))\n\
    \    odd_count_str = replace(odd_count_str, 9, length(lst[9]))\n    odd_count_str\
    \ = replace(odd_count_str, 10, length(lst[10]))\n    odd_count_str = replace(odd_count_str,\
    \ 11, length(lst[11]))\n    odd_count_str = replace(odd_count_str, 12, length(lst[12]))\n\
    \    odd_count_str = replace(odd_count_str, 13, length(lst[13]))\n    odd_count_str\
    \ = replace(odd_count_str, 14, length(lst[14]))\n    odd_count_str = replace(odd_count_str,\
    \ 15, length(lst[15]))\n    odd_count_str = replace(odd_count_str, 16, length(lst[16]))\n\
    \    odd_count_str = replace(odd_count_str, 17, length(lst[17]))\n    odd_count_str\
    \ = replace(odd_count_str, 18, length(lst[18]))\n    odd_count_str = replace(odd_count_str,\
    \ 19, length(lst[19]))\n    odd_count_str = replace(odd_count_str, 20, length(lst[20]))\n\
    \    odd_count_str = replace(odd_count_str, 21, length(lst[21]))\n    odd_count_str\
    \ = replace(odd_count_str, 22, length(lst[22]))\n    odd_count_str = replace(odd_count_str,\
    \ 23, length(lst[23]))\n    odd_count_str = replace(odd_count_str, 24, length(lst[24]))\n\
    \    odd_count_str = replace(odd_count_str, 25, length(lst[25]))\n    odd_count_str\
    \ = replace(odd_count_str, 26, length(lst[26]))\n    odd_count_str = replace(odd_count_str,\
    \ 27, length(lst[27]))\n    odd_count_str = replace(odd_count_str, 28, length(lst[28]))\n\
    \    odd_count_str = replace(odd_\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo3w4p1kb.jl:44\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo3w4p1kb.jl:44\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = join(map(odd_count_str, lst))\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \"\\n\", \"\")\n  \
    \  return split(odd_count_str)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfsa_4x36.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: odd_count_str not defined\n  Stacktrace:\n\
    \   [1] odd_count(::Array{String,1}) at /tmp/tmpfsa_4x36.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpfsa_4x36.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfsa_4x36.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpfsa_4x36.jl:24\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  UndefVarError:\
    \ odd_count_str not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpfsa_4x36.jl:13\n   [2] top-level scope at /tmp/tmpfsa_4x36.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfsa_4x36.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpfsa_4x36.jl:25\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ odd_count_str not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpfsa_4x36.jl:13\n   [2] top-level scope at /tmp/tmpfsa_4x36.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfsa_4x36.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfsa_4x36.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return [\"the number of odd elements $odd_digits the str$length(odd_digits)\
    \ of the $length(odd_digits) input.\"]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of characters in the string that are odd.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpng5k4fmh.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpng5k4fmh.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = findall(x -> x mod 2 != 0, lst)\n    odd_digits = map(x ->\
    \ length(x), odd_digits)\n    return [\"the number of odd elements \" + string(odd_digits[i])\
    \ + \" of the str\" + string(odd_digits[i]) + \" of the \" + string(lst[i]) +\
    \ \".\" for i = 1:length(lst)]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string that are digits.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgkcskk0v.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgkcskk0v.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = join(map(odd_count_str, lst))\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \"\\n\", \"\")\n  \
    \  odd_count_str = replace(odd_count_str, \"\\t\", \"\")\n    odd_count_str =\
    \ replace(odd_count_str, \"\\r\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\\"\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\\\\", \"\")\n\
    \    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str =\
    \ replace(odd_count_str, \"\\n\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\t\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\r\", \"\")\n\
    \    odd_count_str = replace(odd_count_str, \"\\\"\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"\\\\\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \"\\n\", \"\")\n  \
    \  odd_count_str = replace(odd_count_str, \"\\t\", \"\")\n    odd_count_str =\
    \ replace(odd_count_str, \"\\r\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\\"\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\\\\", \"\")\n\
    \    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str =\
    \ replace(odd_count_str, \"\\n\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\t\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\r\", \"\")\n\
    \    odd_count_str = replace(odd_count_str, \"\\\"\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"\\\\\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \"\\n\", \"\")\n  \
    \  odd_count_str = replace(odd_count_str, \"\\t\", \"\")\n    odd_count_str =\
    \ replace(odd_count_str, \"\\r\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\\"\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\\\\", \"\")\n\
    \    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str =\
    \ replace(odd_count_str, \"\\n\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\t\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\r\", \"\")\n\
    \    odd_count_str = replace(odd_count_str, \"\\\"\", \"\")\n    odd_count_str\
    \ = replace(odd_\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsyaxiaix.jl:50\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsyaxiaix.jl:50\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = findall(x -> x mod 2 != 0, lst)\n    odd_digits_count = length(odd_digits)\n\
    \    odd_count_str = join([\"the number of odd elements \", odd_digits_count,\
    \ \"n the str\", odd_digits_count, \".\"])\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",\"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp27pi_cjc.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp27pi_cjc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = append(odd_counts, sum(str =~ \"^[0-9]+$\"))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string as input and returns a string with the\
    \ number of even digits in it.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpscd7ni6k.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpscd7ni6k.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = append(odd_counts, count(str, digits))\n    end\n    return odd_counts\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are digits.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp23i3z0uj.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp23i3z0uj.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst)-1)\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst)-2)\n    odd_count_str = replace(odd_count_str, 4, length(lst)-3)\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst)-4)\n    odd_count_str\
    \ = replace(odd_count_str, 6, length(lst)-5)\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst)-6)\n    odd_count_str = replace(odd_count_str, 8, length(lst)-7)\n\
    \    odd_count_str = replace(odd_count_str, 9, length(lst)-8)\n    odd_count_str\
    \ = replace(odd_count_str, 10, length(lst)-9)\n    odd_count_str = replace(odd_count_str,\
    \ 11, length(lst)-10)\n    odd_count_str = replace(odd_count_str, 12, length(lst)-11)\n\
    \    odd_count_str = replace(odd_count_str, 13, length(lst)-12)\n    odd_count_str\
    \ = replace(odd_count_str, 14, length(lst)-13)\n    odd_count_str = replace(odd_count_str,\
    \ 15, length(lst)-14)\n    odd_count_str = replace(odd_count_str, 16, length(lst)-15)\n\
    \    odd_count_str = replace(odd_count_str, 17, length(lst)-16)\n    odd_count_str\
    \ = replace(odd_count_str, 18, length(lst)-17)\n    odd_count_str = replace(odd_count_str,\
    \ 19, length(lst)-18)\n    odd_count_str = replace(odd_count_str, 20, length(lst)-19)\n\
    \    odd_count_str = replace(odd_count_str, 21, length(lst)-20)\n    odd_count_str\
    \ = replace(odd_count_str, 22, length(lst)-21)\n    odd_count_str = replace(odd_count_str,\
    \ 23, length(lst)-22)\n    odd_count_str = replace(odd_count_str, 24, length(lst)-23)\n\
    \    odd_count_str = replace(odd_count_str, 25, length(lst)-24)\n    odd_count_str\
    \ = replace(odd_count_str, 26, length(lst)-25)\n    odd_count_str = replace(odd_count_str,\
    \ 27, length(lst)-26)\n    odd_count_str = replace(odd_count_str, 28, length(lst)-27)\n\
    \    odd_count_str = replace(odd_count_str, 29, length(lst)-28\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp848t5c5y.jl:43\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp848t5c5y.jl:43\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef,length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x == '1', lst[i]))\n    end\n   \
    \ \n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2pq16ejw.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2pq16ejw.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, lst)\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \nThe function should ignore any non-digit\
    \ characters.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzgow8i18.jl:13\n\
    in expression starting at /tmp/tmpzgow8i18.jl:1\nin expression starting at /tmp/tmpzgow8i18.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + str\n    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj4_kcb80.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj4_kcb80.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odds = Vector{String}()\n    for s in lst\n        odds = append(odds,\
    \ count(digits(s)))\n    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzpzq5ozw.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzpzq5ozw.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(i,\
    \ '1')\n    end\n    return map(x -> \"the number of odd elements $x of the $x\
    \ input.\", odd_digits)\nend\n</cell>\n<text>\nodd_count\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppjk14rqn.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppjk14rqn.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = join(map(odd_count_str, lst))\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"1\")\n    odd_count_str = replace(odd_count_str, \"n\", \"8\")\n  \
    \  odd_count_str = replace(odd_count_str, \"4\", \"8\")\n    odd_count_str = replace(odd_count_str,\
    \ \"1\", \"4\")\n    odd_count_str = replace(odd_count_str, \"8\", \"1\")\n  \
    \  odd_count_str = replace(odd_count_str, \"8\", \"4\")\n    odd_count_str = replace(odd_count_str,\
    \ \"4\", \"8\")\n    odd_count_str = replace(odd_count_str, \"1\", \"4\")\n  \
    \  odd_count_str = replace(odd_count_str, \"4\", \"8\")\n    odd_count_str = replace(odd_count_str,\
    \ \"8\", \"1\")\n    odd_count_str = replace(odd_count_str, \"8\", \"4\")\n  \
    \  odd_count_str = replace(odd_count_str, \"1\", \"4\")\n    odd_count_str = replace(odd_count_str,\
    \ \"4\", \"8\")\n    odd_count_str = replace(odd_count_str, \"8\", \"1\")\n  \
    \  odd_count_str = replace(odd_count_str, \"8\", \"4\")\n    odd_count_str = replace(odd_count_str,\
    \ \"1\", \"4\")\n    odd_count_str = replace(odd_count_str, \"4\", \"8\")\n  \
    \  odd_count_str = replace(odd_count_str, \"8\", \"1\")\n    odd_count_str = replace(odd_count_str,\
    \ \"8\", \"4\")\n    odd_count_str = replace(odd_count_str, \"1\", \"4\")\n  \
    \  odd_count_str = replace(odd_count_str, \"4\", \"8\")\n    odd_count_str = replace(odd_count_str,\
    \ \"8\", \"1\")\n    odd_count_str = replace(odd_count_str, \"8\", \"4\")\n  \
    \  odd_count_str = replace(odd_count_str, \"1\", \"4\")\n    odd_count_str = replace(odd_count_str,\
    \ \"4\", \"8\")\n    odd_count_str = replace(odd_count_str, \"8\", \"1\")\n  \
    \  odd_count_str = replace(odd_count_str, \"8\", \"4\")\n    odd_count_str = replace(odd_count_str,\
    \ \"1\", \"4\")\n    odd_count_str = replace(odd_count_str, \"4\", \"8\")\n  \
    \  odd_count_str = replace(odd_count_str, \"8\", \"1\")\n    odd_count_str = replace(odd_count_str,\
    \ \"8\", \"4\")\n    odd_count_str = replace(odd_count_str, \"1\", \"4\")\n  \
    \  odd_count_str = replace(odd_count_str, \"4\", \"8\")\n    \nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuaur1g47.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpuaur1g47.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpuaur1g47.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    \n    for str in lst\n        odd_count_str\
    \ = strcat(odd_count_str, strcat(count_odd_digits(str), \" \"))\n    end\n   \
    \ \n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp1gpc9d_.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp1gpc9d_.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(s == \"1\", s))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb4bts7qw.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb4bts7qw.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 == 1, str))\n    end\n    odd_count_str\
    \ = odd_count_str + \" \"\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    @test odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@test odd_count([\"3\",\"11111111\"]) == [\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\",\n                            \
    \         \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of odd characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8rk5ub9a.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8rk5ub9a.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_helper(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz710u7oy.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: odd_count_helper not defined\n \
    \ Stacktrace:\n   [1] odd_count(::Array{String,1}) at /tmp/tmpz710u7oy.jl:13\n\
    \   [2] top-level scope at /tmp/tmpz710u7oy.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz710u7oy.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpz710u7oy.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  UndefVarError:\
    \ odd_count_helper not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpz710u7oy.jl:13\n   [2] top-level scope at /tmp/tmpz710u7oy.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz710u7oy.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpz710u7oy.jl:22\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ odd_count_helper not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpz710u7oy.jl:13\n   [2] top-level scope at /tmp/tmpz710u7oy.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz710u7oy.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz710u7oy.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(str)\n    end\n    odd_count_str = odd_count_str[1:end]\n\
    \    return odd_count_str\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptrydpx9y.jl:26\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching odd_count(::String)\n\
    \  Closest candidates are:\n    odd_count(!Matched::Array{String,1}) at /tmp/tmptrydpx9y.jl:14\n\
    \  Stacktrace:\n   [1] odd_count(::Array{String,1}) at /tmp/tmptrydpx9y.jl:16\n\
    \   [2] top-level scope at /tmp/tmptrydpx9y.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptrydpx9y.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmptrydpx9y.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Array{String,1})\
    \ at /tmp/tmptrydpx9y.jl:14\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmptrydpx9y.jl:16\n   [2] top-level scope at /tmp/tmptrydpx9y.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptrydpx9y.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmptrydpx9y.jl:28\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Array{String,1})\
    \ at /tmp/tmptrydpx9y.jl:14\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmptrydpx9y.jl:16\n   [2] top-level scope at /tmp/tmptrydpx9y.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptrydpx9y.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptrydpx9y.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string(_), odd_digits)\nend\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of characters in that string that are digits.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: all-underscore identifier used as rvalue around\
    \ /tmp/tmpzc881ehr.jl:17\nStacktrace:\n [1] top-level scope at /tmp/tmpzc881ehr.jl:1\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzc881ehr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{String}()\n    for i in lst\n        odd_digits =\
    \ odd_digits + count_odd_digits(i)\n    end\n    return odd_digits\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwr9kcude.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: count_odd_digits not defined\n \
    \ Stacktrace:\n   [1] odd_count(::Array{String,1}) at /tmp/tmpwr9kcude.jl:15\n\
    \   [2] top-level scope at /tmp/tmpwr9kcude.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwr9kcude.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpwr9kcude.jl:25\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  UndefVarError:\
    \ count_odd_digits not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpwr9kcude.jl:15\n   [2] top-level scope at /tmp/tmpwr9kcude.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwr9kcude.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpwr9kcude.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ count_odd_digits not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpwr9kcude.jl:15\n   [2] top-level scope at /tmp/tmpwr9kcude.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwr9kcude.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwr9kcude.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count_digits(i)\n\
    \    end\n    return [\"the number of odd elements $odd_digits the str$length(odd_digits)\
    \ of the $length(odd_digits)nput.\"]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a string where all the characters are capitalized.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjmflm4_u.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjmflm4_u.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odds = Vector{Int}()\n    for str in lst\n        odds = odds + count_odd_digits(str)\n\
    \    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpobjmwu0j.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpobjmwu0j.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== digits(i), all(i))\n    end\n    return [\"the number of odd elements $n\
    \ the str$n $ of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns a string with the number of odd characters in each word\
    \ of the string.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$ \"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8co4_751.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8co4_751.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = findall(x -> x % 2 == 1, lst)\n    odd_counts = count(odd_digits)\n\
    \    return map(x -> \"the number of odd elements \" + x + \" of the str\" + x\
    \ + \"nput.\",\n               odd_counts)\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ as input and returns the number of characters in the string that are odd.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn4ynn4__.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn4ynn4__.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}()\n    for i in lst\n        odd_counts\
    \ = append(odd_counts, length(filter(x -> x % 2 == 1, i)))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns a string where each character is replaced by the number of times\
    \ it appears in the string.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg05nda2l.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg05nda2l.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_helper(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcj6g1zzt.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: odd_count_helper not defined\n \
    \ Stacktrace:\n   [1] odd_count(::Array{String,1}) at /tmp/tmpcj6g1zzt.jl:13\n\
    \   [2] top-level scope at /tmp/tmpcj6g1zzt.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcj6g1zzt.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpcj6g1zzt.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  UndefVarError:\
    \ odd_count_helper not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpcj6g1zzt.jl:13\n   [2] top-level scope at /tmp/tmpcj6g1zzt.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcj6g1zzt.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpcj6g1zzt.jl:22\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ odd_count_helper not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpcj6g1zzt.jl:13\n   [2] top-level scope at /tmp/tmpcj6g1zzt.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcj6g1zzt.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcj6g1zzt.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = strcat(odd_count_str,\
    \ str, \"the number of odd elements \")\n    end\n    odd_count_str = strcat(odd_count_str,\
    \ \"n the str\")\n    odd_count_str = strcat(odd_count_str, length(lst), \"th\
    \ \")\n    odd_count_str = strcat(odd_count_str, string(length(lst)))\n    odd_count_str\
    \ = strcat(odd_count_str, \"of the \")\n    odd_count_str = strcat(odd_count_str,\
    \ string(length(lst)))\n    odd_count_str = strcat(odd_count_str, \"nput.\")\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.0>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\",\"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string. \nFor example, if the input\
    \ is \"hello\", the function should return 5.\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptmpkca2l.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptmpkca2l.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo9f9e28g.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching digits(::String)\n\
    \  Closest candidates are:\n    digits(!Matched::Integer; base, pad) at intfuncs.jl:731\n\
    \    digits(!Matched::Type{#s67} where #s67<:Integer, !Matched::Integer; base,\
    \ pad) at intfuncs.jl:735\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpo9f9e28g.jl:15\n   [2] top-level scope at /tmp/tmpo9f9e28g.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo9f9e28g.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpo9f9e28g.jl:25\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching digits(::String)\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at intfuncs.jl:731\n    digits(!Matched::Type{#s67} where #s67<:Integer,\
    \ !Matched::Integer; base, pad) at intfuncs.jl:735\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpo9f9e28g.jl:15\n   [2] top-level scope at /tmp/tmpo9f9e28g.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo9f9e28g.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpo9f9e28g.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching digits(::String)\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at intfuncs.jl:731\n    digits(!Matched::Type{#s67} where #s67<:Integer,\
    \ !Matched::Integer; base, pad) at intfuncs.jl:735\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpo9f9e28g.jl:15\n   [2] top-level scope at /tmp/tmpo9f9e28g.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo9f9e28g.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo9f9e28g.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odds = Vector{Int}()\n    for i in lst\n        odds = odds + countOddDigits(i)\n\
    \    end\n    return odds\nend\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a string and returns a string where all the digits have been reversed.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaluttlfh.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaluttlfh.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str =\
    \ odd_count_str + odd_count(i)\n    end\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiy21zx1o.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiy21zx1o.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst[1]))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst[2]))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst[3]))\n    odd_count_str = replace(odd_count_str, 5, length(lst[4]))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst[5]))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst[6]))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst[7]))\n    odd_count_str = replace(odd_count_str, 9, length(lst[8]))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst[9]))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst[10]))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst[11]))\n    odd_count_str = replace(odd_count_str, 13, length(lst[12]))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst[13]))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst[14]))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst[15]))\n    odd_count_str = replace(odd_count_str, 17, length(lst[16]))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst[17]))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst[18]))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst[19]))\n    odd_count_str = replace(odd_count_str, 21, length(lst[20]))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst[21]))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst[22]))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst[23]))\n    odd_count_str = replace(odd_count_str, 25, length(lst[24]))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst[25]))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst[26]))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst[27]))\n    odd_count_str = replace(odd_count_str, 29, length(lst[28]))\n\
    \    odd_count_str = replace(odd_\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmot3cov2.jl:44\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmot3cov2.jl:44\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = [odd_count_str % [odd_count(i) for\
    \ i in lst]]\n    return odd_count_str\nend\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6lgyp05v.jl:13\n\
    in expression starting at /tmp/tmp6lgyp05v.jl:1\nin expression starting at /tmp/tmp6lgyp05v.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 0, str))\n    end\n    \n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf4qipgfz.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf4qipgfz.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = sum(digits(lst[i])) %% 2\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.4>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.4>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string that are digits.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"%\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4303macv.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4303macv.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, lst)\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9bmooyua.jl:13\n\
    in expression starting at /tmp/tmp9bmooyua.jl:1\nin expression starting at /tmp/tmp9bmooyua.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits))\nend\n</cell>\n<code language=julia-1.0>\n\
    odd_count(['1234567'])\n</cell>\n<code language=julia-1.0>\nodd_count(['3',\"\
    11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are digits.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1xa6gf62.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1xa6gf62.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_helper(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnt4iur6v.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: odd_count_helper not defined\n \
    \ Stacktrace:\n   [1] odd_count(::Array{String,1}) at /tmp/tmpnt4iur6v.jl:13\n\
    \   [2] top-level scope at /tmp/tmpnt4iur6v.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnt4iur6v.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpnt4iur6v.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  UndefVarError:\
    \ odd_count_helper not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpnt4iur6v.jl:13\n   [2] top-level scope at /tmp/tmpnt4iur6v.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnt4iur6v.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpnt4iur6v.jl:22\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ odd_count_helper not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpnt4iur6v.jl:13\n   [2] top-level scope at /tmp/tmpnt4iur6v.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnt4iur6v.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnt4iur6v.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = strcat(odd_count_str, strcat(count(str, \"1\"), \" \"))\n    end\n    odd_count_str\
    \ = strcat(odd_count_str, count(odd_count_str, \"1\"))\n    odd_count_str = strcat(odd_count_str,\
    \ \" odd \")\n    odd_count_str = strcat(odd_count_str, count(odd_count_str, \"\
    1\"))\n    odd_count_str = strcat(odd_count_str, \" digits\")\n    odd_count_str\
    \ = strcat(odd_count_str, \" in the \")\n    odd_count_str = strcat(odd_count_str,\
    \ count(odd_count_str, \"1\"))\n    odd_count_str = strcat(odd_count_str, \" string.\"\
    )\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111',\"11111111\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111',\"11111111\",'11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111',\"11111111\",'11111111',\"\
    11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111'])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"\
    11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111'])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"3\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111',\"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111'])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111',\"11111111\"])\n</cell>\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphn6s7a42.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphn6s7a42.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + \" \"\n    end\n    odd_count_str\
    \ = odd_count_str[1:end-1]\n    return odd_count_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf8c8gacv.jl:26\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching +(::String, ::Int64)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n    +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n\
    \    +(!Matched::Missing, ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n\
    \   [1] +(::String, ::Int64, ::String) at ./operators.jl:529\n   [2] odd_count(::Array{String,1})\
    \ at /tmp/tmpf8c8gacv.jl:16\n   [3] top-level scope at /tmp/tmpf8c8gacv.jl:26\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpf8c8gacv.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpf8c8gacv.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching +(::String, ::Int64)\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    +(!Matched::Complex{Bool},\
    \ ::Real) at complex.jl:301\n    +(!Matched::Missing, ::Number) at missing.jl:115\n\
    \    ...\n  Stacktrace:\n   [1] +(::String, ::Int64, ::String) at ./operators.jl:529\n\
    \   [2] odd_count(::Array{String,1}) at /tmp/tmpf8c8gacv.jl:16\n   [3] top-level\
    \ scope at /tmp/tmpf8c8gacv.jl:27\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpf8c8gacv.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpf8c8gacv.jl:28\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching +(::String, ::Int64)\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    +(!Matched::Complex{Bool},\
    \ ::Real) at complex.jl:301\n    +(!Matched::Missing, ::Number) at missing.jl:115\n\
    \    ...\n  Stacktrace:\n   [1] +(::String, ::Int64, ::String) at ./operators.jl:529\n\
    \   [2] odd_count(::Array{String,1}) at /tmp/tmpf8c8gacv.jl:16\n   [3] top-level\
    \ scope at /tmp/tmpf8c8gacv.jl:28\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpf8c8gacv.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf8c8gacv.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef,length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(x -> x=='1',s))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnr87955o.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnr87955o.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = append(odd_counts, count(str, digits))\n    end\n    return odd_counts\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppyi_mm71.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching iterate(::typeof(digits))\n\
    \  Closest candidates are:\n    iterate(!Matched::Core.SimpleVector) at essentials.jl:603\n\
    \    iterate(!Matched::Core.SimpleVector, !Matched::Any) at essentials.jl:603\n\
    \    iterate(!Matched::ExponentialBackOff) at error.jl:253\n    ...\n  Stacktrace:\n\
    \   [1] count(::String, ::Function) at ./reduce.jl:854\n   [2] odd_count(::Array{String,1})\
    \ at /tmp/tmppyi_mm71.jl:15\n   [3] top-level scope at /tmp/tmppyi_mm71.jl:24\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmppyi_mm71.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmppyi_mm71.jl:25\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching iterate(::typeof(digits))\n  Closest candidates are:\n  \
    \  iterate(!Matched::Core.SimpleVector) at essentials.jl:603\n    iterate(!Matched::Core.SimpleVector,\
    \ !Matched::Any) at essentials.jl:603\n    iterate(!Matched::ExponentialBackOff)\
    \ at error.jl:253\n    ...\n  Stacktrace:\n   [1] count(::String, ::Function)\
    \ at ./reduce.jl:854\n   [2] odd_count(::Array{String,1}) at /tmp/tmppyi_mm71.jl:15\n\
    \   [3] top-level scope at /tmp/tmppyi_mm71.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmppyi_mm71.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmppyi_mm71.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching iterate(::typeof(digits))\n  Closest candidates are:\n  \
    \  iterate(!Matched::Core.SimpleVector) at essentials.jl:603\n    iterate(!Matched::Core.SimpleVector,\
    \ !Matched::Any) at essentials.jl:603\n    iterate(!Matched::ExponentialBackOff)\
    \ at error.jl:253\n    ...\n  Stacktrace:\n   [1] count(::String, ::Function)\
    \ at ./reduce.jl:854\n   [2] odd_count(::Array{String,1}) at /tmp/tmppyi_mm71.jl:15\n\
    \   [3] top-level scope at /tmp/tmppyi_mm71.jl:26\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmppyi_mm71.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppyi_mm71.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_digits = Vector{Int}()\n    for str in lst\n        odd_digits\
    \ += findall(x -> x % 2 == 1, str)\n    end\n    odd_digits = collect(odd_digits)\n\
    \    return [\"the number of odd elements $n the str$n of the $nput.\" for n in\
    \ odd_digits]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of odd characters in that string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb9_rfl3b.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb9_rfl3b.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str =\
    \ odd_count_str + odd_count(i)\n    end\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string that\
    \ are digits. \nFor example, if the input string is \"1234567\", the function\
    \ should return 5.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9rjxoky0.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9rjxoky0.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string(_), odd_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string is the product\
    \ of the odd digits in each string. For example, if the input vector is [\"1234567\"\
    , \"311111111\"], then the output vector should be [\"24\", \"8\"].\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: all-underscore identifier used as rvalue around\
    \ /tmp/tmpwpz7rt7y.jl:17\nStacktrace:\n [1] top-level scope at /tmp/tmpwpz7rt7y.jl:1\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwpz7rt7y.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = append(odd_counts, length(findall(str, \"1\")))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.0>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.0>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings as an argument and returns\
    \ a vector where each element is the length of the longest string in the input\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp4vsrn1y.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp4vsrn1y.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = findall(x -> x mod 2 != 0, lst)\n    odd_count = map(x ->\
    \ length(filter(x -> x mod 2 != 0, x)), odd_digits)\n    return odd_count\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns a string that contains the number of characters\
    \ in each string that are not digits. For example, the string \"1234567\" should\
    \ return \"4n\".\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6euioisq.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6euioisq.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== \"1\", i)\n    end\n    return [\"the number of odd elements $i of the str$i\
    \ of the input.\" for i in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are digits.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc3czq71z.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc3czq71z.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== digits, i)\n    end\n    return [\"the number of odd elements $odd_digits\
    \ the str$length(odd_digits) of the $length(odd_digits) input.\"]\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns a string where each character is replaced\
    \ by the number of times that character appears in the input string. For example,\
    \ if the input string is \"abcabc\", the output should be \"3abc3abc\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkdret509.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkdret509.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 == 1, str))\n    end\n    \n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n@assert odd_count([\"\
    1234567\"]) == \"the number of odd elements 4n the str4ng 4 of the 4nput.\"\n\
    @assert odd_count([\"3\",\"11111111\"]) == \"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\"\n@assert odd_count([\"3\",\"\",\"11111111\"]) == \"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\"\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are digits.\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvovwoizk.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvovwoizk.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str =\
    \ odd_count_str + odd_count(i)\n    end\n    return odd_count_str\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdy0xrxya.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching odd_count(::String)\n\
    \  Closest candidates are:\n    odd_count(!Matched::Array{String,1}) at /tmp/tmpdy0xrxya.jl:14\n\
    \  Stacktrace:\n   [1] odd_count(::Array{String,1}) at /tmp/tmpdy0xrxya.jl:16\n\
    \   [2] top-level scope at /tmp/tmpdy0xrxya.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdy0xrxya.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpdy0xrxya.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Array{String,1})\
    \ at /tmp/tmpdy0xrxya.jl:14\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpdy0xrxya.jl:16\n   [2] top-level scope at /tmp/tmpdy0xrxya.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdy0xrxya.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpdy0xrxya.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Array{String,1})\
    \ at /tmp/tmpdy0xrxya.jl:14\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpdy0xrxya.jl:16\n   [2] top-level scope at /tmp/tmpdy0xrxya.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdy0xrxya.jl:24\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdy0xrxya.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, lst)\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n@assert odd_count([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
    @assert odd_count([\"3\",\"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\",\n                                         \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in that string. \nFor example, \n\"The quick brown fox jumps over the lazy dog\"\
    \ should return \"13\".\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9vf7xoep.jl:13\n\
    in expression starting at /tmp/tmp9vf7xoep.jl:1\nin expression starting at /tmp/tmp9vf7xoep.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + \" \"\n    end\n    odd_count_str\
    \ = odd_count_str[1:end-1]\n    return odd_count_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6akazr2b.jl:26\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching +(::String, ::Int64)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n    +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n\
    \    +(!Matched::Missing, ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n\
    \   [1] +(::String, ::Int64, ::String) at ./operators.jl:529\n   [2] odd_count(::Array{String,1})\
    \ at /tmp/tmp6akazr2b.jl:16\n   [3] top-level scope at /tmp/tmp6akazr2b.jl:26\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6akazr2b.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp6akazr2b.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching +(::String, ::Int64)\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    +(!Matched::Complex{Bool},\
    \ ::Real) at complex.jl:301\n    +(!Matched::Missing, ::Number) at missing.jl:115\n\
    \    ...\n  Stacktrace:\n   [1] +(::String, ::Int64, ::String) at ./operators.jl:529\n\
    \   [2] odd_count(::Array{String,1}) at /tmp/tmp6akazr2b.jl:16\n   [3] top-level\
    \ scope at /tmp/tmp6akazr2b.jl:27\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6akazr2b.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp6akazr2b.jl:28\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching +(::String, ::Int64)\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    +(!Matched::Complex{Bool},\
    \ ::Real) at complex.jl:301\n    +(!Matched::Missing, ::Number) at missing.jl:115\n\
    \    ...\n  Stacktrace:\n   [1] +(::String, ::Int64, ::String) at ./operators.jl:529\n\
    \   [2] odd_count(::Array{String,1}) at /tmp/tmp6akazr2b.jl:16\n   [3] top-level\
    \ scope at /tmp/tmp6akazr2b.jl:28\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6akazr2b.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6akazr2b.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = append(odd_counts, length(findall(str -> str == \"1\", str)))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_4expnqz.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_4expnqz.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for s in lst\n        odd_digits += findall(x\
    \ -> x % 2 == 1, s)\n    end\n    return [\"the number of odd elements $n the\
    \ str$n of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns a string where each character is replaced by the number\
    \ of times it appears in the input string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8a3u271t.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8a3u271t.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(str, odd_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of odd digits in that string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp564ms_7d.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp564ms_7d.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 4, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 1, length(lst[1]))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst[2]))\n    return odd_count_str\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvrblb6ap.jl:13\n\
    in expression starting at /tmp/tmpvrblb6ap.jl:1\nin expression starting at /tmp/tmpvrblb6ap.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odds = Vector{String}()\n    for i in lst\n        odds = append(odds,\
    \ count(i, \"1\"))\n        odds = append(odds, count(i, \"8\"))\n    end\n  \
    \  return odds\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcs76oqnp.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: append not defined\n  Stacktrace:\n\
    \   [1] odd_count(::Array{String,1}) at /tmp/tmpcs76oqnp.jl:15\n   [2] top-level\
    \ scope at /tmp/tmpcs76oqnp.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcs76oqnp.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpcs76oqnp.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  UndefVarError:\
    \ append not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1}) at /tmp/tmpcs76oqnp.jl:15\n\
    \   [2] top-level scope at /tmp/tmpcs76oqnp.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcs76oqnp.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpcs76oqnp.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ append not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1}) at /tmp/tmpcs76oqnp.jl:15\n\
    \   [2] top-level scope at /tmp/tmpcs76oqnp.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcs76oqnp.jl:24\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcs76oqnp.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = replace(odd_count_str, lst)\n    return odd_count_str\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmpo5xxs176.jl:13\n\
    in expression starting at /tmp/tmpo5xxs176.jl:1\nin expression starting at /tmp/tmpo5xxs176.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_helper(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuw5bh02m.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: odd_count_helper not defined\n \
    \ Stacktrace:\n   [1] odd_count(::Array{String,1}) at /tmp/tmpuw5bh02m.jl:13\n\
    \   [2] top-level scope at /tmp/tmpuw5bh02m.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuw5bh02m.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpuw5bh02m.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  UndefVarError:\
    \ odd_count_helper not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpuw5bh02m.jl:13\n   [2] top-level scope at /tmp/tmpuw5bh02m.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuw5bh02m.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpuw5bh02m.jl:22\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ odd_count_helper not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpuw5bh02m.jl:13\n   [2] top-level scope at /tmp/tmpuw5bh02m.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuw5bh02m.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuw5bh02m.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x == '1', str))\n    end\n    \n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count(['1234567'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count(['3',\"11111111\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp02872b19.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp02872b19.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(i,\
    \ '1')\n    end\n    return [\"the number of odd elements $odd_digits the str$length(odd_digits)\
    \ of the $length(odd_digits)nput.\"]\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns a string with the number\
    \ of characters in the string that are odd.\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphp7m_hlq.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphp7m_hlq.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str =\
    \ odd_count_str + length(filter(x -> x % 2 == 1, i))\n    end\n    \n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \nThe function should ignore all non-digit\
    \ characters.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpde1wdwyt.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpde1wdwyt.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{String}(undef, 0)\n    for i in lst\n        odd_digits\
    \ += count(digits(i), 2)\n    end\n    return odd_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphkt0m4ug.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphkt0m4ug.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, s))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of characters in the string that are digits.\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3ux0_7c3.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3ux0_7c3.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i),\
    \ 2)\n    end\n    return map(string(\"the number of odd elements \", odd_digits),\
    \ lst)\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the number of characters in\
    \ the string that are digits. Test it on some examples:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkctxgfed.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkctxgfed.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odds = Vector{String}()\n    for i in lst\n        odds = append(odds,\
    \ count(i, \"odd\"))\n    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkky6bso2.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkky6bso2.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odds = Vector{Int}()\n    for i in lst\n        odds = odds + count_digits(i)\n\
    \    end\n    return odds\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzw0puw8h.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzw0puw8h.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return [\"the number of odd elements $odd_digits the str$length(odd_digits)\
    \ of the $length(odd_digits) input.\"]\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns a string with all the characters\
    \ in lowercase and uppercase separated by underscores. For example, the string\
    \ \"hello\" would return \"hello_\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphh_zs66r.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphh_zs66r.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits\
    \ += count(digits(i))\n    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of odd characters in the string. \nFor example, odd_count(\"\
    abracadabra\") should return [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, \nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8hxfm8c7.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8hxfm8c7.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + \" \"\n    end\n    odd_count_str\
    \ = odd_count_str[1:end]\n    return odd_count_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp30iocet6.jl:26\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching +(::String, ::Int64)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n    +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n\
    \    +(!Matched::Missing, ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n\
    \   [1] +(::String, ::Int64, ::String) at ./operators.jl:529\n   [2] odd_count(::Array{String,1})\
    \ at /tmp/tmp30iocet6.jl:16\n   [3] top-level scope at /tmp/tmp30iocet6.jl:26\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp30iocet6.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp30iocet6.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching +(::String, ::Int64)\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    +(!Matched::Complex{Bool},\
    \ ::Real) at complex.jl:301\n    +(!Matched::Missing, ::Number) at missing.jl:115\n\
    \    ...\n  Stacktrace:\n   [1] +(::String, ::Int64, ::String) at ./operators.jl:529\n\
    \   [2] odd_count(::Array{String,1}) at /tmp/tmp30iocet6.jl:16\n   [3] top-level\
    \ scope at /tmp/tmp30iocet6.jl:27\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp30iocet6.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp30iocet6.jl:28\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching +(::String, ::Int64)\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    +(!Matched::Complex{Bool},\
    \ ::Real) at complex.jl:301\n    +(!Matched::Missing, ::Number) at missing.jl:115\n\
    \    ...\n  Stacktrace:\n   [1] +(::String, ::Int64, ::String) at ./operators.jl:529\n\
    \   [2] odd_count(::Array{String,1}) at /tmp/tmp30iocet6.jl:16\n   [3] top-level\
    \ scope at /tmp/tmp30iocet6.jl:28\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp30iocet6.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp30iocet6.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst[1]))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst[2]))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst[3]))\n    odd_count_str = replace(odd_count_str, 5, length(lst[4]))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst[5]))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst[6]))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst[7]))\n    odd_count_str = replace(odd_count_str, 9, length(lst[8]))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst[9]))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst[10]))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst[11]))\n    odd_count_str = replace(odd_count_str, 13, length(lst[12]))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst[13]))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst[14]))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst[15]))\n    odd_count_str = replace(odd_count_str, 17, length(lst[16]))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst[17]))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst[18]))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst[19]))\n    odd_count_str = replace(odd_count_str, 21, length(lst[20]))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst[21]))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst[22]))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst[23]))\n    odd_count_str = replace(odd_count_str, 25, length(lst[24]))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst[25]))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst[26]))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst[27]))\n    odd_count_str = replace(odd_count_str, 29, length(lst[28]))\n\
    \    odd_count_str = replace(odd_\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxv24ryne.jl:44\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxv24ryne.jl:44\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    \n    for i in lst\n        odd_count_str\
    \ = odd_count_str + \n            length(filter(x -> x % 2 != 0, i))\n    end\n\
    \    \n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise: Write a function that takes a vector of strings as\
    \ input and returns a vector of the lengths of the odd characters in each string.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp67efvh29.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp67efvh29.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = []\n    for str in lst\n        odd_counts.append(length(filter(x\
    \ -> x % 2 != 0, str)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns a string with all the odd characters in it separated by\
    \ commas. For example, if the input is \"hello\", the output should be \"h,l,l,o\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7h7s9lzb.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7h7s9lzb.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}()\n    for i in lst\n        odd_counts\
    \ = append(odd_counts, length(i))\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns a string where each character is replaced\
    \ by the number of times that character appears in the string.\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3v4skdlp.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3v4skdlp.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + str\n    end\n    odd_count_str = odd_count_str[1:end]\n \
    \   odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_str = odd_count_str[1:end]\n\
    \    odd_count_str = odd_count_str[1:end]\n    odd_count_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpufhb7kab.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpufhb7kab.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpufhb7kab.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str =\
    \ odd_count_str + length(findall(i, digits)) \n    end\n    \n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6769r40c.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6769r40c.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = findall(x -> x mod 2 != 0, lst)\n    odd_count = length(odd_digits)\n\
    \    odd_count_str = join(odd_digits, \" \")\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", odd_count)\n    return odd_count_str\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpltnvecb3.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpltnvecb3.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\"\n    odd_count_str = replace(odd_count_str, n+1, length(lst.[i]))\n\
    \    odd_count_str = replace(odd_count_str, n, length(lst[i]))\n    odd_count_str\
    \ = replace(odd_count_str, n+1, length(lst[i]))\n    odd_count_str = replace(odd_count_str,\
    \ n, length(lst[i]))\n    odd_count_str = replace(odd_count_str, n+1, length(lst[i]))\n\
    \    odd_count_str = replace(odd_count_str, n, length(lst[i]))\n    odd_count_str\
    \ = replace(odd_count_str, n+1, length(lst[i]))\n    odd_count_str = replace(odd_count_str,\
    \ n, length(lst[i]))\n    odd_count_str = replace(odd_count_str, n+1, length(lst[i]))\n\
    \    odd_count_str = replace(odd_count_str, n, length(lst[i]))\n    odd_count_str\
    \ = replace(odd_count_str, n+1, length(lst[i]))\n    odd_count_str = replace(odd_count_str,\
    \ n, length(lst[i]))\n    odd_count_str = replace(odd_count_str, n+1, length(lst[i]))\n\
    \    odd_count_str = replace(odd_count_str, n, length(lst[i]))\n    odd_count_str\
    \ = replace(odd_count_str, n+1, length(lst[i]))\n    odd_count_str = replace(odd_count_str,\
    \ n, length(lst[i]))\n    odd_count_str = replace(odd_count_str, n+1, length(lst[i]))\n\
    \    odd_count_str = replace(odd_count_str, n, length(lst[i]))\n    odd_count_str\
    \ = replace(odd_count_str, n+1, length(lst[i]))\n    odd_count_str = replace(odd_count_str,\
    \ n, length(lst[i]))\n    odd_count_str = replace(odd_count_str, n+1, length(lst[i]))\n\
    \    odd_count_str = replace(odd_count_str, n, length(lst[i]))\n    odd_count_str\
    \ = replace(odd_count_str, n+1, length(lst[i]))\n    odd_count_str = replace(odd_count_str,\
    \ n, length(lst[i]))\n    odd_count_str = replace(odd_count_str, n+1, length(lst[i]))\n\
    \    odd_count_str = replace(odd_count_str, n, length(lst[i]))\n    odd_count_str\
    \ = replace(odd_count_str, n+1, length(lst[i]))\n    odd_count_str = replace(odd_count_str,\
    \ n, length(lst[i]))\n    odd_count_str = replace(odd_count_str, n+1, length(lst[i]))\n\
    \    odd_count_str = replace(odd_count_str, n, length(lst[i]))\n    odd_count_str\
    \ = replace(odd_count_str, n+1, length(lst[i]))\n    od\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkptug85i.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkptug85i.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkptug85i.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}()\n    for str in lst\n        odd_counts\
    \ = append(odd_counts, length(findall(str, \"[0-9]\"))) \n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5w8wfny4.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5w8wfny4.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + \" \"\n    end\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert odd_count([\"1234567\"]) == \"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"\n@assert odd_count([\"\
    3\",\"11111111\"]) == \"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    \ \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are digits.\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppi687ia9.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppi687ia9.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = [odd_count_str % [length(lst[i])] \n        for i in eachindex(lst)]\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns a string with all the characters in lowercase and with all the characters\
    \ in uppercase separated by underscores. For example, the string \"hello\" would\
    \ return \"hello_world\".\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmplv1olg53.jl:13\n\
    in expression starting at /tmp/tmplv1olg53.jl:1\nin expression starting at /tmp/tmplv1olg53.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(str,odd_digits)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string that are digits.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2cz5mdwe.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2cz5mdwe.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpigugkqmw.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpigugkqmw.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(str)\n    end\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\",'11111111',\"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\",'11111111',\"11111111\",'11111111'])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111',\"11111111\",'11111111',\"11111111\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"3\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111'])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111',\"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111'])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111'])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"3\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"11111111\"\
    ,'11111111',\"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"11111111\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111',\"11111111\"\
    ,'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"11111111\",'11111111',\"\
    11111111\",'11111111',\"11111111\",\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6rlw5t9z.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6rlw5t9z.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return [\"the number of odd elements $odd_digits the str$length(odd_digits)\
    \ of the $length(odd_digits)nput.\"]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise\nWrite a function that takes a vector\
    \ of strings as input and returns a vector of strings as output.\nEach element\
    \ of the output should be \"the sum of the odd digits in the i'th string of the\
    \ input.\" where all the i's should be replaced by the sum of the odd digits in\
    \ the i'th string of the input.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp40fsujts.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp40fsujts.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, lst)\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmpkpm6dhdy.jl:13\n\
    in expression starting at /tmp/tmpkpm6dhdy.jl:1\nin expression starting at /tmp/tmpkpm6dhdy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_helper(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1ubxjg06.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: odd_count_helper not defined\n \
    \ Stacktrace:\n   [1] odd_count(::Array{String,1}) at /tmp/tmp1ubxjg06.jl:13\n\
    \   [2] top-level scope at /tmp/tmp1ubxjg06.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1ubxjg06.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp1ubxjg06.jl:21\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  UndefVarError:\
    \ odd_count_helper not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmp1ubxjg06.jl:13\n   [2] top-level scope at /tmp/tmp1ubxjg06.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1ubxjg06.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp1ubxjg06.jl:22\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ odd_count_helper not defined\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmp1ubxjg06.jl:13\n   [2] top-level scope at /tmp/tmp1ubxjg06.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1ubxjg06.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ubxjg06.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + \" \"\n    end\n    odd_count_str\
    \ = odd_count_str[1:end-1]\n    odd_count_str = replace(odd_count_str, \" \",\
    \ \"\")\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplpfofr_m.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplpfofr_m.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 0, str))\n    end\n    \n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222'])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555','66666666'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555','66666666','77777777'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555','66666666','77777777','88888888'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555','66666666','77777777','88888888','999999999'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555','66666666','77777777','88888888','999999999','10000000000'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555','66666666','77777777','88888888','999999999','10000000000','1111111111'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555','66666666','77777777','88888888','999999999','10000000000','1111111111','2222222222'])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111','22222222','33333333','44444444','55555555','66666666','77777777','88888888\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqn1n8z4m.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqn1n8z4m.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odds = filter(x -> x mod 2 != 0, lst)\n    odd_count = length(odds)\n\
    \    odd_count_str = join([\"the number of odd elements \", odd_count, \"n the\
    \ str\", odd_count, \".\"])\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.3>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.3>\nodd_count([\"3\"\
    ,\"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are digits.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6yeh0693.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6yeh0693.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str =\
    \ odd_count_str + length(filter(x -> x % 2 == 1, i))\n    end\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string where\
    \ each character is replaced by the number of times it appears in the input string.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptoztrf6d.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptoztrf6d.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str((length(lst.[1]) - length(lst.[2])),\
    \ (length(lst.[1]) - length(lst.[1])))\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@assert odd_count([\"3\",\"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns the number of characters in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4ygihcpq.jl:13\n\
    in expression starting at /tmp/tmp4ygihcpq.jl:1\nin expression starting at /tmp/tmp4ygihcpq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 4, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst))\n    odd_count_str = replace(odd_count_str, 6, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 2, length(lst))\n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 0, length(lst))\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count(['1234567'])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count(['3',\"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count(['3',\"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"\
    11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"11111111\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"11111111\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count(['3',\"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count(['3',\"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"\
    11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"11111111\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"11111111\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count(['3',\"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count(['3',\"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"\
    11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"11111111\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count(['3',\"11111111\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count(['3',\"11111111\"])\n</cell>\n<code language=\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @sprintf not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnr3pnnaj.jl:13\n\
    in expression starting at /tmp/tmpnr3pnnaj.jl:1\nin expression starting at /tmp/tmpnr3pnnaj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{String}(undef, 0)\n    for s in lst\n        odd_digits\
    \ += findall(x -> x % 2 == 1, s)\n    end\n    return odd_digits\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa8fi9zzs.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa8fi9zzs.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + \" \"\n    end\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings and returns a vector where\
    \ each element is the length of the longest string in the input vector. For example,\
    \ if the input vector is [\"a\", \"b\", \"c\", \"d\"], then the output vector\
    \ should be [4, 3, 7, 4].\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpairwiwix.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpairwiwix.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    odd_digits = odd_digits[2:end]\n    return [\"the number of odd\
    \ elements $n the str$n of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code\
    \ language=julia-1.0>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string as input and returns the number of odd digits in the string.\
    \ For example, if the input string is \"1234567\", the output should be \"4\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm3b9g1qm.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm3b9g1qm.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\"the number of odd elements \"\"\"\n    odd_count_str\
    \ = odd_count_str * lst.size\n    odd_count_str = odd_count_str * \"\"\"n the\
    \ str\"\"\"\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str =\
    \ odd_count_str * \"\"\"ng \"\"\"\n    odd_count_str = odd_count_str * lst.size\n\
    \    odd_count_str = odd_count_str * \"\"\"of the \"\"\"\n    odd_count_str =\
    \ odd_count_str * lst.size\n    odd_count_str = odd_count_str * \"\"\"nput.\"\"\
    \"\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str = odd_count_str\
    \ * lst.size\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str\
    \ = odd_count_str * lst.size\n    odd_count_str = odd_count_str * lst.size\n \
    \   odd_count_str = odd_count_str * lst.size\n    odd_count_str = odd_count_str\
    \ * lst.size\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str\
    \ = odd_count_str * lst.size\n    odd_count_str = odd_count_str * lst.size\n \
    \   odd_count_str = odd_count_str * lst.size\n    odd_count_str = odd_count_str\
    \ * lst.size\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str\
    \ = odd_count_str * lst.size\n    odd_count_str = odd_count_str * lst.size\n \
    \   odd_count_str = odd_count_str * lst.size\n    odd_count_str = odd_count_str\
    \ * lst.size\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str\
    \ = odd_count_str * lst.size\n    odd_count_str = odd_count_str * lst.size\n \
    \   odd_count_str = odd_count_str * lst.size\n    odd_count_str = odd_count_str\
    \ * lst.size\n    odd_count_str = odd_count_str * lst.size\n    odd_count_str\
    \ = odd_count_str * lst.size\n    odd_count_str = odd_count_str * lst.size\n \
    \   odd_count_str = odd_count_str * lst.size\n    odd_count_str = odd_count_str\
    \ * lst.size\n    odd_count_str = odd_count_\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxnrqswl7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxnrqswl7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxnrqswl7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(str,odd_digits)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjr5ol10z.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching digits(::String)\n\
    \  Closest candidates are:\n    digits(!Matched::Integer; base, pad) at intfuncs.jl:731\n\
    \    digits(!Matched::Type{#s67} where #s67<:Integer, !Matched::Integer; base,\
    \ pad) at intfuncs.jl:735\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpjr5ol10z.jl:15\n   [2] top-level scope at /tmp/tmpjr5ol10z.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjr5ol10z.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpjr5ol10z.jl:25\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ no method matching digits(::String)\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at intfuncs.jl:731\n    digits(!Matched::Type{#s67} where #s67<:Integer,\
    \ !Matched::Integer; base, pad) at intfuncs.jl:735\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpjr5ol10z.jl:15\n   [2] top-level scope at /tmp/tmpjr5ol10z.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjr5ol10z.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpjr5ol10z.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching digits(::String)\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at intfuncs.jl:731\n    digits(!Matched::Type{#s67} where #s67<:Integer,\
    \ !Matched::Integer; base, pad) at intfuncs.jl:735\n  Stacktrace:\n   [1] odd_count(::Array{String,1})\
    \ at /tmp/tmpjr5ol10z.jl:15\n   [2] top-level scope at /tmp/tmpjr5ol10z.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjr5ol10z.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjr5ol10z.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\"\n    number of odd elements in the str{n}\n   \
    \ \"\"\"\n    odd_count_str = replace(odd_count_str, n::Int)\n    odd_count_str\
    \ = replace(odd_count_str, str::String)\n    odd_count_str = replace(odd_count_str,\
    \ str::Char)\n    odd_count_str = replace(odd_count_str, str::Int)\n    odd_count_str\
    \ = replace(odd_count_str, str::Float64)\n    odd_count_str = replace(odd_count_str,\
    \ str::Float32)\n    odd_count_str = replace(odd_count_str, str::Int64)\n    odd_count_str\
    \ = replace(odd_count_str, str::Int32)\n    odd_count_str = replace(odd_count_str,\
    \ str::Int16)\n    odd_count_str = replace(odd_count_str, str::Int8)\n    odd_count_str\
    \ = replace(odd_count_str, str::Int)\n    odd_count_str = replace(odd_count_str,\
    \ str::Float64)\n    odd_count_str = replace(odd_count_str, str::Float32)\n  \
    \  odd_count_str = replace(odd_count_str, str::Int64)\n    odd_count_str = replace(odd_count_str,\
    \ str::Int32)\n    odd_count_str = replace(odd_count_str, str::Int16)\n    odd_count_str\
    \ = replace(odd_count_str, str::Int8)\n    odd_count_str = replace(odd_count_str,\
    \ str::Int)\n    odd_count_str = replace(odd_count_str, str::Float64)\n    odd_count_str\
    \ = replace(odd_count_str, str::Float32)\n    odd_count_str = replace(odd_count_str,\
    \ str::Int64)\n    odd_count_str = replace(odd_count_str, str::Int32)\n    odd_count_str\
    \ = replace(odd_count_str, str::Int16)\n    odd_count_str = replace(odd_count_str,\
    \ str::Int8)\n    odd_count_str = replace(odd_count_str, str::Int)\n    odd_count_str\
    \ = replace(odd_count_str, str::Float64)\n    odd_count_str = replace(odd_count_str,\
    \ str::Float32)\n    odd_count_str = replace(odd_count_str, str::Int64)\n    odd_count_str\
    \ = replace(odd_count_str, str::Int32)\n    odd_count_str = replace(odd_count_str,\
    \ str::Int16)\n    odd_count_str = replace(odd_count_str, str::Int8)\n    odd_count_str\
    \ = replace(odd_count_str, str::Int)\n    odd_count_str = replace(odd_count_str,\
    \ str::Float64)\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiqi2ym_c.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpiqi2ym_c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpiqi2ym_c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(i,\
    \ '1')\n    end\n    return [\"the number of odd elements $odd_digits the str$length(odd_digits)\
    \ of the $length(odd_digits)nput.\"]\nend\n</cell>\n<text>\nodd_count\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj51t1x0o.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj51t1x0o.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 == 1, str))\n    end\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, lst))\n    odd_count_str =\
    \ odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 1, odd_count_str))\n    odd_\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpojckjsz3.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpojckjsz3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpojckjsz3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + odd_count(i)\n    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of characters in the string. \nFor example, \n\"hello\"\
    \ returns 5.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkih3j67l.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkih3j67l.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    \n    for i in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 0, i))\n    end\n    \n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\",'11111111'])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of odd characters in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfuk66i0k.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfuk66i0k.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3b3q2ruw.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3b3q2ruw.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string(_), odd_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@assert odd_count([\"3\",  \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\",\n                         \
    \                   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n</cell>\n<text>\nExercise: Write a function that takes a list of strings and\
    \ returns a list of strings where each string consists of only digits.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: all-underscore identifier used as rvalue around\
    \ /tmp/tmpqn3yiknl.jl:17\nStacktrace:\n [1] top-level scope at /tmp/tmpqn3yiknl.jl:1\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqn3yiknl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== \"1\", i)\n    end\n    return [\"the number of odd elements $n the str$n\
    \ of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.3>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.3>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of characters that are not digits. \nFor example, if\
    \ the input string is \"1234567\", the function should return \"4\".\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfao40tp4.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfao40tp4.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== \"1\", i)\n    end\n    return [\"the number of odd elements $n the str$n\
    \ of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ as input and returns a string that contains the number of odd digits in each\
    \ of the strings in the input. For example, if the input is [\"1234567\", \"11111111\"\
    , \"22222222\"], then the output should be [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\", \"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd2p21gr6.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd2p21gr6.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + str\n    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg7oaoo1h.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg7oaoo1h.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%di of\
    \ the %di.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n  \
    \  odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str =\
    \ replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = replace(odd_\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3hff053n.jl:47\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3hff053n.jl:47\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = push!(odd_counts, length(findall(str -> str == \"1\", str)))\n    end\n  \
    \  return odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeqbhyvof.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:209\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:210\n\
    \    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] push!(::Array{String,1}, ::Int64) at ./array.jl:913\n   [2] odd_count(::Array{String,1})\
    \ at /tmp/tmpeqbhyvof.jl:15\n   [3] top-level scope at /tmp/tmpeqbhyvof.jl:24\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpeqbhyvof.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpeqbhyvof.jl:25\n  Test threw exception\n  Expression: candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  MethodError:\
    \ Cannot `convert` an object of type Int64 to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:209\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\n  Stacktrace:\n   [1] push!(::Array{String,1},\
    \ ::Int64) at ./array.jl:913\n   [2] odd_count(::Array{String,1}) at /tmp/tmpeqbhyvof.jl:15\n\
    \   [3] top-level scope at /tmp/tmpeqbhyvof.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpeqbhyvof.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpeqbhyvof.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ Cannot `convert` an object of type Int64 to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:209\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\n  Stacktrace:\n   [1] push!(::Array{String,1},\
    \ ::Int64) at ./array.jl:913\n   [2] odd_count(::Array{String,1}) at /tmp/tmpeqbhyvof.jl:15\n\
    \   [3] top-level scope at /tmp/tmpeqbhyvof.jl:26\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpeqbhyvof.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeqbhyvof.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== \"1\", i)\n    end\n    return [\"the number of odd elements $n the str$n\
    \ of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpftktpcpp.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpftktpcpp.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = []\n    for i in lst\n        odd_counts.append(sum(map(x\
    \ -> x % 2 == 1, i)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    ,'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuf0pjx28.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuf0pjx28.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + \n            length(filter(x -> x % 2 == 1, str))\n    end\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwmi2qa1p.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwmi2qa1p.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits\
    \ += count(digits(i))\n    end\n    return map(string, (odd_digits))\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\",'11111111'])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string.\
    \ \nFor example, if the input is \"abc\", the function should return 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeoykoua7.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeoykoua7.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{String}()\n    for i in lst\n        odd_digits =\
    \ odd_digits + count(i, digits)\n    end\n    return odd_digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpss43gsjt.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpss43gsjt.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    Each element i of the output should be \"the number of odd\
    \ elements in the\n    string i of the input.\" where all the i's should be replaced\
    \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>>\
    \ odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd\
    \ elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    \nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp86jmpord.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp86jmpord.jl:1\n"
  exit_code: 1
  status: Exception
