name: HumanEval_102_choose_num
language: julia
results:
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplggvbhwm.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplggvbhwm.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        if x == 0 \n            then return y\n        else \n   \
    \         if y % x == 0 \n                then return y\n            else \n \
    \               choose_num(x-1, y)\nend\n</code>\n<|/ a tags=julia,recursion |>\n\
    <| c |>\nThis doesn't work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I edited my answer to include a link to the code\
    \ I tested.\n<|/ c |>\n<| c |>\nI see what you mean. My mistake. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\nI edited my answer to include a link to the code\
    \ I tested.\n<|/ c |>\n<| c |>\nI added a second solution that works with negative\
    \ numbers as well.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6svc9uv7.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6svc9uv7.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        if x == y \n            then return x\n        else \n\
    \            if x % 2 == 0 \n                then return choose_num(x / 2, y)\n\
    \            else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x > y \n\
    \                        then return choose_num(x / 2, y / 2)\n              \
    \      else \n                        return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nProblem 3\nWrite a function that takes a\
    \ positive integer number n and returns the sum of its digits. \nFor example,\
    \ choose_num(12) = 1 + 2 + 3 = 6\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpu4li90ue.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpu4li90ue.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        if x == 0 \n            then return y\n        else \n   \
    \         if y == 0 \n                then return x\n            else \n     \
    \           if x % 2 == 0 \n                    then return choose_num(x / 2,\
    \ y)\n                else \n                    if y % 2 == 0 \n            \
    \            then return choose_num(x, y / 2)\n                    else \n   \
    \                     return choose_num(x / 2, y / 2)\nend\n</cell>\n<code language=julia-1.4>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a number is prime or not. \nThe function should take one integer number as\
    \ an argument and should return true or false accordingly.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpk_5bj3iy.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpk_5bj3iy.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y\n        then return x\n    else if x % 2 == 0 && y % 2 ==\
    \ 0\n        then return choose_num(x/2, y/2)\n    else if x % 2 == 0 && y % 2\
    \ != 0\n        then return choose_num(x/2, y)\n    else if x % 2 != 0 && y %\
    \ 2 == 0\n        then return choose_num(x, y/2)\n    else if x % 2 != 0 && y\
    \ % 2 != 0\n        then return choose_num(x, y)\n    else return -1\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try choose_num(12, 15).\n<|/ c\
    \ |>\n<| c |>\nIt does work. Try it yourself. It returns 14. Try it yourself with\
    \ choose_num(12, 15).\n<|/ c |>\n<| c |>\nIt doesn't work. Try it yourself. It\
    \ returns 14. Try it yourself with choose_num(12, 15).\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work. Try it yourself. It returns 14. Try it yourself with choose_num(12,\
    \ 15).\n<|/ c |>\n<| c |>\nIt doesn't work. Try it yourself. It returns 14. Try\
    \ it yourself with choose_num(12, 15).\n<|/ c |>\n<| a dscore=1 |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3yno54b6.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3yno54b6.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        else return x\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer and returns the sum of its digits. \nFor example, choose_num(12) = 1\
    \ + 2 = 3. \nIf the number is negative, return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpr65o162f.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpr65o162f.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        x % 2 ==\
    \ 0 && y % 2 == 0 ? x : choose_num(x / 2, y / 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    choose_num(12, 15)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 12)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 13)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 14)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 15)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 16)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 17)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 18)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 19)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 20)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 21)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 22)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 23)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 24)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 25)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 26)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 27)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 28)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 29)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 30)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 31)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 32)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 33)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 34)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 35)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 36)\n</cell>\n\
    <code language=julia-1.3>\n\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy5xra_vi.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpy5xra_vi.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 && y % 2 == 0 \n                then return choose_num(x\
    \ / 2, y / 2)\n            else \n                if x % 2 == 0 \n           \
    \         then return choose_num(x / 2, y)\n                else \n          \
    \          if y % 2 == 0 \n                        then return choose_num(x, y\
    \ / 2)\n                    else \n                        return -1\nend\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer number x and returns its factorial. \nThe factorial\
    \ of a number $n$ is defined as:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp10nixhtr.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp10nixhtr.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        if x == y \n            then return x\n        else \n\
    \            if x % 2 == 0 && y % 2 == 0\n                then return choose_num(x\
    \ / 2, y / 2)\n            else \n                if x % 2 == 0\n            \
    \        then return choose_num(x / 2, y)\n                else \n           \
    \         if y % 2 == 0\n                        then return choose_num(x, y /\
    \ 2)\n                    else \n                        return -1\nend\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 12)\n</cell>\n<text>\nProblem 3\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd number that is in\
    \ the range [x, y] inclusive. If there's no such\n    number, then the function\
    \ should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplyfk4an0.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplyfk4an0.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        x % 2 ==\
    \ 0 && y % 2 == 0 && choose_num(x / 2, y / 2) * choose_num(x / 2, y / 2) \n  \
    \          >= choose_num(x / 2, y / 2)\n            ? choose_num(x / 2, y / 2)\n\
    \            : -1\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd number that is in the range [x, y]\
    \ inclusive. If there's no such \n    number, then the function should return\
    \ -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvu4p4c_8.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvu4p4c_8.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return choose_num(y, x)\n    else \n       \
    \ choose_num(x, y)\nend\n</code>\n<|/ a tags=julia,function,if-statement |>\n\
    <| a tags=julia,function,if-statement |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp639jhfpa.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp639jhfpa.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 \n                then return choose_num(x / 2, y)\n \
    \           else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x % 2 ==\
    \ y % 2 \n                        then return choose_num(x / 2, y / 2)\n     \
    \               else \n                        if x == y / 2 \n              \
    \              then return x\n                        else \n                \
    \            if x > y / 2 \n                                then return -1\n \
    \                           else \n                                if x == y /\
    \ 2 \n                                    then return x\n                    \
    \            else \n                                    return -1\nend\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer $n$ and returns the number of digits in $n$.\
    \ \nFor example, choose_num(12) should return 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe9gm5hi1.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpe9gm5hi1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 \n                then return choose_num(x / 2, y)\n \
    \           else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x % 2 ==\
    \ 0 \n                        then return choose_num(x / 2, y)\n             \
    \       else \n                        if y % 2 == 0 \n                      \
    \      then return choose_num(x, y / 2)\n                        else \n     \
    \                       if x % 2 == 0 \n                                then return\
    \ choose_num(x / 2, y)\n                            else \n                  \
    \              if y % 2 == 0 \n                                    then return\
    \ choose_num(x, y / 2)\n                                else \n              \
    \                      return -1\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ number n and returns the sum of its digits. \nFor example, choose_num(12) =\
    \ 1 + 2 = 3. \nThe function should work for any positive integer number.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiwanrfnh.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpiwanrfnh.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        choose_num(x\
    \ - y, y)\n    end\nend\n</code>\n<|/ a tags=julia,recursion,function |>\n<| a\
    \ tags=julia,recursion,function |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpa5e3gdy6.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpa5e3gdy6.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        choose_num(y\
    \ - 1, x)\n    end\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer $n$\
    \ and returns the number of digits in $n$. \nFor example, choose_num(12) = 2.\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6w8i2rwc.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6w8i2rwc.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| a tags=julia,recursion\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdqxym4p9.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdqxym4p9.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        x % 2 ==\
    \ 0 && y % 2 == 0 ? x : -1\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 12)\n</cell>\n<code\
    \ language=julia-1.5>\nchoose_num(13, 13)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 14)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 16)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 17)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 18)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 19)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 20)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 21)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 22)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 23)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 24)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 25)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 26)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 27)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 28)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 29)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 30)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 31)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 32)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 33)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 34)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 35)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 36)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 37)\n\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp63cn_jik.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp63cn_jik.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 \n                then return choose_num(x / 2, y)\n \
    \           else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    let x = x +\
    \ 1\n                    let y = y + 1\n                    let z = choose_num(x,\
    \ y)\n                    if z == -1 \n                        then return -1\n\
    \                    else return z\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nProblem 3\nWrite a function that takes a\
    \ positive integer number and returns its factorial. \nThe factorial of a number\
    \ is the product of all the numbers from 1 to that number. \nFor example, 5! =\
    \ 5 x 4 x 3 x 2 x 1 = 120. \nThe function should return -1 if the number passed\
    \ as argument is not positive.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpphgzy8j0.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpphgzy8j0.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        else return x\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd integer number that\
    \ is in the range [x, y] inclusive. If \n    there's no such number, then the\
    \ function should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjf31w6wk.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjf31w6wk.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        \n    else if x == y \n        then return x\n        \n    else\
    \ \n        x % 2 == 0 && y % 2 == 0 ? \n            choose_num(x / 2, y / 2)\
    \ + \n            choose_num(x / 2, y / 2) + \n            choose_num(x / 2, y\
    \ / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x /\
    \ 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / 2) + \n            choose_num(x / 2, y / 2) + \n            choose_num(x\
    \ / 2, y / \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvvew3cci.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvvew3cci.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return -1\n    else \n        local z::Int64\
    \ = 0\n        while z < x \n            do z = z + 2\n        end \n        while\
    \ z < y \n            do z = z + 2\n        end \n        return z\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 12)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer n and returns n^2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpuqnmv90n.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpuqnmv90n.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else if x % 2 == 0 \n       \
    \ then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    end\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer number\
    \ and returns its \n    factorial. For example, factorial(5) = 5 \xD7 4 \xD7 3\
    \ \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm_5q_9p8.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpm_5q_9p8.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 ? x : -1\nend\n</cell>\n<code\
    \ language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer number and returns its \n    factorial.\
    \ For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnfujpopn.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnfujpopn.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return choose_num(y, x)\n    else \n       \
    \ local i::Int64 = 1\n        while i <= y \n            do if x % i == 0 \n \
    \               then return i\n            end\n            i = i + 1\n      \
    \  end\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ positive integer number n and returns the number of \ndigits in the number n.\
    \ For example, choose_num(12) should return 2, because \n12 is divisible by 10.\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmfdm0ava.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmfdm0ava.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return choose_num(y, x)\n    else \n       \
    \ choose_num(x, y)\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer number x and\
    \ returns the number of \n    digits in x. For example, choose_num(12) should\
    \ return 2.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpg33p512x.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpg33p512x.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        else return x\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ positive numbers x and y and returns the biggest odd integer number that is\
    \ in the range [x, y] inclusive. If there's no such number, then the function\
    \ should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpi_7iqagv.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpi_7iqagv.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return choose_num(y, x)\n    else \n       \
    \ even = choose_num(x div 2, y)\n        if even > -1\n            then return\
    \ even\n        else \n            odd = choose_num(x div 2, y)\n            if\
    \ odd > -1\n                then return odd\n            else \n             \
    \   return -1\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12, 15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a positive integer number x and\
    \ returns the number of digits in x. \nFor example, choose_num(12) should return\
    \ 2.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpt23ye_wc.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpt23ye_wc.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        if x == y \n            then return x\n        else \n\
    \            if x % 2 == 0 \n                then return choose_num(x / 2, y)\n\
    \            else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x > y \n\
    \                        then return choose_num(x / 2, y / 2)\n              \
    \      else \n                        return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer $n$ and returns the number of digits in $n$. \nFor example, choose_num(12)\
    \ should return 2.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkrqmhueb.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpkrqmhueb.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 ? x : -1\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdzdrx5nd.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdzdrx5nd.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y\n        then return x\n    else if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y)\n    else return choose_num(x / 2, y)\nend\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 12)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer $n$ and returns the number of digits in $n$. For example, choose_num(12)\
    \ should return 2.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyc91rfap.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyc91rfap.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question is about\
    \ Julia, not Python.\n<|/ c |>\n<| c |>\nThe question was tagged Julia as well.\
    \ My answer was in Julia. Sorry for the misunderstanding.\n<|/ c |>\n<| a tags=julia,recursion\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgrkdepn9.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpgrkdepn9.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x -\
    \ 2, y + 1)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,recursion |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjiiwgnff.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjiiwgnff.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         choose_num(x + 1, y)\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ n and returns the number of digits in n. \nFor example, choose_num(12) = 2,\
    \ because 12 is twelve digits.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp94ieem3r.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp94ieem3r.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        x % 2 ==\
    \ 0 ? x : choose_num(x / 2, y)\n    end\nend\n</code>\n<|/ a tags=julia,recursion\
    \ |>\n<| a dscore=2 |>\nI wanted to add an answer that uses no loops or recursion.\
    \ \n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppt0m4qju.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppt0m4qju.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0\n                then return choose_num(x / 2, y)\n  \
    \          else \n                if y % 2 == 0\n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x % 2 ==\
    \ 0\n                        then return choose_num(x / 2, y / 2)\n          \
    \          else \n                        if y % 2 == 0\n                    \
    \        then return choose_num(x / 2, y / 2)\n                        else \n\
    \                            if x % 2 == 0\n                                then\
    \ return choose_num(x / 2, y / 2)\n                            else \n       \
    \                         if y % 2 == 0\n                                    then\
    \ return choose_num(x / 2, y / 2)\n                                else \n   \
    \                                 return -1\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 15)\n</cell>\n<text>\nProblem 3\nWrite a function that takes a\
    \ positive integer number x and returns the number of digits in x.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphkwk_9n4.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphkwk_9n4.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y\n        then return x\n    else \n        choose_num(y\
    \ - 1, x)\n    end\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThanks\
    \ for your answer! I appreciate it! I didn't know that you can do `if x < y then\
    \ return choose_num(y, x)` instead of `if x < y then return choose_num(y, x) else\
    \ return x`\n<|/ c |>\n<| c |>\nYes, you can do that. Just remember that `if`\
    \ statements don't return anything.\n<|/ c |>\n<| a |>\nThe other answers here\
    \ are great, but I thought I'd add my own answer to show how this can be done\
    \ using an iterator:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyghgz0vx.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyghgz0vx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        if x == 0 \n            then return y\n        else \n   \
    \         if y % x == 0 \n                then return y\n            else \n \
    \               return choose_num(x - 1, y)\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ positive integer number and returns its factorial. \nFor example, factorial(5)\
    \ = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpuhwzbhmj.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpuhwzbhmj.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        x % 2 ==\
    \ 0 && y % 2 == 0 && choose_num(x / 2, y / 2) * choose_num(x / 2, y / 2) \n  \
    \          < choose_num(x / 2, y / 2) * choose_num(x / 2, y / 2) + choose_num(x\
    \ / 2, y / 2) * choose_num(x / 2, y / 2)\n            && choose_num(x / 2, y /\
    \ 2) * choose_num(x / 2, y / 2) + choose_num(x / 2, y / 2) * choose_num(x / 2,\
    \ y / 2) \n            < choose_num(x / 2, y / 2) * choose_num(x / 2, y / 2) +\
    \ choose_num(x / 2, y / 2) * choose_num(x / 2, y / 2)\n            && choose_num(x\
    \ / 2, y / 2) * choose_num(x / 2, y / 2) + choose_num(x / 2, y / 2) * choose_num(x\
    \ / 2, y / 2) \n            < choose_num(x / 2, y / 2) * choose_num(x / 2, y /\
    \ 2) + choose_num(x / 2, y / 2) * choose_num(x / 2, y / 2)\n            && choose_num(x\
    \ / 2, y / 2) * choose_num(x / 2, y / 2) + choose_num(x / 2, y / 2) * choose_num(x\
    \ / 2, y / 2) \n            < choose_num(x / 2, y / 2) * choose_num(x / 2, y /\
    \ 2) + choose_num(x / 2, y / 2) * choose_num(x / 2, y / 2)\n            && choose_num(x\
    \ / 2, y / 2) * choose_num(x / 2, y / 2) + choose_num(x / 2, y / 2) * choose_num(x\
    \ / 2, y / 2) \n            < choose_num(x / 2, y / 2) * choose_num(x / 2, y /\
    \ 2) + choose_num(x / 2, y / 2) * choose_num(x / 2, y / 2)\n            && choose_num(x\
    \ / 2, y / 2) * choose_num(x / 2, y / 2) + choose_num(x / 2, y / 2) * choose_num(x\
    \ / 2, y / 2) \n            < choose_num(x / 2, y / 2) * choose_num(x / 2, y /\
    \ 2) + choose_num(x / 2, y / 2) * choose_num(x / 2, y / 2)\n            && choose_num(x\
    \ / 2, y / 2) * choose_num(x / 2, y / 2) + choose_num(x / 2, y / \nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps_hhg_m5.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmps_hhg_m5.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x -\
    \ 2, y - 1)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI believe this answer\
    \ should be the accepted one. While the other answers provide some useful insights,\
    \ this one actually answers the question as asked.\n<|/ c |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpz1hr9i59.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpz1hr9i59.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis doesn't\
    \ seem to work for me. `choose_num(12, 15)` returns `-1` instead of `14`.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works fine for me. Are you sure you copied\
    \ it correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running Julia\
    \ 0.6.0.\n<|/ c |>\n<| c |>\nI tested it on 0.6.0 too. Are you sure you copied\
    \ it correctly? What happens if you run `choose_num(12, 15)` from the REPL?\n\
    <|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running Julia 0.6.0.\n<|/ c\
    \ |>\n<| a dscore=2 |>\nI believe this can be done in one line using mapslices:\n\
    <code>\njulia> mapslices(x -> x % 2 == 0 ? x : -1, 12, 15)\n14\n</code>\n<|/ a\
    \ tags=julia,recursion |>\n<| c |>\nThis doesn't seem to work for me. `mapslices(x\
    \ -> x % 2 == 0 ? x : -1, 12, 15)` returns `-1` instead of `14`.\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works fine for me. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| c |>\nI copied it correctly. I'm running Julia 0.6.0.\n<|/ c |>\n\
    <| c |>\nI tested it on 0.6.0 too. Are you sure you copied it correctly? What\
    \ happens if you run `choose_num(12, 15)` from the REPL?\n<|/ c |>\n<| c |>\n\
    Yes, I copied it correctly. I'm running Julia 0.6.0.\n<|/ c |>\n<| a tags=julia,recursion\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp26i_97p_.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp26i_97p_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        \n    if x == y\n        then return x\n        \n    if x % 2 ==\
    \ 0\n        then return choose_num(x / 2, y)\n        \n    if y % 2 == 0\n \
    \       then return choose_num(x, y / 2)\n        \n    if x % 2 == 0\n      \
    \  then return choose_num(x / 2, y / 2)\n        \n    if y % 2 == 0\n       \
    \ then return choose_num(x / 2, y)\n        \n    if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y / 2)\n        \n    if y % 2 == 0\n        then return\
    \ choose_num(x / 2, y)\n        \n    if x % 2 == 0\n        then return choose_num(x\
    \ / 2, y / 2)\n        \n    if y % 2 == 0\n        then return choose_num(x /\
    \ 2, y)\n        \n    if x % 2 == 0\n        then return choose_num(x / 2, y\
    \ / 2)\n        \n    if y % 2 == 0\n        then return choose_num(x / 2, y)\n\
    \        \n    if x % 2 == 0\n        then return choose_num(x / 2, y / 2)\n \
    \       \n    if y % 2 == 0\n        then return choose_num(x / 2, y)\n      \
    \  \n    if x % 2 == 0\n        then return choose_num(x / 2, y / 2)\n       \
    \ \n    if y % 2 == 0\n        then return choose_num(x / 2, y)\n        \n  \
    \  if x % 2 == 0\n        then return choose_num(x / 2, y / 2)\n        \n   \
    \ if y % 2 == 0\n        then return choose_num(x / 2, y)\n        \n    if x\
    \ % 2 == 0\n        then return choose_num(x / 2, y / 2)\n        \n    if y %\
    \ 2 == 0\n        then return choose_num(x / 2, y)\n        \n    if x % 2 ==\
    \ 0\n        then return choose_num(x / 2, y / 2)\n        \n    if y % 2 == 0\n\
    \        then return choose_num(x / 2, y)\n        \n    if x % 2 == 0\n     \
    \   then return choose_num(x / 2, y / 2)\n        \n    if y % 2 == 0\n      \
    \  then return choose_num(x / 2, y)\n        \n    if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y / 2)\n        \n    if y % 2 == 0\n        then return\
    \ choose_num(x / 2, y)\n        \n    if x % 2 == 0\n        then \nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphiuas9ik.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphiuas9ik.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try `choose_num(12, 15)` - it returns `14` instead of `-1`.\n<|/ c |>\n<| c\
    \ |>\nI didn't test it, but I believe it works. I tested it before posting my\
    \ answer. Try it yourself.\n<|/ c |>\n<| c |>\nYes, it works. I tested it before\
    \ posting my answer. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it myself before\
    \ posting my answer. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it myself before\
    \ posting my answer. Try it yourself.\n<|/ c |>\n<| a tags=julia,recursion |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8ulvmacs.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8ulvmacs.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return choose_num(y, x)\n    else return x \n\
    end \n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it with `choose_num(12,\
    \ 15)`.\n<|/ c |>\n<| c |>\nI edited my answer. Now it works. Thanks for pointing\
    \ out.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_7w00vxg.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_7w00vxg.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        x % 2 ==\
    \ 0 && y % 2 == 0 \n            ? choose_num(x / 2, y / 2)\n            : choose_num(x\
    \ / 2, y / 2) + 1\nend\n</code>\n<|/ a tags=julia,recursion,function |>\n<| c\
    \ |>\nThanks for your answer! I appreciate it!\n<|/ c |>\n<| a dscore=2 |>\nI\
    \ believe that this is what you are looking for:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph8r456ux.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmph8r456ux.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        if x == y \n            then return x\n        else \n\
    \            if x % 2 == 0 && y % 2 == 0 \n                then return choose_num(x\
    \ / 2, y / 2)\n            else \n                if x % 2 == 0 \n           \
    \         then return choose_num(x / 2, y)\n                else \n          \
    \          if y % 2 == 0 \n                        then return choose_num(x, y\
    \ / 2)\n                    else \n                        return -1\nend\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two positive numbers x and y and returns the\n    biggest\
    \ odd number that is in the range [x, y] inclusive. If there's no such \n    number,\
    \ then the function should return -1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpteng5dtb.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpteng5dtb.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 \n                then return choose_num(x / 2, y)\n \
    \           else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x % 2 ==\
    \ 1 \n                        then return choose_num(x / 2, y)\n             \
    \       else \n                        if y % 2 == 1 \n                      \
    \      then return choose_num(x, y / 2)\n                        else \n     \
    \                       if x == y \n                                then return\
    \ x\n                            else \n                                if x <\
    \ y \n                                    then return choose_num(x / 2, y)\n \
    \                               else \n                                    if\
    \ x > y \n                                        then return choose_num(x, y\
    \ / 2)\n                                    else return -1\nend\n</cell>\n<code\
    \ language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer number and returns its factorial. \nFor example,\
    \ factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpphjnss11.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpphjnss11.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        choose_num(y\
    \ - 1, x)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis doesn't\
    \ seem to work for `choose_num(12, 15)`\n<|/ c |>\n<| c |>\nI fixed the bug and\
    \ added a test case to my answer\n<|/ c |>\n<| a |>\nHere's a solution using recursion:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyd2ic28m.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyd2ic28m.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        if x == y \n            then return x\n        else \n\
    \            if x % 2 == 0 \n                then return choose_num(x / 2, y)\n\
    \            else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x % 2 ==\
    \ y % 2 \n                        then return choose_num(x / 2, y / 2)\n     \
    \               else \n                        if x == y / 2 \n              \
    \              then return x\n                        else \n                \
    \            if y % 2 == x / 2 \n                                then return choose_num(x,\
    \ y / 2)\n                            else \n                                if\
    \ y % 2 == y / 2 \n                                    then return choose_num(x,\
    \ y / 2)\n                                else \n                            \
    \        return -1\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes a positive integer number\
    \ and returns its \n    factorial. Factorial of a number is the product of all\
    \ the numbers \n    up to and including that number. For example, 5! = 5 x 4 x\
    \ 3 x 2 x 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3hhbkeor.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3hhbkeor.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        choose_num(y\
    \ - 1, x)\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12, 15)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 12)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a positive integer n and returns the number of \n    digits\
    \ in n. For example, choose_num(123) = 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2yc0z5xf.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2yc0z5xf.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y\n        then return x\n    else \n        choose_num(y\
    \ - 1, x)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a positive integer number and returns its factorial. \nFor example, factorial(5)\
    \ = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppfj2xfmw.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppfj2xfmw.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        if x == y \n            then return x\n        else \n\
    \            if x % 2 == 0 \n                then return choose_num(x / 2, y)\n\
    \            else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x > y \n\
    \                        then return choose_num(x / 2, y / 2)\n              \
    \      else \n                        return -1\nend\n</cell>\n<code language=julia-1.3>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer number and returns its factorial. \nFor example, factorial(5) = 5 *\
    \ 4 * 3 * 2 * 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwv4yzj2g.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwv4yzj2g.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y\n        then return choose_num(y, x)\n    else if x == y\n\
    \        then return x\n    else \n        choose_num(x - y, y - x)\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if x is greater than y\n<|/ c |>\n\
    <| c |>\nIt does work if x is greater than y\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if x is greater than y, but does work if x is less than y\n<|/ c |>\n<| c |>\n\
    It doesn't work if x is greater than y, but does work if x is less than y\n<|/\
    \ c |>\n<| c |>\nIt doesn't work if x is greater than y, but does work if x is\
    \ less than y\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbp151jxp.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbp151jxp.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y\n        then return choose_num(y, x)\n    else return x\n\
    end\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes two positive numbers x and y and returns\
    \ the\n    biggest odd integer number that is in the range [x, y] inclusive. If\
    \ \n    there's no such number, then the function should return -1.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplxv2q61h.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplxv2q61h.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5zntpxnh.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5zntpxnh.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 \n                then return choose_num(x / 2, y)\n \
    \           else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x % 2 ==\
    \ y % 2 \n                        then return x\n                    else \n \
    \                       if x % 2 == y % 2 \n                            then return\
    \ y\n                        else \n                            if x % 2 != y\
    \ % 2 \n                                then return -1\n                     \
    \       else \n                                return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of numbers and returns the sum of all the\nnumbers\
    \ in the array. \nWrite a function that takes an array of numbers and returns\
    \ the product of all\nthe numbers in the array. \nWrite a function that takes\
    \ an array of numbers and returns the smallest number\nthat is greater than or\
    \ equal to the sum of the numbers in the array. \nWrite a function that takes\
    \ an array of numbers and returns the largest number\nthat is less than or equal\
    \ to the product of the numbers in the array. \nWrite a function that takes an\
    \ array of numbers and returns the average of the\nnumbers in the array. \nWrite\
    \ a function that takes an array of numbers and returns the median of the\nnumbers\
    \ in the array. \nWrite a function that takes an array of numbers and returns\
    \ the mode of the\nnumbers in the array. \nWrite a function that takes an array\
    \ of numbers and returns the standard deviation\nof the numbers in the array.\
    \ \nWrite a function that takes an array of numbers and returns the variance of\
    \ the\nnumbers in the array. \nWrite a function that takes an array of numbers\
    \ and returns the sum of the squares\nof the numbers in the array. \nWrite a function\
    \ that takes an array of numbers and returns the product of the\nsquares of the\
    \ numbers in the array. \nWrite a function that takes an array of numbers and\
    \ returns the sum of the cubes\nof the numbers in the array. \nWrite a function\
    \ that takes an array of numbers and returns the product of the\ncubes of the\
    \ numbers in the array. \nWrite a function that takes an array of numbers and\
    \ returns the sum of the power\nof the numbers in the array. \nWrite a function\
    \ that takes an array of numbers and returns the product of the\npower of the\
    \ numbers in the array. \nWrite a function that takes an array of numbers and\
    \ returns the sum of the logarithms\nof the numbers in the array. \nWrite a function\
    \ that takes an array of numbers and returns the product of the\nlogarithms of\
    \ the numbers in the array. \nWrite a function that takes an array of numbers\
    \ and returns the sum of the reciprocals\nof the numbers in the array. \nWrite\
    \ a function that takes an array of numbers and returns the product of the\nreciprocals\
    \ of the numbers in the array. \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppcv62k9z.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppcv62k9z.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        local z = x\n        while z < y \n            do z = z *\
    \ 2\n            until z > y\n        return z\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd integer number that\
    \ is in the range [x, y] inclusive. If \n    there's no such number, then the\
    \ function should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy5ixr6s9.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpy5ixr6s9.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer number\
    \ and returns its \nfactorial. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7\
    \ 2 \xD7 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpb25q5jwz.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpb25q5jwz.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 && choose_num(x / 2, y / 2)\
    \ * choose_num(x / 2, y / 2) >= x && choose_num(x / 2, y / 2) * choose_num(x /\
    \ 2, y / 2) <= y \n            ? choose_num(x / 2, y / 2) * choose_num(x / 2,\
    \ y / 2)\n            : -1\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpse7w8r_9.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpse7w8r_9.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y\n        then return x\n    else if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y)\n    else \n        then return choose_num(x / 2,\
    \ y)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the\
    \ question. You're just repeating what the OP already knows.\n<|/ c |>\n<| c |>\n\
    I thought it would be helpful to give a solution that doesn't use recursion.\n\
    <|/ c |>\n<| c |>\nThe OP already knows how to solve this problem using recursion.\
    \ He wants to know how to solve it without recursion.\n<|/ c |>\n<| c |>\nI thought\
    \ the OP was asking how to solve it without recursion.\n<|/ c |>\n<| c |>\nThe\
    \ OP already knows how to solve this problem using recursion. He wants to know\
    \ how to solve it without recursion.\n<|/ c |>\n<| a |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqhfcos8a.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpqhfcos8a.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 \n                then return choose_num(x / 2, y)\n \
    \           else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x % 2 ==\
    \ y % 2 \n                        then return choose_num(x / 2, y / 2)\n     \
    \               else \n                        if x % 2 == y % 2 \n          \
    \                  then return choose_num(x / 2, y / 2)\n                    \
    \    else \n                            if x % 2 != y % 2 \n                 \
    \               then return choose_num(x / 2, y / 2)\n                       \
    \     else \n                                return -1\nend\n</cell>\n<code language=julia-1.3>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer $n$ and returns the number of digits\nof the number $n$. For\
    \ example, choose_num(12) should return 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv5b1po2m.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpv5b1po2m.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return choose_num(y, x)\n    else \n       \
    \ x % 2 == 0 && y % 2 == 0 ? \n            choose_num(x / 2, y / 2) : \n     \
    \       choose_num(x / 2, y / 2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 12)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 13)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 14)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 16)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 17)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 18)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 19)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 20)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 21)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 22)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 23)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 24)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 25)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 26)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 27)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 28)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 29)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 30)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 31)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 32)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 33)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 34)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 35)\n</cell>\n<code language=julia-1.5>\nchoose_num(\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm61io7fx.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpm61io7fx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        x % 2 ==\
    \ 0 && y % 2 == 0 ? x : -1\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer\
    \ n and returns the sum of its digits. \nFor example, choose_num(12) = 1 + 2 =\
    \ 3 and choose_num(123) = 1 + 2 + 3 = 6. \nThe function should work for any positive\
    \ integer n.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6qw9a1rz.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6qw9a1rz.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        \n    else if x == y \n        then return x\n        \n    else\
    \ \n        choose_num(y - 1, x)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    choose_num(12, 15)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 12)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer and returns the number\
    \ of digits in it.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpq828o8v_.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpq828o8v_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        choose_num(y\
    \ - 1, x)\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an\
    \ answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26833463)\n<|/ c |>\n<| c |>\nI agree\
    \ with you, but I thought that my answer was a solution to the problem and I wanted\
    \ to share it with the community. Anyway, I edited my answer and added a code\
    \ snippet that solves the problem.\n<|/ c |>\n<| c |>\nI appreciate your efforts,\
    \ but this does not provide an answer to the question. Once you have sufficient\
    \ [reputation](https://stackoverflow.com/help/whats-reputation) you will be able\
    \ to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26833463)\n<|/ c |>\n<| c |>\nI appreciate\
    \ your efforts, but this does not provide an answer to the question. Once you\
    \ have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26833463)\n<|/ c |>\n<| c |>\nI appreciate\
    \ your efforts, but this does not provide an answer to the question. Once you\
    \ have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjxm8zayf.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjxm8zayf.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 && x > y \n            ? x \n\
    \            : -1\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd number that is in the range [x, y]\
    \ inclusive. If there's no such\n    number, then the function should return -1.\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxkk993no.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxkk993no.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        end if\n    if x == y\n        then return x\n        end if\n \
    \   if x % 2 == 0\n        then return choose_num(x / 2, y)\n        end if\n\
    \    if y % 2 == 0\n        then return choose_num(x, y / 2)\n        end if\n\
    \    if x > y\n        then return choose_num(y, x)\n        end if\n    return\
    \ -1\nend function\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,algorithm |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjiq61dz8.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjiq61dz8.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        \n    else if x == y \n        then return x\n        \n    else\
    \ \n        x % 2 == 0 && y % 2 == 0 && choose_num(x / 2, y / 2) * choose_num(x\
    \ / 2, y / 2) >= x && choose_num(x / 2, y / 2) * choose_num(x / 2, y / 2) <= y\n\
    \        \n    end\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphsctlvi1.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphsctlvi1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y\n        then return x\n    else \n        then return\
    \ choose_num(y - 1, x)\n    end\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. \nThe factorial of a number $n$ is defined as:\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkui6h6gz.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpkui6h6gz.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         choose_num(x + 1, y)\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 12)\n</cell>\n<code\
    \ language=julia-1.5>\nchoose_num(13, 13)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 14)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 16)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 17)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 18)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 19)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 20)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 21)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 22)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 23)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 24)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 25)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 26)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 27)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 28)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 29)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 30)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 31)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 32)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 33)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 34)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 35)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 36)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 37)\n</cell>\n<code language=julia-\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph992dj5g.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmph992dj5g.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 ? x : -1\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer number x and returns the number of digits in\
    \ x. \nFor example, choose_num(12) should return 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_4i8eaqj.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_4i8eaqj.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x -\
    \ 2, y - 1)\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpng0vo5_s.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpng0vo5_s.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        \n    else if x == y \n        then return x\n        \n    else\
    \ if x % 2 == 0 \n        then return choose_num(x / 2, y)\n        \n    else\
    \ \n        then return choose_num(x / 2, y)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a number is prime or not. \nThe function should take one number as an argument\
    \ and should return true or false accordingly.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptf49k_4g.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptf49k_4g.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        choose_num(x, y)\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia,function,if-statement |>\nThe most efficient way is to use\
    \ an if statement to check whether a number is evenly divisible by another number.\
    \ \n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpz2n_h6m6.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpz2n_h6m6.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n\
    </cell>\n<code language=julia-1.5>\nchoose_num(13, 12)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes two positive numbers x and y and returns the\n\
    \    biggest odd number that is in the range [x, y] inclusive. If there's no such\
    \ \n    number, then the function should return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpo2zytv4s.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpo2zytv4s.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ `choose_num(12, 15)` returns `14` instead of `-1`.\n<|/ c |>\n<| c |>\nYes,\
    \ I forgot to add that case. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppgnhovx9.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppgnhovx9.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return -1\n    else if x == y \n        then\
    \ return x\n    else \n        local i = x\n        local j = y\n        while\
    \ i <= j \n            do \n                i = i + 2\n            until i > j\n\
    \            if i % 2 == 0 \n                then return i\n            else\n\
    \                j = j - 1\n        end\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer $n$ and returns the number of digits in $n$. \nFor example, choose_num(12)\
    \ = 2, because $12 = 2^0 + 2^1$. \nWrite a function that takes an integer $n$\
    \ and returns the number of digits in $n$. \nFor example, choose_num(12) = 2,\
    \ because $12 = 2^0 + 2^1$. \nWrite a function that takes an integer $n$ and returns\
    \ the number of digits in $n$. \nFor example, choose_num(12) = 2, because $12\
    \ = 2^0 + 2^1$. \nWrite a function that takes an integer $n$ and returns the number\
    \ of digits in $n$. \nFor example, choose_num(12) = 2, because $12 = 2^0 + 2^1$.\
    \ \nWrite a function that takes an integer $n$ and returns the number of digits\
    \ in $n$. \nFor example, choose_num(12) = 2, because $12 = 2^0 + 2^1$. \nWrite\
    \ a function that takes an integer $n$ and returns the number of digits in $n$.\
    \ \nFor example, choose_num(12) = 2, because $12 = 2^0 + 2^1$. \nWrite a function\
    \ that takes an integer $n$ and returns the number of digits in $n$. \nFor example,\
    \ choose_num(12) = 2, because $12 = 2^0 + 2^1$. \nWrite a function that takes\
    \ an integer $n$ and returns the number of digits in $n$. \nFor example, choose_num(12)\
    \ = 2, because $12 = 2^0 + 2^1$. \nWrite a function that takes an integer $n$\
    \ and returns the number of digits in $n$. \nFor example, choose_num(12) = 2,\
    \ because $12 = 2^0 + 2^1$. \nWrite a function that takes an integer $n$ and returns\
    \ the number of digits in $n$. \nFor example, choose_num(12) = 2, because $12\
    \ = 2^0 + 2^1$. \nWrite a function that takes an integer $n$ and returns the number\
    \ of digits in $n$. \nFor example, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8n7ky184.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8n7ky184.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 \n                then return choose_num(x/2, y)\n   \
    \         else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y/2)\n                else \n                    if x == y \n\
    \                        then return x\n                    else \n          \
    \              if x % 2 == 0 \n                            then return choose_num(x/2,\
    \ y)\n                        else \n                            if y % 2 == 0\
    \ \n                                then return choose_num(x, y/2)\n         \
    \                   else \n                                if x == y \n      \
    \                              then return x\n                               \
    \ else \n                                    return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer and returns the next greater \nnumber\
    \ after it. For example, if the input is 3, the function should return 4.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6_g72_9f.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6_g72_9f.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a |>\n<| a tags=julia,recursion |>\nHere's\
    \ a recursive solution that is similar to what was proposed in the other answers,\
    \ but I wanted to show how you can do this without recursion.\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpw78g9kir.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpw78g9kir.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        if x % 2 == 0 \n            then return x\n        else\
    \ \n            if y % 2 == 0 \n                then return y\n            else\
    \ \n                if x % 2 == y % 2 \n                    then return choose_num(x\
    \ / 2, y / 2)\n                else \n                    if x % 2 == y % 2 \n\
    \                        then return choose_num(x / 2, y / 2) + 1\n          \
    \          else \n                        return -1\nend\n</code>\n<|/ a tags=julia,recursion\
    \ |>\n<| c |>\nThis doesn't seem to work when x is larger than y\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work for me when x is larger than y\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Now it works.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `choose_num(12,\
    \ 15) = 14` but `choose_num(13, 12) = -1`\n<|/ c |>\n<| c |>\nI fixed the bug.\
    \ Now it works.\n<|/ c |>\n<| a tags=julia,recursion |>\nThis can be done using\
    \ an iterative solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_on55_ud.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_on55_ud.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        if x == y \n            then return x\n        else \n\
    \            if x % 2 == 0 \n                then return choose_num(x / 2, y)\n\
    \            else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x > y \n\
    \                        then return choose_num(y / 2, x)\n                  \
    \  else \n                        return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ positive numbers x and y and returns the biggest odd number that is in the range\
    \ [x, y] inclusive. If there's no such number, then the function should return\
    \ -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptrhb0jjy.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptrhb0jjy.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer number\
    \ and returns its \nfactorial. \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1\
    \ = 120\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_5smci7_.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_5smci7_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else if x % 2 == 0 \n       \
    \ then return choose_num(x / 2, y)\n    else \n        choose_num(x / 2, y)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer number x and\
    \ returns the sum of its digits. \nFor example, choose_num(12) = 1 + 2 = 3. \n\
    If the number is negative, return -1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcs8nwh0q.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpcs8nwh0q.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return choose_num(y, x)\n    else return x\n\
    end\n</cell>\n<code language=julia-0.6>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer number x and returns\
    \ the largest odd number that is in the range [x, x + 10] inclusive.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpii0_3r0n.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpii0_3r0n.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y)\n    else return choose_num(x / 2, y)\nend\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer number and returns its \n    factorial.\
    \ For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpscinzf6q.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpscinzf6q.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        else return x\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a positive integer number and returns its factorial. \n\
    For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvudo8v_j.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvudo8v_j.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x -\
    \ 2, y - 1)\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 12)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 13)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer x and returns the number of digits in the number x.\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn7wwank9.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpn7wwank9.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return -1\n    else if x == y \n        then\
    \ return x\n    else \n        choose_num(x - 2, y - 1)\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv_uctbmv.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpv_uctbmv.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x -\
    \ 2, y - 1)\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12, 15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two positive numbers x and y and\
    \ returns the\n    biggest odd integer number that is in the range [x, y] inclusive.\
    \ If \n    there's no such number, then the function should return -1.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpg5lgdpd9.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpg5lgdpd9.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 \n            ? if x % 2 ==\
    \ 0 && y % 2 == 0 \n                then return x \n                else return\
    \ y\n            : x % 2 == 0 && y % 2 != 0 \n                ? return y\n   \
    \             : x % 2 != 0 && y % 2 == 0 \n                    ? return x\n  \
    \                  : -1\nend\n</code>\n<|/ a tags=julia,if-statement |>\n<| c\
    \ |>\nThis doesn't answer the question. OP wants to know how to use `if` statements\
    \ to solve this problem.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to\
    \ show a way to solve this problem using if-else statements. I didn't want to\
    \ give a complete solution. Thanks for your comment.\n<|/ c |>\n<| c |>\nI believe\
    \ that OP wants to know how to use `if` statements to solve this problem. He is\
    \ asking how to solve this problem using if-else statements. I believe that my\
    \ answer solves the problem using if-else statements. I believe that my answer\
    \ solves the problem using if-else statements. I believe that my answer solves\
    \ the problem using if-else statements. I believe that my answer solves the problem\
    \ using if-else statements. I believe that my answer solves the problem using\
    \ if-else statements. I believe that my answer solves the problem using if-else\
    \ statements. I believe that my answer solves the problem using if-else statements.\
    \ I believe that my answer solves the problem using if-else statements. I believe\
    \ that my answer solves the problem using if-else statements. I believe that my\
    \ answer solves the problem using if-else statements. I believe that my answer\
    \ solves the problem using if-else statements. I believe that my answer solves\
    \ the problem using if-else statements. I believe that my answer solves the problem\
    \ using if-else statements. I believe that my answer solves the problem using\
    \ if-else statements.\n<|/ c |>\n<| c |>\nI believe that my answer solves the\
    \ problem using if-else statements. I believe that my answer solves the problem\
    \ using if-else statements. I believe that my answer solves the problem using\
    \ if-else statements. I believe that my answer solves the problem using if-else\
    \ statements. I believe that my answer solves the problem using if-else statements.\
    \ I believe that my answer solves the problem using if-else statements. I believe\
    \ that my answer solves the \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5tapz3l7.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5tapz3l7.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbcdinmpu.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbcdinmpu.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 \n                then return choose_num(x / 2, y)\n \
    \           else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x == y /\
    \ 2 \n                        then return x\n                    else \n     \
    \                   if y % 2 == 1 \n                            then return choose_num(x,\
    \ y / 2)\n                        else \n                            if x % 2\
    \ == 1 \n                                then return choose_num(x / 2, y)\n  \
    \                          else \n                                if x > y / 2\
    \ \n                                    then return -1\n                     \
    \           else \n                                    return -1\nend\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two positive numbers x and y and returns the\n    biggest\
    \ odd integer number that is in the range [x, y] inclusive. If \n    there's no\
    \ such number, then the function should return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprjq2yqpl.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmprjq2yqpl.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        else return x\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ positive integer number x and returns the number that \nis divisible by 3 or\
    \ 5 (but not both). For example:\n    choose_num(12) = 6\n    choose_num(13) =\
    \ -1\n    choose_num(15) = 5\n    choose_num(17) = -1\n    choose_num(19) = -1\n\
    \    choose_num(21) = 3\n    choose_num(23) = -1\n    choose_num(25) = -1\n  \
    \  choose_num(27) = -1\n    choose_num(29) = -1\n    choose_num(31) = 12\n   \
    \ choose_num(33) = -1\n    choose_num(35) = -1\n    choose_num(37) = -1\n    choose_num(39)\
    \ = -1\n    choose_num(41) = 12\n    choose_num(43) = 12\n    choose_num(45) =\
    \ -1\n    choose_num(47) = -1\n    choose_num(49) = -1\n    choose_num(51) = 12\n\
    \    choose_num(53) = 12\n    choose_num(55) = -1\n    choose_num(57) = -1\n \
    \   choose_num(59) = -1\n    choose_num(61) = 12\n    choose_num(63) = -1\n  \
    \  choose_num(65) = -1\n    choose_num(67) = -1\n    choose_num(69) = -1\n   \
    \ choose_num(71) = 12\n    choose_num(73) = 12\n    choose_num(75) = -1\n    choose_num(77)\
    \ = -1\n    choose_num(79) = -1\n    choose_num(81) = 12\n    choose_num(83) =\
    \ 12\n    choose_num(85) = -1\n    choose_num(87) = -1\n    choose_num(89) = -1\n\
    \    choose_num(91) = 12\n    choose_num(93) = 12\n    choose_num(95) = -1\n \
    \   choose_num(97) = -1\n    choose_num(99) = -1\n    choose_num(101) = 12\n \
    \   choose_num(103) = 12\n    choose_num(\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7sc30l1s.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7sc30l1s.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x -\
    \ 2, y + 1)\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,recursion,algorithm\
    \ |>\nI wrote a recursive function which returns the biggest even number in the\
    \ range [x, y]\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptexoef2y.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptexoef2y.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 && choose_num(x / 2, y / 2)\
    \ * choose_num(x / 2, y / 2) >= x && choose_num(x / 2, y / 2) * choose_num(x /\
    \ 2, y / 2) <= y \n            ? choose_num(x / 2, y / 2) * choose_num(x / 2,\
    \ y / 2)\n            : -1\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two positive numbers\
    \ x and y and returns the biggest even integer number that is in the range [x,\
    \ y] inclusive. If there's no such number, then the function should return -1.\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpp2exxz7z.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpp2exxz7z.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12, 15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a positive integer number and\
    \ returns its \n    factorial. For example, factorial(5) = 5 * 5 * 5 = 250.\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpc8m9nqq8.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpc8m9nqq8.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        x % 2 ==\
    \ 0 ? x : choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ number and returns its \nfactorial. For example, factorial(5) = 5 * 4 * 3 *\
    \ 2 * 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmr0o7m87.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmr0o7m87.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        choose_num(x, y)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer number and returns its \n    factorial. For example, factorial(5)\
    \ = 5 x 4 x 3 x 2 x 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdggs2izu.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdggs2izu.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfecj3m7q.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfecj3m7q.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y\n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try it with\
    \ `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\nI didn't test it but I think it works.\
    \ I tested it on julia 0.6.2\n<|/ c |>\n<| c |>\nIt works on 0.6.2 too. Just tested\
    \ it on 0.6.2. But it won't work on 0.6.1 because `choose_num` was introduced\
    \ in 0.6.2.\n<|/ c |>\n<| c |>\nI tested it on 0.6.1 too. Just tested it on 0.6.1.\
    \ But it won't work on 0.6.0 because `choose_num` was introduced in 0.6.0\n<|/\
    \ c |>\n<| c |>\nI tested it on 0.6.0 too. Just tested it on 0.6.0. But the function\
    \ doesn't work. `choose_num(12, 15)` returns `-1` instead of `14`.\n<|/ c |>\n\
    <| a dscore=2 |>\nThe answer by is correct, but I thought I'd add some explanation.\n\
    The function choose_num is recursive, but it's also iterative. Iterative functions\
    \ are easier to understand and are often faster than recursive functions. In Julia,\
    \ iterative functions are implemented as macros. So the function choose_num is\
    \ actually implemented as a macro.\nThe macro expands to:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplwgswk47.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplwgswk47.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a tags=julia,recursion,function |>\n<| c |>\n\
    This doesn't work if you pass it negative numbers. For example, `choose_num(-10,\
    \ 10)` returns `-1` instead of `10`.\n<|/ c |>\n<| c |>\nIt works fine for me\
    \ on Julia 1.5.1. What version are you using?\n<|/ c |>\n<| c |>\nI'm using Julia\
    \ 1.5.1. I guess it might be a version issue. I'm using Julia 1.5.1 on Ubuntu\
    \ 14.04.\n<|/ c |>\n<| c |>\nOk, I see what's happening now. You're not supposed\
    \ to use `x::Int64` as a type annotation. Instead, you should use `choose_num(x::Int64,\
    \ y::Int64)::Int64`. I've edited my answer to reflect this.\n<|/ c |>\n<| c |>\n\
    Thanks, I didn't know that. I've edited my answer to reflect this.\n<|/ c |>\n\
    <| a tags=julia,recursion,function |>\nHere's a solution that doesn't use recursion:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyn64rf5f.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyn64rf5f.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 ? x : -1\nend\n</cell>\n<code\
    \ language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer $n$ and returns the number of digits\
    \ in $n$. \nFor example, choose_num(12) = 2.\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcpka0m6e.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpcpka0m6e.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an integer $n$ and returns\
    \ $n$ if it's even, \n$n+1$ if it's odd, and $-1$ otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiuz2jorn.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpiuz2jorn.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 ? x : -1\nend\n</cell>\n<code\
    \ language=julia-1.3>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer n and returns n raised to the power\
    \ of 2. \nFor example, choose_num(12) should return 24. \nThe function should\
    \ work for any positive integer n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv8ybhivp.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpv8ybhivp.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return choose_num(y, x)\n    else \n       \
    \ choose_num(x - y, x + y)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,algorithm\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjii6ay_v.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjii6ay_v.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 \n            ? if x < y \n\
    \                then return choose_num(y, x)\n                else return -1\n\
    \            : x % 2 == 0 && y % 2 == 1 \n                ? if x < y \n      \
    \              then return choose_num(y, x)\n                    else return -1\n\
    \                : x % 2 == 1 && y % 2 == 0 \n                    ? if x < y \n\
    \                        then return choose_num(y, x)\n                      \
    \  else return -1\n                    : x % 2 == 1 && y % 2 == 1 \n         \
    \               ? if x < y \n                            then return choose_num(y,\
    \ x)\n                            else return -1\n                        : return\
    \ -1\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxjwf674m.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxjwf674m.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        choose_num(x\
    \ + 1, y)\n    end\nend\n</code>\n<|/ a tags=julia,recursion,function |>\n<| c\
    \ |>\nThis doesn't seem to work for me. `choose_num(12, 15)` returns `-1` instead\
    \ of `14`.\n<|/ c |>\n<| c |>\nIt works for me (Julia 0.6.1). Which version are\
    \ you using?\n<|/ c |>\n<| c |>\nI'm using 0.6.1. I guess it's time to update\
    \ my Julia installation. Thanks for your help!\n<|/ c |>\n<| c |>\nI updated my\
    \ Julia installation and it works now. Thanks again!\n<|/ c |>\n<| a dscore=2\
    \ |>\nThe other answers here are great, but I thought I'd add my own answer because\
    \ I wanted to see how it compared against the other answers. I ran this on Julia\
    \ 0.6.1.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpng19yb2y.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpng19yb2y.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x -\
    \ 2, y - 1)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| a |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp17fstdwa.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp17fstdwa.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y\n        then return x\n    else if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y)\n    else return choose_num(x / 2, y)\nend\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that takes an integer n and returns the factorial of n. \n    Factorial\
    \ of a number is defined as the product of all the integers \n    less than or\
    \ equal to it. For example, 5! = 5 x 4 x 3 x 2 x 1 = 120.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptny5_04r.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptny5_04r.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        if x == y \n            then return x\n        else \n\
    \            if x % 2 == 0 \n                then return choose_num(x / 2, y)\n\
    \            else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x > y \n\
    \                        then return choose_num(x / 2, y / 2)\n              \
    \      else \n                        return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer $n$ and returns the number of digits in $n$. \nFor example,\
    \ choose_num(12) should return 2.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbvl8ulxs.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbvl8ulxs.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 && x /= 2 && y /= 2\n      \
    \  then return choose_num(x / 2, y / 2)\n        else return -1\nend\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(13, 12)\n</cell>\n<code language=julia-1.0>\nchoose_num(13, 13)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(13, 14)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(13, 15)\n</cell>\n<code language=julia-1.0>\nchoose_num(13, 16)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(13, 17)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(13, 18)\n</cell>\n<code language=julia-1.0>\nchoose_num(13, 19)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(13, 20)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(13, 21)\n</cell>\n<code language=julia-1.0>\nchoose_num(13, 22)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(13, 23)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(13, 24)\n</cell>\n<code language=julia-1.0>\nchoose_num(13, 25)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(13, 26)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(13, 27)\n</cell>\n<code language=julia-1.0>\nchoose_num(13, 28)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(13, 29)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(13, 30)\n</cell>\n<code language=julia-1.0>\nchoose_num(13, 31)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(13, 32)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(13, 33)\n</cell>\n<code language=julia-1.0>\nchoose_num(13, 34)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(13, 35)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(13, 36)\n</cell>\n<code language=julia-1.0\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwfqxdnqa.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwfqxdnqa.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x -\
    \ 2, y - 1)\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpng24nju5.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpng24nju5.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 ? x : -1\nend\n</code>\n<|/\
    \ a tags=julia,if-statement |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1t8d7meq.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1t8d7meq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/26859468)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to find\
    \ the biggest even number between x and y, and I provided a solution that does\
    \ exactly that. He also asked how to do it in Julia, and I provided a solution\
    \ in Julia. He also asked how to do it in Python, and I provided a solution in\
    \ Python. He also asked how to do it in R, and I provided a solution in R. He\
    \ also asked how to do it in Haskell, and I provided a solution in Haskell. He\
    \ also asked how to do it in R, and I provided a solution in R. He also asked\
    \ how to do it in Julia, and I provided a solution in Julia. He also asked how\
    \ to do it in Python, and I provided a solution in Python. He also asked how to\
    \ do it in R, and I provided a solution in R. He also asked how to do it in Haskell,\
    \ and I provided a solution in Haskell. He also asked how to do it in Julia, and\
    \ I provided a solution in Julia.\n<|/ c |>\n<| c |>\nHe also asked how to do\
    \ it in Python, and I provided a solution in Python. He also asked how to do it\
    \ in R, and I provided a solution in R. He also asked how to do it in Haskell,\
    \ and I provided a solution in Haskell. He also asked how to do it in Julia, and\
    \ I provided a solution in Julia. He also asked how to do it in Python, and I\
    \ provided a solution in Python. He also asked how to do it in R, and I provided\
    \ a solution in R. He also asked how to do it in Haskell, and I provided a solution\
    \ in Haskell. He also asked how to do it in Julia, and I provided a solution in\
    \ Julia.\n<|/ c |>\n<| c |>\nHe also asked how to do it in Python, and I provided\
    \ a solution in Python. He also \nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsrjkxjl7.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsrjkxjl7.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppaqggm5e.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppaqggm5e.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        \n    if x == y \n        then return x\n        \n    if x % 2\
    \ == 0 \n        then return choose_num(x / 2, y)\n        \n    if y % 2 == 0\
    \ \n        then return choose_num(x, y / 2)\n        \n    if x > y \n      \
    \  then return choose_num(y, x)\n        \n    return -1\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\nProblem 2\nWrite a\
    \ function that takes a positive integer number x and returns the \n    biggest\
    \ odd number that is in the range [x, x + 10] inclusive. If there's no such \n\
    \    number, then the function should return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpw8b6agur.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpw8b6agur.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return choose_num(y, x)\n    else \n       \
    \ choose_num(x div 2, y div 2)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer x and returns the number of times it appears in the list [x, x + 1,\
    \ ..., x + 100]. For example, choose_num(12) should return 3.\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp69a4qvxi.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp69a4qvxi.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        else return x\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    smallest integer number that is\
    \ in the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpod06r0gl.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpod06r0gl.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n\
    </cell>\n<code language=julia-1.0>\nchoose_num(13, 12)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer n and returns the number of\
    \ \n    digits in n. For example, choose_num(123) = 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_w9l70kr.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_w9l70kr.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y\n        then return x\n    else \n        x % 2 == 0\
    \ && y % 2 == 0 ? choose_num(x / 2, y / 2) : -1\nend\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis doesn't work when `x == y`\n<|/ c |>\n<| c |>\nYes, I forgot about\
    \ that case. Thanks for pointing it out. I've updated the answer.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7g80bwxs.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7g80bwxs.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        else return x\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd integer number that\
    \ is in the range [x, y] inclusive. If \n    there's no such number, then the\
    \ function should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpf5cyyb4c.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpf5cyyb4c.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        x % 2 ==\
    \ 0 && y % 2 == 0 ? x : -1\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12,\
    \ 15)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 12)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer number n and returns\
    \ the sum of its digits. \nFor example, choose_num(123) = 1 + 2 + 3 = 6. \nThe\
    \ function should work for negative numbers as well. \nFor example, choose_num(-123)\
    \ = 1 + 2 + 3 = -6. \nThe function should work for numbers whose absolute value\
    \ is less than 10. \nFor example, choose_num(12) = 1 + 2 = 3. \nThe function should\
    \ work for numbers whose absolute value is greater than 10. \nFor example, choose_num(123)\
    \ = 1 + 2 + 3 + 4 + 5 = 17.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpk9bph5um.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpk9bph5um.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 \n                then return choose_num(x / 2, y)\n \
    \           else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x > y \n\
    \                        then return choose_num(x / 2, y / 2)\n              \
    \      else \n                        return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd integer number that\
    \ is in the range [x, y] inclusive. If \n    there's no such number, then the\
    \ function should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpz_1t2_8o.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpz_1t2_8o.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x -\
    \ 2, y - 1)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| a dscore=2 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfm5upbi8.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfm5upbi8.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y\n        then return x\n    else \n        choose_num(x -\
    \ 2, y - 1)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpp84pd7yz.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpp84pd7yz.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        x % 2 ==\
    \ 0 && y % 2 == 0 ? \n            choose_num(x / 2, y / 2) + x : \n          \
    \  choose_num(x / 2, y) + x\n    end\nend\n</code>\n<|/ a tags=julia,recursion\
    \ |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8vlfnb35.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8vlfnb35.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        if x == y \n            then return x\n        else \n\
    \            if x % 2 == 0\n                then return choose_num(x / 2, y)\n\
    \            else \n                if y % 2 == 0\n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x % 2 ==\
    \ 0\n                        then return choose_num(x / 2, y / 2)\n          \
    \          else \n                        if y % 2 == 0\n                    \
    \        then return choose_num(x / 2, y)\n                        else \n   \
    \                         if x % 2 == 0\n                                then\
    \ return choose_num(x, y / 2)\n                            else \n           \
    \                     if y % 2 == 0\n                                    then\
    \ return choose_num(x, y)\n                                else \n           \
    \                         return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd number that is in\
    \ the range [x, y] inclusive. If there's no such number, then the function should\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpknsestc_.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpknsestc_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't seem\
    \ to work. `choose_num(12, 15)` returns `14` instead of `-1`.\n<|/ c |>\n<| c\
    \ |>\nThanks for pointing that out. I've updated the answer. Now it works.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_ienhery.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_ienhery.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y\n        then return x\n    else \n        choose_num(y\
    \ - 1, x)\n    end\nend\n</code>\n<|/ a tags=julia,recursion,function |>\n<| c\
    \ |>\nThis doesn't work if x is larger than y, and also doesn't work if x is smaller\
    \ than y.\n<|/ c |>\n<| c |>\nI fixed the problem you mentioned\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work if x is larger than y, and also doesn't work if x is\
    \ smaller than y.\n<|/ c |>\n<| c |>\nI fixed the problem you mentioned\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if x is larger than y, and also doesn't work\
    \ if x is smaller than y.\n<|/ c |>\n<| a dscore=4 |>\nThe other answers here\
    \ are great, but I thought I'd add my own solution, since I find it easier to\
    \ read and understand.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdrr7duuf.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdrr7duuf.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer number\
    \ and returns its factorial. \nThe factorial of a number $n$ is defined as:\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxnue4rkv.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxnue4rkv.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y\n        then return x\n    else if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y)\n    else return choose_num(x / 2, y)\nend\n</code>\n\
    <|/ a tags=julia,recursion |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpas5xertx.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpas5xertx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x -\
    \ 2, y - 1)\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes two positive numbers x and y and\
    \ returns the\n    biggest odd integer number that is in the range [x, y] inclusive.\
    \ If \n    there's no such number, then the function should return -1.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwsbgv50w.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwsbgv50w.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        \n    if x == y \n        then return x\n        \n    if x % 2\
    \ == 0 \n        then return choose_num(x / 2, y)\n        \n    return choose_num(x\
    \ / 2, y)\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a positive integer $n$ and returns\
    \ the number of digits\nof $n$. For example, choose_num(12) should return 2, because\
    \ $12$ has two digits.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpk6vvyo6_.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpk6vvyo6_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return -1\n    else if x == y \n        then\
    \ return x\n    else \n        choose_num(x - 2, y - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 12)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer number x and\
    \ returns the sum of its digits. \nFor example, choose_num(12) = 1 + 2 = 3.\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmi6xmrgv.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmi6xmrgv.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 && y % 2 == 0 \n                then return choose_num(x\
    \ / 2, y / 2)\n            else \n                if x % 2 == 0 \n           \
    \         then return choose_num(x / 2, y)\n                else \n          \
    \          if y % 2 == 0 \n                        then return choose_num(x, y\
    \ / 2)\n                    else \n                        return -1\nend\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two positive numbers x and y and returns the\n    biggest\
    \ odd number that is in the range [x, y] inclusive. If there's no such\n    number,\
    \ then the function should return -1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpi4nhd03y.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpi4nhd03y.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        choose_num(y\
    \ - 1, x)\n    end\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n\
    </cell>\n<code language=julia-1.5>\nchoose_num(13, 12)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 13)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 14)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 16)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 17)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 18)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 19)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 20)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 21)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 22)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 23)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 24)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 25)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 26)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 27)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 28)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 29)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 30)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 31)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 32)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 33)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 34)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 35)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 36)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 37)\n</\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprg35ks6h.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmprg35ks6h.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x+1,\
    \ y)\n    end\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis doesn't\
    \ seem to work for me. `choose_num(12, 15)` returns `-1` instead of `14`.\n<|/\
    \ c |>\n<| c |>\nIt works for me on Julia 1.5.1. What version are you using?\n\
    <|/ c |>\n<| c |>\nI'm using 1.5.1. I guess it might be a problem with my version\
    \ of Julia. I'll try it on another computer.\n<|/ c |>\n<| c |>\nIt works on 1.5.1\
    \ too. Maybe it's an issue with my version of Julia. I'll try it on another computer.\n\
    <|/ c |>\n<| c |>\nIt works on 1.5.1 too. Maybe it's an issue with my version\
    \ of Julia. I'll try it on another computer.\n<|/ c |>\n<| a tags=julia,recursion\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqh3emzvg.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpqh3emzvg.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        \n    if x == y \n        then return x\n        \n    if x % 2\
    \ == 0 \n        then return choose_num(x / 2, y)\n        \n    if y % 2 == 0\
    \ \n        then return choose_num(x, y / 2)\n        \n    if x > y \n      \
    \  then return choose_num(y, x)\n        \n    return -1\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer number and returns its factorial. \n\
    The factorial of a number $n$ is defined as:\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyy0oq45l.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyy0oq45l.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        choose_num(y\
    \ - 1, x)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work if x\
    \ is negative and y is positive.\n<|/ c |>\n<| c |>\nIt doesn't work for negative\
    \ numbers, it works for positive numbers. If you try `choose_num(-2, 3)` it will\
    \ return `-1`.\n<|/ c |>\n<| c |>\nYes, it works for positive numbers. But it\
    \ returns -1 for negative numbers. I guess it would be better to return `choose_num(y,\
    \ x)` instead of `-1`.\n<|/ c |>\n<| c |>\nYes, I agree, I've edited the answer\
    \ to reflect that.\n<|/ c |>\n<| c |>\nI guess this should be the accepted answer.\
    \ Thanks!\n<|/ c |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn1dmxd53.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpn1dmxd53.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return -1\n    else if x == y \n        then\
    \ return x\n    else \n        choose_num(x - 2, y - 1)\nend\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwbb3ykkl.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwbb3ykkl.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        else return x\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer $n$ and returns the number of digits in $n$. \nFor example, choose_num(12)\
    \ should return 2.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwb4gv131.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwb4gv131.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        \n    if x == y \n        then return x\n        \n    if x % 2\
    \ == 0 \n        then return choose_num(x / 2, y)\n        \n    return choose_num(x\
    \ / 2, y) + 1\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 12)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in two positive integers x and y and returns the\nsmallest\
    \ even integer number that is in the range [x, y] inclusive. If \nthere's no such\
    \ number, then the function should return -1.\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpohfojw31.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpohfojw31.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 \n                then return choose_num(x / 2, y)\n \
    \           else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x % 2 ==\
    \ y % 2 \n                        then return choose_num(x / 2, y / 2)\n     \
    \               else \n                        if x % 2 == y % 2 \n          \
    \                  then return choose_num(x / 2, y / 2)\n                    \
    \    else \n                            if x % 2 != y % 2 \n                 \
    \               then return choose_num(x / 2, y / 2)\n                       \
    \     else \n                                return -1\nend\n</cell>\n<code language=julia-1.3>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ positive integer $n$ and returns the number of digits in $n$. \nFor example,\
    \ choose_num(12) should return 2.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp09k9hlis.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp09k9hlis.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y\n        then return x\n    else if x % 2 == 0\n    \
    \    then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    end\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two positive numbers\
    \ x and y and returns the\n    biggest odd number that is in the range [x, y]\
    \ inclusive. If there's no such \n    number, then the function should return\
    \ -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpi2nbfu1r.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpi2nbfu1r.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n\
    </cell>\n<code language=julia-1.5>\nchoose_num(13, 12)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 13)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 14)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 16)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 17)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 18)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 19)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 20)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 21)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 22)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 23)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 24)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 25)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 26)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 27)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 28)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 29)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 30)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 31)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 32)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 33)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 34)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 35)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 36)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 37)\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppivq9hm_.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppivq9hm_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 \n                then return choose_num(x / 2, y)\n \
    \           else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x > y \n\
    \                        then return choose_num(x / 2, y)\n                  \
    \  else \n                        return -1\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an\
    \ integer $n$ and returns the number of digits in the number $n$. \nFor example,\
    \ choose_num(12) should return 2.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzpy6ybtw.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzpy6ybtw.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return -1\n    else \n        local z = 0\n\
    \        while z < y do \n            z = z + 2 \n            if z > y \n    \
    \            then return -1\n            end\n        end\n        return z\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes two positive\
    \ numbers x and y and returns the\n    biggest odd integer number that is in the\
    \ range [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxz9f7o8v.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxz9f7o8v.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x -\
    \ 2, y - 1)\nend\n</cell>\n<code language=julia-0.6>\nchoose_num(12, 15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer x and returns the number\
    \ of times it appears in the list [1, 2, 3, ..., x].\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8es9bmnk.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8es9bmnk.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\nIt works fine for me.\
    \ Can you please elaborate on what is not working?\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\nIt works for me. Can you\
    \ please elaborate on what is not working?\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for `choose_num(12, 15)`.\n<|/ c |>\n<| a tags=julia,recursion |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpywmgpbf5.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpywmgpbf5.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y\n        then return x\n    else \n        choose_num(x -\
    \ 2, y - 1)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ positive numbers x and y and returns the biggest even integer number that is\
    \ in the range [x, y] inclusive. If there's no such number, then the function\
    \ should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps23q5gaa.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmps23q5gaa.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return choose_num(y, x)\n    else \n       \
    \ even = choose_num(x div 2, y)\n        if even > -1\n            then return\
    \ even\n        else \n            odd = choose_num(x div 2, y)\n            if\
    \ odd > -1\n                then return odd\n            else \n             \
    \   return -1\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n\
    <text>\nProblem 4\nWrite a function that takes a positive integer number and returns\
    \ its \n    factorial number.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9na9dywp.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9na9dywp.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 && x /= 2 || y /= 2\n      \
    \  then return x\n    else return -1\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd number that is in\
    \ the range [x, y] inclusive. If there's no such \n    number, then the function\
    \ should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcbj80vqa.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpcbj80vqa.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return choose_num(y, x)\n    else return x\n\
    end\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer number and returns\
    \ its factorial. \nThe factorial of a number $n$ is defined as the product of\
    \ all the integers \nsmaller than $n$. For example, $6! = 720$. \nThe factorial\
    \ of a negative number is not defined, so you should return $-1$.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgja6f5u9.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpgja6f5u9.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return choose_num(y, x)\n    else \n       \
    \ x % 2 == 0 && y % 2 == 0 && x /= 2 || y /= 2\n        then return choose_num(x,\
    \ y)\n    else \n        return -1\nend\n</cell>\n<code language=julia-1.4>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer number and returns its factorial. \nFor example, factorial(5)\
    \ = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 3628800.\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzkvavw4j.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzkvavw4j.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        choose_num(x, y)\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=julia,recursion |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9br_2vqk.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9br_2vqk.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        if x == y \n            then return x\n        else \n\
    \            if x % 2 == 0 \n                then return choose_num(x / 2, y)\n\
    \            else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x % 2 ==\
    \ y % 2 \n                        then return x\n                    else \n \
    \                       if x == y \n                            then return x\n\
    \                        else \n                            if x > y \n      \
    \                          then return choose_num(y, x)\n                    \
    \        else \n                                if x < y \n                  \
    \                  then return choose_num(y, x)\n                            \
    \    else \n                                    return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two positive numbers x and y and returns the\n    biggest\
    \ odd integer number that is in the range [x, y] inclusive. If \n    there's no\
    \ such number, then the function should return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpduk9f2rl.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpduk9f2rl.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        else return x\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of integers in the range [x, y] inclusive that satisfy the condition\
    \ $x \\leq y \\leq 10^9$. \nFor example, choose_num(12, 15) should return 3.\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0mhxmcbk.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0mhxmcbk.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y)\n    else \n        then return choose_num(x, y\
    \ / 2)\nend\n</code>\n<|/ a |>\n<| a tags=julia,recursion |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqjfxkjr1.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpqjfxkjr1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 ? x : -1\nend\n</cell>\n<code\
    \ language=julia-1.3>\nchoose_num(12, 15)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 12)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd integer number that\
    \ is in the range [x, y] inclusive. If \n    there's no such number, then the\
    \ function should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj8nr60hj.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpj8nr60hj.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        \n    if x == y \n        then return x\n        \n    if x % 2\
    \ == 0 && y % 2 == 0 \n        then return choose_num(x / 2, y / 2)\n        \n\
    \    if x % 2 == 0 && y % 2 != 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if x % 2 != 0 && y % 2 == 0 \n        then return choose_num(x,\
    \ y / 2)\n        \n    if x % 2 != 0 && y % 2 != 0 \n        then return choose_num(x,\
    \ y)\n        \n    return -1\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ n and returns its factorial. \nFor example, factorial(5) = 5 * 4 * 3 * 2 * 1\
    \ = 120.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdya_5p_p.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdya_5p_p.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 \n                then return choose_num(x / 2, y)\n \
    \           else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x % 2 ==\
    \ 0 \n                        then return choose_num(x / 2, y)\n             \
    \       else \n                        if y % 2 == 0 \n                      \
    \      then return choose_num(x, y / 2)\n                        else \n     \
    \                       if x % 2 == 1 \n                                then return\
    \ choose_num(x / 2, y)\n                            else \n                  \
    \              if y % 2 == 1 \n                                    then return\
    \ choose_num(x, y / 2)\n                                else \n              \
    \                      return -1\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ number x and returns the sum of its digits. \nFor example, choose_num(12) =\
    \ 1 + 2 = 3 and choose_num(123) = 1 + 2 + 3 = 6. \nThe function should work for\
    \ negative numbers as well.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7xz76eg6.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7xz76eg6.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else if x % 2 == 0 && y % 2 ==\
    \ 0 \n        then return choose_num(x / 2, y / 2)\n    else \n        choose_num(x\
    \ / 2, y)\n    end\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer number\
    \ and returns its factorial. \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7\
    \ 2 \xD7 1\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxudf4eb1.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxudf4eb1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        else return x\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array of numbers and returns the number of \ntimes\
    \ each number appears in the array. For example, if the array is [1, 1, \n2, 2,\
    \ 3, 3], then the function should return [1, 1, 2, 2, 3, 3].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpoqjk0vdi.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpoqjk0vdi.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 && choose_num(x / 2, y / 2)\
    \ * choose_num(x / 2, y / 2) >= x && choose_num(x / 2, y / 2) * choose_num(x /\
    \ 2, y / 2) <= y \n            ? choose_num(x / 2, y / 2) * choose_num(x / 2,\
    \ y / 2)\n            : -1\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer\
    \ $n$ and returns the number of digits in $n$. For example, choose_num(12) should\
    \ return 3.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj583h8tm.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpj583h8tm.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 && choose_num(x / 2, y / 2)\
    \ < x && choose_num(x / 2, y / 2) < y\n            ? choose_num(x / 2, y / 2)\n\
    \            : -1\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer number\
    \ x and returns the number of \ndigits in the number x.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpz8r5gz23.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpz8r5gz23.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        if x % 2 == 0 \n            then return x\n        else\
    \ \n            if y % 2 == 0 \n                then return y\n            else\
    \ \n                if x % 2 == y % 2 \n                    then return x\n  \
    \              else \n                    if x % 2 == y % 2 \n               \
    \         then return y\n                    else \n                        if\
    \ x % 2 == 0 \n                            then return x\n                   \
    \     else \n                            if y % 2 == 0 \n                    \
    \            then return y\n                            else \n              \
    \                  return -1\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. Try `choose_num(12, 15)`\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try `choose_num(12, 15)`\n<|/ c |>\n<| c |>\nIt doesn't work. Try `choose_num(12,\
    \ 15)`\n<|/ c |>\n<| c |>\nIt does work. Try `choose_num(12, 15)`\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try `choose_num(12, 15)`\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn7rotecw.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpn7rotecw.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        \n    if x == y \n        then return x\n        \n    if x % 2\
    \ == 0 \n        then return choose_num(x / 2, y)\n        \n    if y % 2 == 0\
    \ \n        then return choose_num(x, y / 2)\n        \n    if x % 2 == y % 2\
    \ \n        then return choose_num(x / 2, y / 2)\n        \n    if x % 2 == y\
    \ % 2 \n        then return choose_num(x, y / 2)\n        \n    if x % 2 != y\
    \ % 2 \n        then return choose_num(x / 2, y / 2)\n        \n    return -1\n\
    end\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 12)\n</cell>\n<text>\nProblem 2\nWrite a function that takes an\
    \ array of integers and returns the sum of the \n    integers in the array. For\
    \ example:\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjsstlpdp.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjsstlpdp.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 \n                then return choose_num(x / 2, y)\n \
    \           else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x % 2 ==\
    \ y % 2 \n                        then return choose_num(x / 2, y / 2)\n     \
    \               else \n                        if x % 2 == y % 2 \n          \
    \                  then return choose_num(x / 2, y / 2)\n                    \
    \    else \n                            if x % 2 == 0 \n                     \
    \           then return choose_num(x / 2, y)\n                            else\
    \ \n                                if y % 2 == 0 \n                         \
    \           then return choose_num(x, y / 2)\n                               \
    \ else \n                                    return -1\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer and returns the sum of its digits. \nFor example, choose_num(12) = 1\
    \ + 2 = 3.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7a51ysz1.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7a51ysz1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 \n            ? if x < y \n\
    \                then return x\n                else return y\n            : x\
    \ % 2 == 0 && y % 2 == 1 \n                ? if x < y \n                    then\
    \ return y\n                    else return x\n                : x % 2 == 1 &&\
    \ y % 2 == 0 \n                    ? if x < y \n                        then return\
    \ x\n                        else return y\n                    : x % 2 == 1 &&\
    \ y % 2 == 1 \n                        ? if x < y \n                         \
    \   then return y\n                            else return x\n               \
    \         : -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ $n$ and returns the number of digits in $n$. \nFor example, choose_num(12) should\
    \ return 2.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjv0cks8y.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjv0cks8y.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else if x % 2 == 0 && y % 2 ==\
    \ 0\n        then return choose_num(x / 2, y / 2)\n    else if x % 2 == 0 && y\
    \ % 2 != 0\n        then return choose_num(x / 2, y)\n    else if x % 2 != 0 &&\
    \ y % 2 == 0\n        then return choose_num(x, y / 2)\n    else if x % 2 != 0\
    \ && y % 2 != 0\n        then return choose_num(x, y)\n    else return -1\nend\n\
    </cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes two positive numbers x and y and returns the\n\
    \    biggest odd number that is in the range [x, y] inclusive. If there's no such\
    \ \n    number, then the function should return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3pr_2bl3.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3pr_2bl3.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else if x % 2 == 0 && y % 2 ==\
    \ 0\n        then return choose_num(x / 2, y / 2)\n    else \n        choose_num(x\
    \ / 2, y)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,recursion\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8l6lntsx.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8l6lntsx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        x % 2 ==\
    \ 0 && y % 2 == 0 ? x : choose_num(x / 2, y / 2)\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia,recursion |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdrcevb3u.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdrcevb3u.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y\n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpir_o98dt.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpir_o98dt.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else if x % 2 == 0 \n       \
    \ then return choose_num(x / 2, y)\n    else \n        return choose_num(x / 2,\
    \ y)\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns an array of numbers from 1 to n where\
    \ each number \nis divisible by k. For example, if k is 3, then the function should\
    \ return \n[1, 2, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpasswq2ee.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpasswq2ee.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y\n        then return x\n    else if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y)\n    else return choose_num(x / 2, y)\nend\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer x and returns the number of digits in x. \n\
    For example, choose_num(12) should return 2.\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprxwm9wqg.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmprxwm9wqg.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpinpjb4nk.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpinpjb4nk.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        x % 2 ==\
    \ 0 ? x : choose_num(x / 2, y)\n    end\nend\n</code>\n<|/ a tags=julia,recursion\
    \ |>\n<| a dscore=1 |>\nI came up with a solution that is more efficient than\
    \ others posted here and I thought I'd share it here for future reference.\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpuid6myed.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpuid6myed.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        choose_num(x, y)\nend\n</cell>\n<code language=julia-0.6>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer number and returns its factorial. \n    For example, factorial(5) =\
    \ 5 * 4 * 3 * 2 * 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpty71flz4.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpty71flz4.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        \n    if x == y \n        then return x\n        \n    if x % 2\
    \ == 0 \n        then return choose_num(x / 2, y)\n        \n    if y % 2 == 0\
    \ \n        then return choose_num(x, y / 2)\n        \n    if x % 2 == y % 2\
    \ \n        then return x\n        \n    if x % 2 == y % 2 \n        then return\
    \ y\n        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y\
    \ / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x, y\
    \ / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2,\
    \ y / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x,\
    \ y / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x /\
    \ 2, y / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x,\
    \ y / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x /\
    \ 2, y / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x,\
    \ y / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x /\
    \ 2, y / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x,\
    \ y / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x /\
    \ 2, y / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x,\
    \ y / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x /\
    \ 2, y / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x,\
    \ y / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x /\
    \ 2, y / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x,\
    \ y / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x /\
    \ 2, y / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x,\
    \ y / 2)\n        \n    if x % 2 == y % 2 \n        then return choose_num(x /\
    \ 2, y / 2)\n        \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzyg2nvz4.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzyg2nvz4.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        if x % 2 == 0 \n            then return x\n        else \n\
    \            if y % 2 == 0 \n                then return y\n            else \n\
    \                if x % 2 == y % 2 \n                    then return x\n     \
    \           else \n                    if x % 2 != y % 2 \n                  \
    \      then return -1\n                    else \n                        if x\
    \ == y \n                            then return x\n                        else\
    \ \n                            if x > y \n                                then\
    \ return -1\n                            else \n                             \
    \   return -1\n</code>\n<|/ a tags=julia,if-statement |>\n<| c |>\nThis does not\
    \ answer the question. `choose_num(12, 15)` should return `14` not `-1`.\n<|/\
    \ c |>\n<| c |>\nI guess I misunderstood the question. I'll edit my answer accordingly.\n\
    <|/ c |>\n<| c |>\nI edited my answer. Now it does exactly what the OP wanted.\n\
    <|/ c |>\n<| c |>\nI edited my answer again. Now it does exactly what the OP wanted.\n\
    <|/ c |>\n<| c |>\nI edited my answer again. Now it does exactly what the OP wanted.\n\
    <|/ c |>\n<| a tags=julia,if-statement |>\nThis can be done with if-else statements:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzxwz_wp1.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzxwz_wp1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return -1\n    else if x == y\n        then\
    \ return x\n    else \n        choose_num(x - 2, y - 2)\nend\n</code>\n<|/ a tags=julia,recursion,function\
    \ |>\n<| c |>\nThis doesn't work if x is negative and y is positive.\n<|/ c |>\n\
    <| c |>\nIt works if x is negative and y is positive. Try it yourself.\n<|/ c\
    \ |>\n<| c |>\nI did. `choose_num(-2, 2)` returns `-1` instead of `2`.\n<|/ c\
    \ |>\n<| c |>\nI see what you mean. I've updated my answer.\n<|/ c |>\n<| c |>\n\
    I see what you mean. I've updated my answer.\n<|/ c |>\n<| a dscore=2 |>\nThe\
    \ other answers here are all good, but I thought I'd add my own solution:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp89tsj6t6.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp89tsj6t6.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 ? x : -1\nend\n</code>\n<|/\
    \ a tags=julia |>\n<| c |>\nThis doesn't work if x is negative and y is positive.\n\
    <|/ c |>\n<| c |>\nI added a version that works with negative numbers as well.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if x is negative and y is positive.\n<|/\
    \ c |>\n<| c |>\nI added a version that works with negative numbers as well.\n\
    <|/ c |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqyk76jta.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpqyk76jta.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        if x % 2 == 0 && y % 2 == 0 \n            then return\
    \ x\n        else return -1\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a\
    \ dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6absiwkj.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6absiwkj.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 && x /= 2 || y /= 2\n      \
    \  then return x\n    else return -1\nend\n</cell>\n<code language=julia-1.3>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd integer number that\
    \ is in the range [x, y] inclusive. If \n    there's no such number, then the\
    \ function should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppav9m76o.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppav9m76o.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return choose_num(y, x)\n    else \n       \
    \ choose_num(x - y, x + y)\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes two positive numbers\
    \ x and y and returns the biggest odd number that is in the range [x, y] inclusive.\
    \ If there's no such number, then the function should return -1.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppfucddwp.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppfucddwp.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return choose_num(y, x)\n    else \n       \
    \ choose_num(x, y)\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpou5gh1l6.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpou5gh1l6.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 ? x : -1\nend\n</cell>\n<code\
    \ language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(13, 12)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer number and returns its \n    factorial. Factorial of a number\
    \ is defined as the product of all the \n    numbers from 1 to that number. For\
    \ example, factorial(5) = \n    5*4*3*2*1 = 120.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphqcjheqp.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphqcjheqp.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two positive numbers\
    \ x and y and returns the \n    biggest odd number that is in the range [x, y]\
    \ inclusive. If there's no such \n    number, then the function should return\
    \ -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4o81v13v.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4o81v13v.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y\n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/27825859)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to find\
    \ the biggest even number in a range. He also asked how to do it in Julia. He\
    \ also asked how to do it in Python. He also asked how to do it in R. He also\
    \ asked how to do it in C. He also asked how to do it in C++. He also asked how\
    \ to do it in C#. He also asked how to do it in Java. He also asked how to do\
    \ it in Haskell. He also asked how to do it in Swift. He also asked how to do\
    \ it in C. He also asked how to do it in C#. He also asked how to do it in Julia.\
    \ He also asked how to do it in Python. He also asked how to do it in R. He also\
    \ asked how to do it in C. He also asked how to do it in C++. He also asked how\
    \ to do it in C#. He also asked how to do it in Java. He also asked how to do\
    \ it in Haskell. He also asked how to do it in Swift. He also asked how to do\
    \ it in C. He also asked how to do it in C#. He also asked how to do it in Julia.\
    \ He also asked how to do it in Python. He also asked how to do it in R. He also\
    \ asked how to do it in C. He also asked how to do it in C++. He also asked how\
    \ to do it in C#. He also asked how to do it in Java. He also asked how to do\
    \ it in Haskell. He also asked how to do it in Swift. He also asked how to do\
    \ it in C. He also asked how to do it in C#. He also asked how to do it in Julia.\
    \ He also asked how to do it in Python. He also asked how to do it in R. He also\
    \ asked how to do \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwwcjvfx5.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwwcjvfx5.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 \n                then return choose_num(x / 2, y)\n \
    \           else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    if x % 2 ==\
    \ 0 \n                        then return choose_num(x / 2, y)\n             \
    \       else \n                        if y % 2 == 0 \n                      \
    \      then return choose_num(x, y / 2)\n                        else \n     \
    \                       if x % 2 == 1 \n                                then return\
    \ choose_num(x / 2, y)\n                            else \n                  \
    \              if y % 2 == 1 \n                                    then return\
    \ choose_num(x, y / 2)\n                                else \n              \
    \                      return -1\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer $n$\
    \ and returns the number of digits\nof $n$ that are less than $10$. For example,\
    \ choose_num(12) should return 2.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6y5fflmk.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6y5fflmk.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else \n        choose_num(x - 1, y)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ positive integer number x and returns the sum of its digits. \nFor example,\
    \ choose_num(12) = 1 + 2 + 3 = 6. \nThe function should work for negative numbers\
    \ as well.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1kktrlrr.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1kktrlrr.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x -\
    \ 2, y + 1)\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1_kj0cec.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1_kj0cec.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n        then return -1\n\
    \    else if x < y \n        then return -1\n    else if x == y \n        then\
    \ return x\n    else if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \    else \n        then return choose_num(x, y / 2)\nend\n</code>\n<|/ a tags=julia,recursion\
    \ |>\n<| a tags=julia,recursion |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpb53wa3w1.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpb53wa3w1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        else return x\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer $n$ and returns the number of digits\
    \ in $n$. \nFor example, choose_num(12) should return 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpd9ojjd4s.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpd9ojjd4s.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a positive integer x and returns the number of \n    digits in x. For example,\
    \ choose_num(123) = 2.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy2llh_p6.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpy2llh_p6.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x +\
    \ 1, y)\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,recursion |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1k01gur2.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1k01gur2.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else if x == y \n        then return x\n    else \n        choose_num(y\
    \ - 1, x)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis doesn't\
    \ seem to work. `choose_num(12, 15)` returns `14` instead of `-1`.\n<|/ c |>\n\
    <| c |>\nAh, I see what you mean. I'll edit my answer in a bit.\n<|/ c |>\n<|\
    \ c |>\nI edited my answer with a new function which should work. Let me know\
    \ if that works.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `choose_num(12,\
    \ 15)` returns `14` instead of `-1`.\n<|/ c |>\n<| c |>\nAh, I see what you mean.\
    \ I'll edit my answer in a bit.\n<|/ c |>\n<| a tags=julia,recursion |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbzzs_kvj.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbzzs_kvj.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n    else \n        x % 2 == 0 && y % 2 == 0 && x /= 2 && y /= 2\n      \
    \      ? choose_num(x / 2, y / 2)\n            : -1\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer number and returns its \n    factorial. For example, factorial(5)\
    \ = 5 * 4 * 3 * 2 * 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsjm4v2qf.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsjm4v2qf.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return choose_num(y,\
    \ x)\n        \n    if x == y \n        then return x\n        \n    if x % 2\
    \ == 0 \n        then return choose_num(x / 2, y)\n        \n    if y % 2 == 0\
    \ \n        then return choose_num(x, y / 2)\n        \n    return -1\nend\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that takes two positive numbers x and y and returns the biggest odd\
    \ number that is in the range [x, y] inclusive. If there's no such number, then\
    \ the function should return -1.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpueafz3t0.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpueafz3t0.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else \n        if x == y \n            then return x\n        else \n   \
    \         if x % 2 == 0 \n                then return choose_num(x / 2, y)\n \
    \           else \n                if y % 2 == 0 \n                    then return\
    \ choose_num(x, y / 2)\n                else \n                    let z = x +\
    \ y\n                    if z % 2 == 0 \n                        then return choose_num(x\
    \ / 2, y / 2)\n                    else \n                        return z\nend\n\
    </cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes two positive numbers x and y and returns the\n\
    \    biggest odd number that is in the range [x, y] inclusive. If there's no such\
    \ \n    number, then the function should return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpoch6d5k6.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpoch6d5k6.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n        then return -1\n\
    \    else if x == y \n        then return x\n    else \n        choose_num(x -\
    \ 2, y - 1)\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,recursion |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps19fnayv.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmps19fnayv.jl:11\n"
  exit_code: 1
  status: Exception
