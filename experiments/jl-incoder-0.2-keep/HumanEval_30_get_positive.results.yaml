name: HumanEval_30_get_positive
language: julia
results:
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpov4e9gnv.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpov4e9gnv.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppx596b0e.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppx596b0e.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7dny1kbw.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7dny1kbw.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppt3u6zx9.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppt3u6zx9.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in the\
    \ list.\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    \nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbkjfwqd5.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbkjfwqd5.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns only negative numbers in the\
    \ list.\n>>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, 6]\n>>> get_negative([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -3, 9, 123, 1]\n</text>\n\
    using Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqjuzsfgj.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqjuzsfgj.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjqg1c90g.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjqg1c90g.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfttn5a4_.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfttn5a4_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppwcbyk_8.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppwcbyk_8.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr2hbuiif.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr2hbuiif.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7a_0gv4s.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7a_0gv4s.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1dcrqvju.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1dcrqvju.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd0ex32xv.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd0ex32xv.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8_urubf0.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8_urubf0.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdbkmkl7v.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdbkmkl7v.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp58ny8v7q.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp58ny8v7q.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbyevp9s7.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbyevp9s7.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplmv96ac8.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplmv96ac8.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7tha6wia.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7tha6wia.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2s_ijtxv.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2s_ijtxv.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnafgvbzb.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnafgvbzb.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp69ok5lxl.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp69ok5lxl.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8tmujf4x.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8tmujf4x.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprbiehefd.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprbiehefd.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0t8fnwub.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0t8fnwub.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn7vw42o_.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn7vw42o_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpydyazizo.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpydyazizo.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqe3ieced.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqe3ieced.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0pn3pzxi.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0pn3pzxi.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_q1b_hgg.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_q1b_hgg.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpytgsedt5.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpytgsedt5.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9aqscweo.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9aqscweo.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <text>\nget_negative\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpso66zmrh.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpso66zmrh.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgscp8zvz.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgscp8zvz.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp6r2qm95.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp6r2qm95.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns only negative numbers in the\
    \ list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -6, 6]\n    >>>\
    \ get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, 3, 9, 123,\
    \ 1]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj_a0sxdt.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj_a0sxdt.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzcyw_x02.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzcyw_x02.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvc_bnpvi.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvc_bnpvi.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"Return only negative numbers in the list.\n \
    \   >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n    >>> get_negative([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, -3, -3, -9, -10, -3, -3, -9, -10,\
    \ -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3,\
    \ -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10,\
    \ -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3,\
    \ -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10,\
    \ -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3,\
    \ -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10,\
    \ -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3,\
    \ -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10,\
    \ -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3,\
    \ -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10,\
    \ -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3,\
    \ -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10,\
    \ -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3,\
    \ -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10,\
    \ -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3,\
    \ -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, -9, -10, -3, -3, \nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2z_ih47j.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2z_ih47j.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_od2wnrb.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_od2wnrb.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nget_positive([-1, 2, -4, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of positive numbers in a list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp99uokg7y.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp99uokg7y.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbqv_emq3.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbqv_emq3.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg9rny8o2.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg9rny8o2.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbb6jgtrz.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbb6jgtrz.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_llr8a6x.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_llr8a6x.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_fjufol2.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_fjufol2.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr4yajfmk.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr4yajfmk.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp74ggu8_o.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp74ggu8_o.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe_ezn1ih.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe_ezn1ih.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp035hns9.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp035hns9.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpguma6qj8.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpguma6qj8.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnbyy3t0f.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnbyy3t0f.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2cwh7rxu.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2cwh7rxu.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd1ve8mlw.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd1ve8mlw.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x >= 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvg4_2lo3.jl:17\n  Expression: candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n   Evaluated:\
    \ [5, 3, 2, 3, 3, 9, 0, 123, 1] == [5, 3, 2, 3, 3, 9, 123, 1]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvg4_2lo3.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvg4_2lo3.jl:15\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     1      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvg4_2lo3.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpodoz4c0w.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpodoz4c0w.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzyw2os3j.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzyw2os3j.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb4jpt_dp.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb4jpt_dp.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwswvr0bs.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwswvr0bs.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1nnct47o.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1nnct47o.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv_q2e84x.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv_q2e84x.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpydh9hmei.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpydh9hmei.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj8jxs9vx.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj8jxs9vx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuykcv_uw.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuykcv_uw.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy1q9hzc4.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy1q9hzc4.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive numbers\
    \ in a list.\n    >>> get_positive_count([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n\
    \    3\n    >>> get_positive_count([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n \
    \   3\n    >>> get_positive_count([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   6\n    >>> get_positive_count([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwz0l9_r4.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwz0l9_r4.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpapqh5ont.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpapqh5ont.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpge9upx85.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpge9upx85.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpler8m9fd.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpler8m9fd.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf4cde0t3.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf4cde0t3.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpklcotvik.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpklcotvik.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptshuh9y_.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptshuh9y_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplw75wd0b.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplw75wd0b.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp57bj7m9f.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp57bj7m9f.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzppo4tv7.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzppo4tv7.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp02ih4rb7.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp02ih4rb7.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in the\
    \ list.\n    >>> sum([1, 2, 3, 4])\n    10\n    >>> sum([-1, 2, -4, 5, 6])\n \
    \   21\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    10\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpemqv8eft.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpemqv8eft.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpejpkjdxm.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpejpkjdxm.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6y24wp0l.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6y24wp0l.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_w6ky3_5.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_w6ky3_5.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcx3qw7nr.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcx3qw7nr.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptjyzxyus.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptjyzxyus.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoo0ig8lw.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoo0ig8lw.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3zierjhx.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3zierjhx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7mbuosd7.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7mbuosd7.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7j39c760.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7j39c760.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq8o73q9e.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq8o73q9e.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4uc2rx7y.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4uc2rx7y.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkzbu1f49.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkzbu1f49.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmporgvr1ty.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmporgvr1ty.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl9pmhtur.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl9pmhtur.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplsnb2yh2.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplsnb2yh2.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzvv473_3.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzvv473_3.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphzjqb719.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphzjqb719.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqikdg0wb.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqikdg0wb.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv7ksmbjv.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv7ksmbjv.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_6hvf141.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_6hvf141.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqbysidmd.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqbysidmd.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvl9_k0t6.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvl9_k0t6.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph09d2cgo.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph09d2cgo.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfqnkxwb6.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfqnkxwb6.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp21yabmkd.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp21yabmkd.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgip3h8zo.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgip3h8zo.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplot41d86.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplot41d86.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive numbers\
    \ in a list.\n>>> get_positive_count([-2, -4, -5, -6, -7, -8])\n4\n>>> get_positive_count([-2,\
    \ -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8])\n8\n>>> get_positive_count([-2,\
    \ -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8,\
    \ -1, -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6,\
    \ -7, -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -4,\
    \ -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8, -1,\
    \ -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7,\
    \ -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -4, -5,\
    \ -6, -7, -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8, -1, -2,\
    \ -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8,\
    \ -1, -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6,\
    \ -7, -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -4,\
    \ -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8, -1,\
    \ -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7,\
    \ -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -4, -5, -6, -7, -8, -1, -2, -\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9iocijb2.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9iocijb2.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjdk9gefm.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjdk9gefm.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkqe3g2lk.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkqe3g2lk.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptwl6jqlo.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptwl6jqlo.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfhax46qu.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfhax46qu.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5si3r0t0.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5si3r0t0.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk03xf9jy.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk03xf9jy.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <text>\nExercise 10\nWrite a function that returns the sum of the numbers in the\
    \ list.\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    \nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpephrdjbu.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpephrdjbu.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc945p1__.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc945p1__.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv5yr59mq.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv5yr59mq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x >= 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7b887eh7.jl:17\n  Expression: candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n   Evaluated:\
    \ [5, 3, 2, 3, 3, 9, 0, 123, 1] == [5, 3, 2, 3, 3, 9, 123, 1]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp7b887eh7.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7b887eh7.jl:15\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     1      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7b887eh7.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7lfv9f26.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7lfv9f26.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9txluyo5.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9txluyo5.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr664co8q.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr664co8q.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj3cu9u2j.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj3cu9u2j.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphw3mw6o1.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphw3mw6o1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpquisraqx.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpquisraqx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo41j3c62.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo41j3c62.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe_dep_aa.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe_dep_aa.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of numbers and returns\
    \ the list with negative numbers removed.\nFor example, get_negative([-1, 2, -4,\
    \ 5, 6]) should return [2, 4, 5, 6].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm8c29e6f.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm8c29e6f.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3knpozuq.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3knpozuq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb8hxf7y2.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb8hxf7y2.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp38lzec0_.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp38lzec0_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph5i4ph51.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph5i4ph51.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiy7kvavi.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiy7kvavi.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvw26154t.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvw26154t.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ojx50pj.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0ojx50pj.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_6xt5etu.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_6xt5etu.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkjw6j7ce.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkjw6j7ce.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwpnpgjpj.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwpnpgjpj.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq1au0rti.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq1au0rti.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nget_positive([-1, 2, -4, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2: Write a function that returns only negative numbers in the list.\n    >>>\
    \ get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n    >>> get_negative([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -9, -10, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -\n\
    using Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnab6yge0.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnab6yge0.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyfelc_nd.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyfelc_nd.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt2qxatoy.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt2qxatoy.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpooejcumu.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpooejcumu.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcqss717k.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcqss717k.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4kz1n3ha.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4kz1n3ha.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprxvsmrnf.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprxvsmrnf.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x >= 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwgw5geus.jl:17\n  Expression: candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n   Evaluated:\
    \ [5, 3, 2, 3, 3, 9, 0, 123, 1] == [5, 3, 2, 3, 3, 9, 123, 1]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwgw5geus.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwgw5geus.jl:15\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     1      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwgw5geus.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpngm8ezo1.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpngm8ezo1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq72551m9.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq72551m9.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7mbuzqnf.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7mbuzqnf.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwd36pq25.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwd36pq25.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiusuf69f.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiusuf69f.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpge2sxa65.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpge2sxa65.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpny6k1db5.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpny6k1db5.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwn__u8_2.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwn__u8_2.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiv0tj8cq.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiv0tj8cq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp466wqw6j.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp466wqw6j.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa3w6addq.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa3w6addq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqckmpane.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqckmpane.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe97b5t56.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe97b5t56.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive numbers\
    \ in a list.\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp872j0kkc.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp872j0kkc.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz1retdzr.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz1retdzr.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuht8pg1m.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuht8pg1m.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz3bxfg3_.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz3bxfg3_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5,\
    \ 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\
    \ == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  stdout: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "\"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
    \ \n    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2minl8qn.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2minl8qn.jl:11\n"
  exit_code: 1
  status: Exception
