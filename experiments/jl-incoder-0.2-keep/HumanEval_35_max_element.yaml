name: HumanEval_35_max_element
language: julia
prompt: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n\
  \    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\
  \    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
  \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\n\
  end\n"
completions: ["    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = max_element(l)\n\
    \    if maximum == -1\n        error(\"max_element failed\")\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements in a list.\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10, -5, -6, -7, -8])\n-77\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10, -5, -6, -7, -8, 9])\n-77\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10, -5, -6, -7, -8, 9, 10])\n-77\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10, -5, -6, -7, -8, 9, 10, 11])\n-77\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10, -5, -6, -7, -8, 9, 10, 11, 12])\n-77\n>>> sum([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10, -5, -6, -7, -8, 9, 10, 11, 12, 13])\n-77\n>>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14])\n-77\n\
    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -5, -6, -7, -8, 9, 10, 11, 12,\
    \ 13, 14, 15])\n-77\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -5, -6, -7,\
    \ -8, 9, 10, 11, 12, 13, 14, 15, 16])\n-77\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n-77\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18])\n-77\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -5, -6, -7,\
    \ -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n-77\n>>> sum([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    largest = l[1]\n    for i in 2:length(l)\n   \
    \     if l[i] > largest \n            largest = l[i]\n        end\n    end\n \
    \   return largest\nend\n</cell>\n<code language=julia-1.4>", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l)\
    \ \n        if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum =\
    \ l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum = x\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n\
    \    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n \
    \           maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <text>\nExercise 3: Write a function that returns the minimum element in the list.\n\
    \    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    if length(l) == 0 \n    \
    \    throw(ArgumentError(\"List is empty\"))\n    end\n    maximum = l[1]\n  \
    \  for i in 2:length(l) \n        if l[i] > maximum \n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if length(l) == 0 \n        return 0 \n    else \n        return maximum(l)\
    \ \nend\n</cell>\n<code language=julia-1.5>", "    if length(l) == 0 \n      \
    \  throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum = l[1]\n \
    \   for i in 2:length(l) \n        if l[i] > maximum \n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Cannot find max element of empty list\"))\n    end\n    maximum = l[1]\n    for\
    \ i in 2:length(l) \n        if l[i] > maximum \n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise 7\n\
    Write a function that returns the sum of the elements in a list.\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n  \
    \      if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.4>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the minimum element in the list.\n    >>> min_element([1, 2, 3])\n\
    \    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \"\"\"", "    \n    maximum = l[1]\n    for i in l[2:end]\n        if i >\
    \ maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<text>\nmax_element()", "    maximum = l[1]\n    for\
    \ i in l[2:end]\n        if i > maximum\n            maximum = i\n        end\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    maximum = l[1]\n    for x in l[2:end]\n        if x > maximum\n         \
    \   maximum = x\n        end\n    end\n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    maximum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Return minimum element in the list.\n\
    \    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = l[1]\n    for x\
    \ in l[2:end]\n        if x > maximum\n            maximum = x\n        end\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3.2\nWrite a function that returns the minimum element in the list.\n    >>>\
    \ min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27859524)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to find\
    \ the maximum element in a list. He also asked how to do it efficiently. He also\
    \ asked how to do it in a functional programming style. He also asked how to do\
    \ it in a \"functional style\" without using loops. He also asked how to do it\
    \ in a \"functional style\" without using loops. He also asked how to do it in\
    \ a \"functional style\" without using loops. He also asked how to do it in a\
    \ \"functional style\" without using loops. He also asked how to do it in a \"\
    functional style\" without using loops. He also asked how to do it in a \"functional\
    \ style\" without using loops. He also asked how to do it in a \"functional style\"\
    \ without using loops. He also asked how to do it in a \"functional style\" without\
    \ using loops. He also asked how to do it in a \"functional style\" without using\
    \ loops. He also asked how to do it in a \"functional style\" without using loops.\
    \ He also asked how to do it in a \"functional style\" without using loops. He\
    \ also asked how to do it in a \"functional style\" without using loops. He also\
    \ asked how to do it in a \"functional style\" without using loops. He also asked\
    \ how to do it in a \"functional style\" without using loops. He also asked how\
    \ to do it in a \"functional style\" without using loops. He also asked how to\
    \ do it in a \"functional style\" without using loops. He also asked how to do\
    \ it in a \"functional style\" without using loops. He also asked how to do it\
    \ in a \"functional style\" without using loops. He also asked how to do it in\
    \ a \"functional style\" without using loops. He also asked how to do it in a\
    \ \"functional style\" without using loops. He also asked how to do it in a \"\
    functional style\" without using loops. He also asked how to do it in a ", " \
    \   maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n          \
    \  maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in the list that satisfy the condition $x>0$. For example, if the list is [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], the function should return 6.", "    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    maximum\nend\n</cell>\n<text>\nExercise 2: Write\
    \ a function that returns the sum of the elements in the list.\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([10, 20, 30])\n    60\n    \"\"\"", "    maximum\
    \ = l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum =\
    \ x\n        end\n    end\n    return maximum\nend", "    if length(l) == 0 \n\
    \        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum = l[1]\n \
    \   for x in l[2:end]\n        if x > maximum\n            maximum = x\n     \
    \   end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2,\
    \ 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n\
    \    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1,\
    \ 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3,\
    \ 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n\
    \    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1,\
    \ 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3,\
    \ 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n\
    \    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1,\
    \ 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3,\
    \ 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n\
    \    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1,\
    \ 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3,\
    \ 5])\n", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n     \
    \   if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n   \
    \ return maximum\nend\n</cell>\n<text>\nExercise 10\nWrite a function that returns\
    \ the minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n  \
    \  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\
    \"", "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n\
    \    end\n    largest = l[1]\n    for i in 2:length(l) \n        if l[i] > largest\
    \ \n            largest = l[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    maximum = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum =\
    \ l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum = i\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n\
    \    \n    maximum = l[1]\n    for i in 2:length(l) \n        if maximum < l[i]\
    \ \n            maximum = l[i]\n        end\n    end\n    return maximum\nend",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the minimum element in the list.\n \
    \   >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    \n    maximum = l[1]\n    for\
    \ i in l[2:end]\n        if i > maximum\n            maximum = i\n        end\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 9\nWrite a function\
    \ that returns the sum of the elements in the list.\n    >>> sum([1, 2, 3])\n\
    \    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\
    \"", "    if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n \
    \   end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i]\
    \ > maximum \n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n   \
    \         maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <text>\nmax_element()\nThis function returns the maximum element in the list.",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n   \
    \         maximum = i\n        end\n    end\n    return maximum\nend", "    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n\
    \    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n \
    \           maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <text>\nmax_element", "    maximum = l[1]\n    for i in l[2:end]\n        if i\
    \ > maximum\n            maximum = i\n        end\n    end\n    maximum\nend\n\
    </code>\n<|/ a tags=julia,arrays,function |>\n<| c |>\nThis does not answer the\
    \ question. The question asks how to write a function that returns the maximum\
    \ element in a list. Your function returns the maximum element in the first element\
    \ of the list. Also, your function does not return the maximum element in the\
    \ list.\n<|/ c |>\n<| c |>\nThe question asks how to write a function that returns\
    \ the maximum element in a list. Your function returns the maximum element in\
    \ the first element of the list. Also, your function does not return the maximum\
    \ element in the list.\n<|/ c |>\n<| c |>\nThe question asks how to write a function\
    \ that returns the maximum element in a list. Your function returns the maximum\
    \ element in the first element of the list. Also, your function does not return\
    \ the maximum element in the list.\n<|/ c |>\n<| c |>\nThe question asks how to\
    \ write a function that returns the maximum element in a list. Your function returns\
    \ the maximum element in the first element of the list. Also, your function does\
    \ not return the maximum element in the list.\n<|/ c |>\n<| c |>\nThe question\
    \ asks how to write a function that returns the maximum element in a list. Your\
    \ function returns the maximum element in the first element of the list. Also,\
    \ your function does not return the maximum element in the list.\n<|/ c |>\n<|\
    \ a dscore=5 |>\n<code>\njulia> maximum(A)\n</code>\n<|/ a tags=julia,arrays,function\
    \ |>\n<| c |>\nThis does not answer the question. The question asks how to write\
    \ a function that returns the maximum element in a list. Your function returns\
    \ the maximum element in the first element of the list. Also, your function does\
    \ not return the maximum element in the list.\n<|/ c |>\n<| c |>\nThe question\
    \ asks how to write a function that returns the maximum element in a list. Your\
    \ function returns the maximum element in the first element of the list. Also,\
    \ your function does not return the maximum element in the list.\n<|/ c |>\n<|\
    \ c |>\nThe question asks how to write a function that returns the maximum element\
    \ in a list. Your function returns the maximum element in the first element of\
    \ the list. Also, your function does not return the maximum element in the list.\n\
    <|/ c |>\n<| c |>\nThe question asks how to write a function that returns the\
    \ maximum element in a list. Your function returns the maximum element in the\
    \ first element of the list. Also, your function does not return the maximum element\
    \ in the list.\n<|/ c |>\n<| c |>\nThe question asks how to write a function that\
    \ returns the maximum element in a list. Your function returns the maximum element\
    \ in the first element of the list. Also, your function does not return the maximum ",
  "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    return maximum\nend\n</code>\n\
    <|/ a tags=julia,arrays,max |>\n<| c |>\nThis doesn't work if there are multiple\
    \ `Int64`s in the array. For example, `max_element([Int64(1), Int64(2)])` returns\
    \ `Int64(2)` instead of `Int64(1)`.\n<|/ c |>\n<| c |>\nYes, I realized that after\
    \ I posted my comment. I've updated my answer accordingly.\n<|/ c |>\n<| c |>\n\
    I believe this should be the accepted answer. `max_element` should return a `Int64`\
    \ and not a `Vector{Int64}`.\n<|/ c |>\n<| a tags=julia,arrays,max |>\n<code>",
  "    \n    maximum = l[1]\n    for x in l[2:end]\n        if x > maximum\n     \
    \       maximum = x\n        end\n    end\n    return maximum\nend", "    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| c |>\nThis does not answer the question. `max_element` returns the maximum\
    \ element in the list, but does not return the index of the maximum element. Also,\
    \ `max_element` does not return `nothing` when the list is empty.\n<|/ c |>\n\
    <| c |>\nThanks for the comment. I updated the answer to include a solution that\
    \ returns the index of the maximum element.\n<|/ c |>\n<| a dscore=4 |>\nThe Julia\
    \ standard library has several functions for finding maximum and minimum elements\
    \ in a collection:", "    \n    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n\
    \        if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<text>\nmax_element()", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    largest = l[1]\n    for i in 2:length(l) \n  \
    \      if l[i] > largest \n            largest = l[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    \n    return maximum\nend", "    maximum =\
    \ l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum = i\n\
    \        end\n    end\n    maximum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the elements in the list.\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, -2, 3])\n2\n>>> sum([1, -2, -3, 4])\n6\n>>> sum([1, -2, -3, 4,\
    \ 5])\n10\n>>> sum([1, -2, -3, 4, 5], 10)\n10\n>>> sum([1, -2, -3, 4, 5], 0)\n\
    10\n>>> sum([1, -2, -3, 4, 5], -10)\n10\n>>> sum([1, -2, -3, 4, 5], -0)\n10\n\
    >>> sum([1, -2, -3, 4, 5], NaN)\n10\n>>> sum([1, -2, -3, 4, 5], Inf)\n10\n>>>\
    \ sum([1, -2, -3, 4, 5], -Inf)\n10\n>>> sum([1, -2, -3, 4, 5], Float64(0))\n10\n\
    >>> sum([1, -2, -3, 4, 5], Float64(-10))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(-0))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(NaN))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(Inf))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(-Inf))\n10\n>>> sum([1, -2, -3, 4, 5],\
    \ Float64(0))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(-10))\n10\n>>> sum([1, -2,\
    \ -3, 4, 5], Float64(-0))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(NaN))\n10\n\
    >>> sum([1, -2, -3, 4, 5], Float64(Inf))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(-Inf))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(0))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(-10))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(-0))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(NaN))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(Inf))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(-Inf))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(0))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(-10))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(-0))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(NaN))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(Inf))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(-Inf))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.3>", "    maximum = l[1]\n   \
    \ for i in l[2:end]\n        if i > maximum\n            maximum = i\n       \
    \ end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the index of the first element of the list that is greater\
    \ than a given value.", "    \n    maximum = l[1]\n    for i in l[2:end]\n   \
    \     if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the minimum element in the list.\n    >>> min_element([1, 2, 3])\n \
    \   1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \"\"\"", "    \n    maximum = l[1]\n    for e in l[2:end]\n        if e >\
    \ maximum\n            maximum = e\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n    for x in l[2:end]\n\
    \        if x > maximum\n            maximum = x\n        end\n    end\n    maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the index of the maximum element in the list.\n    >>> max_element_index(l::Vector{Int64})\n\
    \    >>> max_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    12\n\
    \    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Cannot find the max element of an empty list\"))\n    end\n    \n    largest =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > largest \n            largest\
    \ = l[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.4>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the sum of the elements of a list.", "    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 9\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n  \
    \      if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<text>\nExercise 6\nWrite a function that returns\
    \ the minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n  \
    \  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\
    \"", "    maximum = max_element(l)\n    maximum == l ? maximum : maximum(maximum(maximum))\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I wonder if\
    \ it can be done without recursion.\n<|/ c |>\n<| c |>\nI added a solution without\
    \ recursion.\n<|/ c |>\n<| c |>\nI added a solution without recursion.\n<|/ c\
    \ |>\n<| a tags=julia,list |>\nI like your solution, but I wonder if it can be\
    \ done without recursion.", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n\
    \        if maximum < l[i] \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<text>\nmax_element", "    if length(l) ==\
    \ 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > maximum \n            maximum =\
    \ l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2,\
    \ 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n \
    \   >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n \
    \   >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n \
    \   >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n \
    \   >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n \
    \   >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n \
    \   >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([", "    maximum\
    \ = l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum =\
    \ x\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n  \
    \  1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n     \
    \   if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend", "    maximum = l[1]\n   \
    \ for i in l[2:end]\n        if i > maximum\n            maximum = i\n       \
    \ end\n    end\n    return maximum\nend\n</code>\n<|/ a |>\n<| a tags=julia,arrays,max\
    \ |>\nThe Julia standard library has a function called max.\n<code>\njulia> max([1,\
    \ 2, 3, 4])\n4", "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i]\
    \ > maximum\n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end", "    \n    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n\
    \            maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for e in l[2:end]\n     \
    \   if e > maximum\n            maximum = e\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>>\
    \ min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"",
  "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n\
    \    largest = l[1]\n    for i in 2:length(l) \n        if l[i] > largest \n \
    \           largest = l[i]\n        end\n    end\n    return largest\nend", " \
    \   maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n          \
    \  maximum = i\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a\
    \ tags=julia |>\n<| c |>\nThis doesn't work for me. `max_element([1,2,3])` returns\
    \ `3` instead of `2`.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works.\
    \ I guess you have a different version of Julia. Can you please tell me what Julia\
    \ version you have?\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works. I guess\
    \ you have a different version of Julia. Can you please tell me what Julia version\
    \ you have?\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works. I guess you\
    \ have a different version of Julia. Can you please tell me what Julia version\
    \ you have?\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works. I guess you\
    \ have a different version of Julia. Can you please tell me what Julia version\
    \ you have?\n<|/ c |>\n<| a dscore=4 |>\nThe answer by is correct but can be simplified\
    \ a bit:\n<code>\nmax_element(l::Vector{Int64})::Int64\n    maximum = l[1]\n \
    \   for i in l[2:end]\n        if i > maximum\n            maximum = i\n     \
    \   end\n    end\n    return maximum\nend\n</code>\n<|/ a tags=julia |>\n<| c\
    \ |>\nThis doesn't work for me. `max_element([1,2,3])` returns `3` instead of\
    \ `2`.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. I guess you\
    \ have a different version of Julia. Can you please tell me what Julia version\
    \ you have?\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works. I guess you\
    \ have a different version of Julia. Can you please tell me what Julia version\
    \ you have?\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works. I guess you\
    \ have a different version of Julia. Can you please tell me what Julia version\
    \ you have?\n<|/ c |>\n<| a tags=julia |>\nThe answer by is correct but can be\
    \ simplified a bit:\n<code>\nmax_element(l::Vector{Int64})::Int64\n", "    maximum\
    \ = max_element(l)\n    return maximum\nend", "    if length(l) == 0 \n      \
    \  throw(ArgumentError(\"Empty list\"))\n    end\n    maximum = l[1]\n    for\
    \ i in 2:length(l) \n        if l[i] > maximum \n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n\
    \            maximum = l[i]\n        end\n    end\n    maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = max_element(l)\n    return maximum\n\
    end", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n   \
    \         maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the index of the maximum element in a given\
    \ list. \nThe function should return -1 if the list is empty.", "    maximum =\
    \ l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum = i\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    max = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > max \n            max = l[i]\n \
    \       end\n    end\n    return max\nend\n</cell>\n<text>\nmax_element", "  \
    \  maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n\
    \    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n \
    \           maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.3>", "    \n    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n   \
    \ for i in l[2:end]\n        if i > maximum\n            maximum = i\n       \
    \ end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    maximum\nend\n\
    </cell>\n<text>\nExercise 9\nWrite a function that returns the minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n  \
    \      if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<text>\nExercise 6\nWrite a function that takes\
    \ a list as an argument and returns a list with the elements of the list sorted\
    \ in descending order.", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l)\
    \ \n        if maximum < l[i] \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nThe function max_element\
    \ returns the maximum element in the list. \nThe function throws an ArgumentError\
    \ if the list is empty.", "    maximum = l[1]\n    for i in 2:length(l)\n    \
    \    if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n   \
    \ return maximum\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the fastest\
    \ solution, since it uses `sort` which is O(nlogn) instead of `findmax` which\
    \ is O(n).\n<|/ c |>\n<| c |>\nI agree, it's just an alternative to find the max\
    \ element in a vector. Of course it could be optimized further, but this was the\
    \ simplest solution that came to my mind.\n<|/ c |>\n<| a tags=julia,max,arrays\
    \ |>\n<code>\njulia> maximum(collect(1:10))\n10\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis does not answer the question. `maximum` does not return the element\
    \ with the maximum value, it returns the maximum value itself.\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>\njulia> maximum(collect(1:10))\n10\n</code>\n<|/ a tags=julia,max,arrays\
    \ |>\n<| a tags=julia,max,arrays |>\n<code>\njulia> maximum(collect(1:10))\n10\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=julia,max,arrays |>\n<code>", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    max\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > max \n            max =\
    \ l[i]\n        end\n    end\n    return max\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <text>\nExercise 10\nWrite a function that returns the sum of the elements in\
    \ the list.\n>>> sum([1, 2, 3])\n6\n>>> sum([1, -2, 3])\n1\n>>> sum([1, 2, -3,\
    \ 4])\n-5\n>>> sum([1, 2, -3, 4, 5])\n-5\n>>> sum([1, 2, -3, 4, 5], 10)\n10\n\
    >>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n>>> sum([1,\
    \ 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4,\
    \ 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3, 4, 5],\
    \ 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5], 10)\n\
    10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n>>>\
    \ sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1,\
    \ 2, -3, 4, 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3,\
    \ 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5],\
    \ 10)\n10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n\
    >>> sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1,\
    \ 2, -3, 4, 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3,\
    \ 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5],\
    \ 10)\n10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n\
    >>> sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1,\
    \ 2, -3, 4, 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3,\
    \ 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5],\
    \ 10)\n10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n\
    >>> sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1,\
    \ 2, -", "    if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n\
    \    end\n    largest = l[1]\n    for i in 2:length(l) \n        if l[i] > largest\
    \ \n            largest = l[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n     \
    \       maximum = i\n        end\n    end\n    maximum\nend\n</cell>\n<text>\n\
    \u041C\u0435\u0442\u043E\u0434 max_element \u0432\u043E\u0437\u0432\u0440\u0430\
    \u0449\u0430\u0435\u0442 \u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\
    \u044B\u0439 \u044D\u043B\u0435\u043C\u0435\u043D\u0442 \u0432 \u0441\u043F\u0438\
    \u0441\u043A\u0435. \u0415\u0441\u043B\u0438 \u044D\u043B\u0435\u043C\u0435\u043D\
    \u0442 \u043C\u0435\u043D\u044C\u0448\u0435 \u043C\u0438\u043D\u0438\u043C\u0430\
    \u043B\u044C\u043D\u043E\u0433\u043E \u044D\u043B\u0435\u043C\u0435\u043D\u0442\
    \u0430, \u0442\u043E \u0438\u0441\u043A\u043E\u043C\u044B\u0439 \u044D\u043B\u0435\
    \u043C\u0435\u043D\u0442 \u0438\u0437 \u0441\u043F\u0438\u0441\u043A\u0430, \u0438\
    \u043D\u0430\u0447\u0435 \u043F\u043E \u0438\u043D\u0434\u0435\u043A\u0441\u0443\
    .", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n     \
    \       maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the elements\
    \ in the list.\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0])\n0\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10, 0, 0, 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10, 0, 0, 0, 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0,\
    \ 0, 0, 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0,\
    \ 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0])\n\
    0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0])\n\
    0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\
    0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\
    0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\
    0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    maximum\n\
    end\n</code>\n<|/ a tags=julia,list |>\n<| a dscore=2 |>\n<code>", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n     \
    \       maximum = i\n        end\n    end\n    return maximum\nend", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend", "    if length(l) ==\
    \ 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > maximum \n            maximum =\
    \ l[i]\n        end\n    end\n    return maximum\nend", "    if length(l) == 0\
    \ \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > maximum \n            maximum =\
    \ l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n     \
    \   if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n   \
    \ return maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nThe function max_element\
    \ returns the maximum element in the list. \nThe function throws an ArgumentError\
    \ if the list is empty.", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n  \
    \      if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n  \
    \  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\
    \"", "    if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n \
    \   end\n    largest = l[1]\n    for i in 2:length(l) \n        if l[i] > largest\
    \ \n            largest = l[i]\n        end\n    end\n    return largest\nend",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n\
    \    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n \
    \           maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <text>\nmax_element()\nThis function returns the maximum element in the list.",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n\
    \    max = l[1]\n    for i in 2:length(l) \n        if l[i] > max \n         \
    \   max = l[i] \n        end\n    end\n    return max\nend", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    \n    maximum = l[1]\n    for i in 2:length(l)\n \
    \       if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum =\
    \ l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum = i\n\
    \        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\n\u041C\u0430\
    \u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439 \u044D\u043B\u0435\
    \u043C\u0435\u043D\u0442\n\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\
    \u043D\u044B\u0439 \u044D\u043B\u0435\u043C\u0435\u043D\u0442 - \u044D\u0442\u043E\
    \ \u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439 \u044D\u043B\
    \u0435\u043C\u0435\u043D\u0442, \u043A\u043E\u0442\u043E\u0440\u044B\u0439 \u043C\
    \u043E\u0436\u0435\u0442 \u0431\u044B\u0442\u044C \u043F\u0440\u0435\u0434\u0441\
    \u0442\u0430\u0432\u043B\u0435\u043D \u0442\u0430\u043A \u0436\u0435, \u043A\u0430\
    \u043A \u0438 \u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439\
    \ \u044D\u043B\u0435\u043C\u0435\u043D\u0442, \u043A\u043E\u0442\u043E\u0440\u044B\
    \u0439 \u0438\u043C\u0435\u0435\u0442 \u0442\u043E \u0436\u0435 \u0441\u0430\u043C\
    \u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435.", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    largest\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > largest \n            largest\
    \ = l[i]\n        end\n    end\n    return largest\nend", "    maximum = l[1]\n\
    \    for i in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for i in 2:length(l)\n  \
    \      if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n \
    \   maximum\nend\n</cell>\n<code language=julia-1.5>", "    if length(l) == 0\
    \ \n        return 0 \n    else \n        return max(l) \nend \n</cell>\n<code\
    \ language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    maximum = l[1]\n    for i\
    \ in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n     \
    \   if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n   \
    \ return maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend", "    if length(l) == 0 \n       \
    \ throw(ArgumentError(\"Empty list\"))\n    end\n    maximum = l[1]\n    for x\
    \ in l[2:end]\n        if x > maximum\n            maximum = x\n        end\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the minimum element in the list.\n    >>> min_element([1, 2, 3])\n\
    \    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Cannot find max element of empty list\"\
    ))\n    end\n    \n    max = l[1]\n    for i in 2:length(l) \n        if l[i]\
    \ > max \n            max = l[i]\n        end\n    end\n    return max\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the maximum\
    \ element in the list.\n    >>> max_element_index([1, 2, 3])\n    1\n    >>> max_element_index([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    12\n    \"\"\"", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| c |>\n`maximum` should be `maximum!` since it modifies the input `l`.\n\
    <|/ c |>\n<| c |>\n`maximum!` modifies the input `l` but `maximum` does not. `maximum!`\
    \ modifies the input `l` but `maximum` does not. `maximum` modifies the input\
    \ `l` but `maximum!` does not. `maximum` modifies the input `l` but `maximum!`\
    \ does not.\n<|/ c |>\n<| c |>\n`maximum` modifies the input `l` but `maximum!`\
    \ does not. `maximum` modifies the input `l` but `maximum!` does not. `maximum`\
    \ modifies the input `l` but `maximum!` does not. `maximum` modifies the input\
    \ `l` but `maximum!` does not.\n<|/ c |>\n<| c |>\n`maximum` modifies the input\
    \ `l` but `maximum!` does not. `maximum` modifies the input `l` but `maximum!`\
    \ does not. `maximum` modifies the input `l` but `maximum!` does not. `maximum`\
    \ modifies the input `l` but `maximum!` does not.\n<|/ c |>\n<| c |>\n`maximum`\
    \ modifies the input `l` but `maximum!` does not. `maximum` modifies the input\
    \ `l` but `maximum!` does not. `maximum` modifies the input `l` but `maximum!`\
    \ does not. `maximum` modifies the input `l` but `maximum!` does not.\n<|/ c |>\n\
    <| a tags=julia,arrays |>\nThe most efficient way is to use maximum and minimum:\n\
    <code>\njulia> maximum(A)\n5", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    max = l[1]\n    for i in 2:length(l) \n      \
    \  if l[i] > max \n            max = l[i]\n        end\n    end\n    return max\n\
    end\n</cell>\n<code language=julia-1.4>", "    \n    maximum = l[1]\n    for i\
    \ in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n    \
    \    end\n    end\n    maximum\nend\n</cell>\n<text>\nExercise 10\nWrite a function\
    \ that returns the minimum element in the list.\n    >>> min_element([1, 2, 3])\n\
    \    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"\
    ))\n    end\n    max = l[1]\n    for i in 2:length(l) \n        if l[i] > max\
    \ \n            max = l[i] \n        end\n    end\n    return max\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for x in l[2:end]\n     \
    \   if x > maximum\n            maximum = x\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"", " \
    \   if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n\
    \    max = l[1]\n    for i in 2:length(l) \n        if l[i] > max \n         \
    \   max = l[i]\n        end\n    end\n    return max\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n\
    \    largest = l[1]\n    for i in 2:length(l) \n        if l[i] > largest \n \
    \           largest = l[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n     \
    \   if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    if length(l) == 0 \n\
    \        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum = l[1]\n\
    \    for i in 2:length(l) \n        if maximum < l[i] \n            maximum =\
    \ l[i] \n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n     \
    \   if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n   \
    \ return maximum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n  \
    \  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\
    \"", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n    \
    \        maximum = i\n        end\n    end\n    return maximum\nend", "    if\
    \ length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n   \
    \ \n    max = l[1]\n    for i in 2:length(l) \n        if l[i] > max \n      \
    \      max = l[i] \n        end\n    end\n    return max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])",
  "    maximum = l[1]\n    for x in l[2:end]\n        if x > maximum\n           \
    \ maximum = x\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia,list |>\nThe other answers here are great, but I wanted\
    \ to add that you can also use reduce to find the maximum element in a vector:\n\
    <code>\nreduce(max, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia,list |>\nThe other answers here are great, but I wanted\
    \ to add that you can also use reduce to find the maximum element in a vector:\n\
    <code>\nreduce(max, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia,list |>\n<code>", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.3>", "    if length(l) == 0 \n\
    \        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum = l[1]\n \
    \   for x in l[2:end]\n        if x > maximum\n            maximum = x\n     \
    \   end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for x in l[2:end]\n        if x > maximum\n           \
    \ maximum = x\n        end\n    end\n    maximum\nend\n</cell>\n<text>\nExercise\
    \ 2: max_element\nWrite a function that returns the maximum element in the list.\n\
    Write a function that returns the minimum element in the list.\nWrite a function\
    \ that returns the median element in the list.\nWrite a function that returns\
    \ the mode element in the list.", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n\
    \        if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.4>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n\
    \    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n \
    \           maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <text>\nmax_element", "    \n    maximum = l[1]\n    for x in l[2:end]\n     \
    \   if x > maximum\n            maximum = x\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements in the list.\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10, 100])\n123\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100],\
    \ 10)\n123\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], -10)\n100\n\
    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], 0)\n100\n>>> sum([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], 1)\n100\n>>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10, 100], 2)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10, 100], 3)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], 4)\n\
    100\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], 5)\n100\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], 6)\n100\n>>> sum([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10, 100], 7)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10, 100], 8)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100],\
    \ 9)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], 10)\n100\n>>>\
    \ sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], 11)\n100\n>>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10, 100], 12)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10, 100], 13)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10,\
    \ 100], 14)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], 15)\n\
    100\n>>> sum([5, 3, -5, 2, -3, 3, 9, ", "    maximum = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution,\
    \ but I wonder why you use `maximum` instead of `maximum!`?\n<|/ c |>\n<| c |>\n\
    I used `maximum` because I thought it would be more efficient than `maximum!`.\
    \ I don't know if this is true though.\n<|/ c |>\n<| c |>\nI guess it depends\
    \ on how you define efficiency. `maximum!` will have to allocate memory for the\
    \ new value, whereas `maximum` will just return the existing value. `maximum`\
    \ will also have to allocate memory for the new value if it doesn't exist.\n<|/\
    \ c |>\n<| c |>\nYes, I agree. `maximum!` will allocate memory for the new value,\
    \ whereas `maximum` will just return the existing value. `maximum` will also have\
    \ to allocate memory for the new value if it doesn't exist.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI like your solution, but I wonder why you use maximum instead of maximum!?",
  "    \n    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n     \
    \       maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n     \
    \   if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you have negative\
    \ numbers in the list\n<|/ c |>\n<| c |>\nIt works with negative numbers. I tested\
    \ it before posting. What do you mean by \"doesn't work\"?\n<|/ c |>\n<| c |>\n\
    I mean it returns `0` instead of `-inf`\n<|/ c |>\n<| c |>\nIt returns `-inf`\
    \ if you have negative numbers in the list. Try it yourself.\n<|/ c |>\n<| c |>\n\
    I tested it before posting. What do you mean by \"doesn't work\"?\n<|/ c |>\n\
    <| a dscore=4 |>\nI believe that this is what you're looking for:\n<code>", " \
    \   maximum = l[1]\n    for x in l[2:end]\n        if x > maximum\n          \
    \  maximum = x\n        end\n    end\n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    largest = l[1]\n    for i in 2:length(l) \n     \
    \   if l[i] > largest \n            largest = l[i]\n        end\n    end\n   \
    \ return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n  \
    \  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\
    \"", "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n\
    \    end\n    largest = l[1]\n    for i in 2:length(l) \n        if l[i] > largest\
    \ \n            largest = l[i]\n        end\n    end\n    return largest\nend\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\n<code>", "    if length(l) ==\
    \ 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i] \n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>",
  "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    return maximum\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    if\
    \ length(l) == 0 \n        throw(ArgumentError(\"Cannot find max element of empty\
    \ list\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n        if\
    \ l[i] > maximum \n            maximum = l[i]\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<text>\nmax_element!", "    if length(l) == 0 \n    \
    \    throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > maximum \n            maximum =\
    \ l[i]\n        end\n    end\n    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the sum of the elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.3>", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements in the list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"", " \
    \   if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n\
    \    maximum = l[1]\n    for x in l[2:end]\n        if x > maximum \n        \
    \    maximum = x\n        end\n    end\n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.3>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the elements\
    \ in the list.\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, ", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.3>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of elements in the list that are less than the given\
    \ value.", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n     \
    \   if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend", "    if length(l) == 0 \n        throw(ArgumentError(\"Empty\
    \ list\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n        if\
    \ l[i] > maximum \n            maximum = l[i]\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n   \
    \ for x in l[2:end]\n        if x > maximum\n            maximum = x\n       \
    \ end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    if length(l) == 0 \n    \
    \    return 0 \n    \n    maximum = l[1] \n    for x in l[2:end] \n        if\
    \ x > maximum \n            maximum = x \n        end \n    end \n    return maximum\
    \ \nend ", "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"\
    ))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n        if maximum\
    \ < l[i] \n            maximum = l[i] \n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    maximum = l[1]\n    for x\
    \ in l[2:end]\n        if x > maximum\n            maximum = x\n        end\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n   \
    \ maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n    \
    \        maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    if l==[]\n        throw(ArgumentError(\"Empty\
    \ list\"))\n    end\n    \n    maximum = l[1]\n    for i in l[2:end]\n       \
    \ if i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end", "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n\
    \    end\n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum\
    \ \n            maximum = l[i] \n        end\n    end\n    return maximum\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n  \
    \      if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n     \
    \   if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n   \
    \ return maximum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([", "    \n    maximum = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum =\
    \ l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum = i\n\
    \        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n     \
    \       maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n  \
    \      if l[i] > maximum \n            maximum = l[i] \n        end\n    end\n\
    \    return maximum\nend", "    \n    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.4>\nmax_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the index of the maximum element in a given list. For example, for the\
    \ list [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10] the function should return 6.",
  "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n\
    \    \n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum\
    \ \n            maximum = l[i]\n        end\n    end\n    return maximum\nend",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    maximum = l[1]\n    for x in l[2:end]\n        if x > maximum\n     \
    \       maximum = x\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.4>", "    maximum = l[1]\n    for i in l[2:end]\n     \
    \   if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements of a list.\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ -2, 3])\n1\n>>> sum([1, 2, -3, 4])\n5\n>>> sum([1, 2, -3, 4], -2)\n1\n>>> sum([1,\
    \ 2, -3, 4], -3)\n0\n>>> sum([1, 2, -3, 4], -4)\n-4\n>>> sum([1, 2, -3, 4], 5)\n\
    -5\n>>> sum([1, 2, -3, 4], 0)\n0\n>>> sum([1, 2, -3, 4], 1)\n-4\n>>> sum([1, 2,\
    \ -3, 4], 2)\n-4\n>>> sum([1, 2, -3, 4], 3)\n-4\n>>> sum([1, 2, -3, 4], 4)\n-4\n\
    >>> sum([1, 2, -3, 4], 5)\n-5\n>>> sum([1, 2, -3, 4], 6)\n-5\n>>> sum([1, 2, -3,\
    \ 4], 7)\n-5\n>>> sum([1, 2, -3, 4], 8)\n-5\n>>> sum([1, 2, -3, 4], 9)\n-5\n>>>\
    \ sum([1, 2, -3, 4], 10)\n-5\n>>> sum([1, 2, -3, 4], 11)\n-5\n>>> sum([1, 2, -3,\
    \ 4], 12)\n-5\n>>> sum([1, 2, -3, 4], 13)\n-5\n>>> sum([1, 2, -3, 4], 14)\n-5\n\
    >>> sum([1, 2, -3, 4], 15)\n-5\n>>> sum([1, 2, -3, 4], 16)\n-5\n>>> sum([1, 2,\
    \ -3, 4], 17)\n-5\n>>> sum([1, 2, -3, 4], 18)\n-5\n>>> sum([1, 2, -3, 4], 19)\n\
    -5\n>>> sum([1, 2, -3, 4], 20)\n-5\n>>> sum([1, 2, -3, 4], 21)\n-5\n>>> sum([1,\
    \ 2, -3, 4], 22)\n-5\n>>> sum([1, 2, -3, 4], 23)\n-5\n>>> sum([1, 2, -3, 4], 24)\n\
    -5\n>>> sum([1, 2, -3, 4], 25)\n-5\n>>> sum([1, 2, -3, 4], 26)\n-5\n>>> sum([1,\
    \ 2, -3, 4], 27)\n-5\n>>> sum([1, 2, -3, 4], 28)\n-5\n>>> sum([1, 2, -3, 4], 29)\n\
    -5\n>>> sum([1, 2, -3, 4], 30)\n-5\n>>> sum([1, 2, -3, 4], 31)\n-5\n>>> sum([1,\
    \ 2, -3, 4], 32)\n-5\n>>> sum([1, 2, -3, 4], 33)\n-5\n>>> sum([1, 2, -3, 4], 34)\n\
    -5\n>>> sum([1, 2, -3, 4], 35)\n-5", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n\
    \        if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the elements in the list.\n    >>> sum([1, 2, 3])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n", "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"\
    ))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i]\
    \ > maximum \n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>>\
    \ min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n\
    \    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n \
    \           maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <text>\nmax_element"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
