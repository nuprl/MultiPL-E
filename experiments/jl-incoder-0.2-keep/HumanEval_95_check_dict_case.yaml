name: HumanEval_95_check_dict_case
language: julia
prompt: "\"\"\"\n    Given a dictionary, return True if all keys are strings in lower\
  \ \n    case or all keys are strings in upper case, else return False.\n    The\
  \ function should return False is the given dictionary is empty.\n    Examples:\n\
  \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
  \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
  \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
  apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\"\
  :\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\"\
  :\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction check_dict_case(dict::Dict{String,\
  \ String}>)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
  STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\"\
  \ => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
  \ false)\nend\n"
completions: ["    \n    if dict == Dict()\n        return false\n    \n    for key\
    \ in keys(dict)\n        if islower(key)\n            return true\n        elseif\
    \ isupper(key)\n            return true\n        else\n            return false\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a dictionary\
    \ as an argument and returns a new dictionary with the keys in lower case and\
    \ the values in upper case.\nThe function should return a new dictionary if the\
    \ given dictionary is empty, or if the given dictionary is not empty and the keys\
    \ in lower case are not all upper case.\nExamples:\ndict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")) should return Dict(\"a\" => \"APPLE\"\
    , \"b\" => \"BANANA\").\ndict_to_upper_case(Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"\
    A\" => \"BANANA\", \"B\" => \"BANANA\").\ndict_to_upper_case(Dict(\"a\" => \"\
    apple\", \"8\" => \"banana\", \"a\" => \"apple\")) should return Dict(\"a\" =>\
    \ \"APPLE\", \"8\" => \"BANANA\", \"a\" => \"APPLE\").\ndict_to_upper_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) should return\
    \ Dict(\"Name\" => \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\").\ndict_to_upper_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) should return Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\").\ndict_to_upper_case(Dict()) should return Dict().\ndict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\")) should return Dict(\"\
    a\" => \"APPLE\", \"b\" => \"BANANA\", \"c\" => \"CARROT\").\ndict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\", \"d\" => \"dog\"))\
    \ should return Dict(\"a\" => \"APPLE\", \"b\" => \"BANANA\", \"c\" => \"CARROT\"\
    , \"d\" => \"DOG\").\ndict_to_upper_case(Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\", \"c\" => \"carrot\", \"d\" => \"dog\", \"e\" => \"elephant\")) should\
    \ return Dict(\"a\" => \"APPLE\", \"b\" => \"BANANA\", \"c\" => \"CARROT\", \"\
    d\" => \"DOG\", \"e\" => \"ELEPHANT", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    end\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        end\n    end\n    \n    for k in keys(dict)\n\
    \        if isupper(k)\n            return false\n        end\n    end\n    \n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n    true =\
    \ false \n    for key in keys(dict)\n        if islower(key)\n            true\
    \ = true\n        elseif isupper(key)\n            true = true\n        else\n\
    \            true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    true = true\n    for key in dict\n    \
    \    if islower(key)\n            true = false\n        else\n            true\
    \ = true\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if dict == Dict{String, String}()\n        return true\n    end\n   \
    \ \n    for key in keys(dict)\n        if islower(key)\n            return false\n\
    \        end\n    end\n    \n    for key in keys(dict)\n        if isupper(key)\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    if dict == Dict()\n        return\
    \ false\n    else\n        true\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string.", "    \n    true = true\n    for key in keys(dict)\n        if islower(key)\
    \ || isupper(key)\n            true = false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>", "    true = true\n    for key\
    \ in keys(dict)\n        if islower(key) || isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if dict == Dict{String, String}()\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    else\n        true = false\n        for\
    \ key in dict\n            if islower(key)\n                true = true\n    \
    \        elseif isupper(key)\n                true = true\n            else\n\
    \                true = false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if dict == Dict{String, String}()\n        true\n    else\n        false\n\
    \    end\nend", "    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string.\nExamples:\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 6.\ncount_chars(\"hello\") should return 0.\ncount_chars(\"\
    \") should return 0.\ncount_chars(\" \") should return 0.\ncount_chars(\" a\"\
    ) should return 1.\ncount_chars(\"a \") should return 1.\ncount_chars(\"a b\"\
    ) should return 2.\ncount_chars(\"a b c\") should return 3.\ncount_chars(\"a b\
    \ c d\") should return 4.\ncount_chars(\"a b c d e\") should return 5.\ncount_chars(\"\
    a b c d e f\") should return 6.\ncount_chars(\"a b c d e f g\") should return\
    \ 7.\ncount_chars(\"a b c d e f g h\") should return 8.\ncount_chars(\"a b c d\
    \ e f g h i\") should return 9.\ncount_chars(\"a b c d e f g h i j\") should return\
    \ 10.\ncount_chars(\"a b c d e f g h i j k\") should return 11.\ncount_chars(\"\
    a b c d e f g h i j k l\") should return 12.\ncount_chars(\"a b c d e f g h i\
    \ j k l m\") should return 13.\ncount_chars(\"a b c d e f g h i j k l m n\") should\
    \ return 14.\ncount_chars(\"a b c d e f g h i j k l m n o\") should return 15.\n\
    count_chars(\"a b c d e f g h i j k l m n o p\") should return 16.\ncount_chars(\"\
    a b c d e f g h i j k l m n o p q\") should return 17.\ncount_chars(\"a b c d\
    \ e f g h i j k l m n o p q r\") should return 18.\ncount_chars(\"a b c d e f\
    \ g h i j k l m n o p q r s\") should return 19.\ncount_chars(\"a b c d e f g\
    \ h i j k l m n o p q r s t\") should return 20.\ncount_chars(\"a b c d e f g\
    \ h i j k l m n o p q r s t u", "    true = true\n    for key in keys(dict)\n\
    \        if islower(key) || isupper(key)\n            true = false\n        end\n\
    \    end\n    return true\nend", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    for k in keys(dict)\n        if islower(k)\n \
    \           return false\n        if isupper(k)\n            return false\n  \
    \  end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary where all keys\
    \ are converted to upper case. \nThe function should return a new dictionary if\
    \ the given dictionary is empty. \nThe function should return a new dictionary\
    \ if the given dictionary is not empty. \nThe function should return a new dictionary\
    \ if the given dictionary is not empty and all keys are converted to upper case.\
    \ \nThe function should return a new dictionary if the given dictionary is not\
    \ empty and some keys are not converted to upper case. \nThe function should return\
    \ a new dictionary if the given dictionary is not empty and some keys are converted\
    \ to upper case. \nThe function should return a new dictionary if the given dictionary\
    \ is not empty and some keys are not converted to upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is not empty and some keys are\
    \ not converted to upper case. \nThe function should return a new dictionary if\
    \ the given dictionary is not empty and some keys are not converted to upper case.\
    \ \nThe function should return a new dictionary if the given dictionary is not\
    \ empty and some keys are not converted to upper case. \nThe function should return\
    \ a new dictionary if the given dictionary is not empty and some keys are not\
    \ converted to upper case. \nThe function should return a new dictionary if the\
    \ given dictionary is not empty and some keys are not converted to upper case.\
    \ \nThe function should return a new dictionary if the given dictionary is not\
    \ empty and some keys are not converted to upper case. \nThe function should return\
    \ a new dictionary if the given dictionary is not empty and some keys are not\
    \ converted to upper case. \nThe function should return a new dictionary if the\
    \ given dictionary is not empty and some keys are not converted to upper case.\
    \ \nThe function should return a new dictionary if the given dictionary is not\
    \ empty and ", "    \n    if dict == Dict{String, String}()\n        return true\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        if isupper(k)\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    for k in keys(dict)\n        if islower(k)\n \
    \           return false\n        if isupper(k)\n            return false\n  \
    \  end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    true =\
    \ true\n    for key in keys(dict)\n        if islower(key)\n            true =\
    \ false\n        elseif isupper(key)\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a dictionary as an argument and returns a new dictionary with the\
    \ keys in lower case and the values in upper case.\nThe function should return\
    \ a new dictionary if the given dictionary is empty or if the given dictionary\
    \ has keys that are not strings or if the given dictionary has keys that are not\
    \ strings in upper case.\nExamples:\nconvert_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}) should return {\"a\":\"apple\", \"b\":\"banana\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return {\"a\":\"apple\"\
    , \"b\":\"banana\"}.\nconvert_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"\
    a\":\"apple\"}) should return {\"a\":\"apple\", \"8\":\"banana\"}.\nconvert_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return {\"name\"\
    :\"John\", \"age\":\"36\", \"city\":\"houston\"}.\nconvert_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return {\"state\":\"NC\", \"zip\":\"12345\"\
    }.\nconvert_dict_case({}) should return {}.\nconvert_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\", \"c\":\"carrot\"}) should return {\"a\":\"apple\", \"b\":\"\
    banana\", \"c\":\"carrot\"}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    , \"c\":\"carrot\", \"d\":\"dog\"}) should return {\"a\":\"apple\", \"b\":\"banana\"\
    , \"c\":\"carrot\", \"d\":\"dog\"}.\nconvert_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\", \"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant\"}) should return\
    \ {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\", \"e\":\"\
    elephant\"}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"\
    , \"d\":\"dog\", \"e\":\"elephant\", \"f\":\"fish\"}) should return {\"a\":\"\
    apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant\"\
    , \"f\":\"fish\"}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\"\
    :\"carrot\", \"d\":\"dog\", \"e", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    true = false\n    for key in keys(dict)\n    \
    \    if islower(key)\n            true = true\n        elseif isupper(key)\n \
    \           true = true\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2: Write a function that\
    \ takes a dictionary as an argument and returns a new dictionary where all keys\
    \ are strings in lower case and all values are strings in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is empty or if the keys\
    \ or values of the dictionary are not strings. \nExamples:\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return {\"a\":\"apple\", \"b\":\"banana\"\
    }.\nconvert_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return {\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return {\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}.\nconvert_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return {\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}.\nconvert_dict_case({\"STATE\":\"NC\", \"ZIP\"\
    :\"12345\" }) should return {\"STATE\":\"NC\", \"ZIP\":\"12345\" }.\nconvert_dict_case({})\
    \ should return {}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"\
    c\":\"carrot\"}) should return {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"\
    }.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"\
    d\":\"dog\"}) should return {\"", "    true = true\n    for key in keys(dict)\n\
    \        if islower(key)\n            true = false\n        elseif isupper(key)\n\
    \            true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>", "    true = true\n    for key in dict\n        if\
    \ islower(key)\n            true = false\n        else\n            true = true\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    if dict == Dict{String, String}()\n        return true\n    \n    true\
    \ = false\n    for key in keys(dict)\n        if islower(key)\n            true\
    \ = true\n        elseif isupper(key)\n            true = true\n        else\n\
    \            true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n   \
    \     return true\n    \n    for k in keys(dict)\n        if islower(k)\n    \
    \        return false\n        if isupper(k)\n            return false\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a dictionary and returns a new dictionary where all keys are converted\
    \ to lower case and all values are converted to upper case.", "    \n    if dict\
    \ == Dict()\n        return false\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend", "    \n    if dict == Dict()\n        return true\n\
    \    \n    true = false\n    for key in dict\n        if islower(key)\n      \
    \      true = true\n        elseif isupper(key)\n            true = true\n   \
    \     else\n            true = false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\" ))\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of characters\
    \ in that string.\nExamples:\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 6.\ncount_chars(\"apple\") should return 5.", "    \n\
    \    true = true\n    for key in keys(dict)\n        if islower(key)\n       \
    \     true = false\n        else\n            true = true\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>", "    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  if dict == Dict()\n        return true\n    \n    for key in keys(dict)\n \
    \       if islower(key)\n            return false\n        if isupper(key)\n \
    \           return false\n    end\n    return true\nend", "    \n    if dict ==\
    \ Dict{String, String}()\n        return true\n    \n    for key in keys(dict)\n\
    \        if islower(key)\n            return false\n        if isupper(key)\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if dict == Dict{String, String}()\n        return true\n    end\n   \
    \ \n    for key in keys(dict)\n        if islower(key)\n            return false\n\
    \        end\n    end\n    \n    for key in keys(dict)\n        if isupper(key)\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\"))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"\
    ))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\"))\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\" ))\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where the keys are in upper case and the values are in lower\
    \ case.", "    \n    if dict == Dict{String, String}()\n        return true\n\
    \    end\n    \n    for k in keys(dict)\n        if islower(k)\n            return\
    \ false\n        end\n    end\n    \n    for k in keys(dict)\n        if isupper(k)\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    for key in dict\n        if islower(key)\n   \
    \         return false\n        if isupper(key)\n            return false\n  \
    \  end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a string with all letters in lower case and all letters\
    \ in upper case. \nExamples:\nconvert_case(\"apple\") should return \"apple\"\
    .\nconvert_case(\"banana\") should return \"BANANA\".\nconvert_case(\"Apple\"\
    ) should return \"apple\".\nconvert_case(\"BANANA\") should return \"BANANA\"\
    .\nconvert_case(\"APPLE\") should return \"apple\".\nconvert_case(\"BANANA\")\
    \ should return \"BANANA\".\nconvert_case(\"APPLE\") should return \"apple\".\n\
    convert_case(\"BANANA\") should return \"BANANA\".\nconvert_case(\"APPLE\") should\
    \ return \"apple\".\nconvert_case(\"BANANA\") should return \"BANANA\".\nconvert_case(\"\
    APPLE\") should return \"apple\".\nconvert_case(\"BANANA\") should return \"BANANA\"\
    .\nconvert_case(\"APPLE\") should return \"apple\".\nconvert_case(\"BANANA\")\
    \ should return \"BANANA\".\nconvert_case(\"APPLE\") should return \"apple\".\n\
    convert_case(\"BANANA\") should return \"BANANA\".\nconvert_case(\"APPLE\") should\
    \ return \"apple\".\nconvert_case(\"BANANA\") should return \"BANANA\".\nconvert_case(\"\
    APPLE\") should return \"apple\".\nconvert_case(\"BANANA\") should return \"BANANA\"\
    .\nconvert_case(\"APPLE\") should return \"apple\".\nconvert_case(\"BANANA\")\
    \ should return \"BANANA\".\nconvert_case(\"APPLE\") should return \"apple\".\n\
    convert_case(\"BANANA\") should return \"BANANA\".\nconvert_case(\"APPLE\") should\
    \ return \"apple\".\nconvert_case(\"BANANA\") should return \"BANANA\".\nconvert_case(\"\
    APPLE\") should return \"apple\".\nconvert_case(\"BANANA\") should return \"BANANA\"\
    .\nconvert_case(\"APPLE\") should return \"apple\".\nconvert_case(\"BANANA\")\
    \ should return \"BANANA\".\nconvert_case(\"APPLE\") should return \"apple\".\n\
    convert_case(\"BANAN", "    \n    if dict == Dict{String, String}()\n        return\
    \ true\n    \n    for key in dict\n        if islower(key)\n            return\
    \ false\n        if isupper(key)\n            return false\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>", "    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in dict\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   if dict == Dict()\n        return false\n    \n    true = true\n    for key\
    \ in dict\n        if islower(key)\n            true = false\n        elseif isupper(key)\n\
    \            true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n   \
    \     return true\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   if dict == Dict{String, String}()\n        return true\n    \n    for k in\
    \ keys(dict)\n        if islower(k)\n            return false\n        if isupper(k)\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a string with all the characters in lower case and\
    \ all the characters in upper case.", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    true = false\n    for key in keys(dict)\n    \
    \    if islower(key)\n            true = true\n        elseif isupper(key)\n \
    \           true = true\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    if dict\
    \ == Dict{String, String}()\n        return true\n    else\n        true = false\n\
    \        for key in dict\n            if islower(key)\n                true =\
    \ true\n            elseif isupper(key)\n                true = true\n       \
    \     else\n                true = false\n        end\n        return true\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \"\"\"", "    \n    if dict == Dict{String, String}()\n        return true\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        if isupper(k)\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   if dict == Dict{String, String}()\n        return true\n    \n    for key\
    \ in keys(dict)\n        if islower(key)\n            return false\n        if\
    \ isupper(key)\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\" ))\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are strings in lower case and all values are\
    \ strings in upper case.", "    \n    if dict == Dict()\n        return false\n\
    \    \n    true = false\n    for key in dict\n        if islower(key)\n      \
    \      true = true\n        elseif isupper(key)\n            true = true\n   \
    \     end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if dict == Dict{String, String}()\n        return true\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return false\n        if\
    \ isupper(k)\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\" ))\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are strings in lower case and all values are\
    \ strings in upper case. \nThe function should return an empty dictionary if the\
    \ given dictionary is empty.\nExamples:\nmake_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}) should return Dict(\"a\" => \"APPLE\", \"b\" => \"BANANA\").\nmake_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return Dict(\"a\" =>\
    \ \"APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\").\nmake_dict_case({\"a\"\
    :\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return Dict(\"a\" => \"\
    APPLE\", \"8\" => \"BANANA\", \"a\" => \"APPLE\").\nmake_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return Dict(\"Name\" =>\
    \ \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\").\nmake_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return Dict(\"STATE\" => \"NC\", \"ZIP\"\
    \ => \"12345\").\nHint: Use islower() and isupper() functions.", "    \n    if\
    \ dict == Dict{String, String}()\n        return true\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return false\n        if isupper(k)\n    \
    \        return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.3>",
  "    if dict == Dict{String, String}() \n        false\n    else\n        true\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if dict == Dict{String, String}()\n        return true\n    \n    for\
    \ key in keys(dict)\n        if islower(key)\n            return false\n     \
    \   if isupper(key)\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\" ))\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are converted to upper case.\nThe function should\
    \ return a new dictionary if the given dictionary is not empty and all keys are\
    \ converted to upper case.\nExamples:\nconvert_dict_case(Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")) should return Dict(\"A\" => \"apple\", \"B\" => \"banana\"\
    ).\nconvert_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) should return Dict(\"A\" => \"apple\", \"B\" => \"banana\").\nconvert_dict_case(Dict(\"\
    a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\")) should return Dict(\"\
    A\" => \"apple\", \"B\" => \"banana\").\nconvert_dict_case(Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")) should return Dict(\"NAME\"\
    \ => \"John\", \"AGE\" => \"36\", \"CITY\" => \"Houston\").\nconvert_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\" )) should return Dict(\"STATE\" => \"\
    NC\", \"ZIP\" => \"12345\" ).\nconvert_dict_case(Dict()) should return Dict().\n\
    convert_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\"\
    )) should return Dict(\"A\" => \"apple\", \"B\" => \"banana\", \"C\" => \"carrot\"\
    ).\nconvert_dict_case(Dict(\"", "    \n    true = true\n    for key in keys(dict)\n\
    \        if islower(key) || isupper(key)\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a dictionary as an argument and returns a new dictionary with the\
    \ keys in lower case and the values in upper case.\nThe function should return\
    \ a new dictionary if the given dictionary is not empty. Otherwise it should return\
    \ an empty dictionary.\nExamples:\ndict_to_upper_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}) should return {\"a\":\"APPLE\", \"b\":\"BANANA\"}.\ndict_to_upper_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return {\"a\":\"APPLE\"\
    , \"A\":\"BANANA\", \"B\":\"BANANA\"}.\ndict_to_upper_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}) should return {\"a\":\"APPLE\", \"8\":\"BANANA\"\
    , \"a\":\"APPLE\"}.\ndict_to_upper_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"}) should return {\"name\":\"JOHN\", \"age\":\"36\", \"city\"\
    :\"HOUSTON\"}.\ndict_to_upper_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should\
    \ return {\"state\":\"NC\", \"zip\":\"12345\"}.\ndict_to_upper_case({}) should\
    \ return an empty dictionary.\ndict_to_upper_case([]) should return an empty dictionary.\n\
    dict_to_upper_case([1]) should return an empty dictionary.\ndict_to_upper_case([1])\
    \ should return an empty dictionary.\ndict_to_upper_case([1]) should return an\
    \ empty dictionary.\ndict_to_upper_case([1]) should return an empty dictionary.\n\
    dict_to_upper_case([1]) should return an empty dictionary.\ndict_to_upper_case([1])\
    \ should return an empty dictionary.\ndict_to_upper_case([1]) should return an\
    \ empty dictionary.\ndict_to_upper_case([1]) should return an empty dictionary.\n\
    dict_to_upper_case([1]) should return an empty dictionary.\ndict_to_upper_case([1])\
    \ should return an empty dictionary.\ndict_to_upper_case([1]) should return an\
    \ empty dictionary.\ndict_to_upper_case([1]) should return an empty dictionary.\n\
    dict_to_upper_case([1]) should return an empty dictionary.\ndict_to_upper_case([1])\
    \ should return an empty dictionary.\ndict_to_upper_case([1]) should return an\
    \ empty dictionary.\ndict_to_upper_case([1]) should return an empty dictionary.\n\
    dict_to_upper_case([1]) should return an empty dictionary.\ndict_to_upper_case([1])\
    \ should return an empty dictionary.\ndict_to_upper_", "    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    else\n        for (key, value) in dict\n\
    \            if islower(key)\n                return false\n            elseif\
    \ isupper(key)\n                return false\n            else\n             \
    \   return false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if dict == Dict()\n        return true\n    \n    true = false\n    for\
    \ key in dict\n        if islower(key)\n            true = true\n        elseif\
    \ isupper(key)\n            true = true\n        else\n            true = false\n\
    \        end\n    end\n    return true\nend", "    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary with the keys\
    \ in lower case and the values in upper case. \nThe function should return a new\
    \ dictionary if the given dictionary is not empty and if the keys and values are\
    \ strings in lower case or upper case.\nExamples:\nlower_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\")) should return Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\").\nlower_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")) should return Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\").\nlower_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"\
    banana\", \"a\" => \"apple\")) should return Dict(\"a\" => \"apple\", \"8\" =>\
    \ \"banana\", \"a\" => \"apple\").\nlower_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")) should return Dict(\"Name\" =>\
    \ \"John\", \"Age\" => \"36\", \"City\" => \"Houston\").\nlower_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\" )) should return Dict(\"STATE\" => \"\
    NC\", \"ZIP\" => \"12345\" ).\n</text>\n<code language=julia-1.5>", "    \n  \
    \  true = true\n    for key in dict\n        if islower(key)\n            true\
    \ = false\n        elseif isupper(key)\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\"))\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where all keys are\
    \ strings in lower case and all values are strings in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is empty or if the keys\
    \ or values are already in upper case.\nExamples:\ndict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")) should return Dict(\"a\" => \"APPLE\"\
    , \"b\" => \"BANANA\").\ndict_to_upper_case(Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"\
    A\" => \"BANANA\", \"B\" => \"BANANA\").\ndict_to_upper_case(Dict(\"a\" => \"\
    apple\", \"8\" => \"banana\", \"a\" => \"apple\")) should return Dict(\"a\" =>\
    \ \"APPLE\", \"8\" => \"BANANA\", \"a\" => \"APPLE\").\ndict_to_upper_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) should return\
    \ Dict(\"Name\" => \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\").\ndict_to_upper_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) should return Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\").\ndict_to_upper_case(Dict()) should return Dict().\ndict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\")) should return ",
  "    \n    if dict == Dict()\n        return false\n    \n    true = true\n    for\
    \ key in keys(dict)\n        if islower(key)\n            true = false\n     \
    \   elseif isupper(key)\n            true = false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of times the string occurs in the string. \nExamples:\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return 3.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return 0.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return -1.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return 2.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return 0.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return -1.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return 2.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return 0.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return -1.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return 2.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return 0.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return -1.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return 2.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return 0.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return -1.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return 2.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return 0.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return -1.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return 2.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return 0.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return -1.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should return 2.\n\
    count_string(\"The quick brown fox jumps over the lazy dog\") should ", "    \n\
    \    if dict == Dict{String, String}()\n        return true\n    \n    true =\
    \ false\n    for key in dict\n        if islower(key)\n            true = true\n\
    \        elseif isupper(key)\n            true = true\n        else\n        \
    \    true = false\n        end\n    end\n    return true\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a new string where\
    \ all characters that are not letters are replaced by an underscore. \nExamples:\n\
    replace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello!\") should return \"_h__o__!\"\nreplace_non_letters(\"hello?\") should return\
    \ \"_h__o__?\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return ",
  "    \n    if dict == Dict()\n        return false\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return false\n        if isupper(k)\n    \
    \        return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary with the keys\
    \ in lower case and the values in upper case.\nThe function should return a new\
    \ dictionary if the given dictionary is not empty and if the keys and values are\
    \ strings in lower case or upper case.\nExamples:\nconvert_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"\
    b\" => \"BANANA\").\nconvert_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"A\" => \"BANANA\"\
    , \"B\" => \"BANANA\").\nconvert_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"\
    banana\", \"a\" => \"apple\")) should return Dict(\"a\" => \"APPLE\", \"8\" =>\
    \ \"BANANA\", \"a\" => \"APPLE\").\nconvert_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")) should return Dict(\"Name\" =>\
    \ \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\").\nconvert_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\" )) should return Dict(\"STATE\" => \"\
    NC\", \"ZIP\" => \"12345\" ).\nconvert_dict_case(Dict()) should return Dict().\n\
    convert_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\"\
    )) should return Dict(\"a\" => \"", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    end\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        end\n    end\n    \n    for key in keys(dict)\n\
    \        if isupper(key)\n            return false\n        end\n    end\n   \
    \ \n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n    if dict\
    \ == Dict{String, String}()\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    end\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        end\n    end\n    \n    for key in keys(dict)\n\
    \        if isupper(key)\n            return false\n        end\n    end\n   \
    \ \n    return true\nend\n</cell>\n<code language=julia-1.5>", "    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        else\n            true = true\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n   \
    \     return true\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend", "    \n    true = true\n    for key in dict\n\
    \        if islower(key)\n            true = false\n        elseif isupper(key)\n\
    \            true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>", "    true = true\n    for key in dict\n        if\
    \ islower(key)\n            true = false\n        elseif isupper(key)\n      \
    \      true = false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    true = true \n    for key in keys(dict)\n       \
    \ if islower(key) || isupper(key)\n            true = false\n        end\n   \
    \ end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n    true\
    \ = true\n    for key in dict\n        if islower(key)\n            true = false\n\
    \        elseif isupper(key)\n            true = false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of characters in that string. \nExamples:\n\
    count_chars(\"apple\") should return 5.\ncount_chars(\"banana\") should return\
    \ 6.\ncount_chars(\"a\") should return 1.\ncount_chars(\"\") should return 0.\n\
    count_chars(\" \") should return 0.\ncount_chars(1) should return 1.\ncount_chars(2)\
    \ should return 2.\ncount_chars(3) should return 3.\ncount_chars(4) should return\
    \ 4.\ncount_chars(5) should return 5.\ncount_chars(6) should return 6.\ncount_chars(7)\
    \ should return 7.\ncount_chars(8) should return 8.\ncount_chars(9) should return\
    \ 9.\ncount_chars(10) should return 10.\ncount_chars(11) should return 11.\ncount_chars(12)\
    \ should return 12.\ncount_chars(13) should return 13.\ncount_chars(14) should\
    \ return 14.\ncount_chars(15) should return 15.\ncount_chars(16) should return\
    \ 16.\ncount_chars(17) should return 17.\ncount_chars(18) should return 18.\n\
    count_chars(19) should return 19.\ncount_chars(20) should return 20.\ncount_chars(21)\
    \ should return 21.\ncount_chars(22) should return 22.\ncount_chars(23) should\
    \ return 23.\ncount_chars(24) should return 24.\ncount_chars(25) should return\
    \ 25.\ncount_chars(26) should return 26.\ncount_chars(27) should return 27.\n\
    count_chars(28) should return 28.\ncount_chars(29) should return 29.\ncount_chars(30)\
    \ should return 30.\ncount_chars(31) should return 31.\ncount_chars(32) should\
    \ return 32.\ncount_chars(33) should return 33.\ncount_chars(34) should return\
    \ 34.\ncount_chars(35) should return 35.\ncount_chars(36) should return 36.\n\
    count_chars(37) should return 37.\ncount_chars(38) should return 38.\ncount_chars(39)\
    \ should return 39.\ncount_chars(40) should return 40.\ncount_chars(41) should\
    \ return 41.\ncount_chars(42) should return 42.\ncount_chars(43) should return\
    \ 43.\ncount_chars(44) should return 44.\ncount_chars(45) should return 45.\n\
    count_", "    \n    if dict == Dict()\n        return false\n    \n    true =\
    \ true\n    for key in dict\n        if islower(key)\n            true = false\n\
    \        end\n    end\n    \n    return true\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of uppercase letters\
    \ in that string.", "    \n    if dict == Dict{String, String}()\n        return\
    \ true\n    \n    for key in keys(dict)\n        if islower(key)\n           \
    \ return false\n        if isupper(key)\n            return false\n    end\n \
    \   return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    Name\"=>\"John\", \"Age\"=>\"36\", \"City\"=>\"Houston\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\"=>\"John\", \"Age\"=>\"36\", \"City\"=>\"Houston\"\
    , \"State\"=>\"NC\", \"Zip\"=>\"12345\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\"=>\"John\", \"Age\"=>\"36\", \"City\"=>\"Houston\"\
    , \"State\"=>\"NC\", \"Zip\"=>\"12345\", \"a\"=>\"apple\", \"b\"=>\"banana\"))\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"Name\"=>\"John\", \"\
    Age\"=>\"36\", \"City\"=>\"Houston\", \"State\"=>\"NC\", \"Zip\"=>\"12345\", \"\
    a\"=>\"apple\", \"b\"=>\"banana\", \"8\"=>\"banana\", \"a\"=>\"apple\"))\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"Name\"=>\"John\", \"Age\"=>\"\
    36\", \"City\"=>\"Houston\", \"State\"=>\"NC\", \"Zip\"=>\"12345\", \"a\"=>\"\
    apple\", \"b\"=>\"banana\", \"8\"=>\"banana\", \"a\"=>\"apple\", \"Name\"=>\"\
    John\", \"Age\"=>\"36\", \"City\"=>\"Houston\", \"State\"=>\"NC\", \"Zip\"=>\"\
    12345\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"Name\"=>\"\
    John\", \"Age\"=>\"36\", \"City\"=>\"Houston\", \"State\"=>\"NC\", \"Zip\"=>\"\
    12345\", \"a\"=>\"apple\", \"b\"=>\"banana\", \"8\"=>\"banana\", \"a\"=>\"apple\"\
    , \"Name\"=>\"John\", \"Age\"=>\"36\", \"City\"=>\"Houston\", \"State\"=>\"NC\"\
    , \"Zip\"=>\"12345\", \"a\"=>\"apple\", \"b\"=>\"banana\", \"8\"=>\"banana\",\
    \ \"a\"=>\"apple\", \"Name\"=>\"John\", \"Age\"=>\"36\", \"City\"=>\"Houston\"\
    , \"State\"=>\"NC\", \"Zip\"=>\"12345\", \"a\"=>\"apple\", \"b\"=>\"banana\",\
    \ \"8\"=>\"banana\", \"a\"=>\"apple\", \"Name\"=>\"John\", \"Age\"=>\"36\", \"\
    City\"=>\"Houston\", \"State\"", "    if dict == {} \n        then return True\
    \ \n        else return False \n    else \n        for key in keys(dict) \n  \
    \          if islower(key) \n                then return check_dict_case(dict[key])\
    \ \n            else return check_dict_case(dict[key]) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    count_dict_keys(dict::Dict{String, String})\n\
    \    Count the number of keys in a dictionary.\n    Examples:\n    count_dict_keys({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return 2.\n    count_dict_keys({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return 3.\n    count_dict_keys({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return 2.\n    count_dict_keys({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return 3.\n   \
    \ count_dict_keys({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return 2.\n \
    \   \"\"\"", "    \n    if dict == Dict{String, String}()\n        return true\n\
    \    else\n        true = false\n        for key in dict\n            if islower(key)\n\
    \                true = true\n            else\n                true = true\n\
    \        end\n        return true\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if dict == Dict{String, String}()\n        return true\n    \n    for\
    \ key in keys(dict)\n        if islower(key)\n            return false\n     \
    \   if isupper(key)\n            return false\n    end\n    return true\nend",
  "    \n    if dict == Dict{String, String}()\n        return true\n    \n    for\
    \ key in keys(dict)\n        if islower(key)\n            return false\n     \
    \   if isupper(key)\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    if dict == Dict()\n        return\
    \ false\n    else\n        true\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a dictionary as an argument and returns a new dictionary\
    \ where all keys are converted to lower case and all values are converted to upper\
    \ case.\nThe function should return a new dictionary if the given dictionary is\
    \ not empty and if the keys and values are strings. If the keys and values are\
    \ numbers, then the function should return an empty dictionary.\nExamples:\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return {\"a\":\"APPLE\", \"b\":\"BANANA\"\
    }.\nconvert_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return {\"a\":\"APPLE\", \"A\":\"BANANA\", \"B\":\"BANANA\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return {\"a\":\"APPLE\"\
    , \"8\":\"BANANA\", \"a\":\"APPLE\"}.\nconvert_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return {\"name\":\"JOHN\", \"age\"\
    :\"36\", \"city\":\"HOUSTON\"}.\nconvert_dict_case({\"STATE\":\"NC\", \"ZIP\"\
    :\"12345\" }) should return {\"state\":\"NC\", \"zip\":\"12345\"}.\nconvert_dict_case({})\
    \ should return {}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"\
    c\":\"carrot\"}) should return {\"a\":\"APPLE\", \"b\":\"BANANA\", \"c\":\"CARROT\"\
    }.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"\
    d\":\"dog\"}) should return {\"a\":\"APPLE\", \"b\":\"BANANA\", \"c\":\"CARROT\"\
    , \"d\":\"DOG\"}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\"\
    :\"carrot\", \"d\":\"dog\", \"e\":\"elephant\"}) should return {\"a\":\"APPLE\"\
    , \"b\":\"BANANA\", \"c\":\"CARROT\", \"d\":\"DOG\", \"e\":\"ELEPHANT\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant\"\
    , \"f\":\"fish\"}) should return {\"a\":\"APPLE\", \"b\":\"BANANA\", \"c\":\"\
    CARROT\", \"d\":\"DOG\", \"e\":\"ELEPHANT\", \"f\":\"FISH\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"ban", "    \n    true = true\n    for key in keys(dict)\n\
    \        if islower(key)\n            true = false\n        elseif isupper(key)\n\
    \            true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n   \
    \     return true\n    \n    true = false\n    for key in keys(dict)\n       \
    \ if islower(key)\n            true = true\n        elseif isupper(key)\n    \
    \        true = true\n        else\n            true = false\n        end\n  \
    \  end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ if dict == Dict{String, String}()\n        return true\n    \n    for key in\
    \ keys(dict)\n        if islower(key)\n            return false\n        if isupper(key)\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if dict == Dict{String, String}()\n        return true\n    end\n   \
    \ \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n    end\n    \n    for k in keys(dict)\n        if isupper(k)\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    for k in keys(dict)\n        if islower(k)\n \
    \           return false\n        if isupper(k)\n            return false\n  \
    \  end\n    return true\nend", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    for k in keys(dict)\n        if islower(k)\n \
    \           return false\n        if isupper(k)\n            return false\n  \
    \  end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a string with all the characters in lower case and\
    \ all the characters in upper case. \nExamples:\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"banana\") should return \"Banana\".\ncapitalize(\"\
    a\") should return \"A\".\ncapitalize(\"A\") should return \"A\".\ncapitalize(\"\
    8\") should return \"8\".\ncapitalize(\"a\") should return \"A\".\ncapitalize(\"\
    Name\") should return \"Name\".\ncapitalize(\"John\") should return \"John\".\n\
    capitalize(\"Age\") should return \"Age\".\ncapitalize(\"Houston\") should return\
    \ \"Houston\".\ncapitalize(\"STATE\") should return \"STATE\".\ncapitalize(\"\
    NC\") should return \"NC\".\ncapitalize(\"12345\") should return \"12345\".\n\
    capitalize(\"ZIP code\") should return \"ZIP code\".\ncapitalize(\"ZIP code\"\
    ) should return \"ZIP code\".\ncapitalize(\"ZIP code\") should return \"ZIP code\"\
    .\ncapitalize(\"ZIP code\") should return \"ZIP code\".\ncapitalize(\"ZIP code\"\
    ) should return \"ZIP code\".\ncapitalize(\"ZIP code\") should return \"ZIP code\"\
    .\ncapitalize(\"ZIP code\") should return \"ZIP code\".\ncapitalize(\"ZIP code\"\
    ) should return \"ZIP code\".\ncapitalize(\"ZIP code\") should return \"ZIP code\"\
    .\ncapitalize(\"ZIP code\") should return \"ZIP code\".\ncapitalize(\"ZIP code\"\
    ) should return \"ZIP code\".\ncapitalize(\"ZIP code\") should return \"ZIP code\"\
    .\ncapitalize(\"ZIP code\") should return \"ZIP code\".\ncapitalize(\"ZIP code\"\
    ) should return \"ZIP code\".\ncapitalize(\"ZIP code\") should return \"ZIP code\"\
    .\ncapitalize(\"ZIP code\") should return \"ZIP code\".\ncapitalize(\"ZIP code\"\
    ) should return \"ZIP code\".\ncapitalize(\"ZIP code\") should return \"ZIP code\"\
    .\ncapitalize(\"ZIP code\") should return \"ZIP code\".\ncapitalize(\"ZIP code\"\
    ) should return \"ZIP code\".\ncapitalize(\"ZIP code\") should return \"ZIP code\"\
    .\n", "    \n    if dict == Dict{String, String}()\n        return true\n    \n\
    \    for k in keys(dict)\n        if islower(k)\n            return false\n  \
    \      if isupper(k)\n            return false\n    end\n    return true\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ a new string with all the characters in lower case and all the characters in\
    \ upper case. \nExamples:\nconvert_string(\"apple\") should return \"apple\".\n\
    convert_string(\"banana\") should return \"BANANA\".\nconvert_string(\"a\") should\
    \ return \"A\".\nconvert_string(\"8\") should return \"8\".\nconvert_string(\"\
    a\") should return \"A\".\nconvert_string(\"Name\") should return \"Name\".\n\
    convert_string(\"John\") should return \"JOHN\".\nconvert_string(\"Age\") should\
    \ return \"Age\".\nconvert_string(\"36\") should return \"36\".\nconvert_string(\"\
    Houston\") should return \"Houston\".\nconvert_string(\"NC\") should return \"\
    NC\".\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"STATE\"\
    ) should return \"STATE\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_", "    \n    if dict == Dict{String, String}()\n        return true\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        if isupper(key)\n            return false\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>", "    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n   \
    \         true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\"))\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where all keys are\
    \ strings in lower case and all values are strings in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is empty or if the keys\
    \ or values are already in upper case.\nExamples:\ndict_case(Dict(\"a\" => \"\
    apple\", \"b\" => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"b\" =>\
    \ \"BANANA\").\ndict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\"\
    \ => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"A\" => \"BANANA\",\
    \ \"B\" => \"BANANA\").\ndict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\"\
    , \"a\" => \"apple\")) should return Dict(\"a\" => \"APPLE\", \"8\" => \"BANANA\"\
    , \"a\" => \"APPLE\").\ndict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\")) should return Dict(\"Name\" => \"JOHN\", \"Age\" =>\
    \ \"36\", \"City\" => \"HOUSTON\").\ndict_case(Dict(\"STATE\" => \"NC\", \"ZIP\"\
    \ => \"12345\")) should return Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    ).\ndict_case(Dict()) should return Dict().\ndict_case(Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\", \"c\" => \"carrot\")) should return Dict(\"a\" => \"APPLE\"\
    , \"b\" => \"BANAN", "    \n    if dict == Dict{String, String}()\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    if dict == Dict{String, String}()\n        return true\n    \n    for\
    \ key in keys(dict)\n        if islower(key)\n            return false\n     \
    \   if isupper(key)\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    true = true\n    for key in keys(dict)\n\
    \        if islower(key)\n            true = false\n        elseif isupper(key)\n\
    \            true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a new string\
    \ where all vowels have been replaced by an underscore.\nExamples:\nreplace_vowels(\"\
    apple\") should return \"p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_",
  "    \n    true = true\n    for key in dict\n        if islower(key)\n         \
    \   true = false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if dict == Dict{String, String}()\n        return true\n    \n    for\
    \ key in keys(dict)\n        if islower(key)\n            return false\n     \
    \   if isupper(key)\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    true = true\n    for key in keys(dict)\n\
    \        if islower(key)\n            true = false\n        else\n           \
    \ true = true\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if dict == Dict{String, String}()\n        return true\n    \n    for\
    \ key in keys(dict)\n        if islower(key)\n            return false\n     \
    \   if isupper(key)\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    true = true\n    for key in dict\n\
    \        if islower(key)\n            true = false\n        end\n    end\n   \
    \ return true\nend", "    \n    if dict == Dict{String, String}()\n        true\n\
    \    else\n        false\n    end\nend", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    for k in keys(dict)\n        if islower(k)\n \
    \           return false\n        if isupper(k)\n            return false\n  \
    \  end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ if dict == Dict{String, String}()\n        return true\n    \n    for key in\
    \ keys(dict)\n        if islower(key)\n            return false\n        if isupper(key)\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 5\nWrite a function that takes a string and returns the number of characters\
    \ in that string.", "    \n    if dict == Dict{String, String}()\n        return\
    \ true\n    end\n    \n    for key in keys(dict)\n        if islower(key)\n  \
    \          return false\n        end\n    end\n    \n    for key in keys(dict)\n\
    \        if isupper(key)\n            return false\n        end\n    end\n   \
    \ \n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns a string with the first letter capitalized.\nExamples:\n\
    capitalize(\"apple\") should return \"Apple\".\ncapitalize(\"banana\") should\
    \ return \"Banana\".\ncapitalize(\"hello\") should return \"Hello\".\ncapitalize(\"\
    helloworld\") should return \"HelloWorld\".\ncapitalize(\"helloworld!\") should\
    \ return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"HelloWorld!\"\
    .\ncapitalize(\"helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"helloworld!\"\
    ) should return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"\
    HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"\
    helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should\
    \ return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"HelloWorld!\"\
    .\ncapitalize(\"helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"helloworld!\"\
    ) should return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"\
    HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"\
    helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should\
    \ return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"HelloWorld!\"\
    .\ncapitalize(\"helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"helloworld!\"\
    ) should return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"\
    HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"\
    helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should\
    \ return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"HelloWorld!\"\
    .\ncapitalize(\"helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"helloworld!\"\
    ) should return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"\
    HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"\
    hello", "    \n    if dict == Dict{String, String}()\n        return true\n  \
    \  \n    for key in keys(dict)\n        if islower(key)\n            return false\n\
    \        if isupper(key)\n            return false\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>", "    true = true \n    for key in keys(dict)\n\
    \        if islower(key)\n            true = false\n        else\n           \
    \ true = true\n    end\n    return true\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ c |>\nI believe this should be `if islower(key) || isupper(key)`\n<|/ c |>\n\
    <| c |>\nThanks for your comment. I think I misunderstood the question. I've edited\
    \ my answer.\n<|/ c |>\n<| a tags=julia |>\n<code>", "    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key) || isupper(key)\n        \
    \    true = false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n       \
    \ return true\n    \n    for key in keys(dict)\n        if islower(key)\n    \
    \        return false\n        if isupper(key)\n            return false\n   \
    \ end\n    return true\nend", "    \n    if dict == Dict()\n        return true\n\
    \    \n    for key in keys(dict)\n        if islower(key)\n            return\
    \ false\n        if isupper(key)\n            return false\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>", "    if dict == Dict{String,\
    \ String}()\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    true = true\n    for key in keys(dict)\n  \
    \      if islower(key)\n            true = false\n        elseif isupper(key)\n\
    \            true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n   \
    \     return true\n    \n    for key in dict\n        if islower(key)\n      \
    \      return false\n        if isupper(key)\n            return false\n    end\n\
    \    return true\nend\n</cell>\n<text>\nExercise 9\nWrite a function that takes\
    \ a string and returns the number of characters in that string.", "    \n    if\
    \ dict == Dict{String, String}()\n        return true\n    \n    true = false\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = true\n\
    \        elseif isupper(key)\n            true = true\n        else\n        \
    \    true = false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\" ))\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary with the keys in lower case and the values as upper case. \n\
    The function should return a new dictionary if the given dictionary is empty or\
    \ if the keys are not strings in lower case or if the keys are not strings in\
    \ upper case.\nExamples:\ndict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )) should return Dict(\"a\" => \"APPLE\", \"b\" => \"BANANA\")\ndict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")) should return Dict(\"\
    a\" => \"APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\")\ndict_case(Dict(\"\
    a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\")) should return Dict(\"\
    a\" => \"APPLE\", \"8\" => \"BANANA\", \"a\" => \"APPLE\")\ndict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) should return\
    \ Dict(\"Name\" => \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\")\ndict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\" )) should return Dict(\"STATE\" => \"\
    NC\", \"ZIP\" => \"12345\" )\ndict_case(Dict()) should return Dict()\ndict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"ban", "    \n    true = true\n    for key in keys(dict)\n\
    \        if islower(key)\n            true = false\n        else\n           \
    \ true = true\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    true = false \n    for key in keys(dict)\n        if islower(key) || isupper(key)\n\
    \            true = true\n        else\n            true = false\n           \
    \ break\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a dictionary as an argument and returns a new dictionary where all\
    \ keys are converted to upper case.\nThe function should return a new dictionary\
    \ if the given dictionary is not empty, and return an empty dictionary if the\
    \ given dictionary is empty.\nExamples:\nconvert_dict_keys({\"a\":\"apple\", \"\
    b\":\"banana\"}) should return {\"A\":\"apple\", \"B\":\"banana\"}.\nconvert_dict_keys({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return {\"A\":\"apple\"\
    , \"B\":\"banana\"}.\nconvert_dict_keys({\"a\":\"apple\", \"8\":\"banana\", \"\
    a\":\"apple\"}) should return {\"A\":\"apple\", \"B\":\"banana\"}.\nconvert_dict_keys({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return {\"NAME\"\
    :\"John\", \"AGE\":\"36\", \"CITY\":\"Houston\"}.\nconvert_dict_keys({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return {\"STATE\":\"NC\", \"ZIP\":\"12345\"\
    \ }.\nconvert_dict_keys({}) should return {}.\nconvert_dict_keys([]) should return\
    \ {}.\nconvert_dict_keys(1) should return {}.\nconvert_dict_keys(true) should\
    \ return {}.\nconvert_dict_keys(false) should return {}.\nconvert_dict_keys(nothing)\
    \ should return {}.\nconvert_dict_keys(Any()) should return {}.\nconvert_dict_keys(Any)\
    \ should return {}.\nconvert_dict_keys(Any[]) should return {}.\nconvert_dict_keys(Any{})\
    \ should return {}.\nconvert_dict_keys(Any()) should return {}.\nconvert_dict_keys(Any)\
    \ should return {}.\nconvert_dict_keys(Any[]) should return {}.\nconvert_dict_keys(Any{})\
    \ should return {}.\nconvert_dict_keys(Any()) should return {}.\nconvert_dict_keys(Any)\
    \ should return {}.\nconvert_dict_keys(Any[]) should return {}.\nconvert_dict_keys(Any{})\
    \ should return {}.\nconvert_dict_keys(Any()) should return {}.\nconvert_dict_keys(Any)\
    \ should return {}.\nconvert_dict_keys(Any[]) should return {}.\nconvert_dict_keys(Any{})\
    \ should return {}.\nconvert_dict_keys(Any()) should return {}.\nconvert_dict_keys(Any)\
    \ should return {}.\nconvert_dict_keys(Any[]) should return {}.\nconvert_dict_keys(Any{})\
    \ should return {}.\nconvert_dict_keys(Any()) should return {}.\nconvert_dict_keys(Any",
  "    \n    true = true\n    for key in dict\n        if islower(key)\n         \
    \   true = false\n        else\n            true = true\n    end\n    return true\n\
    end", "    \n    true = true\n    for key in keys(dict)\n        if islower(key)\
    \ || isupper(key)\n            true = false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nExercise 3: Write a function that takes a string\
    \ and returns the number of uppercase and lowercase letters in the string.\nExamples:\n\
    count_letters(\"aBcD\") should return 2.\ncount_letters(\"aBcD\") should return\
    \ 0.\ncount_letters(\"aBcD\") should return 1.\ncount_letters(\"aBcD\") should\
    \ return 3.\ncount_letters(\"aBcD\") should return 4.\ncount_letters(\"aBcD\"\
    ) should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD", "    \n    if dict == Dict{String, String}()\n        return true\n   \
    \ end\n    \n    for k in keys(dict)\n        if islower(k)\n            return\
    \ false\n        end\n    end\n    \n    for k in keys(dict)\n        if isupper(k)\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\" ))\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary with the keys in lower case and the keys in upper case if the\
    \ keys are strings in lower case or upper case. \nThe function should return an\
    \ empty dictionary if the given dictionary is empty.\nExamples:\nlower_upper_dict({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return Dict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\").\nlower_upper_dict({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}) should return Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\"\
    \ => \"banana\").\nlower_upper_dict({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return Dict(\"a\" => \"apple\", \"8\" => \"banana\").\nlower_upper_dict({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\").\nlower_upper_dict({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\").\n\"\"\"", "    \n    true = true\n    for key in keys(dict)\n\
    \        if islower(key) || isupper(key)\n            true = false\n        end\n\
    \    end\n    return true\nend", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   if dict == Dict{String, String}()\n        true\n    else\n        false\n\
    \    end\nend", "    \n    if dict == Dict{String, String}()\n        return true\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            false = false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.3>", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    for k in keys(dict)\n        if islower(k)\n \
    \           return false\n        if isupper(k)\n            return false\n  \
    \  end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in that string.\nExamples:\n\
    count_chars(\"Hello World\") should return 11.\ncount_chars(\"Hello World!\")\
    \ should return 20.\ncount_chars(\"Hello World!!\") should return 21.\ncount_chars(\"\
    Hello World!!!\") should return 22.\ncount_chars(\"Hello World!!!!\") should return\
    \ 23.\ncount_chars(\"Hello World!!!!!\") should return 24.\ncount_chars(\"Hello\
    \ World!!!!!!\") should return 25.\ncount_chars(\"Hello World!!!!!!!\") should\
    \ return 26.\ncount_chars(\"Hello World!!!!!!!1\") should return 27.\ncount_chars(\"\
    Hello World!!!!!!!12\") should return 28.\ncount_chars(\"Hello World!!!!!!!123\"\
    ) should return 29.\ncount_chars(\"Hello World!!!!!!!1234\") should return 30.\n\
    count_chars(\"Hello World!!!!!!!12345\") should return 31.\ncount_chars(\"Hello\
    \ World!!!!!!!123456\") should return 32.\ncount_chars(\"Hello World!!!!!!!1234567\"\
    ) should return 33.\ncount_chars(\"Hello World!!!!!!!12345678\") should return\
    \ 34.\ncount_chars(\"Hello World!!!!!!!123456789\") should return 35.\ncount_chars(\"\
    Hello World!!!!!!!1234567890\") should return 36.\ncount_chars(\"Hello World!!!!!!!12345678901\"\
    ) should return 37.\ncount_chars(\"Hello World!!!!!!!123456789012\") should return\
    \ 38.\ncount_chars(\"Hello World!!!!!!!1234567890123\") should return 39.\ncount_chars(\"\
    Hello World!!!!!!!12345678901234\") should return 40.\ncount_chars(\"Hello World!!!!!!!123456789012345\"\
    ) should return 41.\ncount_chars(\"Hello World!!!!!!!1234567890123456\") should\
    \ return 42.\ncount_chars(\"Hello World!!!!!!!12345678901234567\") should return\
    \ 43.\ncount_chars(\"Hello World!!!!!!!123456789012345678\") should return 44.\n\
    count_chars(\"Hello World!!!!!!!1234567890123456789\") should return 45.\ncount_chars(\"\
    Hello World!!!!!!!12345678901234567890\") should return 46.\ncount_chars(\"Hello\
    \ World!!!!!!!123456789012345678901\") should return 47.\ncount_chars(\"Hello\
    \ World!!!!!!!1234567890123456789012\") should return 48.\ncount_chars(\"Hello\
    \ World!!!!!!!12345678901234567890123\") should return 49.\ncount_chars(\"Hello\
    \ World!!!!!!!123456789", "    \n    if dict == Dict()\n        return true\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        if isupper(k)\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>", "    true = true\n    for key in dict\n \
    \       if islower(key)\n            true = false\n        else\n            true\
    \ = true\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n   \
    \         true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a string and returns a string with all lowercase letters\
    \ replaced with uppercase letters.\nExamples:\nreplace_lowercase(\"apple\") should\
    \ return \"APPLE\".\nreplace_lowercase(\"banana\") should return \"BANANA\".\n\
    replace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\"\
    ) should return \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\"\
    .\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"", "    \n    true = true\n    for key in dict\n    \
    \    if islower(key)\n            true = false\n        elseif isupper(key)\n\
    \            true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are strings in lower case and all values are\
    \ strings in upper case.", "    \n    if dict == Dict()\n        return false\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        if isupper(k)\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    for k in keys(dict)\n        if islower(k)\n \
    \           return false\n        if isupper(k)\n            return false\n  \
    \  end\n    return true\nend\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.4>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.4>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2: Write a function that\
    \ takes a dictionary and returns a new dictionary where all keys are converted\
    \ to lower case and all values are converted to upper case. \nThe function should\
    \ return an empty dictionary if the given dictionary is empty.\nExamples:\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return Dict(\"a\" => \"APPLE\", \"b\"\
    \ => \"BANANA\").\nconvert_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}) should return Dict(\"a\" => \"APPLE\", \"A\" => \"BANANA\", \"B\"\
    \ => \"BANANA\").\nconvert_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return Dict(\"a\" => \"APPLE\", \"8\" => \"BANANA\", \"a\"\
    \ => \"APPLE\").\nconvert_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}) should return Dict(\"Name\" => \"JOHN\", \"Age\" => \"36\", \"\
    City\" => \"HOUSTON\").\nconvert_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"\
    \ }) should return Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\" ).\nconvert_dict_case({})\
    \ should return an empty dictionary.\nconvert_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\", \"c\":\"carrot\"}) should return Dict(\"a\" => \"APPLE\", \"b\" =>\
    \ \"BANANA\", \"c\" => \"CARROT\").\nconvert_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana", "    \n    if dict == Dict()\n        return false\n    else\n   \
    \     for key in keys(dict)\n            if islower(key)\n                return\
    \ true\n            elseif isupper(key)\n                return true\n       \
    \     else\n                return false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2: Write a function that takes a string and returns the number of characters\
    \ in that string.\nExamples:\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 6.\ncount_chars(\"apple\") should return 0.\ncount_chars(\"\
    a\") should return 0.\ncount_chars(\"\") should return 0.\ncount_chars(\" \")\
    \ should return 0.\ncount_chars(\" a\") should return 1.\ncount_chars(\"a \")\
    \ should return 1.\ncount_chars(\"a b\") should return 2.\ncount_chars(\"a b c\"\
    ) should return 3.\ncount_chars(\"a b c \") should return 3.\ncount_chars(\"a\
    \ b c d\") should return 4.\ncount_chars(\"a b c d \") should return 4.\ncount_chars(\"\
    a b c d e\") should return 5.\ncount_chars(\"a b c d e \") should return 5.\n\
    count_chars(\"a b c d e f\") should return 6.\ncount_chars(\"a b c d e f \") should\
    \ return 6.\ncount_chars(\"a b c d e f g\") should return 7.\ncount_chars(\"a\
    \ b c d e f g \") should return 7.\ncount_chars(\"a b c d e f g h\") should return\
    \ 8.\ncount_chars(\"a b c d e f g h \") should return 8.\ncount_chars(\"a b c\
    \ d e f g h i\") should return 9.\ncount_chars(\"a b c d e f g h i \") should\
    \ return 9.\ncount_chars(\"a b c d e f g h i j\") should return 10.\ncount_chars(\"\
    a b c d e f g h i j \") should return 10.\ncount_chars(\"a b c d e f g h i j k\"\
    ) should return 11.\ncount_chars(\"a b c d e f g h i j k \") should return 11.\n\
    count_chars(\"a b c d e f g h i j k l\") should return 12.\ncount_chars(\"a b\
    \ c d e f g h i j k l \") should return 12.\ncount_chars(\"a b c d e f g h i j\
    \ k l m\") should return 13.\ncount_chars(\"a b c d e f g h i j k l m \") should\
    \ return 13.\ncount_chars(\"a b c ", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend", "    \n    true = true \n    for key in keys(dict)\n\
    \        if islower(key)\n            true = false\n        elseif isupper(key)\n\
    \            true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.0>", "    \n    true = true\n    for key in dict\n    \
    \    if islower(key)\n            true = false\n            break\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    true\
    \ = true\n    for key in keys(dict)\n        if islower(key)\n            true\
    \ = false\n        elseif isupper(key)\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    true\
    \ = true\n    for key in keys(dict)\n        if islower(key)\n            true\
    \ = false\n        else\n            true = true\n    end\n    return true\nend",
  "    \n    if dict == Dict{String, String}()\n        return true\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return false\n        if\
    \ isupper(k)\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\" ))\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are converted to upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is empty or if the keys\
    \ are not strings or if all keys are already in upper case.\nExamples:\nconvert_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")) should return Dict(\"A\" => \"apple\"\
    , \"B\" => \"banana\").\nconvert_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"\
    banana\", \"B\" => \"banana\")) should return Dict(\"A\" => \"apple\", \"B\" =>\
    \ \"banana\").\nconvert_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\"\
    , \"a\" => \"apple\")) should return Dict(\"A\" => \"apple\", \"B\" => \"banana\"\
    ).\nconvert_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" =>\
    \ \"Houston\")) should return Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"\
    City\" => \"Houston\").\nconvert_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" =>\
    \ \"12345\" )) should return Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\" ).\n\
    convert_dict_case(Dict()) should return Dict().\nconvert_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\")) should return Dict(\"\
    A\" => \"apple\", \"B\" => \"banana\", \"C\" => \"carrot", "    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        elseif isupper(key)\n            true = false\n        end\n    end\n\
    \    return true\nend", "    \n    true = true\n    for key in keys(dict)\n  \
    \      if islower(key)\n            true = false\n        else\n            true\
    \ = true\n    end\n    return true\nend", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    end\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        end\n    end\n    \n    for key in keys(dict)\n\
    \        if isupper(key)\n            return false\n        end\n    end\n   \
    \ \n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n    if dict\
    \ == Dict()\n        return false\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return true\n        if isupper(k)\n            return true\n   \
    \ return false\nend", "    \n    true = true\n    for key in keys(dict)\n    \
    \    if islower(key) || isupper(key)\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   if dict == Dict{String, String}()\n        return true\n    end\n    \n  \
    \  for key in keys(dict)\n        if islower(key) || isupper(key)\n          \
    \  return true\n        end\n    end\n    \n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if dict == Dict{String, String}()\n        return\
    \ true\n    else\n        true = false\n        for key in dict\n            if\
    \ islower(key)\n                true = true\n            else\n              \
    \  true = true\n        end\n        return true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    if dict == Dict()\n        return false\n \
    \   else\n        for key in dict\n            if islower(key)\n             \
    \   return true\n            elseif isupper(key)\n                return true\n\
    \            else\n                return false\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n   \
    \     return true\n    \n    for k in keys(dict)\n        if islower(k)\n    \
    \        return false\n        if isupper(k)\n            return false\n    end\n\
    \    return true\nend", "    \n    true = true\n    for key in keys(dict)\n  \
    \      if islower(key) || isupper(key)\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   true = true\n    for key in keys(dict)\n        if islower(key)\n        \
    \    true = false\n        elseif isupper(key)\n            true = false\n   \
    \     end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns the number of vowels contained in the\
    \ string.\nThe function should return 0 if the string contains no vowels.\nThe\
    \ function should return 1 if the string contains 1 vowel.\nThe function should\
    \ return 2 if the string contains 2 vowels.\nThe function should return 3 if the\
    \ string contains 3 vowels.\nThe function should return 4 if the string contains\
    \ 4 vowels.\nThe function should return 5 if the string contains 5 vowels.\nThe\
    \ function should return 6 if the string contains 6 vowels.\nThe function should\
    \ return 7 if the string contains 7 vowels.\nThe function should return 8 if the\
    \ string contains 8 vowels.\nThe function should return 9 if the string contains\
    \ 9 vowels.\nThe function should return 10 if the string contains 10 vowels.\n\
    The function should return 11 if the string contains 11 vowels.\nThe function\
    \ should return 12 if the string contains 12 vowels.\nThe function should return\
    \ 13 if the string contains 13 vowels.\nThe function should return 14 if the string\
    \ contains 14 vowels.\nThe function should return 15 if the string contains 15\
    \ vowels.\nThe function should return 16 if the string contains 16 vowels.\nThe\
    \ function should return 17 if the string contains 17 vowels.\nThe function should\
    \ return 18 if the string contains 18 vowels.\nThe function should return 19 if\
    \ the string contains 19 vowels.\nThe function should return 20 if the string\
    \ contains 20 vowels.\nThe function should return 21 if the string contains 21\
    \ vowels.\nThe function should return 22 if the string contains 22 vowels.\nThe\
    \ function should return 23 if the string contains 23 vowels.\nThe function should\
    \ return 24 if the string contains 24 vowels.\nThe function should return 25 if\
    \ the string contains 25 vowels.\nThe function should return 26 if the string\
    \ contains 26 vowels.\nThe function should return 27 if the string contains 27\
    \ vowels.\nThe function should return 28 if the string contains 28 vowels.\nThe\
    \ function should return 29 if the string contains 29 vowels.\nThe function should\
    \ return 30 if the string contains 30 vowels.\nThe function should return 31 if\
    \ the string contains 31 vowels.\nThe function should return 32 if the string\
    \ contains 32 vowels.\nThe function should return 33 if the string contains 33\
    \ vowels.\nThe function should return 34 if the string contains 34 vowels.\nThe\
    \ function should return 35 if the string contains 35 vowels.\nThe function should\
    \ return 36 if the string contains 36 vowels.\nThe function should return ", " \
    \   \n    if dict == Dict{String, String}()\n        return true\n    \n    for\
    \ key in dict\n        if islower(key)\n            return false\n        if isupper(key)\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    true = true\n    for key in keys(dict)\n        if islower(key)\n         \
    \   true = false\n        elseif isupper(key)\n            true = false\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that takes a string and returns a new string with all the characters\
    \ in lower case and all the characters in upper case. \nExamples:\nlowercase(\"\
    apple\") should return \"apple\".\nuppercase(\"apple\") should return \"APPLE\"\
    .\nuppercase(\"APPLE\") should return \"APPLE\".\nuppercase(\"APPLE\") should\
    \ return \"APPLE\".\nlowercase(\"APPLE\") should return \"apple\".\nlowercase(\"\
    APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\"\
    .\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should\
    \ return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"\
    APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\"\
    .\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should\
    \ return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"\
    APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\"\
    .\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should\
    \ return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"\
    APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\"\
    .\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should\
    \ return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"\
    APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\"\
    .\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should\
    \ return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"\
    APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\"\
    .\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should\
    \ return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"\
    APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\"\
    .\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should\
    \ return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"\
    APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\"\
    .\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should\
    \ return \"APPLE\".\n", "    \n    if dict == Dict{String, String}()\n       \
    \ return true\n    \n    for key in keys(dict)\n        if islower(key)\n    \
    \        return false\n        if isupper(key)\n            return false\n   \
    \ end\n    return true\nend", "    true = true\n    for key in keys(dict)\n  \
    \      if islower(key)\n            true = false\n        else\n            true\
    \ = true\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    true = true \n    for key in keys(dict)\n        if islower(key)\n  \
    \          true = false\n        else\n            true = true\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \"\"\"", "    if dict == Dict{String, String}()\n        return true\n  \
    \  else\n        true = false\n        for key in dict\n            if islower(key)\n\
    \                true = true\n            elseif isupper(key)\n              \
    \  true = true\n            else\n                true = false\n            end\n\
    \        end\n        return true\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of characters in that\
    \ string. \nExamples:\ncount_chars(\"apple\") should return 5.\ncount_chars(\"\
    banana\") should return 3.\ncount_chars(\"hello\") should return 0.\ncount_chars(\"\
    \") should return 0.\ncount_chars(\" \") should return 0.\ncount_chars(\" a\"\
    ) should return 1.\ncount_chars(\" a \") should return 2.\ncount_chars(\" a b\"\
    ) should return 3.\ncount_chars(\" a b c\") should return 4.\ncount_chars(\" a\
    \ b c d\") should return 5.\ncount_chars(\" a b c d e\") should return 6.\ncount_chars(\"\
    \ a b c d e f\") should return 7.\ncount_chars(\" a b c d e f g\") should return\
    \ 8.\ncount_chars(\" a b c d e f g h\") should return 9.\ncount_chars(\" a b c\
    \ d e f g h i\") should return 10.\ncount_chars(\" a b c d e f g h i j\") should\
    \ return 11.\ncount_chars(\" a b c d e f g h i j k\") should return 12.\ncount_chars(\"\
    \ a b c d e f g h i j k l\") should return 13.\ncount_chars(\" a b c d e f g h\
    \ i j k l m\") should return 14.\ncount_chars(\" a b c d e f g h i j k l m n\"\
    ) should return 15.\ncount_chars(\" a b c d e f g h i j k l m n o\") should return\
    \ 16.\ncount_chars(\" a b c d e f g h i j k l m n o p\") should return 17.\ncount_chars(\"\
    \ a b c d e f g h i j k l m n o p q\") should return 18.\ncount_chars(\" a b c\
    \ d e f g h i j k l m n o p q r\") should return 19.\ncount_chars(\" a b c d e\
    \ f g h i j k l m n o p q r s\") should return 20.\ncount_chars(\" a b c ", " \
    \   \n    if dict == Dict{String, String}()\n        return true\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return false\n        if\
    \ isupper(k)\n            return false\n    end\n    return true\nend", "    \n\
    \    if dict == Dict{String, String}()\n        return true\n    else\n      \
    \  true\n    end\nend", "    \n    if dict == Dict{String, String}()\n       \
    \ true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if dict == Dict{String, String}()\n        return true\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return false\n        if\
    \ isupper(k)\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are strings in lower case and all values are\
    \ strings in upper case.", "    \n    if dict == Dict{String, String}()\n    \
    \    return true\n    \n    true = false\n    for key in dict\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        end\n    end\n    return true\nend", "    \n    true = true\n    for\
    \ key in keys(dict)\n        if islower(key)\n            true = false\n     \
    \   elseif isupper(key)\n            true = false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns a new string with all the characters in lower case and all the characters\
    \ in upper case.\nExamples:\ncapitalize(\"apple\") should return \"Apple\".\n\
    capitalize(\"banana\") should return \"Banana\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\"\
    .\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\"\
    .\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\"\
    .\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\"\
    .\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\"\
    .\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\"\
    .\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\"\
    .\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\"\
    .\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"", "    \n    if dict\
    \ == Dict{String, String}()\n        return true\n    \n    true = false\n   \
    \ for key in keys(dict)\n        if islower(key)\n            true = true\n  \
    \      elseif isupper(key)\n            true = true\n        else\n          \
    \  true = false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if dict == Dict{String, String}()\n        return true\n    end\n   \
    \ \n    for key in keys(dict)\n        if islower(key) || isupper(key)\n     \
    \       return true\n        end\n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\" ))\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are strings in lower case and all values are\
    \ strings in upper case.\nThe function should return an empty dictionary if the\
    \ given dictionary is empty.\nExamples:\ndict_case(Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"b\" => \"BANANA\"\
    ).\ndict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )) should return Dict(\"a\" => \"APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\"\
    ).\ndict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"\
    )) should return Dict(\"a\" => \"APPLE\", \"8\" => \"BANANA\", \"a\" => \"APPLE\"\
    ).\ndict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) should return Dict(\"Name\" => \"JOHN\", \"Age\" => \"36\", \"City\" => \"\
    HOUSTON\").\ndict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\" )) should\
    \ return Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\" ).\ndict_case(Dict())\
    \ should return an empty dictionary.\ndict_case(Dict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\", \"c\" => \"carrot\")) should return Dict(\"a\" => \"APPLE\",\
    \ \"b\" => \"BANAN", "    \n    true = true\n    for key in keys(dict)\n     \
    \   if islower(key) || isupper(key)\n            true = false\n        end\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  if dict == Dict{String, String}()\n        return true\n    end\n    \n   \
    \ for k in keys(dict)\n        if islower(k)\n            return false\n     \
    \   end\n    end\n    \n    for k in keys(dict)\n        if isupper(k)\n     \
    \       return false\n        end\n    end\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\" ))\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are strings in lower case and all values are\
    \ strings in upper case.\nThe function should return an empty dictionary if the\
    \ given dictionary is empty.\nExamples:\ndict_to_upper_case(Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"b\" => \"BANANA\"\
    ).\ndict_to_upper_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")) should return Dict(\"a\" => \"APPLE\", \"A\" => \"BANANA\", \"\
    B\" => \"BANANA\").\ndict_to_upper_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\"\
    , \"a\" => \"apple\")) should return Dict(\"a\" => \"APPLE\", \"8\" => \"BANANA\"\
    , \"a\" => \"APPLE\").\ndict_to_upper_case(Dict(\"Name\" => \"John\", \"Age\"\
    \ => \"36\", \"City\" => \"Houston\")) should return Dict(\"Name\" => \"JOHN\"\
    , \"Age\" => \"36\", \"City\" => \"HOUSTON\").\ndict_to_upper_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\" )) should return Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\" ).\ndict_to_upper_case(Dict()) should return an empty dictionary.\n\
    dict_to_upper_case(Dict(\"a\" => \"", "    true = true\n    for key in keys(dict)\n\
    \        if islower(key)\n            true = false\n        elseif isupper(key)\n\
    \            true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <text>\nExercise 3: Write a function that checks if a dictionary is empty or not.\
    \ \nThe function should return True if the given dictionary is empty and False\
    \ if the given dictionary is not empty.\nExamples:\ncheck_dict_empty({}) should\
    \ return True.\ncheck_dict_empty({\"a\":\"apple\", \"b\":\"banana\"}) should return\
    \ False.\ncheck_dict_empty({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    }) should return False.\ncheck_dict_empty({\"a\":\"apple\", \"8\":\"banana\",\
    \ \"a\":\"apple\"}) should return False.\ncheck_dict_empty({\"Name\":\"John\"\
    , \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheck_dict_empty({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return False.\n\"\"\"", "    \n  \
    \  if dict == Dict()\n        return false\n    else\n        true\n    end\n\
    end\n</cell>\n<text>\nExercise 7: Write a function that takes a dictionary as\
    \ an argument and returns a new dictionary where all keys are strings in lower\
    \ case and all keys are strings in upper case.\nExamples:\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return {\"a\":\"apple\", \"b\":\"banana\"\
    }.\nconvert_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return {\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return {\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}.\nconvert_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return {\"name\":\"John\", \"age\"\
    :\"36\", \"city\":\"houston\"}.\nconvert_dict_case({\"STATE\":\"NC\", \"ZIP\"\
    :\"12345\" }) should return {\"state\":\"NC\", \"zip\":\"12345\"}.\nconvert_dict_case({})\
    \ should return {}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"\
    c\":\"carrot\"}) should return {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"\
    }.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"\
    d\":\"dog\"}) should return {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"\
    , \"d\":\"dog\"}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\"\
    :\"carrot\", \"d\":\"dog\", \"e\":\"elephant\"}) should return {\"a\":\"apple\"\
    , \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant\"\
    , \"f\":\"fish\"}) should return {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"\
    carrot\", \"d\":\"dog\", \"e\":\"elephant\", \"f\":\"fish\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant\"\
    , \"f\":\"fish\", \"g\":\"gorilla\"}) should return {\"a\":\"apple\", \"b\":\"\
    banana\", \"c\":\"carrot\", \"d\":\"", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    true = false\n    for key in dict\n        if\
    \ islower(key)\n            true = true\n        elseif isupper(key)\n       \
    \     true = true\n        else\n            true = false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a dictionary and returns the number of keys that are strings in lower case or\
    \ strings in upper case.", "    \n    true = true\n    for key in dict\n     \
    \   if islower(key)\n            true = false\n        elseif isupper(key)\n \
    \           true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <text>\nExercise 7: Write a function that takes a string and returns a new string\
    \ with all the characters in lower case and all the characters in upper case removed.\
    \ \nExamples:\n    remove_all_case(\"apple\") should return \"apple\".\n    remove_all_case(\"\
    apple and orange\") should return \"apple and orange\".\n    remove_all_case(\"\
    apple and Orange\") should return \"apple and orange\".\n    remove_all_case(\"\
    Apple and Orange\") should return \"Apple and orange\".\n    remove_all_case(\"\
    Apple and Orange\", \" \") should return \"Apple and orange\".\n    remove_all_case(\"\
    Apple and Orange\", \"and\") should return \"Apple and orange\".\n    remove_all_case(\"\
    Apple and Orange\", \"and\", \" \") should return \"Apple and orange\".\n    remove_all_case(\"\
    Apple and Orange\", \"and\", \"and\") should return \"Apple and orange\".\n  \
    \  remove_all_case(\"Apple and Orange\", \"and\", \"and\", \" \") should return\
    \ \"Apple and orange\".\n    remove_all_case(\"Apple and Orange\", \"and\", \"\
    and\", \"and\") should return \"Apple and orange\".\n    remove_all_case(\"Apple\
    \ and Orange\", \"and\", \"and\", \"and\", \" \") should return \"Apple and orange\"\
    .\n    remove_all_case(\"Apple and Orange\", \"and\", \"and\", \"and\", \"and\"\
    ) should return \"Apple and orange\".\n    remove_all_case(\"Apple and Orange\"\
    , \"and\", \"and\", \"and\", \"and\", \" \") should return \"Apple and orange\"\
    .\n    remove_all_case(\"Apple and Orange\", \"and\", \"and\", \"and\", \"and\"\
    , \"and\") should return \"Apple and orange\".\n    remove_all_case(\"Apple and\
    \ Orange\", \"and\", \"and\", \"and\", \"and\", \"and\", \" \") should return\
    \ \"Apple and orange\".\n    remove_all_case(\"Apple and Orange\", \"and\", \"\
    and\", \"and\", \"and\", \"and\", \"and\") should return \"Apple and orange\"\
    .\n    remove_all_case(\"Apple and Orange\", \"and\", \"and\", \"and\", \"and\"\
    , \"and\", \"and\", \" \") should return \"Apple and orange\".\n    remove_all_case(\"\
    Apple and ", "    \n    if dict == Dict{String, String}()\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ true = true\n    for key in keys(dict)\n        if islower(key)\n          \
    \  true = false\n        elseif isupper(key)\n            true = false\n     \
    \   end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    true = true\n    for key in dict\n        if islower(key)\n        \
    \    true = false\n        else\n            true = true\n        end\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n    if dict\
    \ == Dict{String, String}()\n        return true\n    \n    for key in keys(dict)\n\
    \        if islower(key)\n            return false\n        if isupper(key)\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if dict == Dict{String, String}()\n        return true\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return false\n        if\
    \ isupper(k)\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n   \
    \     return true\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a dictionary and returns a new dictionary where all keys are converted\
    \ to lower case and all values are converted to upper case.\nThe function should\
    \ return an empty dictionary if the given dictionary is empty.\nExamples:\nconvert_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")) should return Dict(\"a\" => \"APPLE\"\
    , \"b\" => \"BANANA\").\nconvert_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"\
    banana\", \"B\" => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"A\" =>\
    \ \"BANANA\", \"B\" => \"BANANA\").\nconvert_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\")) should return Dict(\"a\" => \"APPLE\"\
    , \"8\" => \"BANANA\", \"a\" => \"APPLE\").\nconvert_dict_case(Dict(\"Name\" =>\
    \ \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) should return Dict(\"\
    Name\" => \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\").\nconvert_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\" )) should return Dict(\"STATE\" => \"\
    NC\", \"ZIP\" => \"12345\" ).\nconvert_dict_case(Dict()) should return an empty\
    \ dictionary.\nconvert_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"c\" => \"carrot\")) should return Dict(\"a\" => \"APPLE\", \"b\" => \"BAN",
  "    \n    if dict == Dict()\n        return true\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return false\n        if isupper(k)\n    \
    \        return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if dict == Dict{String, String}()\n        return true\n    end\n   \
    \ \n    true = false\n    for key in keys(dict)\n        if islower(key)\n   \
    \         true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            true = false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    true = true\n    for key\
    \ in keys(dict)\n        if islower(key)\n            true = false\n        else\n\
    \            true = true\n    end\n    return true\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    if dict == Dict()\n        return false\n    \n    true = true\n    for\
    \ key in dict\n        if islower(key)\n            true = false\n        elseif\
    \ isupper(key)\n            true = false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    true = false\n    for key in dict\n        if\
    \ islower(key)\n            true = true\n        elseif isupper(key)\n       \
    \     true = true\n        else\n            return false\n    end\n    return\
    \ true\nend", "    \n    true = true\n    for key in dict\n        if islower(key)\n\
    \            true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend", "    \n    true = true\n    for\
    \ key in keys(dict)\n        if islower(key)\n            true = false\n     \
    \   else\n            true = true\n        end\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    if dict == Dict()\n        return\
    \ true\n    \n    true = false\n    for key in dict\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            true = false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    \n    for key in dict\n        if islower(key)\n   \
    \         return false\n        if isupper(key)\n            return false\n  \
    \  end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ if dict == Dict{String, String}()\n        return true\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return false\n        if isupper(k)\n    \
    \        return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    if dict == Dict{String, String}()\n        true\n    else\n        false\n\
    \    end\nend", "    \n    true = true\n    for key in keys(dict)\n        if\
    \ islower(key)\n            true = false\n        else\n            true = true\n\
    \    end\n    return true\nend", "    \n    true = true\n    for key in dict\n\
    \        if islower(key)\n            true = false\n        else\n           \
    \ true = true\n    end\n    return true\nend", "    \n    true = true\n    for\
    \ key in dict\n        if islower(key)\n            true = false\n        elseif\
    \ isupper(key)\n            true = false\n        end\n    end\n    return true\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ a new string where all \n    characters are capitalized. \n    \n    For example,\
    \ \"hello\" -> \"Hello\"\n    \n    Do not use the built-in string function capitalize.\n\
    \    \n    Examples:\n    capitalize(\"hello\") should return \"Hello\".\n   \
    \ capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"hello\") should\
    \ return \"Hello\".\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"\
    hello\") should return \"Hello\".\n    capitalize(\"hello\") should return \"\
    Hello\".\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"\
    hello\") should return \"Hello\".\n    capitalize(\"hello\") should return \"\
    Hello\".\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"\
    hello\") should return \"Hello\".\n    capitalize(\"hello\") should return \"\
    Hello\".\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"\
    hello\") should return \"Hello\".\n    capitalize(\"hello\") should return \"\
    Hello\".\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"\
    hello\") should return \"Hello\".\n    capitalize(\"hello\") should return \"\
    Hello\".\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"\
    hello\") should return \"Hello\".\n    capitalize(\"hello\") should return \"\
    Hello\".\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"\
    hello\") should return \"Hello\".\n    capitalize(\"hello\") should return \"\
    Hello\".\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"\
    hello\") should return \"Hello\".\n    capitalize(\"hello\") should return \"\
    Hello\".\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"\
    hello\") should return \"Hello\".\n    capitalize(\"hello\") should return \"\
    Hello\".\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"\
    hello\") should return \"Hello\".\n    capitalize(\"hello\") should return \"\
    Hello\".\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"\
    hello\") should return \"Hello\".\n    capitalize(\"hello\") should return \"\
    Hello\".\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"\
    hello\") should return \"Hello\".\n    ", "    \n    if dict == Dict{String, String}()\n\
    \        return true\n    end\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        end\n    end\n    \n    for key in keys(dict)\n\
    \        if isupper(key)\n            return false\n        end\n    end\n   \
    \ \n    return true\nend\n</cell>\n<code language=julia-1.3>", "    \n    true\
    \ = true\n    for key in dict\n        if islower(key)\n            true = false\n\
    \        elseif isupper(key)\n            true = false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<text>\nExercise 7: check_dict_case", "    if\
    \ dict == Dict{String, String}()\n        return true\n    else\n        true\
    \ = false\n        for key in dict\n            if islower(key)\n            \
    \    true = true\n            elseif isupper(key)\n                true = true\n\
    \            else\n                true = false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>", "    \n    if dict == Dict()\n\
    \        return true\n    \n    true = false\n    for key in keys(dict)\n    \
    \    if islower(key)\n            true = true\n        elseif isupper(key)\n \
    \           true = true\n        else\n            return false\n    end\n   \
    \ return true\nend\n</cell>\n<text>\nExercise 3: Write a function that takes a\
    \ string and returns a new string where all vowels have been replaced with an\
    \ underscore.\nExamples:\nreplace_vowels(\"apple\") should return \"p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_",
  "    \n    if dict == Dict{String, String}()\n        return true\n    \n    true\
    \ = false\n    for key in dict\n        if islower(key)\n            true = true\n\
    \        elseif isupper(key)\n            true = true\n        else\n        \
    \    true = false\n        end\n    end\n    return true\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of vowels\
    \ in that string.\nThe function should return -1 if the string does not contain\
    \ any vowels.\nExamples:\ncount_vowels(\"apple\") should return 2.\ncount_vowels(\"\
    banana\") should return 0.\ncount_vowels(\"a\") should return -1.\ncount_vowels(\"\
    aardvark\") should return -1.\ncount_vowels(\"abracadabra\") should return 5.\n\
    count_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"abracadabra\")\
    \ should return 5.\ncount_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"\
    abracadabra\") should return 5.\ncount_vowels(\"abracadabra\") should return 5.\n\
    count_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"abracadabra\")\
    \ should return 5.\ncount_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"\
    abracadabra\") should return 5.\ncount_vowels(\"abracadabra\") should return 5.\n\
    count_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"abracadabra\")\
    \ should return 5.\ncount_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"\
    abracadabra\") should return 5.\ncount_vowels(\"abracadabra\") should return 5.\n\
    count_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"abracadabra\")\
    \ should return 5.\ncount_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"\
    abracadabra\") should return 5.\ncount_vowels(\"abracadabra\") should return 5.\n\
    count_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"abracadabra\")\
    \ should return 5.\ncount_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"\
    abracadabra\") should return 5.\ncount_vowels(\"abracadabra\") should return 5.\n\
    count_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"abracadabra\")\
    \ should return 5.\ncount_vowels(\"abracadabra\") should return ", "    if dict\
    \ == Dict{String, String}()\n        true\n    else\n        all(map(is_string,\
    \ dict))\n    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    true =\
    \ true\n    for key in keys(dict)\n        if islower(key) || isupper(key)\n \
    \           true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    if dict == Dict{String, String}()\n   \
    \     return true\n    \n    for k in keys(dict)\n        if islower(k)\n    \
    \        return false\n        if isupper(k)\n            return false\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n    true =\
    \ true\n    for key in keys(dict)\n        if islower(key)\n            true =\
    \ false\n            break\n        elseif isupper(key)\n            true = false\n\
    \            break\n    end\n    return true\nend", "    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in dict\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    if dict\
    \ == Dict()\n        return false\n    else\n        true\n    end\nend", "  \
    \  true = true\n    for key in keys(dict)\n        if islower(key)\n         \
    \   true = false\n        elseif isupper(key)\n            true = false\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    if dict == Dict()\n        return true\n    \n    true = false\n    for\
    \ key in dict\n        if islower(key)\n            true = true\n        elseif\
    \ isupper(key)\n            true = true\n        else\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if dict == Dict{String, String}()\n        return true\n    \n    true\
    \ = false\n    for key in keys(dict)\n        if islower(key)\n            true\
    \ = true\n        elseif isupper(key)\n            true = true\n        else\n\
    \            true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    if dict == Dict()\n        return false\n\
    \    \n    true = false\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = true\n        elseif isupper(key)\n            true = true\n\
    \        else\n            return false\n    end\n    return true\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns the number\
    \ of characters in that string.", "    true = true\n    for key in dict\n    \
    \    if islower(key)\n            true = false\n        elseif isupper(key)\n\
    \            true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <text>\nExercise 9\nWrite a function that takes a string and returns the number\
    \ of characters in that string.\nExamples:\ncount_chars(\"apple\") should return\
    \ 5.\ncount_chars(\"banana\") should return 3.\ncount_chars(\"hello\") should\
    \ return 0.\ncount_chars(\"\") should return 0.\ncount_chars(\" \") should return\
    \ 0.\ncount_chars(\"a\") should return 1.\ncount_chars(\"a \") should return 1.\n\
    count_chars(\"a b\") should return 2.\ncount_chars(\"a b c\") should return 3.\n\
    count_chars(\"a b c d\") should return 4.\ncount_chars(\"a b c d e\") should return\
    \ 5.\ncount_chars(\"a b c d e f\") should return 6.\ncount_chars(\"a b c d e f\
    \ g\") should return 7.\ncount_chars(\"a b c d e f g h\") should return 8.\ncount_chars(\"\
    a b c d e f g h i\") should return 9.\ncount_chars(\"a b c d e f g h i j\") should\
    \ return 10.\ncount_chars(\"a b c d e f g h i j k\") should return 11.\ncount_chars(\"\
    a b c d e f g h i j k l\") should return 12.\ncount_chars(\"a b c d e f g h i\
    \ j k l m\") should return 13.\ncount_chars(\"a b c d e f g h i j k l m n\") should\
    \ return 14.\ncount_chars(\"a b c d e f g h i j k l m n o\") should return 15.\n\
    count_chars(\"a b c d e f g h i j k l m n o p\") should return 16.\ncount_chars(\"\
    a b c d e f g h i j k l m n o p q\") should return 17.\ncount_chars(\"a b c d\
    \ e f g h i j k l m n o p q r\") should return 18.\ncount_chars(\"a b c d e f\
    \ g h i j k l m n o p q r s\") should return 19.\ncount_chars(\"a b c d e f g\
    \ h i j k l m n o p q r s t\") should return 20.\ncount_chars(\"a b c d e f g\
    \ h i j k l m n o p q r s t u\") should ", "    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a dictionary, return True if all keys are strings in lower case or all\
    \ keys are strings in upper case, else return False.\n    The function should\
    \ return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n   \
    \ check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should\
    \ return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" }) should return True.\n    \"\"\"", "    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    if dict == Dict()\n        return true\n    \n    for key in keys(dict)\n\
    \        if islower(key)\n            return false\n        if isupper(key)\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary with the keys\
    \ in lower case and values as upper case. \nThe function should return a new dictionary\
    \ if the given dictionary is empty or if the keys are not strings or if the values\
    \ are strings. \nExamples:\ndict_to_upper_case(Dict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"b\" => \"BANANA\").\n\
    dict_to_upper_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )) should return Dict(\"a\" => \"APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\"\
    ).\ndict_to_upper_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\", \"a\" =>\
    \ \"apple\")) should return Dict(\"a\" => \"APPLE\", \"8\" => \"BANANA\", \"a\"\
    \ => \"APPLE\").\ndict_to_upper_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) should return Dict(\"Name\" => \"JOHN\", \"Age\"\
    \ => \"36\", \"City\" => \"HOUSTON\").\ndict_to_upper_case(Dict(\"STATE\" => \"\
    NC\", \"ZIP\" => \"12345\" )) should return Dict(\"STATE\" => \"NC\", \"ZIP\"\
    \ => \"12345\" ).\ndict_to_upper_case(Dict()) should return Dict().\ndict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\")) should ", "    \n\
    \    if dict == Dict()\n        return false\n    else\n        for key in dict\n\
    \            if islower(key)\n                return true\n            elseif\
    \ isupper(key)\n                return true\n            else\n              \
    \  return false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    true = true\n    for key in dict\n        if islower(key)\n         \
    \   true = false\n        elseif isupper(key)\n            true = false\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns the number of uppercase and lowercase\
    \ letters.", "    \n    true = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            true = false\n        elseif isupper(key)\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
