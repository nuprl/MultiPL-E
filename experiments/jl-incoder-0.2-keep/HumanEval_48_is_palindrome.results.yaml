name: HumanEval_48_is_palindrome
language: julia
results:
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_length\
    \ = length(text)\n    \n    if text_length < 2\n        return true\n    \n  \
    \  if text_length == 1  \n        return text == reverse(text)\n    \n    text_half\
    \ = text_length / 2\n    \n    if text_half < 2\n        return text == reverse(text)\n\
    \    \n    text_half2 = text_half / 2\n    \n    if text_half2 % 2 == 0\n    \
    \    return text == reverse(text)\n    \n    text_half3 = text_half2 / 2\n   \
    \ \n    if text_half3 % 2 == 1\n        return text == reverse(text)\n    \n \
    \   text_half4 = text_half3 / 2\n    \n    if text_half4 % 2 == 0\n        return\
    \ text == reverse(text)\n    \n    text_half5 = text_half4 / 2\n    \n    if text_half5\
    \ % 2 == 1\n        return text == reverse(text)\n    \n    text_half6 = text_half5\
    \ / 2\n    \n    if text_half6 % 2 == 0\n        return text == reverse(text)\n\
    \    \n    text_half7 = text_half6 / 2\n    \n    if text_half7 % 2 == 1\n   \
    \     return text == reverse(text)\n    \n    text_half8 = text_half7 / 2\n  \
    \  \n    if text_half8 % 2 == 0\n        return text == reverse(text)\n    \n\
    \    text_half9 = text_half8 / 2\n    \n    if text_half9 % 2 == 1\n        return\
    \ text == reverse(text)\n    \n    text_half10 = text_half9 / 2\n    \n    if\
    \ text_half10 % 2 == 0\n        return text == reverse(text)\n    \n    text_half11\
    \ = text_half10 / 2\n    \n    if text_half11 % 2 == 1\n        return text ==\
    \ reverse(text)\n    \n    text_half12 = text_half11 / 2\n    \n    if text_half12\
    \ % 2 == 0\n        return text == reverse(text)\n    \n    text_half13 = text_half12\
    \ / 2\n    \n    if text_half13 % 2 == 1\n        return text == reverse(text)\n\
    \    \n    text_half14 = text_half13 / 2\n    \n    if text_half14 % 2 == 0\n\
    \        return text == reverse(text)\n    \n    text_half15 = text_half14 / 2\n\
    \    \n    if text_half15 % 2 == 1\n        return text == reverse(text)\n   \
    \ \n    text_half16 = text_half15 / 2\n    \n    if text_half16 % 2 == 0\n   \
    \     return text == reverse(text)\n    \n    text_half17 = text_half16 / 2\n\
    \    \n    if text_half17 % 2 == 1\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzp5b7sj4.jl:1\nin expression starting at /tmp/tmpzp5b7sj4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\
    \ helper\n    >>> is_palindrome_helper('')\n    true\n    >>> is_palindrome_helper('aba')\n\
    \    true\n    >>> is_palindrome_helper('aaaaa')\n    true\n    >>> is_palindrome_helper('zbcd')\n\
    \    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpj0aj3t4i.jl:19\nin expression starting at /tmp/tmpj0aj3t4i.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa8ylrdxj.jl:19\nin expression starting at\
    \ /tmp/tmpa8ylrdxj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    text_reversed = reverse(text)\n\
    \    \n    if is_empty(text_reversed)\n        return true\n    \n    return text\
    \ == text_reversed\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Checks\
    \ if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>>\
    \ is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n \
    \   >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmu5bb94e.jl:23\nin expression starting at\
    \ /tmp/tmpmu5bb94e.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfgjaorb3.jl:19\nin expression starting at\
    \ /tmp/tmpfgjaorb3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvcd115b.jl:19\nin expression starting at\
    \ /tmp/tmplvcd115b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| c\
    \ |>\nThis doesn't work for `is_palindrome(\"aba\")` because `is_palindrome_helper(\"\
    aba\")` returns `false`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing\
    \ it out!\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzj79wyow.jl:19\nin expression starting at\
    \ /tmp/tmpzj79wyow.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text, 0, length(text) - 1) \n    then return true\n\
    \    else return false\n    end\nend\n\"\"\"\n    Checks if given string is a\
    \ palindrome helper\n    >>> is_palindrome_helper('aba', 0, 2)\n    True\n   \
    \ >>> is_palindrome_helper('aaaaa', 0, 3)\n    True\n    >>> is_palindrome_helper('zbcd',\
    \ 0, 2)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc4s3j8c4.jl:14\nin expression starting at /tmp/tmpc4s3j8c4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text, 0, length(text) - 1) \n    then return true\n\
    \    else return false\n    end\nend\n\"\"\"\n    Checks if given string is a\
    \ palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps9mk_bg3.jl:14\nin expression starting at /tmp/tmps9mk_bg3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpjd2ivmmb.jl:19\nin expression starting at /tmp/tmpjd2ivmmb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text, 0, length(text) - 1) \n    then return true\n\
    \    else return false\n    end\nend\n</code>\n<|/ a tags=julia,palindrome,string\
    \ |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt3x1i88w.jl:14\nin expression starting at /tmp/tmpt3x1i88w.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    begin = 0\n    end =\
    \ length(text) - 1\n    \n    while begin < end\n        if is_palindrome_helper(text,\
    \ begin, end)\n            return true\n        end -= 1\n        begin += 1\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd7h1zc_6.jl:16\nin expression starting at /tmp/tmpd7h1zc_6.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    begin = 0\n\
    \    end = length(text) - 1\n    \n    while begin < end\n        if text[begin]\
    \ != text[end]\n            return false\n        \n        begin++\n        end--\n\
    \    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n  \
    \  True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9v_pllct.jl:16\nin expression starting at /tmp/tmp9v_pllct.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmptjqawqhu.jl:19\nin expression starting at /tmp/tmptjqawqhu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    left_index::Int = 0\n\
    \    right_index::Int = 0\n    \n    while left_index < length(text) and right_index\
    \ < length(text) do\n        \n        if text[left_index] != text[right_index]\n\
    \            return false\n        \n        left_index += 1\n        right_index\
    \ += 1\n    end\n    \n    return true\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that checks if a number is prime\nHint: Use a sieve of Eratosthenes\
    \ algorithm\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"while\" at /tmp/tmpv_vddh84.jl:19 expected\
    \ \"end\", got \"right_index\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv_vddh84.jl:19\n\
    in expression starting at /tmp/tmpv_vddh84.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome(text, 0, length(text) - 1):\n        return true\n  \
    \  else\n        return false\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe function\
    \ `is_palindrome` should take a `String` as its first argument, not a `String`\
    \ as its second argument. Also, the function should return a `Bool`, not a `Int`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I edited the answer.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I'm new to Julia so I appreciate your help. I\
    \ edited my question to include my code so you can see what I'm doing wrong.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a working code snippet.\n<|/\
    \ c |>\n<| c |>\nThanks for your help. I edited my question to include my code\
    \ so you can see what I'm doing wrong.\n<|/ c |>\n<| a tags=julia,palindrome |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxe6zkelm.jl:14\nin expression starting at\
    \ /tmp/tmpxe6zkelm.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_recursive(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpv4jn68mf.jl:19\nin expression starting at /tmp/tmpv4jn68mf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    begin = 0\n\
    \    end = length(text) - 1\n    \n    while begin < end\n        if text[begin]\
    \ != text[end]\n            return false\n        \n        begin = begin + 1\n\
    \        end = end - 1\n    \n    return true\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Reverses a string\n    >>> reverse(\"hello\")\n    \"olleh\"\n   \
    \ >>> reverse(\"abba\")\n    \"abba\"\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1nrsb0ci.jl:16\nin expression starting at /tmp/tmp1nrsb0ci.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome(text, 0, length(text) - 1) \n    then return true\n \
    \   else return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n\
    \    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp672v07ta.jl:14\nin expression starting at /tmp/tmp672v07ta.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return True\n    else\n        return\
    \ False\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Reverses a string\n\
    \    >>> reverse(\"hello\")\n    \"olleh\"\n    >>> reverse(\"abba\")\n    \"\
    abba\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw3vd8i_2.jl:18\nin expression starting at\
    \ /tmp/tmpw3vd8i_2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    local i = 0\n\
    \    local j = text.length()-1\n    \n    while i <= j\n        if text[i] ~=\
    \ text[j]\n            return false\n        end\n        i += 1\n        j -=\
    \ 1\n    end\n    return true\nend\n</code>\n<|/ a tags=julia,string |>\n<| a\
    \ tags=julia,string |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp18mbk06w.jl:28\nin expression starting at\
    \ /tmp/tmp18mbk06w.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n    else \n        begin = 0\n        end =\
    \ length(text) - 1\n        while begin < end\n            if text[begin] != text[end]\n\
    \                begin = begin + 1\n                end = end - 1\n          \
    \  else\n                begin = begin + 1\n                end = end - 1\n  \
    \      end\n        return begin == end\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgm32bkeo.jl:15\nin expression starting at /tmp/tmpgm32bkeo.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    local i::Int\
    \ = 0\n    local j::Int = 0\n    local length::Int = length(text)\n    \n    while\
    \ i < length\n        j = i - 1\n        while j >= 0\n            if text[j]\
    \ != text[i]\n                return false\n            j -= 1\n        end\n\
    \        i += 1\n    end\n    return true\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9vu7pbqy.jl:31\nin expression starting at\
    \ /tmp/tmp9vu7pbqy.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\
    \ helper\n    >>> is_palindrome_helper('')\n    True\n    >>> is_palindrome_helper('aba')\n\
    \    True\n    >>> is_palindrome_helper('aaaaa')\n    True\n    >>> is_palindrome_helper('zbcd')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp20tnt7yk.jl:19\nin expression starting at /tmp/tmp20tnt7yk.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpvbfj8quy.jl:19\nin expression starting at /tmp/tmpvbfj8quy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        true\n    else\n        text == reverse(text)\n\
    \    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThe `reverse` function\
    \ doesn't exist in Julia 1.1. You will need to use `reversed` instead. `reverse`\
    \ was removed in Julia 1.1.\n<|/ c |>\n<| c |>\nThanks for pointing that out.\
    \ I will update my answer.\n<|/ c |>\n<| a tags=julia,string |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\"\
    ) == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\")\
    \ == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6z0dwea.jl:19\nin expression starting at\
    \ /tmp/tmpw6z0dwea.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome(text, 0, length(text) - 1):\n        return true\n  \
    \  else\n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n\
    \    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n\
    \    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvf4tyty.jl:14\nin expression starting at\
    \ /tmp/tmpdvf4tyty.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    left_index::Int\
    \ = 0\n    right_index::Int = length(text) - 1\n    \n    while left_index < right_index\n\
    \        if is_letter(text[left_index]) == is_letter(text[right_index])\n    \
    \        left_index += 1\n            right_index -= 1\n        else\n       \
    \     return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt2uta_f8.jl:28\nin expression starting at\
    \ /tmp/tmpt2uta_f8.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    begin = 0\n    end =\
    \ length(text) - 1\n    \n    while begin < end\n        if text[begin] != text[end]\n\
    \            return false\n        \n        begin++\n        end--\n    end\n\
    \    \n    return true\nend\n</cell>\n<text>\nPalindrome Function\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmper4equi8.jl:16\nin expression starting at /tmp/tmper4equi8.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpdm6g080n.jl:19\nin expression starting at /tmp/tmpdm6g080n.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome(text, 0, length(text) - 1):\n        return true\n  \
    \  return false\nend\n</cell>\n<code language=julia-1.5>\n@assert is_palindrome(\"\
    aba\") == true\n@assert is_palindrome(\"aaaaa\") == true\n@assert is_palindrome(\"\
    zbcd\") == false\n</cell>\n<text>\nExercise 2\nWrite a function that checks if\
    \ a given string is a palindrome (word or sentence)\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9cks76d.jl:14\nin expression starting at\
    \ /tmp/tmpb9cks76d.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text) \n        then return true \n        else return\
    \ false \nend \n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiekfkf8w.jl:14\nin expression starting at /tmp/tmpiekfkf8w.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    begin = 0\n\
    \    end = length(text) - 1\n    \n    while begin < end\n        if text[begin]\
    \ != text[end]\n            return false\n        \n        begin += 1\n     \
    \   end -= 1\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi6395gvh.jl:16\nin expression starting at /tmp/tmpi6395gvh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text, 0, length(text), text) == true\n       \
    \ return true\n    return false\nend\n\"\"\"\n    Checks if given string is a\
    \ palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1ck7e1an.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1ck7e1an.jl:1\n\
    in expression starting at /tmp/tmp1ck7e1an.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpgpf_g_zd.jl:19\nin expression starting at /tmp/tmpgpf_g_zd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt4d9fg3y.jl:19\nin expression starting at\
    \ /tmp/tmpt4d9fg3y.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    text_reversed = reverse(text)\n\
    \    \n    if text == text_reversed\n        return true\n    else\n        return\
    \ false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Reverses a string\n\
    \    >>> reverse('')\n    ''\n    >>> reverse('abc')\n    'cba'\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx9cawgk.jl:23\nin expression starting at\
    \ /tmp/tmpjx9cawgk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    \n    if is_empty(text_reversed) == True\n        return\
    \ true\n    \n    if text == text_reversed\n        return true\n    \n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyuujrysv.jl:1\nin expression starting at /tmp/tmpyuujrysv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.4>\nis_palindrome(\"\
    aba\")\n</cell>\n<code language=julia-1.4>\nis_palindrome(\"aaaaa\")\n</cell>\n\
    <code language=julia-1.4>\nis_palindrome(\"zbcd\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are capitalized.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1usbh3y6.jl:19\nin expression starting at\
    \ /tmp/tmp1usbh3y6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    if text == text_reversed\n        return true\n    else\n\
    \        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Reverses\
    \ a string\n    >>> reverse('')\n    ''\n    >>> reverse('a')\n    'a'\n    >>>\
    \ reverse('ab')\n    'ba'\n    >>> reverse('abc')\n    'cba'\n    >>> reverse('zbc')\n\
    \    'zbc'\n    >>> reverse('zbcz')\n    'zbcz'\n    >>> reverse('zbczz')\n  \
    \  'zbczz'\n    >>> reverse('zbczzz')\n    'zbczzz'\n    >>> reverse('zbczzzz')\n\
    \    'zbczzzz'\n    >>> reverse('zbczzzzz')\n    'zbczzzzz'\n    >>> reverse('zbczzzzzz')\n\
    \    'zbczzzzzz'\n    >>> reverse('zbczzzzzzz')\n    'zbczzzzzzz'\n    >>> reverse('zbczzzzzzzz')\n\
    \    'zbczzzzzzzz'\n    >>> reverse('zbczzzzzzzzz')\n    'zbczzzzzzzzz'\n    >>>\
    \ reverse('zbczzzzzzzzzz')\n    'zbczzzzzzzzzz'\n    >>> reverse('zbczzzzzzzzzzz')\n\
    \    'zbczzzzzzzzzzz'\n    >>> reverse('zbczzzzzzzzzzzz')\n    'zbczzzzzzzzzzzz'\n\
    \    >>> reverse('zbczzzzzzzzzzzzz')\n    'zbczzzzzzzzzzzzz'\n    >>> reverse('zbczzzzzzzzzzzzzz')\n\
    \    'zbczzzzzzzzzzzzzz'\n    >>> reverse('zbczzzzzzzzzzzzzzz')\n    'zbczzzzzzzzzzzzzzz'\n\
    \    >>> reverse('zbczzzzzzzzzzzzzzzz')\n    'zbczzzzzzzzzzzzzzzz'\n    >>> reverse('zbczzzzzzzzzzzzzzzzz')\n\
    \    'zbczzzzzzzzzzzzzzzzzzz'\n    >>> reverse('zbczzzzzzzzzzzzzzzzzz')\n    'zbczzzzzzzzzzzzzzzzzz'\n\
    \    >>> reverse('zbczzzzzzzzzzzzzzzzzzz')\n    'zbczzzzzzzzzzzzzzzzzzzzz'\n \
    \   >>> reverse('zbczzzz\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpokug6q5h.jl:22\nin expression starting at\
    \ /tmp/tmpokug6q5h.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\
    \ helper\n    >>> is_palindrome_helper('')\n    true\n    >>> is_palindrome_helper('aba')\n\
    \    true\n    >>> is_palindrome_helper('aaaaa')\n    true\n    >>> is_palindrome_helper('zbcd')\n\
    \    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpsgs0x4rz.jl:19\nin expression starting at /tmp/tmpsgs0x4rz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    left = 0\n \
    \   right = length(text) - 1\n    while left < right\n        if is_alpha(text[left])\
    \ == True and is_alpha(text[right]) == True\n            if text[left] != text[right]\n\
    \                return false\n            end if\n            left += 1\n   \
    \         right -= 1\n        else if is_alpha(text[left]) == True and is_alpha(text[right])\
    \ == False\n            if text[left] != text[right]\n                return false\n\
    \            end if\n            left += 1\n            right -= 1\n        else\
    \ if is_alpha(text[left]) == False and is_alpha(text[right]) == True\n       \
    \     if text[left] != text[right]\n                return false\n           \
    \ end if\n            left += 1\n            right -= 1\n        else if is_alpha(text[left])\
    \ == False and is_alpha(text[right]) == False\n            if text[left] != text[right]\n\
    \                return false\n            end if\n            left += 1\n   \
    \         right -= 1\n        else if is_alpha(text[left]) == True and is_alpha(text[right])\
    \ == False\n            if text[left] != text[right]\n                return false\n\
    \            end if\n            left += 1\n            right -= 1\n        else\
    \ if is_alpha(text[left]) == False and is_alpha(text[right]) == True\n       \
    \     if text[left] != text[right]\n                return false\n           \
    \ end if\n            left += 1\n            right -= 1\n        else if is_alpha(text[left])\
    \ == True and is_alpha(text[right]) == True\n            if text[left] != text[right]\n\
    \                return false\n            end if\n            left += 1\n   \
    \         right -= 1\n        else if is_alpha(text[left]) == False and is_alpha(text[right])\
    \ == False\n            if text[left] != text[right]\n                return false\n\
    \            end if\n            left += 1\n            right -= 1\n        else\
    \ if is_alpha(text[left]) == True and is_alpha(text[right]) == False\n       \
    \     if text[left] != text[right]\n                return false\n           \
    \ end if\n            left += 1\n            right -= 1\n        else if is_alpha(text[left])\
    \ == False and is_alpha(text[right]) == True\n            if text[left] != text[right]\n\
    \                return false\n            end if\n            left += 1\n   \
    \         right -= 1\n        else if is_alpha(text[left]) == True and is_alpha(text[right])\
    \ == False\n            if text[left] != text[right]\n                return false\n\
    \            end if\n            left += 1\n            right -= 1\n        else\
    \ if is_alpha(text[left]) == False and is_alpha(text[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"is_alpha\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptmd4teob.jl:19\nin expression starting at /tmp/tmptmd4teob.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpx9nfx_g5.jl:19\nin expression starting at /tmp/tmpx9nfx_g5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_length\
    \ = length(text)\n    \n    if text_length <= 1\n        return true\n    \n \
    \   text_length = text_length / 2\n    \n    if text_length == 1\n        return\
    \ text == reverse(text)\n    \n    return text == reverse(text[1:text_length])\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_palindrome(\"aba\") == true\n\
    @assert is_palindrome(\"aaaaa\") == true\n@assert is_palindrome(\"zbcd\") == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a given string is\
    \ a palindrome in Julia\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7h6inclo.jl:28\nin expression starting at\
    \ /tmp/tmp7h6inclo.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    text_reversed = reverse(text)\n\
    \    return text_reversed == text\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps88z7k2g.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps88z7k2g.jl:1\n\
    in expression starting at /tmp/tmps88z7k2g.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    text_reverse\
    \ = reverse(text)\n    \n    if is_empty(text_reverse) == true\n        return\
    \ true\n    \n    if text == text_reverse\n        return true\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Reverses a string\n\
    \    >>> reverse('')\n    ''\n    >>> reverse('a')\n    'a'\n    >>> reverse('ab')\n\
    \    'ba'\n    >>> reverse('abc')\n    'cba'\n    >>> reverse('zbc')\n    'cbz'\n\
    \    >>> reverse('zbc')\n    'cbz'\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp40_gd2qd.jl:26\nin expression starting at\
    \ /tmp/tmp40_gd2qd.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_recursive(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a tags=julia,recursion,string\
    \ |>\n<| a dscore=2 |>\nI wrote a recursive function which checks if a string\
    \ is a palindrome or not:\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsay10c7z.jl:19\nin expression starting at\
    \ /tmp/tmpsay10c7z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    text_reversed = reverse(text)\n\
    \    if text == text_reversed\n        return true\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    Reverses a string\n    >>> reverse(\"\
    hello\")\n    \"olleh\"\n    >>> reverse(\"hello\")\n    \"olleh\"\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppugn8fne.jl:22\nin expression starting at\
    \ /tmp/tmppugn8fne.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome(text, 0, length(text) - 1):\n        return true\n  \
    \  return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt0z6j_cp.jl:14\nin expression starting at\
    \ /tmp/tmpt0z6j_cp.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0dd2recl.jl:19\nin expression starting at\
    \ /tmp/tmp0dd2recl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThanks for your\
    \ answer. I'm new to Julia so I didn't know about this function. I'm still trying\
    \ to understand how it works. I tried to run your code but I get an error that\
    \ says \"ERROR: LoadError: UndefVarError: is_palindrome_helper not defined\".\
    \ Do you know why this is?\n<|/ c |>\n<| c |>\nI figured it out. I had to put\
    \ \"include(\"is_palindrome_helper.jl\")\" at the top of my code before I could\
    \ run it.\n<|/ c |>\n<| c |>\nI added the function to the answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your help. I appreciate it.\n<|/ c |>\n<| a |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxqst5i5l.jl:19\nin expression starting at\
    \ /tmp/tmpxqst5i5l.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    if text == text_reversed\n        return true\n    \n \
    \   return false\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsxwguhmk.jl:22\nin expression starting at\
    \ /tmp/tmpsxwguhmk.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text, 0, length(text) - 1) \n    then true \n\
    \    else false \n    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| c |>\n\
    I like this solution, but I wonder if there is a way to avoid the for loop?\n\
    <|/ c |>\n<| c |>\nI guess you could use [`issymmetric`](https://docs.julialang.org/en/v1/base/strings/#Base.strings/issymmetric-1)\
    \ to avoid the loop, but I wouldn't recommend it.\n<|/ c |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"true\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1fbv129o.jl:14\nin expression starting at /tmp/tmp1fbv129o.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n    else \n        text == reverse(text)\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptv8lopnk.jl:18\nin expression starting at\
    \ /tmp/tmptv8lopnk.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text) \n        return true \n    else \n        return\
    \ false \nend \n</cell>\n<text>\nExercise 4\nWrite a function that takes a string\
    \ and returns the number of characters in the string. \nWrite a function that\
    \ takes a string and returns the number of words in the string. \nWrite a function\
    \ that takes a string and returns the number of sentences in the string. \nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ divided by the number of words in the string. \nWrite a function that takes\
    \ a string and returns the number of characters in the string divided by the number\
    \ of sentences in the string. \nWrite a function that takes a string and returns\
    \ the number of characters in the string divided by the number of words in the\
    \ string divided by the number of sentences in the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the string divided\
    \ by the number of words in the string divided by the number of sentences in the\
    \ string divided by the number of characters in the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the string divided\
    \ by the number of words in the string divided by the number of sentences in the\
    \ string divided by the number of characters in the string divided by the number\
    \ of words in the string. \nWrite a function that takes a string and returns the\
    \ number of characters in the string divided by the number of words in the string\
    \ divided by the number of sentences in the string divided by the number of characters\
    \ in the string divided by the number of words in the string divided by the number\
    \ of sentences in the string. \nWrite a function that takes a string and returns\
    \ the number of characters in the string divided by the number of words in the\
    \ string divided by the number of sentences in the string divided by the number\
    \ of characters in the string divided by the number of words in the string divided\
    \ by the number of sentences in the string divided by the number of characters\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of characters in the string divided by the number of words in the string divided\
    \ by the number of sentences in the string divided by the number of characters\
    \ in the string divided by the number of words in the string divided by the number\
    \ of sentences in the string divided by the number of characters in the string\
    \ divided by the number of words in the string. \nWrite a function that takes\
    \ a string and returns the number of characters in the string divided by the number\
    \ of words in the string divided by the number of sentences in the string divided\
    \ by the number of characters in the string divided by the number of words in\
    \ the string divided by the number of sentences in the string divided by the number\
    \ of characters in the string divided by the number of words in the string divided\
    \ by the number of sentences in the string. \nWrite a function that takes a string\
    \ and returns the number of characters in the string divided by the number of\
    \ words in the string divided by the number of sentences in the string divided\
    \ by the number of characters in the string divided by the number of words in\
    \ the string divided by the number of sentences in the string divided by the number\
    \ of characters in the string divided by the number of words in the string divided\
    \ by the number of sentences in the string divided by the number of characters\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of characters in the string divided by the number of words in the string divided\
    \ by the number of sentences in the string divided by the number of characters\
    \ in the string divided by the number of words in the string divided by the number\
    \ of sentence\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc5f43rt9.jl:18\nin expression starting at\
    \ /tmp/tmpc5f43rt9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome(text, 0, length(text) - 1):\n        return true\n  \
    \  else\n        return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukh06pt8.jl:14\nin expression starting at\
    \ /tmp/tmpukh06pt8.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) then return true else return text == reverse(text)\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcbfiyukw.jl:13\nin expression starting at /tmp/tmpcbfiyukw.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    left = 0\n \
    \   right = len(text) - 1\n    \n    while left < right\n        if text[left]\
    \ != text[right]\n            return false\n        left += 1\n        right -=\
    \ 1\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n\
    \    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n\
    \    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_hihuuo.jl:27\nin expression starting at\
    \ /tmp/tmph_hihuuo.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    left = 0\n    right\
    \ = length(text) - 1\n    while left < right\n        if is_palindrome_helper(text,\
    \ left, right)\n            return true\n        left += 1\n        right -= 1\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp590yhbfn.jl:1\nin expression starting at /tmp/tmp590yhbfn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        true\n    else\n        false\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpglrov9er.jl:18\nin expression starting at\
    \ /tmp/tmpglrov9er.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome(text, 0, length(text) - 1):\n        return true\n  \
    \  return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Reverses\
    \ a string\n    >>> reverse(\"abc\")\n    \"cba\"\n    >>> reverse(\"abba\")\n\
    \    \"abba\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ui7z2gw.jl:14\nin expression starting at\
    \ /tmp/tmp_ui7z2gw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text, 0, length(text) - 1) \n    then return true\n\
    \    else return false\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt3gjxbq1.jl:14\nin expression starting at /tmp/tmpt3gjxbq1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\
    \ helper\n    >>> is_palindrome_helper('')\n    true\n    >>> is_palindrome_helper('aba')\n\
    \    true\n    >>> is_palindrome_helper('aaaaa')\n    true\n    >>> is_palindrome_helper('zbcd')\n\
    \    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpqof65v1d.jl:19\nin expression starting at /tmp/tmpqof65v1d.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    \n    if is_empty(text_reversed) == True\n        return\
    \ true\n    \n    if is_palindrome(text_reversed) == True\n        return true\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Reverses a string\n    >>> reverse('')\n    ''\n    >>> reverse('a')\n    'a'\n\
    \    >>> reverse('ab')\n    'ba'\n    >>> reverse('abc')\n    'cba'\n    >>> reverse('zbc')\n\
    \    'cbz'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9y8mol2h.jl:26\nin expression starting at\
    \ /tmp/tmp9y8mol2h.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    \n    if is_empty(text_reversed) == True\n        return\
    \ true\n    \n    if is_palindrome(text_reversed) == True\n        return true\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp19m7ule5.jl:26\nin expression starting at\
    \ /tmp/tmp19m7ule5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\
    \ helper\n    >>> is_palindrome_helper('')\n    true\n    >>> is_palindrome_helper('aba')\n\
    \    true\n    >>> is_palindrome_helper('aaaaa')\n    true\n    >>> is_palindrome_helper('zbcd')\n\
    \    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmppwtl1a3_.jl:19\nin expression starting at /tmp/tmppwtl1a3_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    middle = length(text)\
    \ / 2\n    \n    if length(text) == 0 or length(text) == 1 \n        return true\n\
    \    \n    if text[middle] == text[middle-1]\n        return is_palindrome(text[1:middle-1])\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Reverses a string\n    >>> reverse(\"hello\")\n    \"olleh\"\n    >>> reverse(\"\
    hello\")\n    \"olleh\"\n    >>> reverse(\"hello\")\n    \"olleh\"\n    >>> reverse(\"\
    hello\")\n    \"olleh\"\n    >>> reverse(\"hello\")\n    \"olleh\"\n    >>> reverse(\"\
    hello\")\n    \"olleh\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"length\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzns3wby2.jl:18\nin expression starting at /tmp/tmpzns3wby2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome(text, 0, length(text) - 1):\n        return true\n  \
    \  return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Reverses\
    \ a string\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoo_5o0qf.jl:14\nin expression starting at\
    \ /tmp/tmpoo_5o0qf.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\
    \ helper\n    >>> is_palindrome_helper('')\n    true\n    >>> is_palindrome_helper('aba')\n\
    \    true\n    >>> is_palindrome_helper('aaaaa')\n    true\n    >>> is_palindrome_helper('zbcd')\n\
    \    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpc4kaujw4.jl:19\nin expression starting at /tmp/tmpc4kaujw4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text) \n        then return true\n        else return\
    \ false\n    end\nend\n</code>\n<|/ a tags=julia,palindrome,string |>\n<| c |>\n\
    This doesn't work for `is_palindrome(\"abba\")`\n<|/ c |>\n<| c |>\nYes, I agree\
    \ with you. My answer was more of a general solution to the problem of checking\
    \ if a string is a palindrome. Your solution is more efficient and elegant.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeyk_v70i.jl:14\nin expression starting at /tmp/tmpeyk_v70i.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    text_reversed = reverse(text)\n\
    \    return text_reversed == text\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Reverses a string\n    >>> reverse(\"hello\")\n    \"olleh\"\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpieca_frj.jl:19\nin expression starting at\
    \ /tmp/tmpieca_frj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    \n    if text == text_reversed\n        return true\n \
    \   \n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_4bbkl8x.jl:1\nin expression starting at /tmp/tmp_4bbkl8x.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    \n    if is_empty(text_reversed) == True\n        return\
    \ true\n    \n    return text == text_reversed\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgtwd30sr.jl:1\nin expression starting at /tmp/tmpgtwd30sr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    text_length = length(text)\n\
    \    \n    if text_length <= 1\n        return true\n    \n    text_index = 1\n\
    \    \n    while text_index <= text_length / 2\n        if text[text_index] !=\
    \ text[text_length - text_index - 1]\n            return false\n        text_index\
    \ += 1\n    end\n    \n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that checks if a given string is a palindrome (case insensitive)\n\
    Hint: Use is_palindrome function\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg0gfk3qx.jl:31\nin expression starting at\
    \ /tmp/tmpg0gfk3qx.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\
    \ helper\n    >>> is_palindrome_helper('')\n    true\n    >>> is_palindrome_helper('aba')\n\
    \    true\n    >>> is_palindrome_helper('aaaaa')\n    true\n    >>> is_palindrome_helper('zbcd')\n\
    \    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmptl4uaebf.jl:19\nin expression starting at /tmp/tmptl4uaebf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\nend\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis doesn't work\
    \ for `is_palindrome(\"abba\")`\n<|/ c |>\n<| c |>\nI agree with you, my answer\
    \ was more of a general solution to check if a string is a palindrome. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nI believe that `reverse(text) == text`\
    \ should be `reverse(text) == reverse(text)`\n<|/ c |>\n<| c |>\nThanks, I fixed\
    \ it.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk2cwu57z.jl:18\nin expression starting at\
    \ /tmp/tmpk2cwu57z.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Reverses a string\n\
    \    >>> reverse(\"hello\")\n    \"olleh\"\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4vn7__hs.jl:18\nin expression starting at\
    \ /tmp/tmp4vn7__hs.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    else\n        local\
    \ left = 0\n        local right = length(text) - 1\n        while left < right\n\
    \            if text[left] != text[right]\n                return false\n    \
    \        else\n                left = left + 1\n                right = right\
    \ - 1\n            end\n        end\n        return true\n    end\nend\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8l8stsq1.jl:29\nin expression starting at\
    \ /tmp/tmp8l8stsq1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    text_reversed = reverse(text)\n\
    \    if text == text_reversed\n        return true\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphex_d25s.jl:22\nin expression starting at\
    \ /tmp/tmphex_d25s.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    if text == text_reversed\n        return true\n    else\n\
    \        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Reverses\
    \ a string\n    >>> reverse(\"hello\")\n    \"olleh\"\n    >>> reverse(\"abba\"\
    )\n    \"abba\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp920698q.jl:22\nin expression starting at\
    \ /tmp/tmpp920698q.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    if text == text_reversed\n        return true\n    else\n\
    \        return false\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_uqek2q.jl:22\nin expression starting at\
    \ /tmp/tmp9_uqek2q.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp8fkaia0x.jl:19\nin expression starting at /tmp/tmp8fkaia0x.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text, 0, length(text)) \n    then return true\n\
    \    else return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi0cv29t3.jl:14\nin expression starting at /tmp/tmpi0cv29t3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        true\n    else\n        text == reverse(text)\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzzqi2a9n.jl:19\nin expression starting at\
    \ /tmp/tmpzzqi2a9n.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    left = 0\n    right\
    \ = length(text) - 1\n    \n    while left < right\n        if is_palindrome_helper(text,\
    \ left, right)\n            return true\n        \n        left += 1\n       \
    \ right -= 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphainzar9.jl:28\nin expression starting at\
    \ /tmp/tmphainzar9.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text) \n        return true \n    else \n        return\
    \ false \nend \n</cell>\n<text>\nExercise 4\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are uppercase letters.\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_dd2yeas.jl:18\nin expression starting at\
    \ /tmp/tmp_dd2yeas.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    text_length\
    \ = length(text)\n    \n    if text_length <= 1\n        return true\n    \n \
    \   left_index = 0\n    right_index = text_length - 1\n    \n    while left_index\
    \ < right_index\n        if text[left_index] != text[right_index]\n          \
    \  return false\n        left_index += 1\n        right_index -= 1\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Reverses\
    \ a string\n    >>> reverse(\"aba\")\n    \"baa\"\n    >>> reverse(\"abba\")\n\
    \    \"abba\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmo0lg9wd.jl:32\nin expression starting at\
    \ /tmp/tmpmo0lg9wd.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    len::Int = length(text)\n\
    \    \n    if len < 2\n        return true\n    \n    left::Int = 0\n    right::Int\
    \ = len - 1\n    \n    while left < right\n        if text[left] != text[right]\n\
    \            return false\n        \n        left += 1\n        right -= 1\n \
    \   end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Reverses a string\n    >>> reverse(\"abc\")\n    \"cba\"\n    >>> reverse(\"\
    abba\")\n    \"abba\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzkijik1y.jl:34\nin expression starting at\
    \ /tmp/tmpzkijik1y.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\
    \ helper\n    >>> is_palindrome_helper('')\n    true\n    >>> is_palindrome_helper('aba')\n\
    \    true\n    >>> is_palindrome_helper('aaaaa')\n    true\n    >>> is_palindrome_helper('zbcd')\n\
    \    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpjj_59che.jl:19\nin expression starting at /tmp/tmpjj_59che.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    left = 0\n \
    \   right = length(text) - 1\n    \n    while left < right\n        if text[left]\
    \ != text[right]\n            return false\n        left += 1\n        right -=\
    \ 1\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n\
    \    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n\
    \    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg9kou0sk.jl:27\nin expression starting at\
    \ /tmp/tmpg9kou0sk.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpyctfvaf5.jl:19\nin expression starting at /tmp/tmpyctfvaf5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text, 0, length(text)) \n    then return true\n\
    \    else return false\n    end\nend\n\"\"\"\n    Checks if given string is a\
    \ palindrome helper\n    >>> is_palindrome_helper('aba', 0, 2)\n    True\n   \
    \ >>> is_palindrome_helper('aaaaa', 0, 3)\n    True\n    >>> is_palindrome_helper('zbcd',\
    \ 0, 2)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe95f_5sk.jl:14\nin expression starting at /tmp/tmpe95f_5sk.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return True\n    \n    text_reversed = reverse(text)\n\
    \    \n    if is_empty(text_reversed)\n        return True\n    \n    return text\
    \ == text_reversed\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Reverses\
    \ a string\n    >>> reverse('')\n    ''\n    >>> reverse('abc')\n    'cba'\n \
    \   >>> reverse('zbc')\n    'zbc'\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpffokw373.jl:23\nin expression starting at\
    \ /tmp/tmpffokw373.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\
    \ helper\n    >>> is_palindrome_helper('')\n    True\n    >>> is_palindrome_helper('aba')\n\
    \    True\n    >>> is_palindrome_helper('aaaaa')\n    True\n    >>> is_palindrome_helper('zbcd')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpxf5y9w1a.jl:19\nin expression starting at /tmp/tmpxf5y9w1a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n`is_palindrome_helper(text)\
    \ == true` can be simplified to `is_palindrome_helper(text) == true`\n<|/ c |>\n\
    <| c |>\nThanks I didn't know that. I've edited my answer.\n<|/ c |>\n<| c |>\n\
    `is_palindrome_helper(text) == true` can be simplified to `is_palindrome_helper(text)\
    \ == true`\n<|/ c |>\n<| c |>\nThanks I didn't know that. I've edited my answer.\n\
    <|/ c |>\n<| a tags=julia,palindrome,string |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptudpvvxh.jl:19\nin expression starting at\
    \ /tmp/tmptudpvvxh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome(text, 0, length(text) - 1) \n    then return true\n \
    \   else return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxjkw09ep.jl:14\nin expression starting at /tmp/tmpxjkw09ep.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) then return true\n    else if text[1] == text[end] then\
    \ return is_palindrome(text[1..end-1])\n    else return false\nend\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are uppercase letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4v1xt_nr.jl:13\nin expression starting at /tmp/tmp4v1xt_nr.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) \n        return true\n    \n    left = 0\n    right\
    \ = length(text) - 1\n    while left < right \n        if text[left] != text[right]\
    \ \n            return false\n        left += 1\n        right -= 1\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"while\" at /tmp/tmpvz22jj69.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvz22jj69.jl:1\n\
    in expression starting at /tmp/tmpvz22jj69.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    begin = 0\n\
    \    end = length(text) - 1\n    \n    while begin < end\n        if text[begin]\
    \ != text[end]\n            return false\n        \n        begin = begin + 1\n\
    \        end = end - 1\n    end\n    \n    return true\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a number is even.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv5zli9lm.jl:16\nin expression starting at /tmp/tmpv5zli9lm.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    length::Int\
    \ = length(text)\n    \n    if length < 2\n        return true\n    \n    first::Char\
    \ = text[1]\n    last::Char = text[(length-1)]\n    \n    if first != last\n \
    \       return false\n    \n    middle::Int = length / 2\n    \n    left::String\
    \ = substring(text, 1, middle)\n    right::String = substring(text, middle+1,\
    \ length)\n    \n    if is_palindrome(left) == True && is_palindrome(right) ==\
    \ True\n        return true\n    \n    return false\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Reverses a string\n    >>> reverse(\"hello\")\n    \"olleh\"\n   \
    \ >>> reverse(\"hello\")\n    \"olleh\"\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg24sf2bk.jl:37\nin expression starting at\
    \ /tmp/tmpg24sf2bk.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    left = 0\n    right\
    \ = length(text) - 1\n    \n    while left < right\n        if is_palindrome_helper(text,\
    \ left, right)\n            return true\n        \n        left += 1\n       \
    \ right -= 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    is_palindrome(\"aba\")\n</cell>\n<code language=julia-1.5>\nis_palindrome(\"aaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nis_palindrome(\"zbcd\")\n</cell>\n<text>\n\
    Exercise 2.2\nWrite a function that checks if a given string is a palindrome (case\
    \ insensitive)\nHint: use is_palindrome()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdyj0_ebm.jl:28\nin expression starting at\
    \ /tmp/tmpdyj0_ebm.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text, 0, length(text) - 1) \n    then true \n\
    \    else false \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\n\
    I wrote a package for Julia called Palindrome.jl which implements the algorithm\
    \ described here: https://en.wikipedia.org/wiki/Palindrome_(computing)\n<code>\n\
    using Palindrome\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"true\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpldy82h2o.jl:14\nin expression starting at /tmp/tmpldy82h2o.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcxp93r0p.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == true\n  UndefVarError: is_palindrome_helper\
    \ not defined\n  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main\
    \ /tmp/tmpcxp93r0p.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcxp93r0p.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcxp93r0p.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpcxp93r0p.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"aba\") == true\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpcxp93r0p.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcxp93r0p.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcxp93r0p.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpcxp93r0p.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"aaaaa\") == true\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpcxp93r0p.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcxp93r0p.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcxp93r0p.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpcxp93r0p.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"zbcd\") == false\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpcxp93r0p.jl:13\n\
    \   [2] macro expan"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcxp93r0p.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_rec(text, 0, text.length-1)\n        return true\n  \
    \  return false\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7dxz1vk.jl:17\nin expression starting at\
    \ /tmp/tmps7dxz1vk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\"\
    ) == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\")\
    \ == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2a5sdv5.jl:19\nin expression starting at\
    \ /tmp/tmpw2a5sdv5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for your answer! I tried to implement your solution, but I got an error message\
    \ saying \"ERROR: LoadError: UndefVarError: is_palindrome_helper not defined\"\
    . Do you know what might be the problem?\n<|/ c |>\n<| c |>\nHi, I edited my answer\
    \ to include the function definition. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ again! I tried to run your code but now I got an error message saying \"ERROR:\
    \ LoadError: UndefVarError: is_palindrome_helper not defined\". Do you know what\
    \ might be the problem?\n<|/ c |>\n<| c |>\nHi, I edited my answer to include\
    \ the function definition. Hope it helps.\n<|/ c |>\n<| c |>\nThanks again! I\
    \ tried to run your code but now I got an error message saying \"ERROR: LoadError:\
    \ UndefVarError: is_palindrome_helper not defined\". Do you know what might be\
    \ the problem?\n<|/ c |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9j82_g4.jl:19\nin expression starting at\
    \ /tmp/tmpz9j82_g4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_rec(text)\n    else false\nend\n</cell>\n<code language=julia-1.5>\n\
    is_palindrome(\"aba\")\n</cell>\n<code language=julia-1.5>\nis_palindrome(\"aaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nis_palindrome(\"zbcd\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are letters.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv1z8jgsl.jl:16\nin expression starting at\
    \ /tmp/tmpv1z8jgsl.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    \n    if is_empty(text_reversed) == True\n        return\
    \ true\n    \n    if is_palindrome(text_reversed) == True\n        return true\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzlevt3yb.jl:26\nin expression starting at\
    \ /tmp/tmpzlevt3yb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome(text, 0, length(text) - 1):\n        return true\n  \
    \  return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3m6a9_r5.jl:14\nin expression starting at\
    \ /tmp/tmp3m6a9_r5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp0atclrb5.jl:19\nin expression starting at /tmp/tmp0atclrb5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome(text, 0, length(text) - 1) \n    then true \n    else\
    \ false \n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n \
    \   >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n\
    \    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"true\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpygbldsjl.jl:14\nin expression starting at /tmp/tmpygbldsjl.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    local i = 0\n    local\
    \ j = text.length - 1\n    \n    while i < j\n        if text[i] ~= text[j]\n\
    \            return false\n        \n        i += 1\n        j -= 1\n    end\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Checks\
    \ if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>>\
    \ is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n \
    \   >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzt4dqvp3.jl:29\nin expression starting at\
    \ /tmp/tmpzt4dqvp3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmph7n5zdh_.jl:19\nin expression starting at /tmp/tmph7n5zdh_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    begin = 0\n\
    \    end = length(text) - 1\n    while begin < end\n        if is_letter(text[begin])\
    \ == false || is_letter(text[end]) == false\n            return false\n      \
    \  \n        if text[begin] != text[end]\n            return false\n        \n\
    \        begin = begin + 1\n        end = end - 1\n    end\n    return true\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number is\
    \ palindrome\nHint: use is_palindrome function\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqnzjfs9z.jl:16\nin expression starting at /tmp/tmpqnzjfs9z.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text, 0, length(text) - 1) \n    else \n     \
    \   false\n    end\nend\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxz28b07i.jl:18\nin expression starting at\
    \ /tmp/tmpxz28b07i.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    text_reversed = reverse(text)\n\
    \    \n    if is_empty(text_reversed)\n        return true\n    \n    return text\
    \ == text_reversed\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwtg_zf_.jl:1\nin expression starting at /tmp/tmpiwtg_zf_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    begin = 0\n\
    \    end = length(text) - 1\n    \n    while begin < end\n        if text[begin]\
    \ != text[end]\n            return false\n        \n        begin = begin + 1\n\
    \        end = end - 1\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Reverses a string\n    >>> reverse(\"abc\")\n    \"cba\"\n    >>>\
    \ reverse(\"abba\")\n    \"abba\"\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfwys0iqu.jl:16\nin expression starting at /tmp/tmpfwys0iqu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    local i = 0\n\
    \    local j = 0\n    local len::Int64 = length(text)\n    \n    while i < len\n\
    \        do\n            if text[i] ~= text[len-j-1]\n                then return\
    \ false\n            end\n            j = j + 1\n        end\n        i = i +\
    \ 1\n    end\n    return true\nend\n</cell>\n<text>\nPalindrome with Regex\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\"\
    ) == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\")\
    \ == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppq8rer_h.jl:21\nin expression starting at /tmp/tmppq8rer_h.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6d49qnck.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == true\n  UndefVarError: is_palindrome_helper\
    \ not defined\n  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main\
    \ /tmp/tmp6d49qnck.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6d49qnck.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6d49qnck.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6d49qnck.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"aba\") == true\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp6d49qnck.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6d49qnck.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6d49qnck.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6d49qnck.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"aaaaa\") == true\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp6d49qnck.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6d49qnck.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6d49qnck.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6d49qnck.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"zbcd\") == false\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp6d49qnck.jl:13\n\
    \   [2] macro expan"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6d49qnck.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        true\n    else\n        false\n    end\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpejit00ci.jl:19\nin expression starting at\
    \ /tmp/tmpejit00ci.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text, 0, length(text) - 1):\n        return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert is_palindrome(\"\
    aba\") == true\n@assert is_palindrome(\"aaaaa\") == true\n@assert is_palindrome(\"\
    zbcd\") == false\n</cell>\n<text>\nExercise 2\nWrite a function that checks if\
    \ a number is prime or not. You may want to use the sieve of Eratosthenes for\
    \ this.\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3i0zj5d3.jl:14\nin expression starting at\
    \ /tmp/tmp3i0zj5d3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpaa5u4s1z.jl:19\nin expression starting at /tmp/tmpaa5u4s1z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp1tbjhgo9.jl:19\nin expression starting at /tmp/tmp1tbjhgo9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    begin = 0\n\
    \    end = length(text) - 1\n    \n    while begin < end\n        if text[begin]\
    \ != text[end]\n            return false\n        \n        begin = begin + 1\n\
    \        end = end - 1\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq0_b8vs4.jl:16\nin expression starting at /tmp/tmpq0_b8vs4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) \n        return true\n    else \n        begin = 0\n\
    \        end = length(text) - 1\n        while begin < end \n            if text[begin]\
    \ != text[end] \n                return false\n            else \n           \
    \     begin = begin + 1\n                end = end - 1\n        end\n        return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp59mgftfs.jl:16\nin expression starting at /tmp/tmp59mgftfs.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    local left =\
    \ 0\n    local right = length(text) - 1\n    \n    while left < right\n      \
    \  if text[left] != text[right]\n            return false\n        \n        left++\n\
    \        right--\n    end\n    \n    return true\nend\n</cell>\n<text>\nExercise\
    \ 7\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are uppercase letters.\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzsxenjkr.jl:24\nin expression starting at /tmp/tmpzsxenjkr.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| a\
    \ tags=julia,string |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy3jrgjht.jl:19\nin expression starting at\
    \ /tmp/tmpy3jrgjht.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    local i = 0\n    local\
    \ j = text.length - 1\n    \n    while i <= j\n        if text[i] ~= text[j]\n\
    \            return false\n        \n        i += 1\n        j -= 1\n    end\n\
    \    \n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a number is even.\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpthh2x77l.jl:29\nin expression starting at\
    \ /tmp/tmpthh2x77l.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_3hno01.jl:19\nin expression starting at\
    \ /tmp/tmpw_3hno01.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) then return true\n    else if text[0] == text[-1] then\
    \ return true\n    else return false\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuwspbue1.jl:13\nin expression starting at /tmp/tmpuwspbue1.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a tags=julia,palindrome,string\
    \ |>\n<| c |>\nI like this solution, but I wonder why you use `if is_palindrome_helper(text)\
    \ == true` instead of just `if is_palindrome_helper(text)`?\n<|/ c |>\n<| c |>\n\
    I guess it just makes it more readable. `if is_palindrome_helper(text)` would\
    \ also work, but I find it more readable with the `==` operator. Also, `if is_palindrome_helper(text)\
    \ == true` would also work, but I find it more readable with the `==` operator.\
    \ Both are valid though.\n<|/ c |>\n<| c |>\nI guess it just makes it more readable.\
    \ `if is_palindrome_helper(text)` would also work, but I find it more readable\
    \ with the `==` operator. Also, `if is_palindrome_helper(text) == true` would\
    \ also work, but I find it more readable with the `==` operator. Both are valid\
    \ though.\n<|/ c |>\n<| c |>\nI guess it just makes it more readable. `if is_palindrome_helper(text)`\
    \ would also work, but I find it more readable with the `==` operator. Also, `if\
    \ is_palindrome_helper(text) == true` would also work, but I find it more readable\
    \ with the `==` operator. Both are valid though.\n<|/ c |>\n<| c |>\nI guess it\
    \ just makes it more readable. `if is_palindrome_helper(text)` would also work,\
    \ but I find it more readable with the `==` operator. Also, `if is_palindrome_helper(text)\
    \ == true` would also work, but I find it more readable with the `==` operator.\
    \ Both are valid though.\n<|/ c |>\n<| a tags=julia,palindrome,string |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvfl551t.jl:19\nin expression starting at\
    \ /tmp/tmpyvfl551t.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    begin = 0\n    end =\
    \ length(text) - 1\n    \n    while begin < end\n        if text[begin] != text[end]\n\
    \            return false\n        \n        begin++\n        end--\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Checks\
    \ if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>>\
    \ is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n \
    \   >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_yytj8nf.jl:16\nin expression starting at /tmp/tmp_yytj8nf.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    begin = 0\n\
    \    end = length(text) - 1\n    \n    while begin < end\n        if text[begin]\
    \ != text[end]\n            return false\n        end -= 1\n        begin += 1\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n\
    \    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n\
    \    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzas29g7k.jl:16\nin expression starting at /tmp/tmpzas29g7k.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    \n    if text == text_reversed\n        return true\n \
    \   else\n        return false\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\"\
    ) == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\")\
    \ == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2g9exk2c.jl:23\nin expression starting at\
    \ /tmp/tmp2g9exk2c.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    left_index::Int\
    \ = 0\n    right_index::Int = 0\n    \n    while left_index < length(text) - 1\
    \ && right_index < length(text) - 1 do\n        if text(left_index) != text(right_index)\n\
    \            return false\n        \n        left_index += 1\n        right_index\
    \ += 1\n    end\n    \n    return true\nend\n</cell>\n<text>\nPalindrome II\n\
    Write a function that checks if a given string is a palindrome (a word that reads\
    \ the same forwards and backwards). Do not use the built-in reverse() function,\
    \ but write your own.\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7ycfvja1.jl:19\nin expression starting at /tmp/tmp7ycfvja1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg5naxgl4.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == true\n  UndefVarError: is_palindrome_helper\
    \ not defined\n  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main\
    \ /tmp/tmpg5naxgl4.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5naxgl4.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5naxgl4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpg5naxgl4.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"aba\") == true\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpg5naxgl4.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5naxgl4.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5naxgl4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpg5naxgl4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"aaaaa\") == true\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpg5naxgl4.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5naxgl4.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5naxgl4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpg5naxgl4.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"zbcd\") == false\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpg5naxgl4.jl:13\n\
    \   [2] macro expan"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg5naxgl4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n    else \n        if is_palindrome_helper(text)\
    \ == True\n        else \n            return False\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqv7mqrq8.jl:19\nin expression starting at\
    \ /tmp/tmpqv7mqrq8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    else if text.length % 2 ==\
    \ 1\n        return false\n    else\n        middle = text.length / 2\n      \
    \  left  = text.slice(0, middle)\n        right = text.slice(middle, text.length)\n\
    \        return is_palindrome(left) && is_palindrome(right)\n    end\nend\n</cell>\n\
    <text>\nPalindrome with recursion\nThe palindrome function above is recursive.\
    \ Let's see how we can make it iterative.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5xzaiakq.jl:15\nin expression starting at\
    \ /tmp/tmp5xzaiakq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    begin = 0\n\
    \    end = length(text) - 1\n    while begin < end\n        if is_letter(text[begin])\
    \ == true and is_letter(text[end]) == true\n            if text[begin] == text[end]\n\
    \                begin = begin + 1\n                end = end - 1\n          \
    \  else\n                begin = begin + 1\n                end = end - 1\n  \
    \      else\n            begin = begin + 1\n            end = end - 1\n    end\n\
    \    return begin == end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n\
    \    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n\
    \    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx_i5958g.jl:16\nin expression starting at /tmp/tmpx_i5958g.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\
    \ helper\n    >>> is_palindrome_helper('')\n    true\n    >>> is_palindrome_helper('aba')\n\
    \    true\n    >>> is_palindrome_helper('aaaaa')\n    true\n    >>> is_palindrome_helper('zbcd')\n\
    \    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpryytt1r9.jl:19\nin expression starting at /tmp/tmpryytt1r9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\
    \ helper\n    >>> is_palindrome_helper('')\n    True\n    >>> is_palindrome_helper('aba')\n\
    \    True\n    >>> is_palindrome_helper('aaaaa')\n    True\n    >>> is_palindrome_helper('zbcd')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmppm4dj1b_.jl:19\nin expression starting at /tmp/tmppm4dj1b_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    if text == text_reversed\n        return true\n    else\n\
    \        return false\nend\n</cell>\n<text>\nExercise 7\nWrite a function that\
    \ checks if a number is prime or not. \nThe function should take one argument:\
    \ number. \nThe function should return true if the number is prime and false otherwise.\n\
    The function should return false if the number is less than 2 or greater than\
    \ or equal to 3.\nThe function should return false if the number is 0.\nThe function\
    \ should return false if the number is negative.\nThe function should return false\
    \ if the number is NaN.\nThe function should return false if the number is infinite.\n\
    The function should return false if the number is NaN.\nThe function should return\
    \ false if the number is infinite.\nThe function should return false if the number\
    \ is NaN.\nThe function should return false if the number is infinite.\nThe function\
    \ should return false if the number is NaN.\nThe function should return false\
    \ if the number is infinite.\nThe function should return false if the number is\
    \ NaN.\nThe function should return false if the number is infinite.\nThe function\
    \ should return false if the number is NaN.\nThe function should return false\
    \ if the number is infinite.\nThe function should return false if the number is\
    \ NaN.\nThe function should return false if the number is infinite.\nThe function\
    \ should return false if the number is NaN.\nThe function should return false\
    \ if the number is infinite.\nThe function should return false if the number is\
    \ NaN.\nThe function should return false if the number is infinite.\nThe function\
    \ should return false if the number is NaN.\nThe function should return false\
    \ if the number is infinite.\nThe function should return false if the number is\
    \ NaN.\nThe function should return false if the number is infinite.\nThe function\
    \ should return false if the number is NaN.\nThe function should return false\
    \ if the number is infinite.\nThe function should return false if the number is\
    \ NaN.\nThe function should return false if the number is infinite.\nThe function\
    \ should return false if the number is NaN.\nThe function should return false\
    \ if the number is infinite.\nThe function should return false if the number is\
    \ NaN.\nThe function should return false if the number is infinite.\nThe function\
    \ should return false if the number is NaN.\nThe function should return false\
    \ if the number is infinite.\nThe function should return false if the number is\
    \ NaN.\nThe function should return false if the number is infinite.\nThe function\
    \ should return false if the number is NaN.\nThe function should return false\
    \ if the number is infinite.\nThe function should return false if the number is\
    \ NaN.\nThe function should return false if the number is infinite.\nThe function\
    \ should return false if the number is NaN.\nThe function should return false\
    \ if the number is infinite.\nThe \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdlkmkkga.jl:22\nin expression starting at\
    \ /tmp/tmpdlkmkkga.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_recursive(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp8bs4nzee.jl:19\nin expression starting at /tmp/tmp8bs4nzee.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text, 0, length(text) - 1) \n    else \n     \
    \   false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome helper\n\
    \    >>> is_palindrome_helper('aba', 0, 2)\n    True\n    >>> is_palindrome_helper('aaaaa',\
    \ 0, 3)\n    True\n    >>> is_palindrome_helper('zbcd', 0, 2)\n    False\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp3lrev6s2.jl:18\nin expression starting at /tmp/tmp3lrev6s2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppsd9xdhd.jl:18\nin expression starting at\
    \ /tmp/tmppsd9xdhd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_recursive(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdy70bisg.jl:19\nin expression starting at\
    \ /tmp/tmpdy70bisg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    text_length\
    \ = length(text)\n    \n    if text_length <= 1\n        return true\n    \n \
    \   text_length = text_length / 2\n    \n    if text_length == 0 \n        return\
    \ true\n    \n    if text_length == text_length\n        return true\n    \n \
    \   if text[text_length] != text[text_length-1]\n        return false\n    \n\
    \    return is_palindrome(text[text_length/2:text_length])\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsmjnwr1p.jl:34\nin expression starting at\
    \ /tmp/tmpsmjnwr1p.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    text_reversed = reverse(text)\n\
    \    if text == text_reversed\n        return true\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Reverses a string\n    >>> reverse(\"\
    hello\")\n    \"olleh\"\n    >>> reverse(\"hello\")\n    \"olleh\"\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpegthbdqy.jl:22\nin expression starting at\
    \ /tmp/tmpegthbdqy.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome(text, 0, length(text) - 1):\n        return true\n  \
    \  return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Reverses\
    \ a string\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppog7u17v.jl:14\nin expression starting at\
    \ /tmp/tmppog7u17v.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    begin = 0\n\
    \    end = length(text) - 1\n    while begin < end\n        if text[begin] !=\
    \ text[end]\n            return false\n        begin = begin + 1\n        end\
    \ = end - 1\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Reverses the given string\n    >>> reverse(\"hello\")\n    \"olleh\"\n  \
    \  >>> reverse(\"hello\")\n    \"olleh\"\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8f09t6co.jl:16\nin expression starting at /tmp/tmp8f09t6co.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    \n    if is_empty(text_reversed) == True\n        return\
    \ true\n    \n    if is_palindrome(text_reversed) == True\n        return true\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Reverses a string\n    >>> reverse('')\n    ''\n    >>> reverse('a')\n    'a'\n\
    \    >>> reverse('ab')\n    'ba'\n    >>> reverse('abc')\n    'cba'\n    >>> reverse('zbc')\n\
    \    'cbz'\n    >>> reverse('zbc')\n    'cbz'\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppux6tji3.jl:26\nin expression starting at\
    \ /tmp/tmppux6tji3.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpclsqrpe9.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == true\n  UndefVarError: is_palindrome_helper\
    \ not defined\n  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main\
    \ /tmp/tmpclsqrpe9.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpclsqrpe9.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpclsqrpe9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpclsqrpe9.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"aba\") == true\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpclsqrpe9.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpclsqrpe9.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpclsqrpe9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpclsqrpe9.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"aaaaa\") == true\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpclsqrpe9.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpclsqrpe9.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpclsqrpe9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpclsqrpe9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"zbcd\") == false\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpclsqrpe9.jl:13\n\
    \   [2] macro expan"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpclsqrpe9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    text_reversed = reverse(text)\n\
    \    return text_reversed == text\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Reverses a string\n    >>> reverse('')\n    ''\n    >>> reverse('abc')\n\
    \    'cba'\n    >>> reverse('abba')\n    'abba'\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8puuzd9n.jl:19\nin expression starting at\
    \ /tmp/tmp8puuzd9n.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text, 0, length(text) - 1) \n    then true \n\
    \    else false \n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string\
    \ |>\nA simple recursive function would do the trick:\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"true\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpseia_wsc.jl:14\nin expression starting at /tmp/tmpseia_wsc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplzp9fy0r.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == true\n  UndefVarError: is_palindrome_helper\
    \ not defined\n  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main\
    \ /tmp/tmplzp9fy0r.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplzp9fy0r.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplzp9fy0r.jl:23\ntest set:\
    \ Error During Test at /tmp/tmplzp9fy0r.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"aba\") == true\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmplzp9fy0r.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplzp9fy0r.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplzp9fy0r.jl:23\ntest set:\
    \ Error During Test at /tmp/tmplzp9fy0r.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"aaaaa\") == true\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmplzp9fy0r.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplzp9fy0r.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplzp9fy0r.jl:23\ntest set:\
    \ Error During Test at /tmp/tmplzp9fy0r.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"zbcd\") == false\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmplzp9fy0r.jl:13\n\
    \   [2] macro expan"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplzp9fy0r.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,palindrome\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0w3ojfz3.jl:19\nin expression starting at\
    \ /tmp/tmp0w3ojfz3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    \n    if is_empty(text_reversed) == true\n        return\
    \ true\n    \n    return text == text_reversed\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw3t3wcc9.jl:1\nin expression starting at /tmp/tmpw3t3wcc9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    let len = length(text)\n\
    \    let half = len / 2\n    \n    if len % 2 == 1\n        return is_palindrome(substring(text,\
    \ 0, half)) && is_palindrome(substring(text, half, len))\n    else\n        return\
    \ is_palindrome(substring(text, 0, half)) || is_palindrome(substring(text, half,\
    \ len))\nend\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime or not. \nThe function should return true if the number is prime and\
    \ false if not.\nThe function should return false if the number is 1 or 0.\nThe\
    \ function should return false if the number is negative or 0.\nThe function should\
    \ return false if the number is bigger than the square root of the number it is\
    \ checking.\nThe function should return false if the number is bigger than the\
    \ square root of the number it is checking.\nThe function should return false\
    \ if the number is bigger than the square root of the number it is checking.\n\
    The function should return false if the number is bigger than the square root\
    \ of the number it is checking.\nThe function should return false if the number\
    \ is bigger than the square root of the number it is checking.\nThe function should\
    \ return false if the number is bigger than the square root of the number it is\
    \ checking.\nThe function should return false if the number is bigger than the\
    \ square root of the number it is checking.\nThe function should return false\
    \ if the number is bigger than the square root of the number it is checking.\n\
    The function should return false if the number is bigger than the square root\
    \ of the number it is checking.\nThe function should return false if the number\
    \ is bigger than the square root of the number it is checking.\nThe function should\
    \ return false if the number is bigger than the square root of the number it is\
    \ checking.\nThe function should return false if the number is bigger than the\
    \ square root of the number it is checking.\nThe function should return false\
    \ if the number is bigger than the square root of the number it is checking.\n\
    The function should return false if the number is bigger than the square root\
    \ of the number it is checking.\nThe function should return false if the number\
    \ is bigger than the square root of the number it is checking.\nThe function should\
    \ return false if the number is bigger than the square root of the number it is\
    \ checking.\nThe function should return false if the number is bigger than the\
    \ square root of the number it is checking.\nThe function should return false\
    \ if the number is bigger than the square root of the number it is checking.\n\
    The function should return false if the number is bigger than the square root\
    \ of the number it is checking.\nThe function should return false if the number\
    \ is bigger than the \nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_vrp165l.jl:24\nin expression starting at\
    \ /tmp/tmp_vrp165l.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp7gumcm8m.jl:19\nin expression starting at /tmp/tmp7gumcm8m.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_palindrome(\"\
    aba\")\n</cell>\n<code language=julia-1.5>\nis_palindrome(\"aaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nis_palindrome(\"zbcd\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a number is even.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp39a9049d.jl:19\nin expression starting at\
    \ /tmp/tmp39a9049d.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| a\
    \ tags=julia,string |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppldxd5v8.jl:19\nin expression starting at\
    \ /tmp/tmppldxd5v8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    if is_empty(text_reversed) == True\n        return true\n\
    \    \n    if is_palindrome(text_reversed) == True\n        return true\n    \n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbxakefd2.jl:25\nin expression starting at\
    \ /tmp/tmpbxakefd2.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome(text, 0, length(text) - 1):\n        return true\n  \
    \  else\n        return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if a given string is a palindrome (word or sentence)\nHint: Use\
    \ is_palindrome function\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpunwofjoq.jl:14\nin expression starting at\
    \ /tmp/tmpunwofjoq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    left = 0\n    right\
    \ = (length(text) - 1)\n    while left < right\n        if is_palindrome_helper(text,\
    \ left, right)\n            return true\n        left += 1\n        right -= 1\n\
    \    return false\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiyzkr2_i.jl:25\nin expression starting at\
    \ /tmp/tmpiyzkr2_i.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    local start = 0\n  \
    \  local end = text.length - 1\n    \n    while start < end\n        if text[start]\
    \ != text[end]\n            return false\n        \n        start = start + 1\n\
    \        end = end - 1\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphc3zxuo7.jl:17\nin expression starting at /tmp/tmphc3zxuo7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\
    \ helper\n    >>> is_palindrome_helper('')\n    true\n    >>> is_palindrome_helper('aba')\n\
    \    true\n    >>> is_palindrome_helper('aaaaa')\n    true\n    >>> is_palindrome_helper('zbcd')\n\
    \    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp_afz62ym.jl:19\nin expression starting at /tmp/tmp_afz62ym.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwkvkfqt1.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == true\n  UndefVarError: is_palindrome_helper\
    \ not defined\n  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main\
    \ /tmp/tmpwkvkfqt1.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwkvkfqt1.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwkvkfqt1.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpwkvkfqt1.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"aba\") == true\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpwkvkfqt1.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwkvkfqt1.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwkvkfqt1.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpwkvkfqt1.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"aaaaa\") == true\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpwkvkfqt1.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwkvkfqt1.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwkvkfqt1.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpwkvkfqt1.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"zbcd\") == false\n  UndefVarError: is_palindrome_helper not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpwkvkfqt1.jl:13\n\
    \   [2] macro expan"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwkvkfqt1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n    else \n        if is_palindrome_helper(text)\
    \ == True\n        else \n            return False\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_tumuqn3.jl:20\nin expression starting at\
    \ /tmp/tmp_tumuqn3.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_length\
    \ = length(text)\n    \n    if text_length <= 1\n        return true\n    \n \
    \   text_length = text_length / 2\n    \n    if text_length == 1\n        return\
    \ true\n    \n    text_length = text_length / 2\n    \n    if text_length == 1\n\
    \        return true\n    \n    text_length = text_length / 2\n    \n    if text_length\
    \ == 1\n        return true\n    \n    text_length = text_length / 2\n    \n \
    \   if text_length == 1\n        return true\n    \n    text_length = text_length\
    \ / 2\n    \n    if text_length == 1\n        return true\n    \n    text_length\
    \ = text_length / 2\n    \n    if text_length == 1\n        return true\n    \n\
    \    text_length = text_length / 2\n    \n    if text_length == 1\n        return\
    \ true\n    \n    text_length = text_length / 2\n    \n    if text_length == 1\n\
    \        return true\n    \n    text_length = text_length / 2\n    \n    if text_length\
    \ == 1\n        return true\n    \n    text_length = text_length / 2\n    \n \
    \   if text_length == 1\n        return true\n    \n    text_length = text_length\
    \ / 2\n    \n    if text_length == 1\n        return true\n    \n    text_length\
    \ = text_length / 2\n    \n    if text_length == 1\n        return true\n    \n\
    \    text_length = text_length / 2\n    \n    if text_length == 1\n        return\
    \ true\n    \n    text_length = text_length / 2\n    \n    if text_length == 1\n\
    \        return true\n    \n    text_length = text_length / 2\n    \n    if text_length\
    \ == 1\n        return true\n    \n    text_length = text_length / 2\n    \n \
    \   if text_length == 1\n        return true\n    \n    text_length = text_length\
    \ / 2\n    \n    if text_length == 1\n        return true\n    \n    text_length\
    \ = text_length / 2\n    \n    if text_length == 1\n        return true\n    \n\
    \    text_length = text_length / 2\n    \n    if text_length == 1\n        return\
    \ true\n    \n    text_length = text_length / 2\n    \n    if text_length == 1\n\
    \        return true\n    \n    text_length = text_length / 2\n    \n    if text_length\
    \ == 1\n        return true\n    \n    text_length = text_length / 2\n    \n \
    \   if text_length == 1\n        return true\n    \n    text_length = text_length\
    \ / 2\n    \n    if text_length == 1\n        return true\n    \n    text_length\
    \ = text_length / 2\n    \n    if text_length == 1\n        return true\n    \n\
    \    text_\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd5q1nqhw.jl:1\nin expression starting at /tmp/tmpd5q1nqhw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text, 0, length(text) - 1) \n    then return true\n\
    \    else return false\n    end \nend \n\"\"\"\n    Checks if given string is\
    \ a palindrome helper\n    >>> is_palindrome_helper('aba', 0, 2)\n    True\n \
    \   >>> is_palindrome_helper('aaaaa', 0, 3)\n    True\n    >>> is_palindrome_helper('zbcd',\
    \ 0, 3)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1uv8dfjh.jl:14\nin expression starting at /tmp/tmp1uv8dfjh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) \n        return true\n    else \n        return text\
    \ == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpja9jl7ew.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpja9jl7ew.jl:1\n\
    in expression starting at /tmp/tmpja9jl7ew.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or request clarification from\
    \ an author, leave a comment below their post. - [From Review](/review/low-quality-posts/29156902)\n\
    <|/ c |>\n<| c |>\nI added the code to the answer, but I don't think it really\
    \ qualifies as an answer to the question. Maybe I misunderstood the question?\n\
    <|/ c |>\n<| c |>\nThe question was how to check if a string is a palindrome,\
    \ not how to reverse a string. Your answer does not provide an answer to the question.\
    \ Maybe the question should be reworded?\n<|/ c |>\n<| c |>\nI added the code\
    \ to the answer, but I don't think it really qualifies as an answer to the question.\
    \ Maybe I misunderstood the question?\n<|/ c |>\n<| a tags=julia,string |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplmjun0n7.jl:19\nin expression starting at\
    \ /tmp/tmplmjun0n7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    begin = 0\n\
    \    end = length(text) - 1\n    \n    while begin < end\n        if text[begin]\
    \ != text[end]\n            return false\n        \n        begin = begin + 1\n\
    \        end = end - 1\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_2ll9tg6.jl:16\nin expression starting at /tmp/tmp_2ll9tg6.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\
    \ helper\n    >>> is_palindrome_helper('')\n    true\n    >>> is_palindrome_helper('aba')\n\
    \    true\n    >>> is_palindrome_helper('aaaaa')\n    true\n    >>> is_palindrome_helper('zbcd')\n\
    \    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp33mtfw7_.jl:19\nin expression starting at /tmp/tmp33mtfw7_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text, 0, length(text) - 1) \n    else \n     \
    \   false\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpkfz1qs.jl:18\nin expression starting at\
    \ /tmp/tmpnpkfz1qs.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_length\
    \ = length(text)\n    \n    if text_length < 2\n        return true\n    \n  \
    \  text_reversed = reverse(text)\n    \n    if text_length == text_reversed\n\
    \        return true\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Reverses a string\n    >>> reverse(\"hello\")\n    \"olleh\"\n   \
    \ >>> reverse(\"hello\")\n    \"olleh\"\n    >>> reverse(\"hello\")\n    \"olleh\"\
    \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc_xl9wcx.jl:28\nin expression starting at\
    \ /tmp/tmpc_xl9wcx.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\
    \n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n\
    \    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n\
    \    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1l0h2eq.jl:19\nin expression starting at\
    \ /tmp/tmpg1l0h2eq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    length::Int\
    \ = length(text)\n    \n    if length < 2\n        return true\n    \n    first::Char\
    \ = text[1]\n    last::Char = text[(length-1)]\n    \n    if first != last\n \
    \       return false\n    \n    return is_palindrome(text[1..(length-1)])\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are uppercase letters.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp76hc4a8b.jl:29\nin expression starting at\
    \ /tmp/tmp76hc4a8b.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    local i = 0\n\
    \    local j = text.length()-1\n    \n    while i < j\n        if text[i] ~= text[j]\n\
    \            return false\n        \n        i += 1\n        j -= 1\n    end\n\
    \    \n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a number is prime or not\nHint: use Sieve of Eratosthenes\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9cznx_zy.jl:29\nin expression starting at\
    \ /tmp/tmp9cznx_zy.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome(text, 0, length(text) - 1):\n        return true\n  \
    \  else\n        return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\
    \n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n\
    \    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n\
    \    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpicbjh_dg.jl:14\nin expression starting at\
    \ /tmp/tmpicbjh_dg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are uppercase letters.\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0w1f5_y5.jl:18\nin expression starting at\
    \ /tmp/tmp0w1f5_y5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_length\
    \ = length(text)\n    \n    if text_length < 2\n        return true\n    \n  \
    \  text_length -= 1\n    \n    if text_length == 0 \n        return true\n   \
    \ \n    text_length = length(text)\n    \n    if text_length < 2\n        return\
    \ true\n    \n    text_length -= 1\n    \n    if text_length == 0 \n        return\
    \ true\n    \n    text_length = length(text)\n    \n    if text_length < 2\n \
    \       return true\n    \n    text_length -= 1\n    \n    if text_length == 0\
    \ \n        return true\n    \n    text_length = length(text)\n    \n    if text_length\
    \ < 2\n        return true\n    \n    text_length -= 1\n    \n    if text_length\
    \ == 0 \n        return true\n    \n    text_length = length(text)\n    \n   \
    \ if text_length < 2\n        return true\n    \n    text_length -= 1\n    \n\
    \    if text_length == 0 \n        return true\n    \n    text_length = length(text)\n\
    \    \n    if text_length < 2\n        return true\n    \n    text_length -= 1\n\
    \    \n    if text_length == 0 \n        return true\n    \n    text_length =\
    \ length(text)\n    \n    if text_length < 2\n        return true\n    \n    text_length\
    \ -= 1\n    \n    if text_length == 0 \n        return true\n    \n    text_length\
    \ = length(text)\n    \n    if text_length < 2\n        return true\n    \n  \
    \  text_length -= 1\n    \n    if text_length == 0 \n        return true\n   \
    \ \n    text_length = length(text)\n    \n    if text_length < 2\n        return\
    \ true\n    \n    text_length -= 1\n    \n    if text_length == 0 \n        return\
    \ true\n    \n    text_length = length(text)\n    \n    if text_length < 2\n \
    \       return true\n    \n    text_length -= 1\n    \n    if text_length == 0\
    \ \n        return true\n    \n    text_length = length(text)\n    \n    if text_length\
    \ < 2\n        return true\n    \n    text_length -= 1\n    \n    if text_length\
    \ == 0 \n        return true\n    \n    text_length = length(text)\n    \n   \
    \ if text_length < 2\n        return true\n    \n    text_length -= 1\n    \n\
    \    if text_length == 0 \n        return true\n    \n    text_length = length(text)\n\
    \    \n    if text_length < 2\n        return true\n    \n    text_length -= 1\n\
    \    \n    if text_length == 0 \n        return true\n    \n    text_length =\
    \ length(text)\n    \n    if text_length < 2\n        return true\n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqs13d_2w.jl:1\nin expression starting at /tmp/tmpqs13d_2w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. `is_palindrome_helper` returns `Bool`, but `is_palindrome` returns\
    \ `String`.\n<|/ c |>\n<| c |>\nI fixed it by changing return type to Bool\n<|/\
    \ c |>\n<| c |>\nThis still doesn't work. `is_palindrome` returns `String`, but\
    \ `is_palindrome_helper` returns `Bool`.\n<|/ c |>\n<| c |>\nI fixed it by changing\
    \ return type to Bool\n<|/ c |>\n<| c |>\nThis still doesn't work. `is_palindrome`\
    \ returns `String`, but `is_palindrome_helper` returns `Bool`.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptbcpfgrp.jl:19\nin expression starting at\
    \ /tmp/tmptbcpfgrp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    \n    if is_empty(text_reversed) == True\n        return\
    \ true\n    \n    return text == text_reversed\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyr5kbsz_.jl:1\nin expression starting at /tmp/tmpyr5kbsz_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_recursive(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdqj51idi.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == true\n  UndefVarError: is_palindrome_recursive\
    \ not defined\n  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main\
    \ /tmp/tmpdqj51idi.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdqj51idi.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdqj51idi.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpdqj51idi.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"aba\") == true\n  UndefVarError: is_palindrome_recursive not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpdqj51idi.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdqj51idi.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdqj51idi.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpdqj51idi.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"aaaaa\") == true\n  UndefVarError: is_palindrome_recursive not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpdqj51idi.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdqj51idi.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdqj51idi.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpdqj51idi.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"zbcd\") == false\n  UndefVarError: is_palindrome_recursive not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmpdqj51idi.jl:13\n\
    \   [2]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdqj51idi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    if is_empty(text_reversed) == True\n        return true\n\
    \    \n    if text == reverse(text_reversed)\n        return true\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6z5i0htz.jl:25\nin expression starting at\
    \ /tmp/tmp6z5i0htz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text, 0, length(text)) \n    then return true\n\
    \    else return false\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis code does\
    \ not work if you input a palindrome that has more than 1 character in it.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I tested it on palindromes with more\
    \ than 1 character in it. I also tested it on palindromes with more than 2 characters\
    \ in it. I tested it on palindromes with more than 3 characters in it. I tested\
    \ it on palindromes with more than 4 characters in it. I tested it on palindromes\
    \ with more than 5 characters in it. I tested it on palindromes with more than\
    \ 6 characters in it. I tested it on palindromes with more than 7 characters in\
    \ it. I tested it on palindromes with more than 8 characters in it. I tested it\
    \ on palindromes with more than 9 characters in it. I tested it on palindromes\
    \ with more than 10 characters in it. I tested it on palindromes with more than\
    \ 11 characters in it. I tested it on palindromes with more than 12 characters\
    \ in it. I tested it on palindromes with more than 13 characters in it. I tested\
    \ it on palindromes with more than 14 characters in it. I tested it on palindromes\
    \ with more than 15 characters in it. I tested it on palindromes with more than\
    \ 16 characters in it. I tested it on palindromes with more than 17 characters\
    \ in it. I tested it on palindromes with more than 18 characters in it. I tested\
    \ it on palindromes with more than 19 characters in it. I tested it on palindromes\
    \ with more than 20 characters in it. I tested it on palindromes with more than\
    \ 21 characters in it. I tested it on palindromes with more than 22 characters\
    \ in it. I tested it on palindromes with more than 23 characters in it. I tested\
    \ it on palindromes with more than 24 characters in it. I tested it on palindromes\
    \ with more than 25 characters in it. I tested it on palindromes with more than\
    \ 26 characters in it. I tested it on palindromes with more than 27 characters\
    \ in it. I tested it on palindromes with more than 28 characters in it. I tested\
    \ it on palindromes with more than 29 characters in it. I tested it on palindromes\
    \ with more than 30 characters in it. I tested it on palindromes with more than\
    \ 31 characters in it. I tested it \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3foyyu_9.jl:14\nin expression starting at /tmp/tmp3foyyu_9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text) \n        then return true\n        else return\
    \ false\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp81j5mr2i.jl:14\nin expression starting at /tmp/tmp81j5mr2i.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    local i = 0\n\
    \    local j = 0\n    local len::Int64 = length(text)\n    local rev::String =\
    \ \"\"\n    \n    while i < len\n        local char = text[i]\n        rev +=\
    \ char\n        i = i + 1\n    end\n    \n    while j < len\n        local char\
    \ = rev[j]\n        if char != text[j]\n            return false\n        end\n\
    \        j = j + 1\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn0kxfl0r.jl:37\nin expression starting at\
    \ /tmp/tmpn0kxfl0r.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\
    \ helper\n    >>> is_palindrome_helper('')\n    true\n    >>> is_palindrome_helper('aba')\n\
    \    true\n    >>> is_palindrome_helper('aaaaa')\n    true\n    >>> is_palindrome_helper('zbcd')\n\
    \    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpcbovdz3u.jl:19\nin expression starting at /tmp/tmpcbovdz3u.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_recursive(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\
    \ recursively\n    >>> is_palindrome_recursive('')\n    True\n    >>> is_palindrome_recursive('aba')\n\
    \    True\n    >>> is_palindrome_recursive('aaaaa')\n    True\n    >>> is_palindrome_recursive('zbcd')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpwck4vf8p.jl:19\nin expression starting at /tmp/tmpwck4vf8p.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp5008m0qo.jl:19\nin expression starting at /tmp/tmp5008m0qo.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    \n    if is_empty(text_reversed) == true\n        return\
    \ true\n    \n    if text == reverse(text_reversed)\n        return true\n   \
    \ \n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt84k2tuq.jl:1\nin expression starting at /tmp/tmpt84k2tuq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        true\n    else\n        false\nend\n\
    </code>\n<|/ a tags=julia,string |>\n<| c |>\n`reverse` returns a `String`, not\
    \ a `Bool`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've edited the\
    \ answer to reflect that.\n<|/ c |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn3uryu3d.jl:18\nin expression starting at\
    \ /tmp/tmpn3uryu3d.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome_helper(text) == true\n        return true\n    else\n\
    \        return false\n    end\nend\n\"\"\"\n    Checks if given string is a palindrome\n\
    \    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n\
    \    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n   \
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpjcjg6ygq.jl:19\nin expression starting at /tmp/tmpjcjg6ygq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_palindrome(text, 0, length(text) - 1):\n        return true\n  \
    \  return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnt87gsxw.jl:14\nin expression starting at\
    \ /tmp/tmpnt87gsxw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == True\n        return true\n    \n    text_reversed\
    \ = reverse(text)\n    \n    if is_empty(text_reversed) == True\n        return\
    \ true\n    \n    return text == text_reversed\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5wgkmgx2.jl:1\nin expression starting at /tmp/tmp5wgkmgx2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text) == true\n        return true\n    \n    begin = 0\n\
    \    end = length(text) - 1\n    \n    while begin < end\n        if text[begin]\
    \ != text[end]\n            return false\n        end -= 1\n        begin += 1\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n\
    \    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n\
    \    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuff7c6ay.jl:16\nin expression starting at /tmp/tmpuff7c6ay.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if is_empty(text)\n        return true\n    \n    text_reversed = reverse(text)\n\
    \    return text == text_reversed\nend\n</cell>\n<code language=julia-1.3>\n\"\
    \"\"\n    Reverses a string\n    >>> reverse(\"abc\")\n    \"cba\"\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkoaellzm.jl:19\nin expression starting at\
    \ /tmp/tmpkoaellzm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_6nav3q.jl:18\nin expression starting at\
    \ /tmp/tmp5_6nav3q.jl:18\n"
  exit_code: 1
  status: SyntaxError
