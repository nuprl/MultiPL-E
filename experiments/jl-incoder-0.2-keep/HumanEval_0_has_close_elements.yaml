name: HumanEval_0_has_close_elements
language: julia
prompt: "\"\"\" Check if in given list of numbers, are any two numbers closer to each\
  \ other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0],\
  \ 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
  \    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64}, threshold::Float64)::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0,\
  \ 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)\
  \ == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
  \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
  end\n"
completions: ["    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while\
    \ i < length(numbers)\n        \n        j = i + 1\n        \n        while j\
    \ < length(numbers)\n            \n            if abs(numbers[i] - numbers[j])\
    \ < threshold\n                return true\n            \n            j += 1\n\
    \        end\n        \n        i += 1\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a number is in a\
    \ given list of numbers, sorted in ascending order.\n    >>> is_in_ascending_order([1.0,\
    \ 2.0, 3.0])\n    true\n    >>> is_in_ascending_order([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0])\n    false\n    \"\"\"", "    \n    numbers_sorted = sort(numbers)\n \
    \   \n    for n in numbers_sorted\n        if abs(n - numbers_sorted[1]) > threshold\n\
    \            return true\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n\
    \    for n in numbers[1:end-1]\n        if abs(numbers[1] - n) < threshold\n \
    \           return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    for\
    \ n in numbers\n        if n == numbers[1]\n            return true\n        end\n\
    \    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n    \n    while\
    \ i > 0\n        if numbers[i-1] - numbers[i] > threshold\n            return\
    \ true\n        end\n        i -= 1\n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    i =\
    \ 2\n    while i < length(numbers)\n        if abs(numbers[i] - numbers[i-1])\
    \ < threshold\n            return true\n        else\n            i += 1\n   \
    \     end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = findfirst(numbers_sorted\
    \ .< threshold)\n    \n    if index_of_closest == nothing\n        return false\n\
    \    end\n    \n    index_of_closest_previous = findfirst(numbers_sorted .> numbers[index_of_closest\
    \ - 1])\n    \n    if index_of_closest_previous == nothing\n        return false\n\
    \    end\n    \n    return index_of_closest != index_of_closest_previous\nend\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of elements\
    \ in a list that satisfy a given condition. \nFor example the function should\
    \ return 3 if given list contains elements [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,\
    \ 8.0, 9.0] and condition satisfies that all elements are greater than 2.", " \
    \   \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = find_index(numbers_sorted,\
    \ threshold)\n    \n    if index_of_closest == length(numbers_sorted)\n      \
    \  return true\n    else\n        return false\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a vector of numbers and returns the\
    \ mean of the numbers. \nThe mean of a set of numbers is defined as the sum of\
    \ all numbers in the set\ndivided by the number of numbers in the set. \nWrite\
    \ a test function that tests the mean function on some test cases. \nUse a test\
    \ case to test the mean function on different sets of numbers. \nUse a test case\
    \ to test the mean function on different sets of numbers. \nUse a test case to\
    \ test the mean function on different sets of numbers. \nUse a test case to test\
    \ the mean function on different sets of numbers. \nUse a test case to test the\
    \ mean function on different sets of numbers. \nUse a test case to test the mean\
    \ function on different sets of numbers. \nUse a test case to test the mean function\
    \ on different sets of numbers. \nUse a test case to test the mean function on\
    \ different sets of numbers. \nUse a test case to test the mean function on different\
    \ sets of numbers. \nUse a test case to test the mean function on different sets\
    \ of numbers. \nUse a test case to test the mean function on different sets of\
    \ numbers. \nUse a test case to test the mean function on different sets of numbers.\
    \ \nUse a test case to test the mean function on different sets of numbers. \n\
    Use a test case to test the mean function on different sets of numbers. \nUse\
    \ a test case to test the mean function on different sets of numbers. \nUse a\
    \ test case to test the mean function on different sets of numbers. \nUse a test\
    \ case to test the mean function on different sets of numbers. \nUse a test case\
    \ to test the mean function on different sets of numbers. \nUse a test case to\
    \ test the mean function on different sets of numbers. \nUse a test case to test\
    \ the mean function on different sets of numbers. \nUse a test case to test the\
    \ mean function on different sets of numbers. \nUse a test case to test the mean\
    \ function on different sets of numbers. \nUse a test case to test the mean function\
    \ on different sets of numbers. \nUse a test case to test the mean function on\
    \ different sets of numbers. \nUse a test case to test the mean function on different\
    \ sets of numbers. \nUse ", "    \n    numbers = sort(numbers)\n    \n    threshold\
    \ = sort(threshold)\n    \n    diff = numbers[2:end] - numbers[1:end-1]\n    \n\
    \    if length(diff) == 0 \n        true\n    elseif length(diff) == 1 \n    \
    \    diff == threshold\n    else\n        diff == threshold[1:end-1]\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a vector has\
    \ all elements of a given set (of numbers).", "    \n    numbers = sort(numbers)\n\
    \    \n    i = length(numbers)\n    \n    while i > 1\n        if numbers[i-1]\
    \ - numbers[i] > threshold\n            return true\n        end\n        i -=\
    \ 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        if numbers[i] - numbers[i-1] > threshold\n            return\
    \ true\n        end\n        \n        i = i + 1\n    end\n    \n    return false\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a vector has\
    \ all elements equal to some value.\n    >>> has_all_elements([1.0, 2.0, 3.0],\
    \ 3.0)\n    true\n    >>> has_all_elements([1.0, 2.0, 3.0], 4.0)\n    false\n\
    \    \"\"\"", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    while i\
    \ < length(numbers)-1 do\n        if numbers[i+1] - numbers[i] < threshold then\n\
    \            return true\n        end\n        i += 1\n    end\n    return false\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the numbers in the list.\nWrite a function that takes\
    \ in a list of numbers and returns the product of the numbers in the list.\nWrite\
    \ a function that takes in a list of numbers and returns the mean of the numbers\
    \ in the list.\nWrite a function that takes in a list of numbers and returns the\
    \ median of the numbers in the list.\nWrite a function that takes in a list of\
    \ numbers and returns the mode of the numbers in the list.\nWrite a function that\
    \ takes in a list of numbers and returns the variance of the numbers in the list.\n\
    Write a function that takes in a list of numbers and returns the standard deviation\
    \ of the numbers in the list.\nWrite a function that takes in a list of numbers\
    \ and returns the minimum of the numbers in the list.\nWrite a function that takes\
    \ in a list of numbers and returns the maximum of the numbers in the list.\nWrite\
    \ a function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers in the list.\nWrite a function that takes in a list of numbers\
    \ and returns the product of the squares of the numbers in the list.\nWrite a\
    \ function that takes in a list of numbers and returns the mean of the squares\
    \ of the numbers in the list.\nWrite a function that takes in a list of numbers\
    \ and returns the median of the squares of the numbers in the list.\nWrite a function\
    \ that takes in a list of numbers and returns the mode of the squares of the numbers\
    \ in the list.\nWrite a function that takes in a list of numbers and returns the\
    \ variance of the squares of the numbers in the list.\nWrite a function that takes\
    \ in a list of numbers and returns the standard deviation of the squares of the\
    \ numbers in the list.\nWrite a function that takes in a list of numbers and returns\
    \ the minimum of the squares of the numbers in the list.\nWrite a function that\
    \ takes in a list of numbers and returns the maximum of the squares of the numbers\
    \ in the list.\nWrite a function that takes in a list of numbers and returns the\
    \ sum of the absolute values of the numbers in the list.\nWrite a function that\
    \ takes in a list of numbers and returns the product of the absolute values of\
    \ the numbers in the list.\nWrite a function that takes in a list of numbers and\
    \ returns the mean of the absolute values of the numbers in the list.\nWrite a\
    \ function that takes in a list of numbers and returns the median of the absolute\
    \ values of the numbers in the list.\nWrite a function that takes in a list of\
    \ numbers and returns the mode of the absolute values of the numbers in the list.\n\
    Write a function that takes in a list of numbers and returns the variance of the\
    \ absolute values of the numbers in the list.\nWrite a function that takes in\
    \ a list of numbers and returns the standard deviation of the absolute values\
    \ of the numbers in the list.\nWrite a function that takes in a list of numbers\
    \ and returns the minimum of the absolute values of the numbers in the list.\n\
    Write a function that takes in a list of numbers and returns the maximum of the\
    \ absolute values of the numbers in the list.\nWrite a function that takes in\
    \ a list of numbers and returns the sum of the squares of the ", "    \n    numbers\
    \ = sort(numbers)\n    \n    for n in numbers\n        if n == numbers[1]\n  \
    \          return true\n        end\n    end\n    \n    return false\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is in a given list\
    \ of numbers, ignoring order.", "    \n    numbers = sort(numbers)\n    \n   \
    \ i = 0\n    j = length(numbers) - 1\n    \n    while i < j\n        if numbers[i]\
    \ + threshold < numbers[j] + threshold\n            i += 1\n        elseif numbers[j]\
    \ + threshold < numbers[i] + threshold\n            j -= 1\n        else\n   \
    \         return true\n        end\n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while\
    \ i < length(numbers)\n        if numbers[i] - numbers[i-1] > threshold\n    \
    \        return true\n        end\n        i += 1\n    end\n    return false\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers\
    \ and a threshold and returns the number of numbers in the list that are closer\
    \ to each other than the threshold.", "    \n    numbers = sort(numbers)\n   \
    \ \n    i = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i-1]\
    \ > threshold\n            return true\n        end\n        i = i + 1\n    end\n\
    \    return false\nend", "    \n    numbers = sort(numbers)\n    \n    i = 0\n\
    \    \n    while i < length(numbers)\n        \n        j = i + 1\n        \n\
    \        while j < length(numbers)\n            \n            if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                return true\n            \n     \
    \       j += 1\n        end\n        \n        i += 1\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nProblem 7\nWrite a function that takes a list of\
    \ numbers and returns the sum of the squares of the numbers.\n>>> square_sum([1.0,\
    \ 2.0, 3.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>>\
    \ square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> square_sum([1.0, 2.8,\
    \ 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    51.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    51.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    51.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    51.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    51.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    51.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    51.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n51.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.", "    \n    numbers = sort(numbers)\n    \n    i = 2\n\
    \    while i < length(numbers)\n        if numbers[i] - numbers[i-1] < threshold\n\
    \            return true\n        end\n        i += 1\n    end\n    return false\n\
    end\n</cell>\n<text>\nThe function above checks if there are any two numbers in\
    \ the list that are closer to each other than the given threshold. Let's test\
    \ it with the example above.", "    \n    numbers = sort(numbers)\n    \n    i\
    \ = 0\n    \n    while i < length(numbers)\n        if numbers[i] == numbers[i+1]\n\
    \            i += 1\n        else\n            if abs(numbers[i] - numbers[i+1])\
    \ < threshold\n                return true\n            end\n        end\n   \
    \ end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    numbers_sorted = sort(numbers)\n    \n    for n in numbers_sorted\n  \
    \      if abs(n - numbers_sorted[1]) < threshold\n            return true\n  \
    \      end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers.\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers.\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers.\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers.\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers.\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers.\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers.\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers.\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers.", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    j\
    \ = length(numbers) - 1\n    \n    while i < j\n        if numbers[i] + threshold\
    \ < numbers[j] + threshold\n            i += 1\n        elseif numbers[j] + threshold\
    \ < numbers[i] + threshold\n            j -= 1\n        else\n            return\
    \ true\n        end\n    end\n    \n    return false\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a number is in a given list of numbers, sorted\
    \ in ascending order.\nThe function should return true if the number is in the\
    \ list, false otherwise.\nThe function should work for any type of list, not just\
    \ vectors.\nThe function should work for any type of number, not just Float64s.\n\
    The function should work for any type of threshold, not just Float64s.", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n        if numbers[i]\
    \ - numbers[i-1] > threshold\n            return true\n        end\n        i\
    \ = i + 1\n    end\n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of numbers and returns the sum of the numbers in\
    \ the list.\nWrite a function that takes a list of numbers and returns the average\
    \ of the numbers in the list.\nWrite a function that takes a list of numbers and\
    \ returns the median of the numbers in the list.\nWrite a function that takes\
    \ a list of numbers and returns the mode of the numbers in the list.\nWrite a\
    \ function that takes a list of numbers and returns the standard deviation of\
    \ the numbers in the list.", "    \n    numbers = sort(numbers)\n    \n    idx\
    \ = 0\n    while idx < length(numbers)\n        if numbers[idx] - numbers[idx\
    \ - 1] < threshold\n            return true\n        else\n            idx +=\
    \ 1\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i - 1] < threshold\n            return true\n\
    \        end\n        i += 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    distances = zeros(Float64, length(numbers))\n    for (i,x) in enumerate(numbers)\n\
    \        distances[i] = abs(x - threshold)\n    end\n    \n    return any(distances\
    \ <= 1)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will return the\
    \ number of elements in a list that satisfy a given condition. For example, if\
    \ the list contains only numbers between 0 and 10, the function should return\
    \ 3.", "    \n    numbers_sorted = sort(numbers)\n    \n    i = 0\n    \n    while\
    \ i < length(numbers_sorted)\n        if numbers_sorted[i] > threshold\n     \
    \       i += 1\n        else\n            if numbers_sorted[i+1] - numbers_sorted[i]\
    \ > threshold\n                return True\n            else\n               \
    \ i += 1\n            end\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ a threshold and returns the number of numbers in the vector that are closer\
    \ to each other than the threshold.", "    \n    numbers = sort(numbers)\n   \
    \ \n    if length(numbers) < 2\n        return false\n    end\n    \n    idx =\
    \ 1\n    \n    while idx <= length(numbers)\n        if numbers[idx-1] - numbers[idx]\
    \ <= threshold\n            return true\n        end\n        idx += 1\n    end\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ numbers = sort(numbers)\n    \n    if length(numbers) < 2\n        return false\n\
    \    end\n    \n    i = 0\n    j = length(numbers)\n    \n    while i < j\n  \
    \      if numbers[i] == numbers[j]\n            i += 1\n            j += 1\n \
    \       elseif abs(numbers[i] - numbers[j]) < threshold\n            i += 1\n\
    \        else\n            j += 1\n        end\n    end\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    if length(numbers) < 2\n        return true\n    end\n    \n    idx1\
    \ = 1\n    idx2 = length(numbers)\n    \n    while idx1 < idx2\n        if abs(numbers[idx1]\
    \ - numbers[idx2]) < threshold\n            return true\n        end\n       \
    \ \n        if numbers[idx1] > numbers[idx2]\n            idx1 += 1\n        else\n\
    \            idx2 -= 1\n        end\n    end\n    \n    return false\nend\n</cell>\n\
    <text>\nhas_close_elements\nTest if in given list of numbers, are any two numbers\
    \ closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0,\
    \ 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0], 0.3)\n    True\n    \"\"\"", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    index_of_closest = findfirst(x -> abs(x - threshold) < abs(numbers_sorted[end]\
    \ - threshold), numbers_sorted)\n    \n    return index_of_closest != end\nend\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers.\n>>> square_sum([1.0, 2.0, 3.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = length(numbers)\n    \n    while i > 0\n    \
    \    \n        j = i - 1\n        \n        while j > 0\n            \n      \
    \      if abs(numbers[i] - numbers[j]) < threshold\n                return true\n\
    \            \n            j = j - 1\n        end\n        \n        i = i - 1\n\
    \    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a list of numbers and a threshold and\
    \ returns the number of numbers in the list that are closer to each other than\
    \ the threshold.", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n\
    \    while i < length(numbers)\n        \n        j = i + 1\n        \n      \
    \  while j < length(numbers)\n            \n            if numbers[j] - numbers[i]\
    \ < threshold\n                return true\n            \n            j += 1\n\
    \            \n        i += 1\n        \n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    threshold\
    \ = sort(threshold)\n    \n    i = length(numbers)\n    \n    while i > 1\n  \
    \      if numbers[i-1] - numbers[i] > threshold\n            return true\n   \
    \     end\n        \n        i -= 1\n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    for\
    \ n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n          \
    \  return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns a new vector with\
    \ elements multiplied by two. \nThe function should work for vectors of any length.\n\
    The function should work for vectors of any type of numbers, not just Float64s.",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       else\n            i += 1\n        end\n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers\n        if n == numbers[1]\n            return true\n\
    \        end\n    end\n    \n    return false\nend\n</cell>\n<text>\nProblem 7\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in that vector. For example, the vector [1.0, 2.0, 3.0] should\
    \ return 25.", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n   \
    \ while i < length(numbers)\n        if numbers[i] - numbers[i-1] > threshold\n\
    \            return true\n        end\n        i += 1\n    end\n    \n    return\
    \ false\nend", "    \n    numbers = sort(numbers)\n    \n    for n in numbers\n\
    \        if n == numbers[1]\n            return true\n        end\n    end\n \
    \   \n    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = 0\n    j = length(numbers) - 1\n    \n    while\
    \ i < j\n        if numbers[i] + threshold < numbers[j] + threshold\n        \
    \    i += 1\n        elseif numbers[j] + threshold < numbers[i] + threshold\n\
    \            j -= 1\n        else\n            return true\n        end\n    end\n\
    \    \n    return false\nend\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ returns the number of times a given element appears in a given list.", "   \
    \ \n    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers)\n  \
    \  \n    while i < j\n        if numbers[i] == numbers[j]\n            i += 1\n\
    \            j += 1\n        else\n            if abs(numbers[i] - numbers[j])\
    \ < threshold\n                i += 1\n            else\n                j +=\
    \ 1\n            end\n        end\n    end\n    \n    return i == j\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    numbers = sort(numbers)\n    \n    for n in numbers\n   \
    \     if n == numbers[end] \n            return true\n        end\n    end\n \
    \   \n    return false\nend", "    \n    numbers = sort(numbers)\n    \n    for\
    \ n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n          \
    \  return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is in a given list of numbers,\
    \ sorted in ascending order.\n    >>> is_in_sorted_list(1.0, [1.0, 2.0, 3.0])\n\
    \    true\n    >>> is_in_sorted_list(2.0, [1.0, 2.0, 3.0])\n    false\n    >>>\
    \ is_in_sorted_list(3.0, [1.0, 2.0, 3.0])\n    false\n    \"\"\"", "    \n   \
    \ numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n  \
    \      if numbers[i] - numbers[i - 1] < threshold\n            return true\n \
    \       end\n        i = i + 1\n    end\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    numbers_sorted = sort(numbers)\n    \n    i = numbers_sorted.length -\
    \ 1\n    j = numbers_sorted.length - 1\n    \n    while i >= 0 and j >= 0\n  \
    \      if abs(numbers_sorted[i] - numbers_sorted[j]) < threshold\n           \
    \ return true\n        else\n            i -= 1\n            j -= 1\n        end\n\
    \    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers) -\
    \ 1\n    \n    while i < j\n        if numbers[i] + threshold < numbers[j] + threshold\n\
    \            return true\n        end\n        if numbers[j] + threshold < numbers[i]\
    \ + threshold\n            return false\n        end\n        i += 1\n       \
    \ j -= 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    \n    return false\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a list of numbers and returns the sum\
    \ of the numbers in the list.\nWrite a function that takes in a list of numbers\
    \ and returns the product of the numbers in the list.\nWrite a function that takes\
    \ in a list of numbers and returns the average of the numbers in the list.\nWrite\
    \ a function that takes in a list of numbers and returns the median of the numbers\
    \ in the list.\nWrite a function that takes in a list of numbers and returns the\
    \ mode of the numbers in the list.\nWrite a function that takes in a list of numbers\
    \ and returns the variance of the numbers in the list.\nWrite a function that\
    \ takes in a list of numbers and returns the standard deviation of the numbers\
    \ in the list.\nWrite a function that takes in a list of numbers and returns the\
    \ minimum of the numbers in the list.\nWrite a function that takes in a list of\
    \ numbers and returns the maximum of the numbers in the list.\nWrite a function\
    \ that takes in a list of numbers and returns the number of elements in the list.\n\
    Write a function that takes in a list of numbers and returns the number of non-zero\
    \ elements in the list.\nWrite a function that takes in a list of numbers and\
    \ returns the number of non-negative elements in the list.\nWrite a function that\
    \ takes in a list of numbers and returns the number of positive elements in the\
    \ list.\nWrite a function that takes in a list of numbers and returns the number\
    \ of negative elements in the list.\nWrite a function that takes in a list of\
    \ numbers and returns the number of zero-elements in the list.\nWrite a function\
    \ that takes in a list of numbers and returns the number of positive and negative\
    \ elements in the list.\nWrite a function that takes in a list of numbers and\
    \ returns the number of zero-elements and non-negative elements in the list.\n\
    Write a function that takes in a list of numbers and returns the number of zero-elements\
    \ and non-positive elements in the list.\nWrite a function that takes in a list\
    \ of numbers and returns the number of zero-elements and non-negative and positive\
    \ elements in the list.\nWrite a function that takes in a list of numbers and\
    \ returns the number of zero-elements and non-negative and positive and negative\
    \ elements in the list.\nWrite a function that takes in a list of numbers and\
    \ returns the number of zero-elements and non-negative and positive and negative\
    \ and non-zero elements in the list.\nWrite a function that takes in a list of\
    \ numbers and returns the number of zero-elements and non-negative and positive\
    \ and negative and non-zero and non-negative elements in the list.\nWrite a function\
    \ that takes in a list of numbers and returns the number of zero-elements and\
    \ non-negative and positive and negative and non-zero and non-positive elements\
    \ in the list.\nWrite a function that takes in a list of numbers and returns the\
    \ number of zero-elements and non-negative and positive and negative and non-zero\
    \ and non-positive and non-negative elements in the list.\nWrite a function that ",
  "    \n    distances = Vector{Float64}(undef, 0)\n    for n in numbers\n       \
    \ distances = vcat(distances, abs(n - threshold))\n    end\n    \n    return distances.min\
    \ < threshold\nend", "    \n    numbers = sort(numbers)\n    \n    i = 0\n   \
    \ \n    while i < length(numbers)\n        if numbers[i] - numbers[i-1] > threshold\n\
    \            return true\n        end\n        i = i + 1\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number\
    \ of elements in a given array that are greater than a given threshold.", "  \
    \  \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if\
    \ abs(numbers[1] - n) < threshold\n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers.\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers that are greater than the given threshold.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ that are greater than the given threshold and less than the given threshold.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers that are greater than the given threshold, less than the given\
    \ threshold, and are less than the given threshold.\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers that are\
    \ greater than the given threshold, less than the given threshold, and are less\
    \ than the given threshold, and are greater than the given threshold.\nWrite a\
    \ function that takes a vector of numbers and returns the sum of the squares of\
    \ the numbers that are greater than the given threshold, less than the given threshold,\
    \ and are less than the given threshold, and are greater than the given threshold,\
    \ and are greater than the given threshold.\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers that are greater\
    \ than the given threshold, less than the given threshold, and are less than the\
    \ given threshold, and are greater than the given threshold, and are greater than\
    \ the given threshold, and are greater than the given threshold.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ that are greater than the given threshold, less than the given threshold, and\
    \ are less than the given threshold, and are greater than the given threshold,\
    \ and are greater than the given threshold, and are greater than the given threshold,\
    \ and are greater than the given threshold.\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers that are greater\
    \ than the given threshold, less than the given threshold, and are less than the\
    \ given threshold, and are greater than the given threshold, and are greater than\
    \ the given threshold, and are greater than the given threshold, and are greater\
    \ than the given threshold, and are greater than the given threshold.\nWrite a\
    \ function that takes a vector of numbers and returns the sum of the squares of\
    \ the numbers that are greater than the given threshold, less than the given threshold,\
    \ and are less than the given threshold, and are greater than the given threshold,\
    \ and are greater than the given threshold, and are greater than the given threshold,\
    \ and are greater than the given threshold, and are greater than the given threshold,\
    \ and are greater than the given threshold.\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers that are greater\
    \ than the given threshold, less than the given threshold, and are less than the\
    \ given threshold, and are greater than the given threshold, and are greater than\
    \ the given threshold, and are greater than the given threshold, and are greater\
    \ than the given threshold, and are greater than the given threshold, and are\
    \ greater than the given threshold, and are greater than the ", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    for n in numbers_sorted\n        if abs(n - numbers_sorted[1]) > threshold\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <text>\nProblem 7: Write a function that checks if a number is prime or not. \n\
    A prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself. \nA natural number greater than 1 is called a prime\
    \ number if all its divisors are smaller than the number itself. \nWrite a function\
    \ that checks if a number is prime or not. \nA prime number is a natural number\
    \ greater than 1 that has no positive divisors other than 1 and itself. \nA natural\
    \ number greater than 1 is called a prime number if all its divisors are smaller\
    \ than the number itself. \nWrite a function that checks if a number is prime\
    \ or not. \nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself. \nA natural number greater than 1 is called\
    \ a prime number if all its divisors are smaller than the number itself. \nWrite\
    \ a function that checks if a number is prime or not. \nA prime number is a natural\
    \ number greater than 1 that has no positive divisors other than 1 and itself.\
    \ \nA natural number greater than 1 is called a prime number if all its divisors\
    \ are smaller than the number itself. \nWrite a function that checks if a number\
    \ is prime or not. \nA prime number is a natural number greater than 1 that has\
    \ no positive divisors other than 1 and itself. \nA natural number greater than\
    \ 1 is called a prime number if all its divisors are smaller than the number itself.\
    \ \nWrite a function that checks if a number is prime or not. \nA prime number\
    \ is a natural number greater than 1 that has no positive divisors other than\
    \ 1 and itself. \nA natural number greater than 1 is called a prime number if\
    \ all its divisors are smaller than the number itself. \nWrite a function that\
    \ checks if a number is prime or not. \nA prime number is a natural number greater\
    \ than 1 that has no positive divisors other than 1 and itself. \nA natural number\
    \ greater than 1 is called a prime number if all its divisors are smaller than\
    \ the number itself. \nWrite a function that checks if a number is prime or not.\
    \ \nA prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself. \nA natural number greater than 1 is called a prime\
    \ number if all its divisors are smaller than the number itself. \nWrite a function\
    \ that checks if a number is prime or not. \nA prime number is a natural number\
    \ greater than 1 that has no positive divisors other than 1 and itself. \nA natural\
    \ number greater than 1 is called a prime number if all its divisors are smaller\
    \ than the number itself. \nWrite a function that checks if a number is prime\
    \ or not. \nA prime number is a natural number greater than 1 that has no ", " \
    \   \n    numbers = sort(numbers)\n    \n    for n in numbers\n        if n ==\
    \ numbers[end-1]\n            return true\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers\n        if abs(n - numbers[end-1]) < threshold\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    idx\
    \ = 0\n    \n    while idx < length(numbers)\n        if numbers[idx] - numbers[idx\
    \ - 1] > threshold\n            return true\n        end\n        idx += 1\n \
    \   end\n    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   numbers_sorted = sort(numbers)\n    \n    closest_numbers = numbers_sorted[1..end]\n\
    \    \n    closest_numbers_sorted = sort(closest_numbers)\n    \n    threshold\
    \ = threshold * threshold\n    \n    for number in closest_numbers_sorted\n  \
    \      if number - threshold < numbers_sorted[1] and number + threshold > numbers_sorted[1]\n\
    \            return true\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns true if the given array\
    \ has all unique elements. \nThe function should work for both vectors and matrices.\n\
    The function should work for both positive and negative numbers.\nThe function\
    \ should work for both positive and negative numbers with NaN and Inf values.\n\
    The function should work for both positive and negative numbers with NaN values.\n\
    The function should work for both positive and negative numbers with Inf values.\n\
    The function should work for both positive and negative numbers with Inf and NaN\
    \ values.\nThe function should work for both positive and negative numbers with\
    \ NaN values and Inf values.\nThe function should work for both positive and negative\
    \ numbers with NaN values and Inf and NaN values.\nThe function should work for\
    \ both positive and negative numbers with Inf and NaN values and Inf values.\n\
    The function should work for both positive and negative numbers with Inf and NaN\
    \ values and Inf and NaN values.\nThe function should work for both positive and\
    \ negative numbers with NaN values and Inf and NaN values and Inf values.\nThe\
    \ function should work for both positive and negative numbers with NaN values\
    \ and Inf and NaN values and Inf and NaN values.\nThe function should work for\
    \ both positive and negative numbers with Inf and NaN values and Inf and NaN values\
    \ and Inf values.\nThe function should work for both positive and negative numbers\
    \ with Inf and NaN values and Inf and NaN values and Inf and NaN values.\nThe\
    \ function should work for both positive and negative numbers with NaN values\
    \ and Inf and NaN values and Inf and NaN values and Inf values.\nThe function\
    \ should work for both positive and negative numbers with NaN values and Inf and\
    \ NaN values and Inf and NaN values and Inf and NaN values.\nThe function should\
    \ work for both positive and negative numbers with Inf and NaN values and Inf\
    \ and NaN values and Inf and NaN values and Inf values.\nThe function should work\
    \ for both positive and negative numbers with Inf and NaN values and Inf and NaN\
    \ values and Inf and NaN values and Inf and NaN values.\nThe function should work\
    \ for both positive and ", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    numbers = sort(numbers)\n    \n    idx = 0\n    while idx\
    \ < length(numbers)\n        if numbers[idx] - numbers[idx - 1] > threshold\n\
    \            return true\n        end\n        idx += 1\n    end\n    return false\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that checks if a number is\
    \ in a given list of numbers, sorted in ascending order.\n>>> has_in_elements([1.0,\
    \ 2.0, 3.0], 2.0)\nTrue\n>>> has_in_elements([1.0, 2.0, 3.0], 3.0)\nFalse\n>>>\
    \ has_in_elements([1.0, 2.0, 3.0], 4.0)\nFalse\n>>> has_in_elements([1.0, 2.0,\
    \ 3.0], 5.0)\nFalse\n>>> has_in_elements([1.0, 2.0, 3.0], 6.0)\nFalse\n>>> has_in_elements([1.0,\
    \ 2.0, 3.0], 7.0)\nFalse\n>>> has_in_elements([1.0, 2.0, 3.0], 8.0)\nFalse\n>>>\
    \ has_in_elements([1.0, 2.0, 3.0], 9.0)\nFalse\n>>> has_in_elements([1.0, 2.0,\
    \ 3.0], 10.0)\nFalse\n>>> has_in_elements([1.0, 2.0, 3.0], 11.0)\nFalse\n>>> has_in_elements([1.0,\
    \ 2.0, 3.0], 12.0)\nFalse\n>>> has_in_elements([1.0, 2.0, 3.0], 13.0)\nFalse\n\
    >>> has_in_elements([1.0, 2.0, 3.0], 14.0)\nFalse\n>>> has_in_elements([1.0, 2.0,\
    \ 3.0], 15.0)\nFalse\n>>> has_in_elements([1.0, 2.0, 3.0], 16.0)\nFalse\n>>> has_in_elements([1.0,\
    \ 2.0, 3.0], 17.0)\nFalse\n>>> has_in_elements([1.0, 2.0, 3.0], 18.0)\nFalse\n\
    >>> has_in_elements([1.0, 2.0, 3.0], 19.0)\nFalse\n>>> has_in_elements([1.0, 2.0,\
    \ 3.0], 20.0)\nFalse\n>>> has_in_elements([1.0, 2.0, 3.0], 21.0)\nFalse\n>>> has_in_elements([1.0,\
    \ 2.0, 3.0], 22.0)\nFalse\n>>> has_in_elements([1.0, 2.0, 3.0], 23.0)\nFalse\n\
    >>> has_in_elements([1.0, 2.0, 3.0], 24.0)\nFalse\n>>> has_in_elements([1.0, 2.0,\
    \ 3.0], 25.0)\nFalse\n>>> has_in_elements([1.0, 2.0, 3.0], 26.0)\nFalse\n>>> has_in_elements([1.0,\
    \ 2.0, 3.0], 27.0)\nFalse\n>>> has_in_elements([1.0, 2.0, 3.0], 28.0)\nFalse\n\
    >>> has_in_elements([1.0, 2.0, 3.0], 29.0)\nFalse\n>>> has_in_elements([1.0, 2.0,\
    \ 3.0], 30.0)\nFalse\n>>> has_in_elements([1.0, 2.0, 3.0], 31.0)\nFalse\n>>> has_in_elements([1.0,\
    \ 2.0, 3.0], 32.0)\nFalse\n>>> has", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    for index in 2:length(numbers_sorted)\n        if numbers_sorted[index-1]\
    \ - numbers_sorted[index] <= threshold\n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes in a list of numbers and a threshold and returns a list of numbers\
    \ that are closer to each other than the given threshold.", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = length(numbers)\n    \n    while i > 0\n    \
    \    \n        j = i - 1\n        \n        while j > 0\n            \n      \
    \      if abs(numbers[j] - numbers[i]) < threshold\n                return true\n\
    \            \n            j = j - 1\n        end\n        \n        i = i - 1\n\
    \    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    numbers = sort(numbers)\n    \n    for n in numbers\n        if abs(n\
    \ - numbers[end]) > (threshold * numbers[end])\n            return true\n    \
    \    end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that checks if a vector has all elements of a given set. For example,\
    \ if the set is {1, 3, 5}, the function should return true if the vector is {1,\
    \ 3, 5, 6}.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    numbers = sort(numbers)\n    \n    for n in numbers\n        if abs(n\
    \ - numbers[1]) < threshold\n            return true\n        end\n    end\n \
    \   return false\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers_sorted)\n        \n     \
    \   j = i + 1\n        \n        while j < length(numbers_sorted)\n          \
    \  \n            if numbers_sorted[j] - numbers_sorted[i] < threshold\n      \
    \          return false\n            \n            j += 1\n            \n    \
    \    i += 1\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    distances = Vector{Float64}(undef, length(numbers))\n    for i in 1:length(numbers)\n\
    \        distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    has_close_elements\
    \ = false\n    for i in 1:length(distances)\n        if distances[i] > 0\n   \
    \         has_close_elements = true\n            break\n        end\n    end\n\
    \    \n    return has_close_elements\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n    \n    while\
    \ i > 0\n        \n        j = i - 1\n        \n        while j > 0\n        \
    \    \n            if numbers[j] - numbers[j-1] > threshold\n                return\
    \ true\n            \n            j = j - 1\n        end\n        \n        i\
    \ = i - 1\n    end\n    \n    return false\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of elements in a list that are greater\
    \ than a given threshold.", "    \n    numbers = sort(numbers)\n    \n    i =\
    \ length(numbers)\n    \n    while i > 0\n        \n        j = i - 1\n      \
    \  \n        while j > 0\n            \n            if numbers[j] - numbers[j-1]\
    \ < threshold\n                return true\n            \n            j = j -\
    \ 1\n        end\n        \n        i = i - 1\n    end\n    \n    return false\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that takes in a vector of numbers\
    \ and a threshold and returns a vector of booleans indicating which numbers are\
    \ closer to each other than the threshold.", "    \n    numbers = sort(numbers)\n\
    \    \n    if length(numbers) < 2\n        return false\n    end\n    \n    minimum\
    \ = minimum(numbers)\n    maximum = maximum(numbers)\n    \n    if maximum - minimum\
    \ < threshold\n        return true\n    else\n        return false\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number is\
    \ in a given list of numbers, in ascending order.\n    >>> is_in_ascending_order([1.0,\
    \ 2.0, 3.0])\n    true\n    >>> is_in_ascending_order([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0])\n    false\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest\
    \ = find_closest_index(numbers_sorted, threshold)\n    \n    if index_of_closest\
    \ == length(numbers_sorted)\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    for index in 2:length(numbers_sorted)\n        if numbers_sorted[index-1]\
    \ - numbers_sorted[index] > threshold\n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<text>\nNow let's test our function",
  "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = findfirst(\
    \ (numbers_sorted .< threshold) , numbers_sorted)\n    \n    if index_of_closest\
    \ == nothing\n        return false\n    else\n        return true\n    end\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of numbers and\
    \ a threshold and returns a vector of booleans indicating whether each element\
    \ in the vector is greater than or equal to the threshold. For example, if the\
    \ threshold is 0.5, then the function should return a vector [true, false, true,\
    \ true, false, true].", "    \n    numbers = sort(numbers)\n    \n    for n in\
    \ numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that checks if a number is in a given list of numbers, sorted\
    \ in ascending order.\n    >>> is_in_sorted([1.0, 2.0, 3.0], 1.0)\n    True\n\
    \    >>> is_in_sorted([1.0, 2.0, 3.0], 3.0)\n    False\n    >>> is_in_sorted([1.0,\
    \ 2.0, 3.0], 4.0)\n    False\n    >>> is_in_sorted([1.0, 2.0, 3.0], 5.0)\n   \
    \ False\n    >>> is_in_sorted([1.0, 2.0, 3.0], 2.0)\n    True\n    \"\"\"", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n        if numbers[i]\
    \ - numbers[i - 1] > threshold\n            return true\n        end\n       \
    \ i = i + 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    idx = 0\n    while idx < length(numbers)\n\
    \        if numbers[idx] - numbers[idx - 1] > threshold\n            return true\n\
    \        else\n            idx += 1\n        end\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    if length(numbers) < 2\n        return false\n    end\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    for n in numbers\n        if abs(n - numbers[end])\
    \ > (threshold * maximum(numbers))\n            return true\n        end\n   \
    \ end\n    return false\nend\n</cell>\n<text>\nThe function has_close_elements\
    \ takes a list of numbers and a threshold as input, and returns true if the list\
    \ contains any two numbers that are closer to each other than the given threshold.\
    \ Otherwise, it returns false.", "    \n    numbers = sort(numbers)\n    \n  \
    \  i = length(numbers)\n    while i > 0\n        if numbers[i-1] - numbers[i]\
    \ > threshold\n            return true\n        end\n        i -= 1\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers\
    \ = sort(numbers)\n    \n    if length(numbers) < 2\n        return false\n  \
    \  end\n    \n    idx1 = 1\n    idx2 = length(numbers)\n    \n    while idx1 <=\
    \ idx2\n        if numbers[idx1] - numbers[idx2] < threshold\n            return\
    \ true\n        end\n        \n        if numbers[idx1] - numbers[idx2] > threshold\n\
    \            return false\n        end\n        \n        idx1 += 1\n        idx2\
    \ -= 1\n    end\n    \n    return false\nend\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that takes a list of numbers and returns the number of numbers in\
    \ the list that are closer to each other than the given threshold.", "    \n \
    \   numbers = sort(numbers)\n    \n    idx = 0\n    while idx < length(numbers)\n\
    \        if numbers[idx] == numbers[idx + 1]\n            idx += 1\n        else\n\
    \            idx += 1\n            break\n        end\n    end\n    \n    return\
    \ idx > length(numbers) - 2\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if a number is in a given list of numbers, sorted in ascending order.\n\
    \    >>> in_sorted_order?([1.0, 2.0, 3.0], 1.0)\n    true\n    >>> in_sorted_order?([1.0,\
    \ 2.0, 3.0], 3.0)\n    false\n    >>> in_sorted_order?([1.0, 2.0, 3.0], 4.0)\n\
    \    false\n    >>> in_sorted_order?([1.0, 2.0, 3.0], 5.0)\n    false\n    >>>\
    \ in_sorted_order?([1.0, 2.0, 3.0], 2.0)\n    true\n    >>> in_sorted_order?([1.0,\
    \ 2.0, 3.0], 3.0)\n    true\n    >>> in_sorted_order?([1.0, 2.0, 3.0], 4.0)\n\
    \    true\n    >>> in_sorted_order?([1.0, 2.0, 3.0], 5.0)\n    true\n    >>> in_sorted_order?([1.0,\
    \ 2.0, 3.0], 6.0)\n    false\n    \"\"\"", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    j = length(numbers)\n    \n    while i < j\n        if numbers[i]\
    \ == numbers[j] \n            i += 1\n            j += 1\n        elseif abs(numbers[i]\
    \ - numbers[j]) < threshold\n            i += 1\n        else\n            j +=\
    \ 1\n        end\n    end\n    \n    return j == length(numbers)\nend\n</cell>\n\
    <code language=julia-1.3>", "    \n    numbers = sort(numbers)\n    \n    i =\
    \ 0\n    j = length(numbers)\n    \n    while i < j\n        if numbers[i] ==\
    \ numbers[j] \n            i += 1\n            j += 1\n        elseif numbers[i]\
    \ - numbers[j] < threshold\n            i += 1\n        else\n            j +=\
    \ 1\n        end\n    end\n    \n    return j == length(numbers)\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that checks if a number is prime or not. You\
    \ may want to use Sieve of Eratosthenes algorithm. \nThe function should take\
    \ in a number as input, and return True if that number is prime and False otherwise.\n\
    The function should return False for negative numbers and numbers that are not\
    \ divisible by 2 or 3.", "    \n    numbers = sort(numbers)\n    \n    for n in\
    \ numbers\n        if n == numbers[end] \n            return true\n        end\n\
    \    end\n    \n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of numbers and a threshold and returns a vector of booleans\
    \ indicating whether each number in the vector is closer to each other than the\
    \ threshold.", "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n\
    \        if abs(numbers[1] - n) < threshold\n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    numbers_sorted = sort(numbers)\n    \n    closest_number = numbers_sorted[1]\n\
    \    \n    for number in numbers_sorted[2:end]\n        if abs(number - closest_number)\
    \ < threshold\n            return true\n        else\n            closest_number\
    \ = number\n        end\n    end\n    \n    return false\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is in a given list of numbers,\
    \ sorted in ascending order.\n    >>> is_in_sorted_array([1.0, 2.0, 3.0], 2.0)\n\
    \    True\n    >>> is_in_sorted_array([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 2.0)\n \
    \   False\n    \"\"\"", "    \n    numbers = sort(numbers)\n    \n    for n in\
    \ numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n            return\
    \ true\n        end\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = findfirst(numbers_sorted\
    \ .< threshold)\n    \n    if index_of_closest == nothing\n        return false\n\
    \    end\n    \n    index_of_closest_previous = findfirst(numbers_sorted .> numbers[index_of_closest-1])\n\
    \    \n    if index_of_closest_previous == nothing\n        return false\n   \
    \ end\n    \n    if index_of_closest == index_of_closest_previous\n        return\
    \ true\n    end\n    \n    if index_of_closest == index_of_closest_previous +\
    \ 1\n        return true\n    end\n    \n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    if length(numbers)\
    \ < 2\n        return false\n    end\n    \n    idx = 0\n    \n    while idx <\
    \ length(numbers)\n        if numbers[idx] - numbers[idx - 1] < threshold\n  \
    \          return true\n        end\n        idx += 1\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i-1]\
    \ > threshold\n            return true\n        else\n            i += 1\n   \
    \     end\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers_sorted = sort(numbers)\n    \n    closest_index = 0\n    closest_distance\
    \ = threshold\n    for index in 1:length(numbers_sorted)\n        if numbers_sorted[index]\
    \ - numbers_sorted[closest_index] < closest_distance\n            closest_distance\
    \ = numbers_sorted[index] - numbers_sorted[closest_index]\n            closest_index\
    \ = index\n        end\n    end\n    \n    return closest_distance < threshold\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is\
    \ in a given list of numbers, ignoring order.\n    >>> is_in_list_ignoring_order([1.0,\
    \ 2.0, 3.0], 2.0)\n    True\n    >>> is_in_list_ignoring_order([1.0, 2.0, 3.0],\
    \ 3.0)\n    False\n    \"\"\"", "    \n    numbers = sort(numbers)\n    \n   \
    \ i = length(numbers)\n    \n    while i > 1\n        \n        if numbers[i-1]\
    \ - numbers[i] > threshold\n            return true\n        end\n        \n \
    \       i -= 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    i = 0\n    j = length(numbers) - 1\n    \n    while\
    \ i < j\n        if numbers[i] + threshold < numbers[j] + threshold\n        \
    \    i += 1\n        else\n            j -= 1\n        end\n    end\n    \n  \
    \  return j > i\nend\n</cell>\n<text>\nhas_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool returns a boolean indicating whether numbers are closer\
    \ to each other than threshold. numbers is sorted before being checked.", "  \
    \  \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n    \n    while\
    \ i > 1\n        \n        if numbers[i-1] - numbers[i] > threshold\n        \
    \    return true\n        end\n        \n        i -= 1\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n\
    \            return true\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n\
    \    for n in numbers\n        if abs(n - numbers[end]) > (threshold * numbers[end])\n\
    \            return false\n        end\n    end\n    return true\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in a list of numbers and returns\
    \ the number of elements that are closer to each other than the given threshold.\
    \ Test it on a list of numbers that you generated in the previous exercise.",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    \n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    idx = 0\n\
    \    while idx < length(numbers)-1 do\n        if numbers[idx] == numbers[idx+1]\
    \ then\n            idx += 1\n        else\n            if abs(numbers[idx] -\
    \ numbers[idx+1]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of numbers and returns the sum of the numbers in\
    \ the list. \nWrite a function that takes a list of numbers and returns the average\
    \ of the numbers in the list. \nWrite a function that takes a list of numbers\
    \ and returns the median of the numbers in the list. \nWrite a function that takes\
    \ a list of numbers and returns the mode of the numbers in the list. \nWrite a\
    \ function that takes a list of numbers and returns the standard deviation of\
    \ the numbers in the list. \nWrite a function that takes a list of numbers and\
    \ returns the variance of the numbers in the list. \nWrite a function that takes\
    \ a list of numbers and returns the minimum of the numbers in the list. \nWrite\
    \ a function that takes a list of numbers and returns the maximum of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ number of numbers in the list that are less than the given number. \nWrite a\
    \ function that takes a list of numbers and returns the number of numbers in the\
    \ list that are greater than the given number. \nWrite a function that takes a\
    \ list of numbers and returns the number of numbers in the list that are equal\
    \ to the given number. \nWrite a function that takes a list of numbers and returns\
    \ the number of numbers in the list that are greater than or equal to the given\
    \ number. \nWrite a function that takes a list of numbers and returns the number\
    \ of numbers in the list that are less than or equal to the given number. \nWrite\
    \ a function that takes a list of numbers and returns the number of numbers in\
    \ the list that are not equal to the given number. \nWrite a function that takes\
    \ a list of numbers and returns the number of numbers in the list that are not\
    \ greater than the given number. \nWrite a function that takes a list of numbers\
    \ and returns the number of numbers in the list that are not less than the given\
    \ number. \nWrite a function that takes a list of numbers and returns the number\
    \ of numbers in the list that are not greater than or equal to the given number.\
    \ \nWrite a function that takes a list of numbers and returns the number of numbers\
    \ in the list that are not less than or equal to the given number. \nWrite a function\
    \ that takes a list of numbers and returns the number of numbers in the list that\
    \ are not evenly divisible by the given number. \nWrite a function that takes\
    \ a list of numbers and returns the number of numbers in the list that are not\
    \ evenly divisible by 2 or 3. \nWrite a function that takes a list of numbers\
    \ and returns the number of numbers in the list that are not evenly divisible\
    \ by 3 or 4. \nWrite a function that takes a list of numbers and returns the number\
    \ of numbers in the list that are not evenly divisible by 5 or 6. \nWrite a function\
    \ that takes a list of numbers and returns the number of numbers in the list that\
    \ are not evenly divisible by 7 or 8. \nWrite a ", "    \n    distances = Vector{Float64}(undef,\
    \ length(numbers))\n    for i in 1:length(numbers)\n        distances[i] = abs(numbers[i]\
    \ - threshold)\n    end\n    \n    return distances[1] < distances[2]\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of numbers and a threshold\
    \ and return a list containing only those numbers that are closer to each other\
    \ than the given threshold.", "    \n    numbers = sort(numbers)\n    \n    i\
    \ = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i-1] > threshold\n\
    \            return true\n        end\n        i += 1\n    end\n    return false\n\
    end\n</cell>\n<text>\nProblem 4\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers.\n>>> square_sum([1.0, 2.0,\
    \ 3.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    25.0\n>>> square_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> square_sum([1.0, ",
  "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n    \n    while\
    \ i > 1\n        \n        j = i - 1\n        \n        while j > 1\n        \
    \    \n            if abs(numbers[j] - numbers[j - 1]) < threshold\n         \
    \       return true\n            \n            j = j - 1\n        end\n      \
    \  \n        i = i - 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    numbers = sort(numbers)\n    \n    idx = 0\n    while idx < length(numbers)\n\
    \        if numbers[idx] - numbers[idx - 1] > threshold\n            return true\n\
    \        else\n            idx += 1\n        end\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    closest_elements = numbers_sorted[1..end]\n    \n    closest_elements_sorted\
    \ = sort(closest_elements)\n    \n    closest_elements_diffs = closest_elements_sorted\
    \ .- numbers_sorted\n    \n    closest_elements_diffs_sorted = sort(closest_elements_diffs)\n\
    \    \n    closest_elements_diffs_sorted_diff = closest_elements_diffs_sorted\
    \ .- closest_elements_diffs_sorted\n    \n    closest_elements_diffs_sorted_diff_sum\
    \ = sum(closest_elements_diffs_sorted_diff)\n    \n    closest_elements_diffs_sorted_diff_sum_threshold\
    \ = closest_elements_diffs_sorted_diff_sum * threshold\n    \n    return closest_elements_diffs_sorted_diff_sum_threshold\
    \ < 0\nend\n</cell>\n<text>\nThe function above is called in the following cell\
    \ to test the function has_close_elements:", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers[1:end-1]\n        if abs(numbers[1] - n) < threshold\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <text>\nThe function has_close_elements checks if any two numbers are closer to\
    \ each other than the given threshold. For example, if numbers = [1.0, 2.8, 3.0,\
    \ 4.0, 5.0, 2.0] and threshold = 0.3, then has_close_elements(numbers, threshold)\
    \ returns true.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    numbers_sorted = sort(numbers)\n    \n    closest_numbers = numbers_sorted[1:length(numbers_sorted)]\n\
    \    \n    closest_numbers_sorted = sort(closest_numbers)\n    \n    closest_numbers_sorted.length\
    \ == length(numbers_sorted)\n    \n    closest_numbers_sorted.length == length(numbers_sorted)\n\
    \    \n    closest_numbers_sorted.length == length(numbers_sorted)\n    \n   \
    \ closest_numbers_sorted.length == length(numbers_sorted)\n    \n    closest_numbers_sorted.length\
    \ == length(numbers_sorted)\n    \n    closest_numbers_sorted.length == length(numbers_sorted)\n\
    \    \n    closest_numbers_sorted.length == length(numbers_sorted)\n    \n   \
    \ closest_numbers_sorted.length == length(numbers_sorted)\n    \n    closest_numbers_sorted.length\
    \ == length(numbers_sorted)\n    \n    closest_numbers_sorted.length == length(numbers_sorted)\n\
    \    \n    closest_numbers_sorted.length == length(numbers_sorted)\n    \n   \
    \ closest_numbers_sorted.length == length(numbers_sorted)\n    \n    closest_numbers_sorted.length\
    \ == length(numbers_sorted)\n    \n    closest_numbers_sorted.length == length(numbers_sorted)\n\
    \    \n    closest_numbers_sorted.length == length(numbers_sorted)\n    \n   \
    \ closest_numbers_sorted.length == length(numbers_sorted)\n    \n    closest_numbers_sorted.length\
    \ == length(numbers_sorted)\n    \n    closest_numbers_sorted.length == length(numbers_sorted)\n\
    \    \n    closest_numbers_sorted.length == length(numbers_sorted)\n    \n   \
    \ closest_numbers_sorted.length == length(numbers_sorted)\n    \n    closest_numbers_sorted.length\
    \ == length(numbers_sorted)\n    \n    closest_numbers_sorted.length == length(numbers_sorted)\n\
    \    \n    closest_numbers_sorted.length == length(numbers_sorted)\n    \n   \
    \ closest_numbers_sorted.length == length(numbers_sorted)\n    \n    closest_numbers_sorted.length\
    \ == length(numbers_sorted)\n    \n    closest_numbers_sorted.length == length(numbers_sorted)\n\
    \    \n    closest_numbers_sorted.length == length(numbers_sorted)\n    \n   \
    \ closest_numbers_sorted.length == length(numbers_sorted)\n    \n    closest_numbers_sorted.length\
    \ == length(numbers_sorted)\n    \n    closest_numbers_sorted.", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n    \
    \    \n        if numbers[i] > threshold \n            \n            i += 1\n\
    \            \n        else\n            \n            if numbers[i-1] < threshold\
    \ \n                \n                i += 1\n                \n            else\n\
    \                \n                return true\n            \n        end\n  \
    \      \n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    index_of_closest = find_closest_index(numbers_sorted,\
    \ threshold)\n    \n    if index_of_closest == length(numbers_sorted)\n      \
    \  return true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    if length(numbers) < 2\n        return false\n    end\n\
    \    \n    i = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i-1]\
    \ > threshold\n            return true\n        else\n            i += 1\n   \
    \     end\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        if numbers[i] - numbers[i-1] > threshold\n            return\
    \ true\n        end\n        \n        i = i + 1\n    end\n    \n    return false\n\
    end\n</cell>\n<text>\nThe function has_close_elements takes in a list of numbers\
    \ and a threshold and checks if any two numbers are closer to each other than\
    \ the given threshold. Let's see how it works.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        \n        if numbers[i]\
    \ - numbers[i-1] > threshold\n            \n            return true\n        end\n\
    \        \n        i = i + 1\n    end\n    \n    return false\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers.", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers[1:end-1]\n        if abs(numbers[1] - n) < threshold\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    distances = Vector{Float64}(undef, length(numbers))\n\
    \    for i in 1:length(numbers)\n        distances[i] = abs(numbers[i] - threshold)\n\
    \    end\n    \n    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n\
    \            if distances[i] < distances[j]\n                return true\n   \
    \         end\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of numbers and a threshold and\
    \ returns a vector of booleans indicating which numbers are closer to each other\
    \ than the threshold.", "    \n    numbers = sort(numbers)\n    \n    i = 2\n\
    \    while i < length(numbers)\n        if numbers[i] - numbers[i - 1] > threshold\n\
    \            return true\n        end\n        i = i + 1\n    end\n    return\
    \ false\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n    \n    while\
    \ i > 1\n        \n        j = i - 1\n        \n        while j > 1\n        \
    \    \n            if abs(numbers[j] - numbers[j - 1]) < threshold\n         \
    \       return true\n            \n            j = j - 1\n        end\n      \
    \  \n        i = i - 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    idx = 0\n    while idx < length(numbers)-1\
    \ do\n        if numbers[idx+1] - numbers[idx] > threshold then\n            return\
    \ true\n        end\n        idx += 1\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is in a given list\
    \ of numbers, ignoring order.", "    \n    numbers = sort(numbers)\n    \n   \
    \ for n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n      \
    \      return true\n        end\n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    for\
    \ n in numbers\n        if n == numbers[1]\n            return true\n        end\n\
    \    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n    \n    while\
    \ i > 1\n        if numbers[i-1] - numbers[i] > threshold\n            return\
    \ true\n        end\n        i -= 1\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of numbers and a threshold\
    \ and returns the number of numbers in the list that are closer to each other\
    \ than the threshold.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    numbers = sort(numbers)\n    \n    if length(numbers) < 2\n        return\
    \ false\n    end\n    \n    i = 2\n    \n    while i < length(numbers)\n     \
    \   if numbers[i] - numbers[i - 1] < threshold\n            return true\n    \
    \    else\n            i += 1\n        end\n    end\n    \n    return false\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    distances = zeros(length(numbers_sorted))\n    for\
    \ index in 1:length(numbers_sorted)\n        distances[index] = abs(numbers_sorted[index]\
    \ - numbers_sorted[index-1])\n    end\n    \n    close = zeros(length(numbers_sorted))\n\
    \    for index in 1:length(numbers_sorted)\n        if distances[index] < threshold\n\
    \            close[index] = true\n        else\n            close[index] = false\n\
    \        end\n    end\n    \n    return any(close)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    for n in numbers[1:end-1]\n      \
    \  if abs(numbers[1] - n) < threshold\n            return True\n        end\n\
    \    end\n    \n    return false\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns all elements that are less than a given threshold.", "    \n  \
    \  numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if abs(numbers[1]\
    \ - n) < threshold\n            return true\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a vector\
    \ has all elements of a given set. \nThe set can be any type of collection (tuple,\
    \ list, set, ...).", "    \n    numbers = sort(numbers)\n    \n    i = 0\n   \
    \ j = length(numbers)\n    \n    while i < j\n        if numbers[i] == numbers[j]\
    \ \n            i += 1\n            j += 1\n        elseif numbers[i] - numbers[j]\
    \ < threshold\n            i += 1\n        else\n            j += 1\n        end\n\
    \    end\n    \n    return j == length(numbers)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    for n in numbers\n        if n ==\
    \ numbers[1]\n            return true\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that will take a list\
    \ of numbers and a threshold and will return the number of numbers in the list\
    \ that are closer to each other than the threshold.", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    index_of_closest = findfirst(x -> abs(x - threshold)\
    \ < abs(numbers_sorted[end] - threshold), numbers_sorted)\n    \n    return index_of_closest\
    \ != end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns all\
    \ elements that are closer to each other than the given threshold.\nThe function\
    \ should return an iterator of pairs of numbers (x, y) where x is closer to y\
    \ than threshold.\nThe function should return nothing if the given threshold is\
    \ smaller than the smallest element in the given list.\nThe function should return\
    \ nothing if the given threshold is larger than the largest element in the given\
    \ list.\nThe function should return nothing if the given threshold is equal to\
    \ the smallest or largest element in the given list.\nThe function should return\
    \ nothing if the given threshold is equal to the given element.\nThe function\
    \ should return nothing if the given threshold is smaller than the smallest element\
    \ in the given list.\nThe function should return nothing if the given threshold\
    \ is larger than the largest element in the given list.\nThe function should return\
    \ nothing if the given threshold is equal to the smallest or largest element in\
    \ the given list.\nThe function should return nothing if the given threshold is\
    \ equal to the given element.\nThe function should return nothing if the given\
    \ threshold is smaller than the smallest element in the given list.\nThe function\
    \ should return nothing if the given threshold is larger than the largest element\
    \ in the given list.\nThe function should return nothing if the given threshold\
    \ is equal to the smallest or largest element in the given list.\nThe function\
    \ should return nothing if the given threshold is equal to the given element.\n\
    The function should return nothing if the given threshold is smaller than the\
    \ smallest element in the given list.\nThe function should return nothing if the\
    \ given threshold is larger than the largest element in the given list.\nThe function\
    \ should return nothing if the given threshold is equal to the smallest or largest\
    \ element in the given list.\nThe function should return nothing if the given\
    \ threshold is equal to the given element.\nThe function should return nothing\
    \ if the given threshold is smaller than the smallest element in the given list.\n\
    The function should return nothing if the given threshold is larger than the largest\
    \ element in the given list.\nThe function should return nothing if the given\
    \ threshold is equal to the smallest or largest element in the given list.\nThe\
    \ function should return nothing if the given threshold is equal to the given\
    \ element.\nThe function should return nothing if the given threshold is smaller\
    \ than the smallest element in the given list.\nThe function should return nothing\
    \ if the given threshold is larger than the largest element in the given list.\n\
    The function should return nothing if the given threshold is equal to the smallest\
    \ or largest element in the given list.\nThe function should return nothing if\
    \ the given threshold is equal to the given element.\nThe function should return\
    \ nothing if the given threshold is smaller than the smallest element in the given\
    \ list.\nThe function ", "    \n    numbers = sort(numbers)\n    \n    idx = 0\n\
    \    while idx < length(numbers)-1 do\n        if numbers[idx] - numbers[idx+1]\
    \ < threshold then\n            return true\n        end\n        idx += 1\n \
    \   end\n    return false\nend\n</cell>\n<text>\nThe function has_close_elements\
    \ takes in a list of numbers and a threshold and checks if there are any two numbers\
    \ in the list that are closer to each other than the given threshold. Let's see\
    \ an example to understand how it works.", "    \n    numbers = sort(numbers)\n\
    \    \n    diff = numbers[1] - numbers[0]\n    \n    if diff < threshold\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns true if the given list has at least two elements\
    \ that are not equal\nto each other. For example, given [1,2,3], it should return\
    \ true.", "    \n    numbers_sorted = sort(numbers)\n    \n    closest_numbers\
    \ = numbers_sorted[1..end]\n    \n    closest_numbers_sorted = sort(closest_numbers)\n\
    \    \n    closest_numbers_sorted_diff = closest_numbers_sorted - closest_numbers\n\
    \    \n    closest_numbers_sorted_diff_sum = sum(closest_numbers_sorted_diff)\n\
    \    \n    if closest_numbers_sorted_diff_sum < threshold\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that takes in a list of numbers and a threshold and returns a list\
    \ of numbers that are\ncloser to each other than the given threshold.\nThe function\
    \ should return a list of numbers that are closer to each other than the given\
    \ threshold.\nThe function should return an empty list if the given list is empty.\n\
    The function should return a list of numbers that are closer to each other than\
    \ the given threshold.\nThe function should return an empty list if the given\
    \ list is empty.\nThe function should return an empty list if the given list is\
    \ empty.\nThe function should return an empty list if the given list is empty.\n\
    The function should return an empty list if the given list is empty.\nThe function\
    \ should return an empty list if the given list is empty.\nThe function should\
    \ return an empty list if the given list is empty.\nThe function should return\
    \ an empty list if the given list is empty.\nThe function should return an empty\
    \ list if the given list is empty.\nThe function should return an empty list if\
    \ the given list is empty.\nThe function should return an empty list if the given\
    \ list is empty.\nThe function should return an empty list if the given list is\
    \ empty.\nThe function should return an empty list if the given list is empty.\n\
    The function should return an empty list if the given list is empty.\nThe function\
    \ should return an empty list if the given list is empty.\nThe function should\
    \ return an empty list if the given list is empty.\nThe function should return\
    \ an empty list if the given list is empty.\nThe function should return an empty\
    \ list if the given list is empty.\nThe function should return an empty list if\
    \ the given list is empty.\nThe function should return an empty list if the given\
    \ list is empty.\nThe function should return an empty list if the given list is\
    \ empty.\nThe function should return an empty list if the given list is empty.\n\
    The function should return an empty list if the given list is empty.\nThe function\
    \ should return an empty list if the given list is empty.\nThe function should\
    \ return an empty list if the given list is empty.\nThe function should return\
    \ an empty list if the given list is empty.\nThe function should return an empty\
    \ list if the given list is empty.\nThe function should return an empty list if\
    \ the given list is empty.\nThe function should return an empty list if the given\
    \ list is empty.\nThe function should return an empty list if the given list is\
    \ empty.\nThe function should return an empty list if the given list is empty.\n\
    The function should return an empty list ", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers\n        if abs(n - numbers[end]) > (threshold * length(numbers))\n\
    \            return true\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n\
    \    idx = 0\n    while idx < length(numbers)\n        if numbers[idx] - numbers[idx\
    \ - 1] > threshold\n            return true\n        end\n        idx += 1\n \
    \   end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if a vector has all elements equal, given threshold.\n    >>> has_all_elements([1.0,\
    \ 2.0, 3.0], 0.5)\n    false\n    >>> has_all_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"", "    \n    numbers = sort(numbers)\n    \n\
    \    i = 0\n    j = length(numbers) - 1\n    \n    while i < j\n        if numbers[i]\
    \ == numbers[j] \n            i += 1\n            j -- \n        else if abs(numbers[i]\
    \ - numbers[j]) < threshold\n            i += 1\n        else\n            j -=\
    \ 1\n        end\n    end\n    \n    return i == j\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks if a number is in a given list of numbers, in\
    \ any order.\n    >>> is_in_any_order([1.0, 2.0, 3.0], 2.0)\n    True\n    >>>\
    \ is_in_any_order([1.0, 2.0, 3.0], 3.0)\n    True\n    >>> is_in_any_order([1.0,\
    \ 2.0, 3.0], 4.0)\n    False\n    >>> is_in_any_order([1.0, 2.0, 3.0], 3.5)\n\
    \    False\n    >>> is_in_any_order([1.0, 2.0, 3.0], 3.0)\n    True\n    \"\"\"",
  "    \n    numbers_sorted = sort(numbers)\n    \n    for number in numbers_sorted\n\
    \        if number - threshold < numbers_sorted[1]\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i - 1] < threshold\n            return true\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i-1]\
    \ > threshold\n            return true\n        end\n        i += 1\n    end\n\
    \    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a vector is sorted in ascending order.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i\
    \ - 1] < threshold\n            return true\n        else\n            i += 1\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nProblem 7: Write\
    \ a function that returns the number of elements in a list that satisfy a given\
    \ condition. \nFor example, given the list [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], return\
    \ 2 since there are two numbers in the list that are both greater than or equal\
    \ to 2.", "    \n    numbers = sort(numbers)\n    \n    for n in numbers\n   \
    \     if n == numbers[1]\n            return true\n        end\n    end\n    \n\
    \    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of numbers and a threshold and returns the number of numbers in the\
    \ vector that are closer to each other than the threshold.", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    distances = Vector{Float64}(undef,\
    \ length(numbers))\n    for i in 1:length(numbers)\n        distances[i] = sqrt(numbers[i]^2\
    \ + numbers[i-1]^2)\n    end\n    \n    for i in 1:length(numbers)\n        if\
    \ distances[i] < threshold\n            return false\n        end\n    end\n \
    \   return true\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers\
    \ = sort(numbers)\n    \n    for n in numbers\n        if n == numbers[1]\n  \
    \          return true\n        end\n    end\n    \n    return false\nend\n</cell>\n\
    <text>\nhas_close_elements(numbers::Vector{Float64}, threshold::Float64)::Bool\
    \ \n    \n    numbers = sort(numbers)\n    \n    for n in numbers\n        if\
    \ n == numbers[1]\n            return true\n        end\n    end\n    \n    return\
    \ false\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n       \
    \ if abs(numbers[1] - n) < threshold\n            return true\n        end\n \
    \   end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    numbers = sort(numbers)\n    \n    idx = 0\n    while idx < length(numbers)\n\
    \        if numbers[idx] - numbers[idx - 1] < threshold\n            return true\n\
    \        else\n            idx += 1\n        end\n    end\n    return false\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is\
    \ in a given list of numbers, sorted in ascending order.\nHint: Use a for loop\
    \ and a counter variable.", "    \n    numbers = sort(numbers)\n    \n    i =\
    \ 0\n    \n    while i < length(numbers)\n        \n        if numbers[i] - numbers[i-1]\
    \ > threshold\n            return true\n        end\n        \n        i = i +\
    \ 1\n    end\n    \n    return false\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector and returns the mean of the numbers in the vector.\
    \ \nThe function should raise an error if the vector is empty.\nHint: use the\
    \ mean function.", "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n\
    \        if abs(numbers[1] - n) < threshold\n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<text>\nLet's test our function\
    \ with some examples:", "    \n    numbers = sort(numbers)\n    \n    i = 0\n\
    \    \n    while i < length(numbers)\n        \n        if numbers[i] - numbers[i-1]\
    \ > threshold\n            return true\n        end\n        \n        i = i +\
    \ 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers) - 1\n\
    \    \n    while i < j\n        if numbers[i] + threshold < numbers[j] + threshold\n\
    \            i += 1\n        elseif numbers[j] + threshold < numbers[i] + threshold\n\
    \            j -= 1\n        else\n            return true\n        end\n    end\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ numbers = sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n  \
    \      if numbers[i] - numbers[i - 1] < threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if\
    \ abs(numbers[1] - n) < threshold\n            return true\n        end\n    end\n\
    \    \n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes in a list of numbers and a threshold and returns a new list containing\
    \ only those numbers that are within that threshold. Test it by printing the result\
    \ of the function on a few examples.", "    \n    numbers = sort(numbers)\n  \
    \  \n    i = 0\n    while i < length(numbers)-1 do\n        if numbers[i+1] -\
    \ numbers[i] < threshold then\n            return true\n        end\n        i\
    \ = i + 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i - 1] > threshold\n            return true\n\
    \        end\n        i += 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    Problem 4\nWrite a function that returns true if the given number is divisible\
    \ by 7 and false otherwise.\n>>> is_divisible(7)\ntrue\n>>> is_divisible(8)\n\
    false\n>>> is_divisible(9)\ntrue\n>>> is_divisible(10)\nfalse\n>>> is_divisible(11)\n\
    false\n>>> is_divisible(12)\nfalse\n>>> is_divisible(13)\nfalse\n>>> is_divisible(14)\n\
    false\n>>> is_divisible(15)\nfalse\n>>> is_divisible(16)\nfalse\n>>> is_divisible(17)\n\
    false\n>>> is_divisible(18)\nfalse\n>>> is_divisible(19)\nfalse\n>>> is_divisible(20)\n\
    false\n>>> is_divisible(21)\nfalse\n>>> is_divisible(22)\nfalse\n>>> is_divisible(23)\n\
    false\n>>> is_divisible(24)\nfalse\n>>> is_divisible(25)\nfalse\n>>> is_divisible(26)\n\
    false\n>>> is_divisible(27)\nfalse\n>>> is_divisible(28)\nfalse\n>>> is_divisible(29)\n\
    false\n>>> is_divisible(30)\nfalse\n>>> is_divisible(31)\nfalse\n>>> is_divisible(32)\n\
    false\n>>> is_divisible(33)\nfalse\n>>> is_divisible(34)\nfalse\n>>> is_divisible(35)\n\
    false\n>>> is_divisible(36)\nfalse\n>>> is_divisible(37)\nfalse\n>>> is_divisible(38)\n\
    false\n>>> is_divisible(39)\nfalse\n>>> is_divisible(40)\nfalse\n>>> is_divisible(41)\n\
    false\n>>> is_divisible(42)\nfalse\n>>> is_divisible(43)\nfalse\n>>> is_divisible(44)\n\
    false\n>>> is_divisible(45)\nfalse\n>>> is_divisible(46)\nfalse\n>>> is_divisible(47)\n\
    false\n>>> is_divisible(48)\nfalse\n>>> is_divisible(49)\nfalse\n>>> is_divisible(50)\n\
    false\n>>> is_divisible(51)\nfalse\n>>> is_divisible(52)\nfalse\n>>> is_divisible(53)\n\
    false\n>>> is_divisible(54)\nfalse\n>>> is_divisible(55)\nfalse\n>>> is_divisible(56)\n\
    false\n>>> is_divisible(57)\nfalse\n>>> is_divisible(", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    index_of_closest = findfirst(x -> abs(x - threshold) < abs(numbers_sorted[end]\
    \ - threshold), numbers_sorted)\n    \n    if index_of_closest == nothing\n  \
    \      return false\n    else\n        return true\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of numbers and a threshold and\
    \ returns the number of elements in the list that are less than or equal to the\
    \ threshold.", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n   \
    \ while i < length(numbers)\n        \n        j = i + 1\n        \n        while\
    \ j < length(numbers)\n            \n            if abs(numbers[i] - numbers[j])\
    \ < threshold\n                return true\n            \n            j += 1\n\
    \        end\n        \n        i += 1\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    while i < length(numbers)\n        if numbers[i] - numbers[i\
    \ - 1] < threshold\n            return true\n        else\n            i += 1\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in a list of numbers and returns the mean of the numbers.\
    \ \nHint: use the function mean.", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    i = 0\n    while i < length(numbers_sorted)\n        if numbers_sorted[i]\
    \ < threshold\n            i += 1\n        else\n            if numbers_sorted[i+1]\
    \ - numbers_sorted[i] < threshold\n                return true\n            else\n\
    \                i += 1\n            end\n        end\n    end\n    return false\n\
    end\n</cell>\n<text>\nThe function above checks if there are any two numbers in\
    \ the given list that are closer to each other than the given threshold. Let's\
    \ see how it works:", "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n\
    \        if abs(numbers[1] - n) < threshold\n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of numbers and a threshold and returns a vector of booleans\
    \ indicating which numbers are closer to each other than the threshold.", "  \
    \  \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if abs(numbers[i] - numbers[i-1]) < threshold\n            return true\n\
    \        end\n        i += 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers_sorted = sort(numbers)\n    \n    i = 0\n    while i < length(numbers_sorted)\n\
    \        if numbers_sorted[i] == numbers_sorted[i+1]\n            i += 1\n   \
    \     else\n            if abs(numbers_sorted[i] - numbers_sorted[i+1]) < threshold\n\
    \                return True\n            else\n                i += 1\n     \
    \       end\n        end\n    end\n    \n    return false\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    \n    numbers = sort(numbers)\n    \n    i = 0\n\
    \    \n    while i < length(numbers)\n        if numbers[i] - numbers[i-1] > threshold\n\
    \            return true\n        end\n        i += 1\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nProblem 4\nWrite a function that returns all elements\
    \ of a vector that satisfy a given condition. For example, given [1,2,3,4,5,6,7,8,9],\
    \ return [2,4,6,8].", "    \n    numbers = sort(numbers)\n    \n    i = 2\n  \
    \  while i < length(numbers)\n        if numbers[i] - numbers[i-1] < threshold\n\
    \            return true\n        end\n        i += 1\n    end\n    return false\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a list of numbers\
    \ and a threshold and returns a list of numbers that are\ncloser to each other\
    \ than the given threshold.", "    \n    numbers = sort(numbers)\n    \n    for\
    \ n in numbers\n        if n == numbers[1]\n            return true\n        end\n\
    \    end\n    \n    return false\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector and returns a new vector where all elements are the product\
    \ of all the numbers in the original vector. For example, if the input vector\
    \ is [1.0, 2.0, 3.0, 4.0, 5.0, 6.0], your function should return [1.0, 4.0, 9.0,\
    \ 16.0, 25.0, 36.0, 49.0]", "    \n    numbers = sort(numbers)\n    \n    for\
    \ n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n          \
    \  return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in a list that\
    \ satisfy a given condition. For example, given a list of numbers, return how\
    \ many numbers are greater than 0.", "    \n    distances = Vector{Float64}(undef,\
    \ 0)\n    for n in numbers\n        distances = vcat(distances, get_distances(n,\
    \ numbers))\n    end\n    \n    closest_distance = minimum(distances)\n    \n\
    \    return closest_distance <= threshold\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n    \n    while\
    \ i > 1\n        if numbers[i-1] - numbers[i] > threshold\n            return\
    \ true\n        end\n        \n        i -= 1\n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i-1]\
    \ > threshold\n            return true\n        end\n        i += 1\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = 0\n    j = length(numbers) - 1\n    \n    while\
    \ i < j\n        if numbers[i] + threshold < numbers[j] + threshold\n        \
    \    i += 1\n        elseif numbers[j] + threshold < numbers[i] + threshold\n\
    \            j -= 1\n        else\n            return true\n        end\n    end\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ numbers_sorted = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers_sorted)\n\
    \        \n        j = i + 1\n        \n        while j < length(numbers_sorted)\n\
    \            \n            if numbers_sorted[j] - numbers_sorted[i] < threshold\n\
    \                return true\n            \n            j += 1\n            \n\
    \        i += 1\n        \n    return false\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in a list of numbers and returns the mean of the numbers.\
    \ \nThe mean of a list of numbers is defined as the sum of the numbers / the length\
    \ of the list.\nThe function should raise an error if the list is empty.\nThe\
    \ function should raise an error if the list contains non-numbers.\nThe function\
    \ should raise an error if the list contains two numbers that are not close to\
    \ each other.", "    \n    numbers = sort(numbers)\n    \n    i = 2\n    while\
    \ i < length(numbers)\n        if numbers[i] - numbers[i-1] > threshold\n    \
    \        return true\n        end\n        i += 1\n    end\n    return false\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that checks if a number is\
    \ in a given list of numbers, sorted in ascending order.\n    >>> is_in_sorted_array([1.0,\
    \ 2.0, 3.0, 4.0, 5.0], 2.0)\n    true\n    >>> is_in_sorted_array([1.0, 2.0, 3.0,\
    \ 4.0, 5.0], 3.0)\n    false\n    \"\"\"", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i\
    \ - 1] < threshold\n            return true\n        end\n        i += 1\n   \
    \ end\n    return false\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ checks if a number is divisible by another number.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    j = length(numbers)\n    \n    while i < j\n        if numbers[i]\
    \ == numbers[j]\n            i += 1\n            j += 1\n        elseif abs(numbers[i]\
    \ - numbers[j]) < threshold\n            i += 1\n        else\n            j +=\
    \ 1\n        end\n    end\n    \n    return i == j\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers)\n \
    \   \n    while i < j\n        if numbers[i] == numbers[j]\n            i += 1\n\
    \            j += 1\n        elseif abs(numbers[i] - numbers[j]) < threshold\n\
    \            i += 1\n        else\n            j += 1\n        end\n    end\n\
    \    \n    return i == j\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list.\nFor example, given [1.0, 2.0, 3.0], the function should return 9.0\n\
    Given [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], the function should return 25.0", "    \n\
    \    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if abs(numbers[1]\
    \ - n) < threshold\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is in a given list of numbers, sorted in ascending order.\n    >>> is_in_ascending_order([1.0,\
    \ 2.0, 3.0])\n    true\n    >>> is_in_ascending_order([1.0, 2.0, 3.0, 4.0])\n\
    \    false\n    >>> is_in_ascending_order([1.0, 2.0, 3.0, 4.0, 5.0])\n    true\n\
    \    \"\"\"", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while\
    \ i < length(numbers)\n        \n        j = i + 1\n        \n        while j\
    \ < length(numbers)\n            \n            if abs(numbers[i] - numbers[j])\
    \ < threshold\n                return true\n            \n            j += 1\n\
    \        end\n        \n        i += 1\n    end\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n\
    \    i = 0\n    \n    while i < length(numbers)\n        \n        if numbers[i]\
    \ - numbers[i-1] > threshold\n            \n            return true\n        \
    \    \n        end\n        \n        i = i + 1\n        \n    end\n    \n   \
    \ return false\nend\n</cell>\n<text>\nExercise 7\nWrite a function that returns\
    \ true if a number is evenly divisible by 3.", "    \n    distances = zeros(length(numbers))\n\
    \    for n in numbers\n        distances[find(numbers .== n)] = sqrt(sum((numbers\
    \ .- n).^2))\n    end\n    \n    return any(distances .< threshold)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert has_close_elements([1.0, 2.0, 3.0], 0.5) ==\
    \ false\n@assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == true\n\
    </cell>\n<text>\nExercise: Write a function that takes in a list of numbers and\
    \ a threshold and returns the indices of the numbers that satisfy the condition.\
    \ For example, if the input list is [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]\
    \ and the threshold is 0.5, then the function should return [2, 5, 8].", "   \
    \ \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i - 1] < threshold\n            return true\n\
    \        else\n            i += 1\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n\
    \    for n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n   \
    \         return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <text>\nLet's test our function by comparing it to our previous function", " \
    \   \n    numbers_sorted = sort(numbers)\n    \n    closest_number = numbers_sorted[1]\n\
    \    \n    for number in numbers_sorted[2:end]\n        if abs(number - closest_number)\
    \ < threshold\n            return true\n        else\n            closest_number\
    \ = number\n        end\n    end\n    \n    return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in a list of numbers and returns the number\
    \ of numbers in the list that are less than or equal to 10. \nThe function should\
    \ return 0 if the list is empty.\n>>> count_less_than_ten([1,2,3,4,5,6,7,8,9,10])\n\
    4\n>>> count_less_than_ten([])\n0\n>>> count_less_than_ten([1,2,3,4,5,6,7,8,9,10])\n\
    4\n>>> count_less_than_ten([1,2,3,4,5,6,7,8,9,10,11])\n0\n>>> count_less_than_ten([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    0\n>>> count_less_than_ten([1,2,3,4,5,6,7,8,9,10,11,12,13])\n0\n>>> count_less_than_ten([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    0\n>>> count_less_than_ten([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n0\n>>> count_less_than_ten([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    0\n>>> count_less_than_ten([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n0\n>>>\
    \ count_less_than_ten([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n0\n>>>\
    \ count_less_than_ten([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n0\n\
    >>> count_less_than_ten([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    0\n>>> count_less_than_ten([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    0\n>>> count_less_than_ten([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    0\n>>> count_less_than_ten([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    0\n>>> count_less_than_ten([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,",
  "    \n    numbers = sort(numbers)\n    \n    for n in numbers\n        if n < threshold\n\
    \            return false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    i =\
    \ 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i-1] > threshold\n\
    \            return true\n        end\n        i = i + 1\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.3>", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    numbers = sort(numbers)\n    \n \
    \   for n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n    \
    \        return true\n        end\n    end\n    \n    return false\nend\n</cell>\n\
    <text>\nhas_close_elements(numbers::Vector{Float64}, threshold::Float64)::Bool\
    \ \n    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n   \
    \     if abs(numbers[1] - n) < threshold\n            return true\n        end\n\
    \    end\n    \n    return false\nend", "    \n    numbers = sort(numbers)\n \
    \   \n    if length(numbers) < 2\n        return false\n    end\n    \n    idx1\
    \ = 1\n    idx2 = length(numbers)\n    \n    while idx1 < idx2\n        if numbers[idx1]\
    \ - numbers[idx2] < threshold\n            return true\n        end\n        \n\
    \        if numbers[idx1] - numbers[idx2] > threshold\n            return false\n\
    \        end\n        \n        idx1 += 1\n        idx2 -= 1\n    end\n    \n\
    \    return false\nend\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector.\nFor example, given [1.0, 2.0, 3.0, 4.0], return 14.0.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector, ignoring any numbers that are not integers.\nFor example, given\
    \ [1.0, 2.0, 3.0, 4.0], return 14.0.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector, ignoring\
    \ any numbers that are not integers and ignoring any numbers that are less than\
    \ zero.\nFor example, given [1.0, 2.0, 3.0, 4.0], return 14.0.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector, ignoring any numbers that are not integers and ignoring any numbers\
    \ that are less than or equal to zero.\nFor example, given [1.0, 2.0, 3.0, 4.0],\
    \ return 14.0.\nWrite a function that takes a vector of numbers and returns the\
    \ sum of the squares of the numbers in the vector, ignoring any numbers that are\
    \ not integers and ignoring any numbers that are less than or equal to zero.\n\
    For example, given [1.0, 2.0, 3.0, 4.0], return 14.0.\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector, ignoring any numbers that are not integers and ignoring any numbers\
    \ that are less than or equal to zero.\nFor example, given [1.0, 2.0, 3.0, 4.0],\
    \ return 14.0.\nWrite a function that takes a vector of numbers and returns the\
    \ sum of the squares of the numbers in the vector, ignoring any numbers that are\
    \ not integers and ignoring any numbers that are less than or equal to zero.\n\
    For example, given [1.0, 2.0, 3.0, 4.0], return 14.0.\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector, ignoring any numbers that are not integers and ignoring any numbers\
    \ that are less than or equal to zero.\nFor example, given [1.0, 2.0, 3.0, 4.0],\
    \ return 14.0.\nWrite a function that takes a vector of numbers and returns the\
    \ sum of the squares of the numbers in the vector, ignoring any numbers that are\
    \ not integers and ignoring any numbers that are less than or equal to zero.\n\
    For example, given [1.0, 2.0, 3.0, 4.0], return 14.0.\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector, ignoring any numbers that are ", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    numbers = sort(numbers)\n    \n    for\
    \ n in numbers\n        if abs(n - numbers[end]) > (threshold * length(numbers))\n\
    \            return true\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a number is in a\
    \ given list of numbers, sorted in ascending order.\nThe function should return\
    \ true if the number is in the list, false otherwise.\nThe function should also\
    \ return true if the list is empty, false otherwise.\nThe function should also\
    \ return false if the list is non-empty, if the number is not in the list.\nThe\
    \ function should also return false if the list is non-empty, if the number is\
    \ not in the list, if the number is less than the first element of the list.\n\
    The function should also return false if the list is non-empty, if the number\
    \ is not in the list, if the number is greater than the last element of the list.\n\
    The function should also return false if the list is non-empty, if the number\
    \ is not in the list, if the number is between two elements of the list.\nThe\
    \ function should also return false if the list is non-empty, if the number is\
    \ not in the list, if the number is between two elements of the list, if the first\
    \ element of the list is not less than the number in the list.\nThe function should\
    \ also return false if the list is non-empty, if the number is not in the list,\
    \ if the number is between two elements of the list, if the last element of the\
    \ list is not greater than the number in the list.\nThe function should also return\
    \ false if the list is non-empty, if the number is not in the list, if the number\
    \ is between two elements of the list, if the first element of the list is not\
    \ less than the number in the list, if the last element of the list is not greater\
    \ than the number in the list.\nThe function should also return false if the list\
    \ is non-empty, if the number is not in the list, if the number is between two\
    \ elements of the list, if the first element of the list is not less than the\
    \ number in the list, if the last element of the list is not greater than the\
    \ number in the list, if the first and last elements of the list are equal.\n\
    The function should also return false if the list is non-empty, if the number\
    \ is not in the list, if the number is between two elements of the list, if the\
    \ first element of the list is not less than the number in the list, if the last\
    \ element of the list is not greater than the number in the list, if the first\
    \ and last elements of the list are equal, if the first and last elements of the\
    \ list are equal, if the first and last elements of the list are equal, if the\
    \ first and last elements of the list are equal, if the first and last elements\
    \ of the list are equal, if the first and last elements of the list are equal,\
    \ if the first and last elements of the list are equal, if the first and last\
    \ elements of the list are equal, if the first and last elements of the list are\
    \ equal, if the first and last elements of the list are equal, if the first and\
    \ last elements of the list are equal, if the first and last elements of the list\
    \ are equal, if the first and last elements of the list ", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n    \
    \    \n        if numbers[i] - numbers[i-1] > threshold\n            return true\n\
    \        end\n        \n        i = i + 1\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nThe function has_close_elements takes in a list of numbers and\
    \ a threshold and checks if any two numbers are closer to each other than the\
    \ given threshold. For example, if the given threshold is 0.5, then any two numbers\
    \ in the list that are closer to each other than the threshold will be returned."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
