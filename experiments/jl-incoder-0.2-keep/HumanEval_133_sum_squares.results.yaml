name: HumanEval_133_sum_squares
language: julia
results:
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4sn32_m_.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4sn32_m_.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv0exb6xl.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpv0exb6xl.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv0exb6xl.jl:24\ntest set: Test Failed at /tmp/tmpv0exb6xl.jl:29\n\
    \  Expression: candidate([-2.4, 1.0, 1.0]) == 6\n   Evaluated: 8 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv0exb6xl.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv0exb6xl.jl:24\ntest set: Test Failed at /tmp/tmpv0exb6xl.jl:32\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 63 == 75\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv0exb6xl.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv0exb6xl.jl:24\ntest set: Test Failed at /tmp/tmpv0exb6xl.jl:33\n\
    \  Expression: candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n   Evaluated: 1076\
    \ == 1086\nStacktrace:\n [1] top-level scope at /tmp/tmpv0exb6xl.jl:33\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv0exb6xl.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv0exb6xl.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squ\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6qmu91e8.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6qmu91e8.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppf1yzu39.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmppf1yzu39.jl:18\n\
    \   [4] top-level scope at /tmp/tmppf1yzu39.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmppf1yzu39.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmppf1yzu39.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmppf1yzu39.jl:18\n   [4] top-level\
    \ scope at /tmp/tmppf1yzu39.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmppf1yzu39.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmppf1yzu39.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmppf1yzu39.jl:18\n   [4] top-level\
    \ scope at /tmp/tmppf1yzu39.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmppf1yzu39.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmppf1yzu39.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmppf1yzu39.jl:18\n   [4] top-level\
    \ scope at /tmp/tmppf1yzu39.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmppf1yzu39.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppf1yzu39.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum = sum + x^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbj_5teot.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpbj_5teot.jl:18\n\
    \   [4] top-level scope at /tmp/tmpbj_5teot.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpbj_5teot.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpbj_5teot.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpbj_5teot.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpbj_5teot.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpbj_5teot.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpbj_5teot.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpbj_5teot.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpbj_5teot.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpbj_5teot.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpbj_5teot.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpbj_5teot.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpbj_5teot.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpbj_5teot.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbj_5teot.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the square root of\
    \ a number. \nThe function should take one argument, x, and return the square\
    \ root of x.\nExamples:\nFor x = \u221A2 the output should be \u221A2\nFor x =\
    \ \u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\
    \u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\
    \u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\
    \u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\
    \u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\
    \u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\
    \u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\
    \u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\
    \u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\
    \u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\
    \u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\
    \u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\
    \u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\u221A\
    \u221A\u221A\uFFFD\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkj_6u2dj.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkj_6u2dj.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp93pz_erc.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp93pz_erc.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpynjd6p6o.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpynjd6p6o.jl:18\n\
    \   [4] top-level scope at /tmp/tmpynjd6p6o.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpynjd6p6o.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpynjd6p6o.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpynjd6p6o.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpynjd6p6o.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpynjd6p6o.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpynjd6p6o.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpynjd6p6o.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpynjd6p6o.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpynjd6p6o.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpynjd6p6o.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpynjd6p6o.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpynjd6p6o.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpynjd6p6o.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpynjd6p6o.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps8v_7zdq.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps8v_7zdq.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nThis does not answer the question. OP asked how to round the numbers\
    \ to their ceiling first. Your solution rounds them to the nearest integer.\n\
    <|/ c |>\n<| c |>\nThe question was how to round the numbers to their ceiling\
    \ first. Your solution rounds them to the nearest integer. My solution rounds\
    \ them to the nearest integer.\n<|/ c |>\n<| c |>\nThe question was how to round\
    \ the numbers to their ceiling first. Your solution rounds them to the nearest\
    \ integer. My solution rounds them to the nearest integer.\n<|/ c |>\n<| c |>\n\
    The question was how to round the numbers to their ceiling first. Your solution\
    \ rounds them to the nearest integer. My solution rounds them to the nearest integer.\n\
    <|/ c |>\n<| c |>\nThe question was how to round the numbers to their ceiling\
    \ first. Your solution rounds them to the nearest integer. My solution rounds\
    \ them to the nearest integer.\n<|/ c |>\n<| a |>\nThe answer by is correct but\
    \ can be simplified a bit:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7qwri7rx.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7qwri7rx.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu2wluju2.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpu2wluju2.jl:18\n\
    \   [4] top-level scope at /tmp/tmpu2wluju2.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu2wluju2.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpu2wluju2.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpu2wluju2.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpu2wluju2.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu2wluju2.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpu2wluju2.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpu2wluju2.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpu2wluju2.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu2wluju2.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpu2wluju2.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpu2wluju2.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpu2wluju2.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu2wluju2.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu2wluju2.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0clnxdlk.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp0clnxdlk.jl:18\n\
    \   [4] top-level scope at /tmp/tmp0clnxdlk.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp0clnxdlk.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp0clnxdlk.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp0clnxdlk.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp0clnxdlk.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp0clnxdlk.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp0clnxdlk.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp0clnxdlk.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp0clnxdlk.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp0clnxdlk.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp0clnxdlk.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp0clnxdlk.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp0clnxdlk.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp0clnxdlk.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0clnxdlk.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptjze735x.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmptjze735x.jl:18\n\
    \   [4] top-level scope at /tmp/tmptjze735x.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmptjze735x.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmptjze735x.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmptjze735x.jl:18\n   [4] top-level\
    \ scope at /tmp/tmptjze735x.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmptjze735x.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmptjze735x.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmptjze735x.jl:18\n   [4] top-level\
    \ scope at /tmp/tmptjze735x.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmptjze735x.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmptjze735x.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmptjze735x.jl:18\n   [4] top-level\
    \ scope at /tmp/tmptjze735x.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmptjze735x.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptjze735x.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<text>\n\
    Exercise 2\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppsh2vrk3.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppsh2vrk3.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the square root of\
    \ a number. \nThe function should take in a single number as input.\nThe function\
    \ should return the square root of the number as output.\nExamples:\nFor number\
    \ = 2, the output should be 1.414\nFor number = 5, the output should be 2.8284\n\
    For number = 10, the output should be 5.3852\nFor number = 16, the output should\
    \ be 10.0000\nFor number = 25, the output should be 16.6667\nFor number = 100,\
    \ the output should be 100.0000\nFor number = 200, the output should be 200.0000\n\
    For number = 1001, the output should be 1001.0000\nFor number = 1002, the output\
    \ should be 1002.0000\nFor number = 1003, the output should be 1003.0000\nFor\
    \ number = 1004, the output should be 1004.0000\nFor number = 1005, the output\
    \ should be 1005.0000\nFor number = 1006, the output should be 1006.0000\nFor\
    \ number = 1007, the output should be 1007.0000\nFor number = 1008, the output\
    \ should be 1008.0000\nFor number = 1009, the output should be 1009.0000\nFor\
    \ number = 1010, the output should be 1010.0000\nFor number = 1011, the output\
    \ should be 1011.0000\nFor number = 1012, the output should be 1012.0000\nFor\
    \ number = 1013, the output should be 1013.0000\nFor number = 1014, the output\
    \ should be 1014.0000\nFor number = 1015, the output should be 1015.0000\nFor\
    \ number = 1016, the output should be 1016.0000\nFor number = 1017, the output\
    \ should be 1017.0000\nFor number = 1018, the output should be 1018.0000\nFor\
    \ number = 1019, the output should be 1019.0000\nFor number = 1020, the output\
    \ should be 1020.0000\nFor number = 1021, the output should be 1021.0000\nFor\
    \ number = 1022, the output should be 1022.0000\nFor number = 1023, the output\
    \ should be 1023.0000\nFor number = 1024, the output should be 1024.0000\nFor\
    \ number = 1025, the output should be 1025.0000\nFor number = 1026, the output\
    \ should be 1026.0000\nFor number = 10\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl013mtn6.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl013mtn6.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkzy67ee_.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpkzy67ee_.jl:18\n\
    \   [4] top-level scope at /tmp/tmpkzy67ee_.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpkzy67ee_.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkzy67ee_.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpkzy67ee_.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpkzy67ee_.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpkzy67ee_.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkzy67ee_.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpkzy67ee_.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpkzy67ee_.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpkzy67ee_.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkzy67ee_.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpkzy67ee_.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpkzy67ee_.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpkzy67ee_.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkzy67ee_.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6azfq5xi.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp6azfq5xi.jl:18\n\
    \   [4] top-level scope at /tmp/tmp6azfq5xi.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6azfq5xi.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp6azfq5xi.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp6azfq5xi.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp6azfq5xi.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6azfq5xi.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp6azfq5xi.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp6azfq5xi.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp6azfq5xi.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6azfq5xi.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp6azfq5xi.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp6azfq5xi.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp6azfq5xi.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6azfq5xi.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6azfq5xi.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum = sum + i*i\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzvsysd1z.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpzvsysd1z.jl:18\n\
    \   [4] top-level scope at /tmp/tmpzvsysd1z.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzvsysd1z.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpzvsysd1z.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpzvsysd1z.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpzvsysd1z.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzvsysd1z.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpzvsysd1z.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpzvsysd1z.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpzvsysd1z.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzvsysd1z.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpzvsysd1z.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpzvsysd1z.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpzvsysd1z.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzvsysd1z.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzvsysd1z.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.3>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.3>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.3>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 3\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9sqsmv06.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9sqsmv06.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nProblem 7: Write a function that returns the number of elements\
    \ in a vector that are less than a given value.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp34b26uje.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp34b26uje.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the square root of\
    \ a number. \nThe function should take in a single number as input, and output\
    \ the square root of that number. \nThe function should raise an error if the\
    \ input is not a number.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqgj_qnp6.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqgj_qnp6.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp11t3av5j.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp11t3av5j.jl:18\n\
    \   [4] top-level scope at /tmp/tmp11t3av5j.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp11t3av5j.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp11t3av5j.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp11t3av5j.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp11t3av5j.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp11t3av5j.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp11t3av5j.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp11t3av5j.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp11t3av5j.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp11t3av5j.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp11t3av5j.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp11t3av5j.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp11t3av5j.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp11t3av5j.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp11t3av5j.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector as input and\
    \ returns the sum of the squares of the elements in the vector\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_f_euiky.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_f_euiky.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6nqju9_r.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp6nqju9_r.jl:18\n\
    \   [4] top-level scope at /tmp/tmp6nqju9_r.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6nqju9_r.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nqju9_r.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp6nqju9_r.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp6nqju9_r.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6nqju9_r.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nqju9_r.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp6nqju9_r.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp6nqju9_r.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6nqju9_r.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nqju9_r.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp6nqju9_r.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp6nqju9_r.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6nqju9_r.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6nqju9_r.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of numbers in a given vector.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplu_y3uhs.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplu_y3uhs.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv5hhnokl.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpv5hhnokl.jl:18\n\
    \   [4] top-level scope at /tmp/tmpv5hhnokl.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpv5hhnokl.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpv5hhnokl.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpv5hhnokl.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpv5hhnokl.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpv5hhnokl.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpv5hhnokl.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpv5hhnokl.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpv5hhnokl.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpv5hhnokl.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpv5hhnokl.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpv5hhnokl.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpv5hhnokl.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpv5hhnokl.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv5hhnokl.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum = sum + i^2\n    end\n    return sum\nend\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis doesn't round the numbers to the ceiling first\n<|/ c |>\n<| c |>\n\
    The question was about rounding numbers to the ceiling first. Your solution doesn't\
    \ do that.\n<|/ c |>\n<| c |>\nThe question was about rounding numbers to the\
    \ ceiling first. Your solution doesn't do that.\n<|/ c |>\n<| c |>\nThe question\
    \ was about rounding numbers to the ceiling first. Your solution doesn't do that.\n\
    <|/ c |>\n<| c |>\nThe question was about rounding numbers to the ceiling first.\
    \ Your solution doesn't do that.\n<|/ c |>\n<| a tags=julia,rounding |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi5sy9qex.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi5sy9qex.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpox9uvppp.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpox9uvppp.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum = sum + x^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp28vg4_s6.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp28vg4_s6.jl:18\n\
    \   [4] top-level scope at /tmp/tmp28vg4_s6.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp28vg4_s6.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp28vg4_s6.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp28vg4_s6.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp28vg4_s6.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp28vg4_s6.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp28vg4_s6.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp28vg4_s6.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp28vg4_s6.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp28vg4_s6.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp28vg4_s6.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp28vg4_s6.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp28vg4_s6.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp28vg4_s6.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp28vg4_s6.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp23alqabi.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp23alqabi.jl:18\n\
    \   [4] top-level scope at /tmp/tmp23alqabi.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp23alqabi.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp23alqabi.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp23alqabi.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp23alqabi.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp23alqabi.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp23alqabi.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp23alqabi.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp23alqabi.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp23alqabi.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp23alqabi.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp23alqabi.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp23alqabi.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp23alqabi.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp23alqabi.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the product of all\
    \ the numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmpjb_lwe.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmpjb_lwe.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr2nqvjqu.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr2nqvjqu.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfpsbef8o.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpfpsbef8o.jl:18\n\
    \   [4] top-level scope at /tmp/tmpfpsbef8o.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpfpsbef8o.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpfpsbef8o.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpfpsbef8o.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpfpsbef8o.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpfpsbef8o.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpfpsbef8o.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpfpsbef8o.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpfpsbef8o.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpfpsbef8o.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpfpsbef8o.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpfpsbef8o.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpfpsbef8o.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpfpsbef8o.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfpsbef8o.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprw9hjal6.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmprw9hjal6.jl:18\n\
    \   [4] top-level scope at /tmp/tmprw9hjal6.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmprw9hjal6.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmprw9hjal6.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmprw9hjal6.jl:18\n   [4] top-level\
    \ scope at /tmp/tmprw9hjal6.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmprw9hjal6.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmprw9hjal6.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmprw9hjal6.jl:18\n   [4] top-level\
    \ scope at /tmp/tmprw9hjal6.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmprw9hjal6.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmprw9hjal6.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmprw9hjal6.jl:18\n   [4] top-level\
    \ scope at /tmp/tmprw9hjal6.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmprw9hjal6.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprw9hjal6.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-2.4,1,1])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the first n integers in the given list.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvhmvj9ue.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvhmvj9ue.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that satisfy a certain condition. \nFor example, for the list [1,2,3,4,5,6,7,8,9]\
    \ the function should return 3 because there are 3 elements in the list that satisfy\
    \ the condition: x>5.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphe9zoo0p.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphe9zoo0p.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaca26hpw.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpaca26hpw.jl:18\n\
    \   [4] top-level scope at /tmp/tmpaca26hpw.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpaca26hpw.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpaca26hpw.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpaca26hpw.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpaca26hpw.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpaca26hpw.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpaca26hpw.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpaca26hpw.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpaca26hpw.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpaca26hpw.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpaca26hpw.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpaca26hpw.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpaca26hpw.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpaca26hpw.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaca26hpw.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=julia,function,list |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp25aorv8l.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp25aorv8l.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2nybh3r5.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp2nybh3r5.jl:18\n\
    \   [4] top-level scope at /tmp/tmp2nybh3r5.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp2nybh3r5.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp2nybh3r5.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp2nybh3r5.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp2nybh3r5.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp2nybh3r5.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp2nybh3r5.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp2nybh3r5.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp2nybh3r5.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp2nybh3r5.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp2nybh3r5.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp2nybh3r5.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp2nybh3r5.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp2nybh3r5.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2nybh3r5.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphrjpj1m5.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphrjpj1m5.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the squares\
    \ of the first n numbers in a list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn_09pac3.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn_09pac3.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsel7e7bf.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsel7e7bf.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the product of all\
    \ the numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp23k6va14.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp23k6va14.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphbjlmz7_.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphbjlmz7_.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the squares\
    \ of the first n positive integers. \nExamples:\nFor n = 5 the output should be\
    \ 25\nFor n = 6 the output should be 49\nFor n = 7 the output should be 81\nFor\
    \ n = 8 the output should be 987\nFor n = 9 the output should be 991\nFor n =\
    \ 10 the output should be 1010\nFor n = 11 the output should be 1011\nFor n =\
    \ 12 the output should be 1012\nFor n = 13 the output should be 1013\nFor n =\
    \ 14 the output should be 1014\nFor n = 15 the output should be 1015\nFor n =\
    \ 16 the output should be 1016\nFor n = 17 the output should be 1017\nFor n =\
    \ 18 the output should be 1018\nFor n = 19 the output should be 1019\nFor n =\
    \ 20 the output should be 1020\nFor n = 21 the output should be 1021\nFor n =\
    \ 22 the output should be 1022\nFor n = 23 the output should be 1023\nFor n =\
    \ 24 the output should be 1024\nFor n = 25 the output should be 1025\nFor n =\
    \ 26 the output should be 1026\nFor n = 27 the output should be 1027\nFor n =\
    \ 28 the output should be 1028\nFor n = 29 the output should be 1029\nFor n =\
    \ 30 the output should be 1030\nFor n = 31 the output should be 1031\nFor n =\
    \ 41 the output should be 1041\nFor n = 42 the output should be 1042\nFor n =\
    \ 43 the output should be 1043\nFor n = 44 the output should be 1044\nFor n =\
    \ 45 the output should be 1045\nFor n = 46 the output should be 1046\nFor n =\
    \ 47 the output should be 1047\nFor n = 48 the output should be 1048\nFor n =\
    \ 49 the output should be 1049\nFor n = 50 the output should be 1050\nFor n =\
    \ 51 the output should be 1051\nFor n = 52 the output should be 1052\nFor n =\
    \ 53 the output should be 1053\nFor n = 54 the output should be 1054\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8zvbc7bw.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8zvbc7bw.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7n9eqfwx.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp7n9eqfwx.jl:18\n\
    \   [4] top-level scope at /tmp/tmp7n9eqfwx.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp7n9eqfwx.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7n9eqfwx.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp7n9eqfwx.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp7n9eqfwx.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp7n9eqfwx.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7n9eqfwx.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp7n9eqfwx.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp7n9eqfwx.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp7n9eqfwx.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7n9eqfwx.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp7n9eqfwx.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp7n9eqfwx.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp7n9eqfwx.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7n9eqfwx.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the square root of\
    \ a number.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfi914ewv.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfi914ewv.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1ip4td0z.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp1ip4td0z.jl:18\n\
    \   [4] top-level scope at /tmp/tmp1ip4td0z.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp1ip4td0z.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp1ip4td0z.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp1ip4td0z.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp1ip4td0z.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp1ip4td0z.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp1ip4td0z.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp1ip4td0z.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp1ip4td0z.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp1ip4td0z.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp1ip4td0z.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp1ip4td0z.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp1ip4td0z.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp1ip4td0z.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ip4td0z.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp27of9h1r.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp27of9h1r.jl:18\n\
    \   [4] top-level scope at /tmp/tmp27of9h1r.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp27of9h1r.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp27of9h1r.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp27of9h1r.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp27of9h1r.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp27of9h1r.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp27of9h1r.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp27of9h1r.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp27of9h1r.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp27of9h1r.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp27of9h1r.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp27of9h1r.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp27of9h1r.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp27of9h1r.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp27of9h1r.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnwsdyif_.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpnwsdyif_.jl:18\n\
    \   [4] top-level scope at /tmp/tmpnwsdyif_.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpnwsdyif_.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpnwsdyif_.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpnwsdyif_.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpnwsdyif_.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpnwsdyif_.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpnwsdyif_.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpnwsdyif_.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpnwsdyif_.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpnwsdyif_.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpnwsdyif_.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpnwsdyif_.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpnwsdyif_.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpnwsdyif_.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnwsdyif_.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the square root of a number.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp0kxotpu.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp0kxotpu.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=julia,list |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphot61szm.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphot61szm.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgky82rmh.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgky82rmh.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpat2oc_8c.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpat2oc_8c.jl:18\n\
    \   [4] top-level scope at /tmp/tmpat2oc_8c.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpat2oc_8c.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpat2oc_8c.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpat2oc_8c.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpat2oc_8c.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpat2oc_8c.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpat2oc_8c.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpat2oc_8c.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpat2oc_8c.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpat2oc_8c.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpat2oc_8c.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpat2oc_8c.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpat2oc_8c.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpat2oc_8c.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpat2oc_8c.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwrrtj7yr.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpwrrtj7yr.jl:18\n\
    \   [4] top-level scope at /tmp/tmpwrrtj7yr.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpwrrtj7yr.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpwrrtj7yr.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpwrrtj7yr.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpwrrtj7yr.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpwrrtj7yr.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpwrrtj7yr.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpwrrtj7yr.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpwrrtj7yr.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpwrrtj7yr.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpwrrtj7yr.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpwrrtj7yr.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpwrrtj7yr.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpwrrtj7yr.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwrrtj7yr.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3e0jbx9k.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp3e0jbx9k.jl:18\n\
    \   [4] top-level scope at /tmp/tmp3e0jbx9k.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp3e0jbx9k.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp3e0jbx9k.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp3e0jbx9k.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp3e0jbx9k.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp3e0jbx9k.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp3e0jbx9k.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp3e0jbx9k.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp3e0jbx9k.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp3e0jbx9k.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp3e0jbx9k.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp3e0jbx9k.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp3e0jbx9k.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp3e0jbx9k.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3e0jbx9k.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprjp6zylq.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmprjp6zylq.jl:18\n\
    \   [4] top-level scope at /tmp/tmprjp6zylq.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmprjp6zylq.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmprjp6zylq.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmprjp6zylq.jl:18\n   [4] top-level\
    \ scope at /tmp/tmprjp6zylq.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmprjp6zylq.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmprjp6zylq.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmprjp6zylq.jl:18\n   [4] top-level\
    \ scope at /tmp/tmprjp6zylq.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmprjp6zylq.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmprjp6zylq.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmprjp6zylq.jl:18\n   [4] top-level\
    \ scope at /tmp/tmprjp6zylq.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmprjp6zylq.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprjp6zylq.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpumg4vwjr.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpumg4vwjr.jl:18\n\
    \   [4] top-level scope at /tmp/tmpumg4vwjr.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpumg4vwjr.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpumg4vwjr.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpumg4vwjr.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpumg4vwjr.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpumg4vwjr.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpumg4vwjr.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpumg4vwjr.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpumg4vwjr.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpumg4vwjr.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpumg4vwjr.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpumg4vwjr.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpumg4vwjr.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpumg4vwjr.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpumg4vwjr.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-10,-5,0,5,10])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([-10,-5,0,5,10])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-10,-5,0,5,10])\n</cell>\n<code language=julia-1.5>\nsum_squares([-10,-5,0,5,10])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-10,-5,0,5,10])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([-10,-5,0,5,10])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-10,-5,0,5,10])\n</cell>\n<code language=julia-1.5>\nsum_squares([-10,-5,0,5,10])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-10,-5,0,5,10])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([-10,-5,0,5,10])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-10,-5,0,5,10])\n</cell>\n<code language=julia-1.5>\nsum_squares([-10,-5,0,5,10])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-10,-5,0,5,10])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([-10,-5,0,5,10])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-10,-5,0,5,10])\n</cell>\n<code language=julia-1.5>\nsum_squares([-10,-5,0,5,10])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-10,-5,0,5,10])\n</cell\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc02kw4i6.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc02kw4i6.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list. \nThe function should\
    \ round the sum to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3]\
    \ the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst\
    \ = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should\
    \ be 29\nFor lst = [-2.4,1,1] the output should be 6\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9bt1pufp.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9bt1pufp.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis does not answer the question. The question asks for an efficient\
    \ way to compute the sum of the squares of numbers in a vector, not the sum of\
    \ the squares of the numbers in the vector.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ my answer is not the most efficient one, but I thought it would be a good starting\
    \ point to understand the concept of vectorization. Thanks for your comment!\n\
    <|/ c |>\n<| c |>\nI agree with you, my answer is not the most efficient one,\
    \ but I thought it would be a good starting point to understand the concept of\
    \ vectorization. Thanks for your comment!\n<|/ c |>\n<| a |>\nThe most efficient\
    \ way is to use broadcasting - \n<code>\njulia> function sum_squares(lst::Vector{Float64})::Int64\n\
    \           return sum(lst*lst)\n       end\nsum_squares (generic function with\
    \ 1 method)\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp9ky3i0a.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp9ky3i0a.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the maximum of a list\
    \ of numbers.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyhp6uv9s.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyhp6uv9s.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplsnbapnn.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmplsnbapnn.jl:18\n\
    \   [4] top-level scope at /tmp/tmplsnbapnn.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmplsnbapnn.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmplsnbapnn.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmplsnbapnn.jl:18\n   [4] top-level\
    \ scope at /tmp/tmplsnbapnn.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmplsnbapnn.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmplsnbapnn.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmplsnbapnn.jl:18\n   [4] top-level\
    \ scope at /tmp/tmplsnbapnn.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmplsnbapnn.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmplsnbapnn.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmplsnbapnn.jl:18\n   [4] top-level\
    \ scope at /tmp/tmplsnbapnn.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmplsnbapnn.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplsnbapnn.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7azi25uq.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp7azi25uq.jl:18\n\
    \   [4] top-level scope at /tmp/tmp7azi25uq.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp7azi25uq.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7azi25uq.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp7azi25uq.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp7azi25uq.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp7azi25uq.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7azi25uq.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp7azi25uq.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp7azi25uq.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp7azi25uq.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7azi25uq.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp7azi25uq.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp7azi25uq.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp7azi25uq.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7azi25uq.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that satisfy a given condition. For example, if the condition is that\
    \ all elements in the list are positive, then the function should return 3 for\
    \ lst = [1,2,3].\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) ==\
    \ 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzyxrogoz.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzyxrogoz.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the product of all\
    \ the numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9hlpyqwx.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9hlpyqwx.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8ovh5x6g.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp8ovh5x6g.jl:18\n\
    \   [4] top-level scope at /tmp/tmp8ovh5x6g.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp8ovh5x6g.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp8ovh5x6g.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp8ovh5x6g.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp8ovh5x6g.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp8ovh5x6g.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp8ovh5x6g.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp8ovh5x6g.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp8ovh5x6g.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp8ovh5x6g.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp8ovh5x6g.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp8ovh5x6g.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp8ovh5x6g.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp8ovh5x6g.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ovh5x6g.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxps_m5r9.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpxps_m5r9.jl:18\n\
    \   [4] top-level scope at /tmp/tmpxps_m5r9.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpxps_m5r9.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpxps_m5r9.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpxps_m5r9.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpxps_m5r9.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpxps_m5r9.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpxps_m5r9.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpxps_m5r9.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpxps_m5r9.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpxps_m5r9.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpxps_m5r9.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpxps_m5r9.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpxps_m5r9.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpxps_m5r9.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxps_m5r9.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=julia,list |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp461uxwq4.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp461uxwq4.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the square root of\
    \ a number. \nThe function should take one argument, x, and return the square\
    \ root of x.\nExamples:\nFor x = 2, the function should return 1.414\nFor x =\
    \ -2, the function should return -1.414\nFor x = 0, the function should return\
    \ 0\nFor x = 1, the function should return 1\nFor x = 1.5, the function should\
    \ return 1.414\nFor x = -1.5, the function should return -1.414\nFor x = 1.5,\
    \ the function should return 1.414\nFor x = -1.5, the function should return -1.414\n\
    For x = 100, the function should return 100.00\nFor x = -100, the function should\
    \ return -100.00\nFor x = -1000, the function should return -1000\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5s407s5r.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5s407s5r.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum = sum + i^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,-2,3,5])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,-2,3,5])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,-2,3,5])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,-2,3,5])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,-2,3,5])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,-2,3,5])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,-2,3,5])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,-2,3,5])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,-2,3,5])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,-2,3,5])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,-2,3,5])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,-2,3,5])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,-2,3,5])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,-2,3,5])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,-2,3,5])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,-2,3,5])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,-2,3,5])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,-2,3,5])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,-2,3,5])\n</cell>\n<code language=julia-1.0>\n\
    sum_s\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwc3k8y87.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwc3k8y87.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the square root of\
    \ a number. \nThe function should take one argument and return a Float64 number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4_gvk9lr.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4_gvk9lr.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzu8wpr1k.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpzu8wpr1k.jl:18\n\
    \   [4] top-level scope at /tmp/tmpzu8wpr1k.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzu8wpr1k.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpzu8wpr1k.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpzu8wpr1k.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpzu8wpr1k.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzu8wpr1k.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpzu8wpr1k.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpzu8wpr1k.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpzu8wpr1k.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzu8wpr1k.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpzu8wpr1k.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpzu8wpr1k.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpzu8wpr1k.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzu8wpr1k.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzu8wpr1k.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpru5wdaol.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpru5wdaol.jl:18\n\
    \   [4] top-level scope at /tmp/tmpru5wdaol.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpru5wdaol.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpru5wdaol.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpru5wdaol.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpru5wdaol.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpru5wdaol.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpru5wdaol.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpru5wdaol.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpru5wdaol.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpru5wdaol.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpru5wdaol.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpru5wdaol.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpru5wdaol.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpru5wdaol.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpru5wdaol.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers and\
    \ returns the product of the numbers in the list. \nThe function should round\
    \ each number in the list to the upper int(Ceiling) first.\nExamples:\nFor lst\
    \ = [1,2,3] the output should be 6\nFor lst = [1,4,9] the output should be 27\n\
    For lst = [1,3,5,7] the output should be 142\nFor lst = [1.4,4.2,0] the output\
    \ should be 24\nFor lst = [-2.4,1,1] the output should be -6\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3nrohgg_.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3nrohgg_.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxicmjrqf.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxicmjrqf.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj00_2x27.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj00_2x27.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector as input and\
    \ returns its mean value.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqtswhxtn.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqtswhxtn.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum = sum + i^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphxag_x_j.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmphxag_x_j.jl:18\n\
    \   [4] top-level scope at /tmp/tmphxag_x_j.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmphxag_x_j.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmphxag_x_j.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmphxag_x_j.jl:18\n   [4] top-level\
    \ scope at /tmp/tmphxag_x_j.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmphxag_x_j.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmphxag_x_j.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmphxag_x_j.jl:18\n   [4] top-level\
    \ scope at /tmp/tmphxag_x_j.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmphxag_x_j.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmphxag_x_j.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmphxag_x_j.jl:18\n   [4] top-level\
    \ scope at /tmp/tmphxag_x_j.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmphxag_x_j.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphxag_x_j.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the square root of\
    \ a number.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7iqo8ti6.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7iqo8ti6.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squ\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdueuxplx.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdueuxplx.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum = sum + i^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk2ruk6_l.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpk2ruk6_l.jl:18\n\
    \   [4] top-level scope at /tmp/tmpk2ruk6_l.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpk2ruk6_l.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpk2ruk6_l.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpk2ruk6_l.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpk2ruk6_l.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpk2ruk6_l.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpk2ruk6_l.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpk2ruk6_l.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpk2ruk6_l.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpk2ruk6_l.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpk2ruk6_l.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpk2ruk6_l.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpk2ruk6_l.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpk2ruk6_l.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk2ruk6_l.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis does not provide an answer to the question. Once you have sufficient\
    \ [reputation](https://stackoverflow.com/help/whats-reputation) you will be able\
    \ to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/27899814)\n<|/ c |>\n<| c |>\nI believe\
    \ this does answer the question. He asked how to round the numbers to the nearest\
    \ integer. He also asked how to round the numbers to the nearest integer. He also\
    \ asked how to round the numbers to the nearest integer. He also asked how to\
    \ round the numbers to the nearest integer. He also asked how to round the numbers\
    \ to the nearest integer. He also asked how to round the numbers to the nearest\
    \ integer. He also asked how to round the numbers to the nearest integer. He also\
    \ asked how to round the numbers to the nearest integer. He also asked how to\
    \ round the numbers to the nearest integer. He also asked how to round the numbers\
    \ to the nearest integer. He also asked how to round the numbers to the nearest\
    \ integer. He also asked how to round the numbers to the nearest integer. He also\
    \ asked how to round the numbers to the nearest integer. He also asked how to\
    \ round the numbers to the nearest integer. He also asked how to round the numbers\
    \ to the nearest integer. He also asked how to round the numbers to the nearest\
    \ integer. He also asked how to round the numbers to the nearest integer. He also\
    \ asked how to round the numbers to the nearest integer. He also asked how to\
    \ round the numbers to the nearest integer. He also asked how to round the numbers\
    \ to the nearest integer. He also asked how to round the numbers to the nearest\
    \ integer. He also asked how to round the numbers to the nearest integer. He also\
    \ asked how to round the numbers to the nearest integer. He also asked how to\
    \ round the numbers to the nearest integer. He also asked how to round the numbers\
    \ to the nearest integer. He also asked how to round the numbers to the nearest\
    \ integer. He also asked how to round the numbers to the nearest integer. He \n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq9mgroo0.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq9mgroo0.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxbmrotxz.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpxbmrotxz.jl:18\n\
    \   [4] top-level scope at /tmp/tmpxbmrotxz.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpxbmrotxz.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpxbmrotxz.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpxbmrotxz.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpxbmrotxz.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpxbmrotxz.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpxbmrotxz.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpxbmrotxz.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpxbmrotxz.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpxbmrotxz.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpxbmrotxz.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpxbmrotxz.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpxbmrotxz.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpxbmrotxz.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxbmrotxz.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf7bphuj9.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpf7bphuj9.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf7bphuj9.jl:24\ntest set: Test Failed at /tmp/tmpf7bphuj9.jl:29\n\
    \  Expression: candidate([-2.4, 1.0, 1.0]) == 6\n   Evaluated: 8 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf7bphuj9.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf7bphuj9.jl:24\ntest set: Test Failed at /tmp/tmpf7bphuj9.jl:32\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 63 == 75\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf7bphuj9.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf7bphuj9.jl:24\ntest set: Test Failed at /tmp/tmpf7bphuj9.jl:33\n\
    \  Expression: candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n   Evaluated: 1076\
    \ == 1086\nStacktrace:\n [1] top-level scope at /tmp/tmpf7bphuj9.jl:33\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf7bphuj9.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf7bphuj9.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpffjvtu7i.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpffjvtu7i.jl:18\n\
    \   [4] top-level scope at /tmp/tmpffjvtu7i.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpffjvtu7i.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpffjvtu7i.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpffjvtu7i.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpffjvtu7i.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpffjvtu7i.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpffjvtu7i.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpffjvtu7i.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpffjvtu7i.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpffjvtu7i.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpffjvtu7i.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpffjvtu7i.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpffjvtu7i.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpffjvtu7i.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpffjvtu7i.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf39ar54a.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpf39ar54a.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf39ar54a.jl:24\ntest set: Test Failed at /tmp/tmpf39ar54a.jl:29\n\
    \  Expression: candidate([-2.4, 1.0, 1.0]) == 6\n   Evaluated: 8 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf39ar54a.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf39ar54a.jl:24\ntest set: Test Failed at /tmp/tmpf39ar54a.jl:32\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 63 == 75\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf39ar54a.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf39ar54a.jl:24\ntest set: Test Failed at /tmp/tmpf39ar54a.jl:33\n\
    \  Expression: candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n   Evaluated: 1076\
    \ == 1086\nStacktrace:\n [1] top-level scope at /tmp/tmpf39ar54a.jl:33\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf39ar54a.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf39ar54a.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphw4gk3lx.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphw4gk3lx.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqm1__a6g.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpqm1__a6g.jl:18\n\
    \   [4] top-level scope at /tmp/tmpqm1__a6g.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpqm1__a6g.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpqm1__a6g.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpqm1__a6g.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpqm1__a6g.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpqm1__a6g.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpqm1__a6g.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpqm1__a6g.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpqm1__a6g.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpqm1__a6g.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpqm1__a6g.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpqm1__a6g.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpqm1__a6g.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpqm1__a6g.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqm1__a6g.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmponi5tvq8.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmponi5tvq8.jl:18\n\
    \   [4] top-level scope at /tmp/tmponi5tvq8.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmponi5tvq8.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmponi5tvq8.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmponi5tvq8.jl:18\n   [4] top-level\
    \ scope at /tmp/tmponi5tvq8.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmponi5tvq8.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmponi5tvq8.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmponi5tvq8.jl:18\n   [4] top-level\
    \ scope at /tmp/tmponi5tvq8.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmponi5tvq8.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmponi5tvq8.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmponi5tvq8.jl:18\n   [4] top-level\
    \ scope at /tmp/tmponi5tvq8.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmponi5tvq8.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmponi5tvq8.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp501026qa.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp501026qa.jl:18\n\
    \   [4] top-level scope at /tmp/tmp501026qa.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp501026qa.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp501026qa.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp501026qa.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp501026qa.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp501026qa.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp501026qa.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp501026qa.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp501026qa.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp501026qa.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp501026qa.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp501026qa.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp501026qa.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp501026qa.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp501026qa.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa05eumzf.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpa05eumzf.jl:18\n\
    \   [4] top-level scope at /tmp/tmpa05eumzf.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpa05eumzf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpa05eumzf.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpa05eumzf.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpa05eumzf.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpa05eumzf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpa05eumzf.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpa05eumzf.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpa05eumzf.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpa05eumzf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpa05eumzf.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpa05eumzf.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpa05eumzf.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpa05eumzf.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa05eumzf.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu4fnscwt.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpu4fnscwt.jl:18\n\
    \   [4] top-level scope at /tmp/tmpu4fnscwt.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu4fnscwt.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpu4fnscwt.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpu4fnscwt.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpu4fnscwt.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu4fnscwt.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpu4fnscwt.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpu4fnscwt.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpu4fnscwt.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu4fnscwt.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpu4fnscwt.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpu4fnscwt.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpu4fnscwt.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu4fnscwt.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu4fnscwt.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx_ev38ux.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpx_ev38ux.jl:18\n\
    \   [4] top-level scope at /tmp/tmpx_ev38ux.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpx_ev38ux.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpx_ev38ux.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpx_ev38ux.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpx_ev38ux.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpx_ev38ux.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpx_ev38ux.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpx_ev38ux.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpx_ev38ux.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpx_ev38ux.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpx_ev38ux.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpx_ev38ux.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpx_ev38ux.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpx_ev38ux.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx_ev38ux.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwi5rim5z.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpwi5rim5z.jl:18\n\
    \   [4] top-level scope at /tmp/tmpwi5rim5z.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpwi5rim5z.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpwi5rim5z.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpwi5rim5z.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpwi5rim5z.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpwi5rim5z.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpwi5rim5z.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpwi5rim5z.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpwi5rim5z.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpwi5rim5z.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpwi5rim5z.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpwi5rim5z.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpwi5rim5z.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpwi5rim5z.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwi5rim5z.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9wzserd7.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9wzserd7.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd19c3zy5.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpd19c3zy5.jl:18\n\
    \   [4] top-level scope at /tmp/tmpd19c3zy5.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpd19c3zy5.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpd19c3zy5.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpd19c3zy5.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpd19c3zy5.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpd19c3zy5.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpd19c3zy5.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpd19c3zy5.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpd19c3zy5.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpd19c3zy5.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpd19c3zy5.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpd19c3zy5.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpd19c3zy5.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpd19c3zy5.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd19c3zy5.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkoyx1xhq.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpkoyx1xhq.jl:18\n\
    \   [4] top-level scope at /tmp/tmpkoyx1xhq.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpkoyx1xhq.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkoyx1xhq.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpkoyx1xhq.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpkoyx1xhq.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpkoyx1xhq.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkoyx1xhq.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpkoyx1xhq.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpkoyx1xhq.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpkoyx1xhq.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkoyx1xhq.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpkoyx1xhq.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpkoyx1xhq.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpkoyx1xhq.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkoyx1xhq.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a vector of numbers\
    \ and returns the product of all the numbers in the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp77uu8drk.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp77uu8drk.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squ\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw0ot5ley.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw0ot5ley.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgejvftk1.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpgejvftk1.jl:18\n\
    \   [4] top-level scope at /tmp/tmpgejvftk1.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpgejvftk1.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpgejvftk1.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpgejvftk1.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpgejvftk1.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpgejvftk1.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpgejvftk1.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpgejvftk1.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpgejvftk1.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpgejvftk1.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpgejvftk1.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpgejvftk1.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpgejvftk1.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpgejvftk1.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgejvftk1.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf_ra99mt.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf_ra99mt.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that satisfy a certain condition\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplu1cls94.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplu1cls94.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-2.4,1,1])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-2.4,1,1])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-2.4,1,1])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb7easgax.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb7easgax.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyxy9juy8.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpyxy9juy8.jl:18\n\
    \   [4] top-level scope at /tmp/tmpyxy9juy8.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpyxy9juy8.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpyxy9juy8.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpyxy9juy8.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpyxy9juy8.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpyxy9juy8.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpyxy9juy8.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpyxy9juy8.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpyxy9juy8.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpyxy9juy8.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpyxy9juy8.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpyxy9juy8.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpyxy9juy8.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpyxy9juy8.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyxy9juy8.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpza2pvpl2.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpza2pvpl2.jl:18\n\
    \   [4] top-level scope at /tmp/tmpza2pvpl2.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpza2pvpl2.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpza2pvpl2.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpza2pvpl2.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpza2pvpl2.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpza2pvpl2.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpza2pvpl2.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpza2pvpl2.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpza2pvpl2.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpza2pvpl2.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpza2pvpl2.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpza2pvpl2.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpza2pvpl2.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpza2pvpl2.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpza2pvpl2.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsc26h50g.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpsc26h50g.jl:18\n\
    \   [4] top-level scope at /tmp/tmpsc26h50g.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpsc26h50g.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpsc26h50g.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpsc26h50g.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpsc26h50g.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpsc26h50g.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpsc26h50g.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpsc26h50g.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpsc26h50g.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpsc26h50g.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpsc26h50g.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpsc26h50g.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpsc26h50g.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpsc26h50g.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsc26h50g.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcpgfhdqr.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcpgfhdqr.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the mean of the numbers in the vector. \nThe mean should be rounded\
    \ to the nearest integer.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz9ngjxid.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz9ngjxid.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5_f_xpx3.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp5_f_xpx3.jl:18\n\
    \   [4] top-level scope at /tmp/tmp5_f_xpx3.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp5_f_xpx3.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp5_f_xpx3.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp5_f_xpx3.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp5_f_xpx3.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp5_f_xpx3.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp5_f_xpx3.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp5_f_xpx3.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp5_f_xpx3.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp5_f_xpx3.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp5_f_xpx3.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp5_f_xpx3.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp5_f_xpx3.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp5_f_xpx3.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5_f_xpx3.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum = sum + i^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz5fvei0i.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpz5fvei0i.jl:18\n\
    \   [4] top-level scope at /tmp/tmpz5fvei0i.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpz5fvei0i.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpz5fvei0i.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpz5fvei0i.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpz5fvei0i.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpz5fvei0i.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpz5fvei0i.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpz5fvei0i.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpz5fvei0i.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpz5fvei0i.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpz5fvei0i.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpz5fvei0i.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpz5fvei0i.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpz5fvei0i.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz5fvei0i.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn3nogdta.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn3nogdta.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_6szqzyt.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_6szqzyt.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the mean of the vector.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy1c8jigb.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy1c8jigb.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements.\nExamples:\nFor v = [1,2,3] the output\
    \ should be 14\nFor v = [1,4,9] the output should be 98\nFor v = [1,3,5,7] the\
    \ output should be 84\nFor v = [1.4,4.2,0] the output should be 29\nFor v = [-2.4,1,1]\
    \ the output should be 6\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp53vje_8d.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp53vje_8d.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmhq5yt1n.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpmhq5yt1n.jl:18\n\
    \   [4] top-level scope at /tmp/tmpmhq5yt1n.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpmhq5yt1n.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpmhq5yt1n.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpmhq5yt1n.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpmhq5yt1n.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpmhq5yt1n.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpmhq5yt1n.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpmhq5yt1n.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpmhq5yt1n.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpmhq5yt1n.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpmhq5yt1n.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpmhq5yt1n.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpmhq5yt1n.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpmhq5yt1n.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmhq5yt1n.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum = sum + i^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpticw04gq.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpticw04gq.jl:18\n\
    \   [4] top-level scope at /tmp/tmpticw04gq.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpticw04gq.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpticw04gq.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpticw04gq.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpticw04gq.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpticw04gq.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpticw04gq.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpticw04gq.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpticw04gq.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpticw04gq.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpticw04gq.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpticw04gq.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpticw04gq.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpticw04gq.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpticw04gq.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm02ldv1f.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpm02ldv1f.jl:18\n\
    \   [4] top-level scope at /tmp/tmpm02ldv1f.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpm02ldv1f.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpm02ldv1f.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpm02ldv1f.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpm02ldv1f.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpm02ldv1f.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpm02ldv1f.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpm02ldv1f.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpm02ldv1f.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpm02ldv1f.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpm02ldv1f.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpm02ldv1f.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpm02ldv1f.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpm02ldv1f.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm02ldv1f.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvk9us04n.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvk9us04n.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of elements\
    \ in a list that satisfy a given condition.\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjl019pp6.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjl019pp6.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphxlq0q4r.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmphxlq0q4r.jl:18\n\
    \   [4] top-level scope at /tmp/tmphxlq0q4r.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmphxlq0q4r.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmphxlq0q4r.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmphxlq0q4r.jl:18\n   [4] top-level\
    \ scope at /tmp/tmphxlq0q4r.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmphxlq0q4r.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmphxlq0q4r.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmphxlq0q4r.jl:18\n   [4] top-level\
    \ scope at /tmp/tmphxlq0q4r.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmphxlq0q4r.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmphxlq0q4r.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmphxlq0q4r.jl:18\n   [4] top-level\
    \ scope at /tmp/tmphxlq0q4r.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmphxlq0q4r.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphxlq0q4r.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first element of\
    \ a vector\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd9mgiu2w.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd9mgiu2w.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the squares\
    \ of the first n positive integers less than or equal to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx1d43lnk.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx1d43lnk.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work. `sum_squares([1.4, 4.2, 0])` returns `29` instead\
    \ of `6`.\n<|/ c |>\n<| c |>\nI edited my answer to fix the issue. Thanks for\
    \ pointing out!\n<|/ c |>\n<| a tags=julia,list |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplmfngi0m.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplmfngi0m.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| a dscore=2 |>\nIn Julia 1.3, you can use the sum function with a comprehension:\n\
    <code>\njulia> sum([x ^ 2 for x in 1:10])\n55\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| a dscore=2 |>\nIn Julia 1.3 you can use the sum function with a comprehension:\n\
    <code>\njulia> sum([x ^ 2 for x in 1:10])\n55\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| a tags=julia,list |>\nIn Julia 1.3 you can use the sum function with\
    \ a comprehension:\n<code>\njulia> sum([x ^ 2 for x in 1:10])\n55\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=1 |>\nIn Julia 1.3 you can use the sum function with\
    \ a comprehension:\n<code>\njulia> sum([x ^ 2 for x in 1:10])\n55\n</code>\n<|/\
    \ a tags=julia,list |>\n<| a dscore=1 |>\nIn Julia 1.3 you can use the sum function\
    \ with a comprehension:\n<code>\njulia> sum([x ^ 2 for x in 1:10])\n55\n</code>\n\
    <|/ a tags=julia,list |>\n<| a dscore=0 |>\nIn Julia 1.3 you can use the sum function\
    \ with a comprehension:\n<code>\njulia> sum([x ^ 2 for x in 1:10])\n55\n</code>\n\
    <|/ a tags=julia,list |>\n<| a tags=julia,list |>\nIn Julia 1.3 you can use the\
    \ sum function with a comprehension:\n<code>\njulia> sum([x ^ 2 for x in 1:10])\n\
    55\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nIn Julia 1.3 you can use the\
    \ sum function with a comprehension:\n<code>\njulia> sum([x ^ 2 for x in 1:10])\n\
    55\n</code>\n<|/ a tags=julia,list |>\n<| a |>\nIn Julia 1.3 you can use the sum\
    \ function with a comprehension:\n<code>\njulia> sum([x ^ 2 for x in 1:10])\n\
    55\n</code>\n<|/ a tags=julia,list dscore=0 |>\n<| a tags=julia,list |>\nIn Julia\
    \ 1.3 you can use the sum function with a comprehension:\n<code>\njulia> sum([x\
    \ ^ 2 for x in 1:10])\n55\n</code>\n<|/ a dscore=0 |>\n<| a \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvomxpwks.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvomxpwks.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvsxqlupy.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpvsxqlupy.jl:18\n\
    \   [4] top-level scope at /tmp/tmpvsxqlupy.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpvsxqlupy.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpvsxqlupy.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpvsxqlupy.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpvsxqlupy.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpvsxqlupy.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpvsxqlupy.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpvsxqlupy.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpvsxqlupy.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpvsxqlupy.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpvsxqlupy.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpvsxqlupy.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpvsxqlupy.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpvsxqlupy.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvsxqlupy.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkng5t11y.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkng5t11y.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the maximum of a list\
    \ of numbers.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp15zktrqg.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp15zktrqg.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu932mw0w.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu932mw0w.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphdu0huw9.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphdu0huw9.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of positive\
    \ integers less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp86tjumr0.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp86tjumr0.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpif9ac9jx.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpif9ac9jx.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the product of numbers\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpip96627g.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpip96627g.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nThis doesn't answer the question, which is about rounding each element\
    \ in the list to the upper int(Ceiling) first.\n<|/ c |>\n<| a dscore=2 |>\nThe\
    \ answer by is correct, but I wanted to add some explanation as to why it works.\n\
    The reason why it works is because Julia is vectorized. When you write for i in\
    \ lst, Julia will automatically loop through each element in the array and perform\
    \ the operation on each element. \nThe reason why it works is because Julia is\
    \ vectorized. The reason why it works is because Julia is vectorized. The reason\
    \ why it works is because Julia is vectorized. The reason why it works is because\
    \ Julia is vectorized. The reason why it works is because Julia is vectorized.\
    \ The reason why it works is because Julia is vectorized. The reason why it works\
    \ is because Julia is vectorized. The reason why it works is because Julia is\
    \ vectorized. The reason why it works is because Julia is vectorized. The reason\
    \ why it works is because Julia is vectorized. The reason why it works is because\
    \ Julia is vectorized. The reason why it works is because Julia is vectorized.\
    \ The reason why it works is because Julia is vectorized. The reason why it works\
    \ is because Julia is vectorized. The reason why it works is because Julia is\
    \ vectorized. The reason why it works is because Julia is vectorized. The reason\
    \ why it works is because Julia is vectorized. The reason why it works is because\
    \ Julia is vectorized. The reason why it works is because Julia is vectorized.\
    \ The reason why it works is because Julia is vectorized. The reason why it works\
    \ is because Julia is vectorized. The reason why it works is because Julia is\
    \ vectorized. The reason why it works is because Julia is vectorized. The reason\
    \ why it works is because Julia is vectorized. The reason why it works is because\
    \ Julia is vectorized. The reason why it works is because Julia is vectorized.\
    \ The reason why it works is because Julia is vectorized. The reason why it works\
    \ is because Julia is vectorized. The reason why it works is because Julia is\
    \ vectorized. The reason why it works is because Julia is vectorized. The reason\
    \ why it works is because Julia is vectorized. The reason why it works is because\
    \ Julia is vectorized. The \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptp3r5yfw.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptp3r5yfw.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw2kqmkdh.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw2kqmkdh.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 3\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa5qg2pa1.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa5qg2pa1.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqzjns21p.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpqzjns21p.jl:18\n\
    \   [4] top-level scope at /tmp/tmpqzjns21p.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpqzjns21p.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpqzjns21p.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpqzjns21p.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpqzjns21p.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpqzjns21p.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpqzjns21p.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpqzjns21p.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpqzjns21p.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpqzjns21p.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpqzjns21p.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpqzjns21p.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpqzjns21p.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpqzjns21p.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqzjns21p.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squ\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp21lxcipj.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp21lxcipj.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return round(sum)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkugu2nay.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpkugu2nay.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkugu2nay.jl:24\ntest set: Test Failed at /tmp/tmpkugu2nay.jl:29\n\
    \  Expression: candidate([-2.4, 1.0, 1.0]) == 6\n   Evaluated: 8 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkugu2nay.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkugu2nay.jl:24\ntest set: Test Failed at /tmp/tmpkugu2nay.jl:32\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 63 == 75\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkugu2nay.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkugu2nay.jl:24\ntest set: Test Failed at /tmp/tmpkugu2nay.jl:33\n\
    \  Expression: candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n   Evaluated: 1076\
    \ == 1086\nStacktrace:\n [1] top-level scope at /tmp/tmpkugu2nay.jl:33\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkugu2nay.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkugu2nay.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmproylqzbs.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmproylqzbs.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the maximum of a given\
    \ list of numbers. \nThe function should take a list of numbers as an argument\
    \ and return the maximum number in the list.\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphvoaom8e.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphvoaom8e.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1.4,4.2,0])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector as input and returns the dot\
    \ product of the vectors.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppmww22ep.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppmww22ep.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 3\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpry2ne12v.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpry2ne12v.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nThis does not answer the question. OP wants to round the numbers to the\
    \ nearest integer.\n<|/ c |>\n<| c |>\nI agree with you. My answer was to give\
    \ a hint on how to solve the problem and to give a hint on how to solve the problem\
    \ in general. Your answer is more elegant and more general. Thanks for your comment.\n\
    <|/ c |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp28eyuvvq.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp28eyuvvq.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first element of\
    \ a list\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa_pmoiqw.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa_pmoiqw.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb368u8ld.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpb368u8ld.jl:18\n\
    \   [4] top-level scope at /tmp/tmpb368u8ld.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpb368u8ld.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpb368u8ld.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpb368u8ld.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpb368u8ld.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpb368u8ld.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpb368u8ld.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpb368u8ld.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpb368u8ld.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpb368u8ld.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpb368u8ld.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpb368u8ld.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpb368u8ld.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpb368u8ld.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb368u8ld.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the product of all\
    \ the numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp70p6wktq.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp70p6wktq.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nProblem 7: Write a function that returns the product of numbers\
    \ in a given list.\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst\
    \ = [1,4,9] the output should be 144\nFor lst = [1,3,5,7] the output should be\
    \ 1425\nFor lst = [1.4,4.2,0] the output should be 24.0\nFor lst = [-2.4,1,1]\
    \ the output should be -6.0\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2tj9eawm.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2tj9eawm.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_x3yedkk.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_x3yedkk.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a vector of numbers\
    \ and returns the sum of the squares of the even numbers in the vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl1ph8jhx.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl1ph8jhx.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzawla4up.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpzawla4up.jl:18\n\
    \   [4] top-level scope at /tmp/tmpzawla4up.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzawla4up.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpzawla4up.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpzawla4up.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpzawla4up.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzawla4up.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpzawla4up.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpzawla4up.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpzawla4up.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzawla4up.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpzawla4up.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpzawla4up.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpzawla4up.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzawla4up.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzawla4up.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| a tags=julia,list |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpedxr3lfe.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpedxr3lfe.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxuzzceff.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxuzzceff.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=julia,list |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1wby1i51.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1wby1i51.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the first n integers in the given list.\nExamples:\nFor lst = [1,2,3] the\
    \ output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7]\
    \ the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor\
    \ lst = [-2.4,1,1] the output should be 6\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3tq_rg1e.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3tq_rg1e.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squ\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpryl87fxq.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpryl87fxq.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2g4mikhw.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp2g4mikhw.jl:18\n\
    \   [4] top-level scope at /tmp/tmp2g4mikhw.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp2g4mikhw.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp2g4mikhw.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp2g4mikhw.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp2g4mikhw.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp2g4mikhw.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp2g4mikhw.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp2g4mikhw.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp2g4mikhw.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp2g4mikhw.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp2g4mikhw.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp2g4mikhw.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp2g4mikhw.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp2g4mikhw.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2g4mikhw.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa0it_gqy.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpa0it_gqy.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa0it_gqy.jl:24\ntest set: Test Failed at /tmp/tmpa0it_gqy.jl:29\n\
    \  Expression: candidate([-2.4, 1.0, 1.0]) == 6\n   Evaluated: 8 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa0it_gqy.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa0it_gqy.jl:24\ntest set: Test Failed at /tmp/tmpa0it_gqy.jl:32\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 63 == 75\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa0it_gqy.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa0it_gqy.jl:24\ntest set: Test Failed at /tmp/tmpa0it_gqy.jl:33\n\
    \  Expression: candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n   Evaluated: 1076\
    \ == 1086\nStacktrace:\n [1] top-level scope at /tmp/tmpa0it_gqy.jl:33\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa0it_gqy.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa0it_gqy.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppkaxlun3.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmppkaxlun3.jl:18\n\
    \   [4] top-level scope at /tmp/tmppkaxlun3.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmppkaxlun3.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmppkaxlun3.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmppkaxlun3.jl:18\n   [4] top-level\
    \ scope at /tmp/tmppkaxlun3.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmppkaxlun3.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmppkaxlun3.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmppkaxlun3.jl:18\n   [4] top-level\
    \ scope at /tmp/tmppkaxlun3.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmppkaxlun3.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmppkaxlun3.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmppkaxlun3.jl:18\n   [4] top-level\
    \ scope at /tmp/tmppkaxlun3.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmppkaxlun3.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppkaxlun3.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the elements in the vector. \nFor example\
    \ if v = [1,2,3] the output should be 6\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgbrq4ek0.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgbrq4ek0.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphkge2tgf.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmphkge2tgf.jl:18\n\
    \   [4] top-level scope at /tmp/tmphkge2tgf.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmphkge2tgf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmphkge2tgf.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmphkge2tgf.jl:18\n   [4] top-level\
    \ scope at /tmp/tmphkge2tgf.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmphkge2tgf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmphkge2tgf.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmphkge2tgf.jl:18\n   [4] top-level\
    \ scope at /tmp/tmphkge2tgf.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmphkge2tgf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmphkge2tgf.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmphkge2tgf.jl:18\n   [4] top-level\
    \ scope at /tmp/tmphkge2tgf.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmphkge2tgf.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphkge2tgf.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpisre0p5f.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpisre0p5f.jl:18\n\
    \   [4] top-level scope at /tmp/tmpisre0p5f.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpisre0p5f.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpisre0p5f.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpisre0p5f.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpisre0p5f.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpisre0p5f.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpisre0p5f.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpisre0p5f.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpisre0p5f.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpisre0p5f.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpisre0p5f.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpisre0p5f.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpisre0p5f.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpisre0p5f.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpisre0p5f.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squ\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplpxijr55.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplpxijr55.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum = sum + x^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpombpnlvl.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpombpnlvl.jl:18\n\
    \   [4] top-level scope at /tmp/tmpombpnlvl.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpombpnlvl.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpombpnlvl.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpombpnlvl.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpombpnlvl.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpombpnlvl.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpombpnlvl.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpombpnlvl.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpombpnlvl.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpombpnlvl.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpombpnlvl.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpombpnlvl.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpombpnlvl.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpombpnlvl.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpombpnlvl.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgfpl5zhe.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpgfpl5zhe.jl:18\n\
    \   [4] top-level scope at /tmp/tmpgfpl5zhe.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpgfpl5zhe.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpgfpl5zhe.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpgfpl5zhe.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpgfpl5zhe.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpgfpl5zhe.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpgfpl5zhe.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpgfpl5zhe.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpgfpl5zhe.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpgfpl5zhe.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpgfpl5zhe.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpgfpl5zhe.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpgfpl5zhe.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpgfpl5zhe.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgfpl5zhe.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptghw5gj_.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptghw5gj_.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the product of all the\
    \ numbers in a given list.\nExamples:\nFor lst = [1,2,3] the output should be\
    \ 6\nFor lst = [1,4,9] the output should be 144\nFor lst = [1,3,5,7] the output\
    \ should be 1425\nFor lst = [1.4,4.2,0] the output should be 24.0\nFor lst = [-2.4,1,1]\
    \ the output should be -6.0\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppcqtum49.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppcqtum49.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the first n positive integers. \nExamples:\nFor n = 2 the output should be\
    \ 9\nFor n = 10 the output should be 385\nFor n = 100 the output should be 479001600\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpezq1q9am.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpezq1q9am.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps45k_9nr.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps45k_9nr.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg0pdcqgj.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpg0pdcqgj.jl:18\n\
    \   [4] top-level scope at /tmp/tmpg0pdcqgj.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpg0pdcqgj.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpg0pdcqgj.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpg0pdcqgj.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpg0pdcqgj.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpg0pdcqgj.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpg0pdcqgj.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpg0pdcqgj.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpg0pdcqgj.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpg0pdcqgj.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpg0pdcqgj.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpg0pdcqgj.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpg0pdcqgj.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpg0pdcqgj.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg0pdcqgj.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum = sum + i^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5ew70y6q.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5ew70y6q.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squ\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeqwypgyl.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeqwypgyl.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the number of elements that are not zero. \nFor example [0,0,0] should return\
    \ 0.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpax8i_3nx.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpax8i_3nx.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbqr58vd_.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpbqr58vd_.jl:18\n\
    \   [4] top-level scope at /tmp/tmpbqr58vd_.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpbqr58vd_.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpbqr58vd_.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpbqr58vd_.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpbqr58vd_.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpbqr58vd_.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpbqr58vd_.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpbqr58vd_.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpbqr58vd_.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpbqr58vd_.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpbqr58vd_.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpbqr58vd_.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpbqr58vd_.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpbqr58vd_.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbqr58vd_.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpys_x9ljf.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpys_x9ljf.jl:18\n\
    \   [4] top-level scope at /tmp/tmpys_x9ljf.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpys_x9ljf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpys_x9ljf.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpys_x9ljf.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpys_x9ljf.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpys_x9ljf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpys_x9ljf.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpys_x9ljf.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpys_x9ljf.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpys_x9ljf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpys_x9ljf.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpys_x9ljf.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpys_x9ljf.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpys_x9ljf.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpys_x9ljf.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the square root of\
    \ a number. \nThe function should take one argument and return a Float64 number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo6cwmsc6.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo6cwmsc6.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcz7s0npf.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpcz7s0npf.jl:18\n\
    \   [4] top-level scope at /tmp/tmpcz7s0npf.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpcz7s0npf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpcz7s0npf.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpcz7s0npf.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpcz7s0npf.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpcz7s0npf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpcz7s0npf.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpcz7s0npf.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpcz7s0npf.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpcz7s0npf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpcz7s0npf.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpcz7s0npf.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpcz7s0npf.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpcz7s0npf.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcz7s0npf.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph6mp1oav.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph6mp1oav.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe4s7mgp7.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe4s7mgp7.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the square root of\
    \ a number. \nThe function should take one argument and return a Float64 number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxbxikemp.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxbxikemp.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| c |>\nThis doesn't work if you have a negative number in the list\n<|/\
    \ c |>\n<| c |>\nIt doesn't work for negative numbers. Try it out with `[-2.4,\
    \ 1, 1]`.\n<|/ c |>\n<| c |>\nI didn't know that negative numbers were a problem.\
    \ Thanks for pointing it out. I've edited my answer to include a solution for\
    \ negative numbers.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ Try it out with `[-2.4, 1, 1]`.\n<|/ c |>\n<| c |>\nI didn't know that negative\
    \ numbers were a problem. Thanks for pointing it out. I've edited my answer to\
    \ include a solution for negative numbers.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy9s7lefb.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy9s7lefb.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz_mqq3zh.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpz_mqq3zh.jl:18\n\
    \   [4] top-level scope at /tmp/tmpz_mqq3zh.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpz_mqq3zh.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpz_mqq3zh.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpz_mqq3zh.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpz_mqq3zh.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpz_mqq3zh.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpz_mqq3zh.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpz_mqq3zh.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpz_mqq3zh.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpz_mqq3zh.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpz_mqq3zh.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpz_mqq3zh.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpz_mqq3zh.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpz_mqq3zh.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz_mqq3zh.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers and\
    \ returns the average of those numbers. \nThe function should work for any type\
    \ of numbers (Float64, Int, ...).\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6t82av0j.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6t82av0j.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp89_sx12g.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp89_sx12g.jl:18\n\
    \   [4] top-level scope at /tmp/tmp89_sx12g.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp89_sx12g.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp89_sx12g.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp89_sx12g.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp89_sx12g.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp89_sx12g.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp89_sx12g.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp89_sx12g.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp89_sx12g.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp89_sx12g.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp89_sx12g.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp89_sx12g.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp89_sx12g.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp89_sx12g.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp89_sx12g.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.0>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa0bko5sq.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa0bko5sq.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't answer the question. OP wants to round the numbers to their\
    \ nearest integer before summing them.\n<|/ c |>\n<| c |>\nI guess I misunderstood\
    \ the question. I'll delete my answer if OP clarifies it.\n<|/ c |>\n<| c |>\n\
    I guess I misunderstood the question. I'll delete my answer if OP clarifies it.\n\
    <|/ c |>\n<| c |>\nI guess I misunderstood the question. I'll delete my answer\
    \ if OP clarifies it.\n<|/ c |>\n<| c |>\nI guess I misunderstood the question.\
    \ I'll delete my answer if OP clarifies it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp70bv3yyx.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp70bv3yyx.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum = sum + x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the maximum of a given\
    \ list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9udzklfa.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9udzklfa.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv0b912lx.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpv0b912lx.jl:18\n\
    \   [4] top-level scope at /tmp/tmpv0b912lx.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpv0b912lx.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpv0b912lx.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpv0b912lx.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpv0b912lx.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpv0b912lx.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpv0b912lx.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpv0b912lx.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpv0b912lx.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpv0b912lx.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpv0b912lx.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpv0b912lx.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpv0b912lx.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpv0b912lx.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv0b912lx.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq4g43p6s.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq4g43p6s.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_2clhack.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_2clhack.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo3ooaigp.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpo3ooaigp.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo3ooaigp.jl:24\ntest set: Test Failed at /tmp/tmpo3ooaigp.jl:29\n\
    \  Expression: candidate([-2.4, 1.0, 1.0]) == 6\n   Evaluated: 8 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo3ooaigp.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo3ooaigp.jl:24\ntest set: Test Failed at /tmp/tmpo3ooaigp.jl:32\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 63 == 75\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo3ooaigp.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo3ooaigp.jl:24\ntest set: Test Failed at /tmp/tmpo3ooaigp.jl:33\n\
    \  Expression: candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n   Evaluated: 1076\
    \ == 1086\nStacktrace:\n [1] top-level scope at /tmp/tmpo3ooaigp.jl:33\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo3ooaigp.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo3ooaigp.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpve2mc1d8.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpve2mc1d8.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpve2mc1d8.jl:24\ntest set: Test Failed at /tmp/tmpve2mc1d8.jl:29\n\
    \  Expression: candidate([-2.4, 1.0, 1.0]) == 6\n   Evaluated: 8 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpve2mc1d8.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpve2mc1d8.jl:24\ntest set: Test Failed at /tmp/tmpve2mc1d8.jl:32\n\
    \  Expression: candidate([-1.4, 4.6, 6.3]) == 75\n   Evaluated: 63 == 75\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpve2mc1d8.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpve2mc1d8.jl:24\ntest set: Test Failed at /tmp/tmpve2mc1d8.jl:33\n\
    \  Expression: candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n   Evaluated: 1076\
    \ == 1086\nStacktrace:\n [1] top-level scope at /tmp/tmpve2mc1d8.jl:33\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpve2mc1d8.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpve2mc1d8.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum = sum + x^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6e13u2g8.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp6e13u2g8.jl:18\n\
    \   [4] top-level scope at /tmp/tmp6e13u2g8.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6e13u2g8.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp6e13u2g8.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp6e13u2g8.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp6e13u2g8.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6e13u2g8.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp6e13u2g8.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp6e13u2g8.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp6e13u2g8.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6e13u2g8.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp6e13u2g8.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp6e13u2g8.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp6e13u2g8.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6e13u2g8.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6e13u2g8.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3gicvswn.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp3gicvswn.jl:18\n\
    \   [4] top-level scope at /tmp/tmp3gicvswn.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp3gicvswn.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp3gicvswn.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmp3gicvswn.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp3gicvswn.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp3gicvswn.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp3gicvswn.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp3gicvswn.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp3gicvswn.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp3gicvswn.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp3gicvswn.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmp3gicvswn.jl:18\n   [4] top-level\
    \ scope at /tmp/tmp3gicvswn.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp3gicvswn.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3gicvswn.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return round(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzk_i9v5x.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzk_i9v5x.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum = sum + i^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that satisfy a given condition.\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdmoet0vr.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdmoet0vr.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the first element of\
    \ a vector\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4x6eoo0m.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4x6eoo0m.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([1.4,4.2,0])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl6ktmkj4.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl6ktmkj4.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum = sum + x^2\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,3,5,7])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1.4,4.2,0])\n</cell>\n<code language=julia-1.5>\nsum_squares([-2.4,1,1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a vector that satisfy a condition\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo5uoyx2p.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo5uoyx2p.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4,\
    \ 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\
    \t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) ==\
    \ 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjbtm09ve.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.4, 4.2, 0.0]) == 29\n  InexactError: Int64(19.6)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpjbtm09ve.jl:18\n\
    \   [4] top-level scope at /tmp/tmpjbtm09ve.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpjbtm09ve.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpjbtm09ve.jl:29\n  Test threw exception\n  Expression: candidate([-2.4,\
    \ 1.0, 1.0]) == 6\n  InexactError: Int64(7.76)\n  Stacktrace:\n   [1] Int64 at\
    \ ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ sum_squares(::Array{Float64,1}) at /tmp/tmpjbtm09ve.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpjbtm09ve.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpjbtm09ve.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpjbtm09ve.jl:32\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 4.6, 6.3]) == 75\n  InexactError: Int64(62.809999999999995)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpjbtm09ve.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpjbtm09ve.jl:32\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpjbtm09ve.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpjbtm09ve.jl:33\n  Test threw exception\n  Expression: candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086\n  InexactError: Int64(1075.59)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] sum_squares(::Array{Float64,1}) at /tmp/tmpjbtm09ve.jl:18\n   [4] top-level\
    \ scope at /tmp/tmpjbtm09ve.jl:33\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpjbtm09ve.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    8      4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjbtm09ve.jl:22\n"
  exit_code: 1
  status: Exception
