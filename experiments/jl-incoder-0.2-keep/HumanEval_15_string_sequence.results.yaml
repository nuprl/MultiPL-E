name: HumanEval_15_string_sequence
language: julia
results:
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq[i] = \"$(string_seq[i-1]\
    \ + 1) \"\n    end\n    return string_seq\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2_mzjbh2.jl:19\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Array{String,1} to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:209\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:210\n\
    \    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] string_sequence(::Int64) at /tmp/tmp2_mzjbh2.jl:12\n   [2] top-level scope\
    \ at /tmp/tmp2_mzjbh2.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2_mzjbh2.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp2_mzjbh2.jl:20\n  Test threw exception\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n  BoundsError: attempt to access 0-element Array{String,1} at\
    \ index [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2]\
    \ string_sequence(::Int64) at /tmp/tmp2_mzjbh2.jl:10\n   [3] top-level scope at\
    \ /tmp/tmp2_mzjbh2.jl:20\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp2_mzjbh2.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp2_mzjbh2.jl:21\n  Test threw exception\n  Expression: candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\n  BoundsError: attempt to access 0-element Array{String,1}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] string_sequence(::Int64) at /tmp/tmp2_mzjbh2.jl:10\n   [3] top-level scope\
    \ at /tmp/tmp2_mzjbh2.jl:21\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp2_mzjbh2.jl:18\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_mzjbh2.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp97khp217.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp97khp217.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n\n    do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    done\n    return string_sequence\n\
    </code>\n<|/ a tags=julia |>\n<| c |>\n`string_sequence` can be written as `join`\
    \ on `Int64` arrays: `join.(0:5, \" \", \" \")`\n<|/ c |>\n<| c |>\nThanks, I\
    \ didn't know about `join`. I was trying to avoid the explicit loop and use `join`\
    \ instead.\n<|/ c |>\n<| a tags=julia |>\nThe other answers here are great, but\
    \ I wanted to add that you can also use mapslices to do this:\n<code>\nmapslices(x\
    \ -> string(x), 0:5, dims=2)\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\n\
    I came up with this solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpidxmy22i.jl:10\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpidxmy22i.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the first n prime numbers.\
    \ \nThe function should accept a parameter of type Int64.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2wzz4p3f.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2wzz4p3f.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1 to n do\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.1>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the numbers. \nThe function should\
    \ also return a string containing the sum of the numbers. \nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2370pd2x.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2370pd2x.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string.\nHint: Use length() function\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpti2lu8qc.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpti2lu8qc.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a number as input and\
    \ returns the number converted to its binary representation.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeblx9qfq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeblx9qfq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that generates all the prime numbers up to a number n.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfso_40co.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfso_40co.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq += String(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ take one argument, n, which specifies the number of numbers to return.\nThe\
    \ function should return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nThe function should return an empty string if the\
    \ argument n does not satisfy this condition.\nThe function should return an error\
    \ message if the argument n does not satisfy this condition.\nThe function should\
    \ return an error message if the argument n does not satisfy this condition.\n\
    The function should return an error message if the argument n does not satisfy\
    \ this condition.\nThe function should return an error message if the argument\
    \ n does not satisfy this condition.\nThe function should return an error message\
    \ if the argument n does not satisfy this condition.\nThe function should return\
    \ an error message if the argument n does not satisfy this condition.\nThe function\
    \ should return an error message if the argument n does not satisfy this condition.\n\
    The function should return an error message if the argument n does not satisfy\
    \ this condition.\nThe function should return an error message if the argument\
    \ n does not satisfy this condition.\nThe function should return an error message\
    \ if the argument n does not satisfy this condition.\nThe function should return\
    \ an error message if the argument n does not satisfy this condition.\nThe function\
    \ should return an error message if the argument n does not satisfy this condition.\n\
    The function should return an error message if the argument n does not satisfy\
    \ this condition.\nThe function should return an error message if the argument\
    \ n does not satisfy this condition.\nThe function should return an error message\
    \ if the argument n does not satisfy this condition.\nThe function should return\
    \ an error message if the argument n does not satisfy this condition.\nThe function\
    \ should return an error message if the argument n does not satisfy this condition.\n\
    The function should return an error message if the argument n does not satisfy\
    \ this condition.\nThe function should return an error message if the argument\
    \ n does not satisfy this condition.\nThe function should return an error message\
    \ if the argument n does not satisfy this condition.\nThe function should return\
    \ an error message if the argument n does not satisfy this condition.\nThe function\
    \ should return an error message if the argument n does not satisfy this condition.\n\
    The function should return an error message if the argument n does not satisfy\
    \ this condition.\nThe function should return an error message if the argument\
    \ n does not satisfy this condition.\nThe function should return an error message\
    \ if the argument n does not satisfy this condition.\nThe function should return\
    \ an error message if the argument n does not satisfy this condition.\nThe function\
    \ should \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp24qdlq3b.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp24qdlq3b.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnhowv2xx.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnhowv2xx.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = n\n    do\n        string += i\n       \
    \ i += 1\n    done\n    return string\n</code>\n<|/ a tags=julia |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpuopn25ol.jl:11\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpuopn25ol.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nHint: Use split() to split the string into\
    \ words.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyvlthuh3.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyvlthuh3.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings. Each string in the returned vector is the concatenation\
    \ of the integers in the input vector. For example, if the input vector is [1,2,3,4,5],\
    \ then the returned vector will be [\"1 2 3 4 5\", \"1 2 3 4 5\", \"1 2 3 4 5\"\
    , \"1 2 3 4 5\", \"1 2 3 4 5\"]\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpclmahfon.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpclmahfon.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    \n    for i in 0:n-1\n        string = string +\
    \ i\n    \n    return string\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\n\
    I wrote a package called Strings.jl that does this for you. \n<code>\njulia> using\
    \ Strings\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp755z9b8q.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp755z9b8q.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \n    \" Initialize a string variable 'result' with an empty\
    \ string.\"\n    \" Initialize an integer variable 'i' with 0.\"\n    \" Initialize\
    \ an integer variable 'j' with n.\"\n    \" Initialize an integer variable 'k'\
    \ with 0.\"\n    \" Initialize an integer variable 'l' with 0.\"\n    \" Initialize\
    \ an integer variable 'm' with 0.\"\n    \" Initialize an integer variable 'n'\
    \ with 0.\"\n    \" Initialize an integer variable 'o' with 0.\"\n    \" Initialize\
    \ an integer variable 'p' with 0.\"\n    \" Initialize an integer variable 'q'\
    \ with 0.\"\n    \" Initialize an integer variable 'r' with 0.\"\n    \" Initialize\
    \ an integer variable 's' with 0.\"\n    \" Initialize an integer variable 't'\
    \ with 0.\"\n    \" Initialize an integer variable 'u' with 0.\"\n    \" Initialize\
    \ an integer variable 'v' with 0.\"\n    \" Initialize an integer variable 'w'\
    \ with 0.\"\n    \" Initialize an integer variable 'x' with 0.\"\n    \" Initialize\
    \ an integer variable 'y' with 0.\"\n    \" Initialize an integer variable 'z'\
    \ with 0.\"\n    \" Initialize an integer variable 'aa' with 0.\"\n    \" Initialize\
    \ an integer variable 'ab' with 0.\"\n    \" Initialize an integer variable 'ac'\
    \ with 0.\"\n    \" Initialize an integer variable 'ad' with 0.\"\n    \" Initialize\
    \ an integer variable 'ae' with 0.\"\n    \" Initialize an integer variable 'af'\
    \ with 0.\"\n    \" Initialize an integer variable 'ag' with 0.\"\n    \" Initialize\
    \ an integer variable 'ah' with 0.\"\n    \" Initialize an integer variable 'ai'\
    \ with 0.\"\n    \" Initialize an integer variable 'aj' with 0.\"\n    \" Initialize\
    \ an integer variable 'ak' with 0.\"\n    \" Initialize an integer variable 'al'\
    \ with 0.\"\n    \" Initialize an integer variable 'am' with 0.\"\n    \" Initialize\
    \ an integer variable 'an' with 0.\"\n    \" Initialize an integer variable 'ao'\
    \ with 0.\"\n    \" Initialize an integer variable 'ap' with 0.\"\n    \" Initialize\
    \ an integer variable 'aq' with 0.\"\n    \" Initialize an integer variable 'ar'\
    \ with 0.\"\n    \" Initialize an integer variable 'as' with 0.\"\n    \" Initialize\
    \ an integer variable 'at' with 0.\"\n    \" Initialize an integer variable 'au'\
    \ with 0.\"\n    \" Initialize an integer variable 'av' with 0.\"\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfsdknmz7.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfsdknmz7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfsdknmz7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \" \"\n    for i = 1 to n do\n        str = str + i\n    end\n    return\
    \ str\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ a string with all the characters in lower case. \nThe function should ignore\
    \ all non-alphabetic characters.\nThe function should ignore all spaces.\nThe\
    \ function should ignore all punctuation characters.\nThe function should ignore\
    \ all digits.\nThe function should ignore all non-alphabetic characters.\nThe\
    \ function should ignore all spaces.\nThe function should ignore all punctuation\
    \ characters.\nThe function should ignore all digits.\nThe function should ignore\
    \ all non-alphabetic characters.\nThe function should ignore all spaces.\nThe\
    \ function should ignore all punctuation characters.\nThe function should ignore\
    \ all digits.\nThe function should ignore all non-alphabetic characters.\nThe\
    \ function should ignore all spaces.\nThe function should ignore all punctuation\
    \ characters.\nThe function should ignore all digits.\nThe function should ignore\
    \ all non-alphabetic characters.\nThe function should ignore all spaces.\nThe\
    \ function should ignore all punctuation characters.\nThe function should ignore\
    \ all digits.\nThe function should ignore all non-alphabetic characters.\nThe\
    \ function should ignore all spaces.\nThe function should ignore all punctuation\
    \ characters.\nThe function should ignore all digits.\nThe function should ignore\
    \ all non-alphabetic characters.\nThe function should ignore all spaces.\nThe\
    \ function should ignore all punctuation characters.\nThe function should ignore\
    \ all digits.\nThe function should ignore all non-alphabetic characters.\nThe\
    \ function should ignore all spaces.\nThe function should ignore all punctuation\
    \ characters.\nThe function should ignore all digits.\nThe function should ignore\
    \ all non-alphabetic characters.\nThe function should ignore all spaces.\nThe\
    \ function should ignore all punctuation characters.\nThe function should ignore\
    \ all digits.\nThe function should ignore all non-alphabetic characters.\nThe\
    \ function should ignore all spaces.\nThe function should ignore all punctuation\
    \ characters.\nThe function should ignore all digits.\nThe function should ignore\
    \ all non-alphabetic characters.\nThe function should ignore all spaces.\nThe\
    \ function should ignore all punctuation characters.\nThe function should ignore\
    \ all digits.\nThe function should ignore all non-alphabetic characters.\nThe\
    \ function should ignore all spaces.\nThe function should ignore all punctuation\
    \ characters.\nThe function should ignore all digits.\nThe function should ignore\
    \ all non-alphabetic characters.\nThe function should ignore all spaces.\nThe\
    \ function should ignore all punctuation characters.\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvlqp4erh.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvlqp4erh.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprk1gi3qj.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprk1gi3qj.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = String[]\n    for n in 0 .. n\n        string_sequence\
    \ += String(n)\n    return string_sequence\n</code>\n<|/ a tags=julia |>\n<| a\
    \ dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpevp8z__8.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpevp8z__8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence\
    \ = string_sequence + \" \" + i\n    end\n    \n    return string_sequence\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 10\nWrite a function that takes a string as input and returns the string with\
    \ all the characters in lower case.\nHint: Use replace!\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqmnkcxfq.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqmnkcxfq.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + string(i)\n    end\n    return string_sequence\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the first n prime numbers. \nHint: Use a for\
    \ loop and a prime number test.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdyewym2m.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdyewym2m.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for x in 0:n\n        string_seq.append(x)\n \
    \   return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdwd01tlw.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdwd01tlw.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ numbers in the vector.\nFor example, if the vector is [1,2,3], the function\
    \ should return 6.\nHint: Use a for loop to iterate over the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpki8utx29.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpki8utx29.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq += String(i)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the string with all the characters in lower case.\n\
    Hint: use the function replace.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpysz4hm8k.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpysz4hm8k.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + string(i)\n   \
    \ end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates the Fibonacci sequence\
    \ up to n.\nHint: Use a recursive function.\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf6zifkr5.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf6zifkr5.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = n\n    do\n        string_seq = string_seq\
    \ + string(i)\n    done\n    return string_seq\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=julia,string |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmplwq4t65w.jl:10\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmplwq4t65w.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpejng3ocu.jl:20\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpejng3ocu.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpejng3ocu.jl:19\ntest set: Error During Test at\
    \ /tmp/tmpejng3ocu.jl:21\n  Test threw exception\n  Expression: candidate(3) ==\
    \ \"0 1 2 3\"\n  MethodError: no method matching +(::String, ::String)\n  Closest\
    \ candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \  Stacktrace:\n   [1] +(::String, ::String, ::Int64) at ./operators.jl:529\n\
    \   [2] string_sequence(::Int64) at /tmp/tmpejng3ocu.jl:11\n   [3] top-level scope\
    \ at /tmp/tmpejng3ocu.jl:21\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpejng3ocu.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpejng3ocu.jl:22\n  Test threw exception\n  Expression: candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: no method matching +(::String,\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] +(::String, ::String, ::Int64) at\
    \ ./operators.jl:529\n   [2] string_sequence(::Int64) at /tmp/tmpejng3ocu.jl:11\n\
    \   [3] top-level scope at /tmp/tmpejng3ocu.jl:22\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpejng3ocu.jl:19\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpejng3ocu.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = n\n    do\n        string_seq = string_seq\
    \ + i\n    done\n    return string_seq\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmz68231w.jl:10\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpmz68231w.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = n\n    do\n        string = string + \"\
    \ \" + i\n    done\n    return string\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0kq80uf2.jl:11\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp0kq80uf2.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n\n    do\n        string_sequence =\
    \ string_sequence + \" \" + i\n    done\n    return string_sequence\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3dzzuusv.jl:10\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp3dzzuusv.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ A prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself. For example, 2 is a prime number, but 3 is not because\
    \ 3 has two divisors, 2 and 3. Write a function that returns the first n prime\
    \ numbers. A prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself. For example, 2 is a prime number, but 3 is\
    \ not because 3 has two divisors, 2 and 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu246vqs5.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu246vqs5.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0:n-1\n        string_seq[i] = i\n  \
    \  return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.1>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvk1xwzf_.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvk1xwzf_.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = \"\"\n    \n    for n in 0:n\n        string_seq = string_seq\
    \ + string(n)\n    end\n    \n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the string\
    \ with all the letters capitalized.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcd7uyfg3.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcd7uyfg3.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = String[]\n    for i in 0 .. n\n        string_sequence\
    \ += String(i)\n    return string_sequence.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nThe function string_sequence is now a first-class\
    \ citizen in Julia. Let's try it out!\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl9bcbmn8.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl9bcbmn8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = string_range(0,n)\n    return str\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfut1l0_5.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfut1l0_5.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for n in 0:n\n        string_seq += String(n)\n\
    \    return string_seq\nend\n</cell>\n<code language=julia-1.1>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the string with all the characters in lower case. \nHint: Use lowercase()\
    \ function\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzvolcfl5.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzvolcfl5.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0usl_km4.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0usl_km4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0usl_km4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + i\n    end\n    return string_sequence\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppjub_yt8.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppjub_yt8.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprq96h1ki.jl:20\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmprq96h1ki.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprq96h1ki.jl:19\ntest set: Error During Test at\
    \ /tmp/tmprq96h1ki.jl:21\n  Test threw exception\n  Expression: candidate(3) ==\
    \ \"0 1 2 3\"\n  UndefVarError: to_string not defined\n  Stacktrace:\n   [1] string_sequence(::Int64)\
    \ at /tmp/tmprq96h1ki.jl:11\n   [2] top-level scope at /tmp/tmprq96h1ki.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprq96h1ki.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmprq96h1ki.jl:22\n  Test threw exception\n  Expression: candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\n  UndefVarError: to_string not defined\n  Stacktrace:\n\
    \   [1] string_sequence(::Int64) at /tmp/tmprq96h1ki.jl:11\n   [2] top-level scope\
    \ at /tmp/tmprq96h1ki.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprq96h1ki.jl:19\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprq96h1ki.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a for loop and a prime number checker function.\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp70eeldzj.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp70eeldzj.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \" \"\n    for i = 1:n\n        str = str + i\n    end\n    return\
    \ str\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ a string with all the characters in lower case.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv9snqj0r.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv9snqj0r.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsd91d71s.jl:20\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpsd91d71s.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsd91d71s.jl:19\ntest set: Error During Test at\
    \ /tmp/tmpsd91d71s.jl:21\n  Test threw exception\n  Expression: candidate(3) ==\
    \ \"0 1 2 3\"\n  MethodError: no method matching +(::String, ::Int64)\n  Closest\
    \ candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n    +(!Matched::Missing,\
    \ ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n   [1] string_sequence(::Int64)\
    \ at /tmp/tmpsd91d71s.jl:11\n   [2] top-level scope at /tmp/tmpsd91d71s.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsd91d71s.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpsd91d71s.jl:22\n  Test threw exception\n  Expression: candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: no method matching +(::String,\
    \ ::Int64)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n    +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n\
    \    +(!Matched::Missing, ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n\
    \   [1] string_sequence(::Int64) at /tmp/tmpsd91d71s.jl:11\n   [2] top-level scope\
    \ at /tmp/tmpsd91d71s.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsd91d71s.jl:19\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsd91d71s.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplp_fcz36.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplp_fcz36.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nThe function should take one argument, a vector\
    \ of numbers.\nThe function should return a number.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnwjhneep.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnwjhneep.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 5\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nThe function should only take one argument.\
    \ \nThe function should return a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph88ckxgr.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph88ckxgr.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string.\nHint: Use a for loop to iterate over the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu_cz3ytf.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu_cz3ytf.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy_qnph5w.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpy_qnph5w.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy_qnph5w.jl:18\ntest set: Error During Test at\
    \ /tmp/tmpy_qnph5w.jl:20\n  Test threw exception\n  Expression: candidate(3) ==\
    \ \"0 1 2 3\"\n  MethodError: objects of type String are not callable\n  Stacktrace:\n\
    \   [1] string_sequence(::Int64) at /tmp/tmpy_qnph5w.jl:10\n   [2] top-level scope\
    \ at /tmp/tmpy_qnph5w.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy_qnph5w.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmpy_qnph5w.jl:21\n  Test threw exception\n  Expression: candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: objects of type String are not\
    \ callable\n  Stacktrace:\n   [1] string_sequence(::Int64) at /tmp/tmpy_qnph5w.jl:10\n\
    \   [2] top-level scope at /tmp/tmpy_qnph5w.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy_qnph5w.jl:18\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy_qnph5w.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = n\n    do\n        string += i\n       \
    \ i += 1\n    done\n    return string\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9kyqq_qj.jl:11\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp9kyqq_qj.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0..n-1\n        string_seq[i] = i\n \
    \   return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length()\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl0l68l55.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl0l68l55.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + string(i)\n    end\n    return string_sequence\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 1\nWrite\
    \ a function that takes a string and returns the string with all the characters\
    \ in reverse order.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr4hqq8cs.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr4hqq8cs.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + str(i)\n    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the string with all the characters in lower case.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvgkc57zx.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvgkc57zx.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = n-1, 0, -1 do\n        string = string + i\n \
    \   end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a number n and returns\
    \ the string \"n!\".\nHint: Use a for loop.\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzvlr9ouz.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzvlr9ouz.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps2hmkn7v.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmps2hmkn7v.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmps2hmkn7v.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp1yqtzmw.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpp1yqtzmw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpp1yqtzmw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function called string_sequence that returns\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpngeysxe0.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpngeysxe0.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n\n    do\n        string_sequence =\
    \ string_sequence + \" \" + string(i)\n    done\n    return string_sequence\n\
    </code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn Julia v0.6\
    \ you can use the string function which converts any object to a string.\n<code>\n\
    julia> string(5)\n\"5\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\n\
    In Julia v0.6 you can use the string function which converts any object to a string.\n\
    <code>\njulia> string(5)\n\"5\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string\
    \ |>\nIn Julia v0.6 you can use the string function which converts any object\
    \ to a string.\n<code>\njulia> string(5)\n\"5\"\n</code>\n<|/ a dscore=2 |>\n\
    <| a |>\nIn Julia v0.6 you can use the string function which converts any object\
    \ to a string.\n<code>\njulia> string(5)\n\"5\"\n</code>\n<|/ a dscore=2 tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nIn Julia v0.6 you can use the string function\
    \ which converts any object to a string.\n<code>\njulia> string(5)\n\"5\"\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,string |>\nIn Julia v0.6 you can use the string\
    \ function which converts any object to a string.\n<code>\njulia> string(5)\n\"\
    5\"\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nIn Julia v0.6 you can use the\
    \ string function which converts any object to a string.\n<code>\njulia> string(5)\n\
    \"5\"\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn Julia\
    \ v0.6 you can use the string function which converts any object to a string.\n\
    <code>\njulia> string(5)\n\"5\"\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    In Julia v0.6 you can use the string function which converts any object to a string.\n\
    <code>\njulia> string(5)\n\"5\"\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia v0.6 you can use the string function which converts any object\
    \ to a string.\n<code>\njulia> string(5)\n\"5\"\n</code>\n<|/\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpbqwxmra_.jl:10\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpbqwxmra_.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ numbers. \nThe function should also return a string containing the sum of the\
    \ numbers. \nThe function should also return a string containing the number of\
    \ elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a \nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgk30pt9k.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgk30pt9k.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the number of words in the string.\nThe function\
    \ should ignore all punctuation and only count the words. \nThe function should\
    \ ignore all numbers and only count the words.\nThe function should ignore all\
    \ special characters and only count the words.\nThe function should ignore all\
    \ uppercase and only count the words.\nThe function should ignore all lowercase\
    \ and only count the words.\nThe function should ignore all whitespace and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word \nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph_82paqm.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph_82paqm.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i_to_string(i))\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ number n and returns the string \"nth term\" where n is an integer between 1\
    \ and 20.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphzrywdki.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphzrywdki.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_sequence = \"\"\n    \n    for i = 1 to n do\n        string_sequence\
    \ = string_sequence + \" \" + string(i)\n    \n    return string_sequence\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5hihbehg.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5hihbehg.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0:n-1\n        string_seq[i] = i\n  \
    \  return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nHint: Use length()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp46in69ti.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp46in69ti.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return join(\" \",string_seq)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of characters in that\
    \ string.\nWrite a function that takes a string and returns the number of words\
    \ in that string.\nWrite a function that takes a string and returns the number\
    \ of sentences in that string.\nWrite a function that takes a string and returns\
    \ the number of characters in that string divided by the number of words in that\
    \ string.\nWrite a function that takes a string and returns the number of characters\
    \ in that string divided by the number of sentences in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1uhdv7xb.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1uhdv7xb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = string_sequences(n)\n    str = str[end-1]\n    return str\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl1aeumlv.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl1aeumlv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function which takes a number n and returns\
    \ the string \"1 2 3 4 5\".\nWrite a second function which takes a number n and\
    \ returns the string \"1 2 3 4 5 6 7 8 9\".\nWrite a third function which takes\
    \ a number n and returns the string \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\
    \ 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\
    \ 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69\
    \ 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95\
    \ 96 97 98 99 100\".\nWrite a fourth function which takes a number n and returns\
    \ the string \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\
    \ 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\
    \ 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76\
    \ 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\".\n\
    Write a fifth function which takes a number n and returns the string \"1 2 3 4\
    \ 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\
    \ 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 \n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzvs97d3f.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzvs97d3f.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe98l1lid.jl:20\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpe98l1lid.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe98l1lid.jl:19\ntest set: Error During Test at\
    \ /tmp/tmpe98l1lid.jl:21\n  Test threw exception\n  Expression: candidate(3) ==\
    \ \"0 1 2 3\"\n  MethodError: no method matching +(::String, ::Int64)\n  Closest\
    \ candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n    +(!Matched::Missing,\
    \ ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n   [1] string_sequence(::Int64)\
    \ at /tmp/tmpe98l1lid.jl:11\n   [2] top-level scope at /tmp/tmpe98l1lid.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpe98l1lid.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpe98l1lid.jl:22\n  Test threw exception\n  Expression: candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: no method matching +(::String,\
    \ ::Int64)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n    +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n\
    \    +(!Matched::Missing, ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n\
    \   [1] string_sequence(::Int64) at /tmp/tmpe98l1lid.jl:11\n   [2] top-level scope\
    \ at /tmp/tmpe98l1lid.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpe98l1lid.jl:19\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe98l1lid.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq += String(i)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of strings and returns a vector of integers representing the number of\
    \ times a string appears in the vector.\nFor example, string_sequence(\"abba\"\
    ) should return a vector [1, 1, 2, 1]\nHint: Use a for loop to iterate over the\
    \ strings in the vector and count the number of times each string appears.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpelfxijxg.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpelfxijxg.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.\nHint: Use\
    \ length() function\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp03nylx04.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp03nylx04.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 5\nWrite a function that takes a number n and returns the string \"n\
    \ is a multiple of 3\" if the number is divisible by 3, otherwise \"n is not a\
    \ multiple of 3\".\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ysfvwbr.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0ysfvwbr.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = String[Int64]()\n    i = 0\n    while i < n do\n        str = str +\
    \ String[i]\n        i = i + 1\n    end\n    return str\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpren2xmos.jl:10\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpren2xmos.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ a string containing all the characters in that string in alphabetical order.\n\
    e.g. \"hello\" -> \"ehllo\"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv_0_khv5.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv_0_khv5.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nThe function string_sequence is now defined, we can test it by\
    \ executing the following cell:\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps8hmf3g_.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps8hmf3g_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns a string containing all the characters of the string\
    \ in reverse order.\nHint: Use reverse function.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpamz7jzjw.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpamz7jzjw.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkc5lkb0x.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpkc5lkb0x.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkc5lkb0x.jl:18\ntest set: Error During Test at\
    \ /tmp/tmpkc5lkb0x.jl:20\n  Test threw exception\n  Expression: candidate(3) ==\
    \ \"0 1 2 3\"\n  UndefVarError: to_string not defined\n  Stacktrace:\n   [1] string_sequence(::Int64)\
    \ at /tmp/tmpkc5lkb0x.jl:10\n   [2] top-level scope at /tmp/tmpkc5lkb0x.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkc5lkb0x.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmpkc5lkb0x.jl:21\n  Test threw exception\n  Expression: candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\n  UndefVarError: to_string not defined\n  Stacktrace:\n\
    \   [1] string_sequence(::Int64) at /tmp/tmpkc5lkb0x.jl:10\n   [2] top-level scope\
    \ at /tmp/tmpkc5lkb0x.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkc5lkb0x.jl:18\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkc5lkb0x.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the string with all the letters capitalized.\ne.g. \"hello\" =>\
    \ \"Hello\"\nHint: Use a for loop to iterate over the string and capitalize each\
    \ letter\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphrvl0y9o.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphrvl0y9o.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the numbers. \nThe function should work for vectors of any length.\n\
    Hint: use the reduce function.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8xkf8i7h.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8xkf8i7h.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp81p2bwpe.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp81p2bwpe.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = String[]\n    for i in 0 .. n-1\n        string_sequence\
    \ += String(i)\n    return string_sequence\n</code>\n<|/ a tags=julia |>\n<| c\
    \ |>\nThis doesn't seem to work. `string_sequence(5)` returns `[\"0\", \"1\",\
    \ \"2\", \"3\", \"4\", \"5\"]`, not `\"0 1 2 3 4 5\"`.\n<|/ c |>\n<| c |>\nI see\
    \ what you mean. I've updated the answer to reflect this.\n<|/ c |>\n<| a dscore=2\
    \ |>\nThe easiest way is to use string interpolation:\n<code>\njulia> \"$(0:5)\"\
    \n5-element Array{String,1}:\n \"0\"\n \"1\"\n \"2\"\n \"3\"\n \"4\"\n \"5\"\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nYou can use the join function\
    \ from the string package:\n<code>\njulia> using String\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz_gs57q0.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz_gs57q0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers in the vector.\nFor example, if the vector is\
    \ [1,2,3,4,5], the function should return 15.\nHint: Use a for loop.\nHint: Use\
    \ a variable named sum to store the sum of the numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2xb3qdbf.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2xb3qdbf.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nWrite a function that takes a string and returns the string with\
    \ all the characters in upper case. For example, \"Hello\" => \"HELLO\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_uyg_2qo.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_uyg_2qo.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwnk5minv.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwnk5minv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwnk5minv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = String[]\n    for i = n-1, 0, -1 do\n        string_sequence.append(i%10^6)\n\
    \        i = floor(i/10^6)\n    end\n    return string_sequence.join(\" \")\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_sequence(0)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nHint: Use a for loop to iterate from 2 to n inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppodk4ii2.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppodk4ii2.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq[i] = i\n    end\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzjtlhezj.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzjtlhezj.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates a sequence of numbers\
    \ from 0 to n inclusive, where n is given as an input argument.\nThe function\
    \ should return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nThe function should also return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nThe function should also return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    The function should also return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nThe function should also return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ also return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nThe function should also return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nThe function should also return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    The function should also return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nThe function should also return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ also return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nThe function should also return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nThe function should also return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    The function should also return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nThe function should also return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ also return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nThe function should also return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nThe function should also return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    The function should also return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nThe function should also return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ also return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nThe function should also return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nThe function should \nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_upfj12j.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_upfj12j.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \" \"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + i\n    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.0>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ number n and returns the string \"n!\".\n    >>> string_factorial(0)\n    '1'\n\
    \    >>> string_factorial(5)\n    '5!'\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8d1jj_0o.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8d1jj_0o.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a number as input and\
    \ returns the string representation of that number in reverse order. For example,\
    \ if the input is 5, the function should return \"5 4 3 2 1\"\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqutc0hsh.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqutc0hsh.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n prime numbers. \nHint: Use\
    \ a for loop and a prime number test.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1xa7c9_p.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1xa7c9_p.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = n-1 downto 1 do\n        string = string + i\n\
    \        string = string + \" \" \n    return string\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=1 |>\nHere's a solution using string interpolation:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"1\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfzwdnm4s.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfzwdnm4s.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of numbers and\
    \ returns the sum of the numbers in the array.\nHint: Use a for loop to iterate\
    \ through the array.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcnjnbfrg.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcnjnbfrg.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd5bla5jj.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd5bla5jj.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n   \
    \ end\n    return string\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the string with all the letters in lower case and spaces replaced by underscore.\
    \ For example, \"Hello World\" becomes \"hello_world\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9wvhmdmy.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9wvhmdmy.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph15ar25z.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmph15ar25z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmph15ar25z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + i\n    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm1kj4bln.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm1kj4bln.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a for loop to iterate through all numbers from 2 to n. \nHint: Use\
    \ a boolean to check if a number is prime or not. \nHint: Use a while loop to\
    \ iterate through all numbers from 2 to n. \nHint: Use a boolean to check if a\
    \ number is prime or not. \nHint: Use a while loop to iterate through all numbers\
    \ from 2 to n. \nHint: Use a boolean to check if a number is prime or not. \n\
    Hint: Use a while loop to iterate through all numbers from 2 to n. \nHint: Use\
    \ a boolean to check if a number is prime or not. \nHint: Use a while loop to\
    \ iterate through all numbers from 2 to n. \nHint: Use a boolean to check if a\
    \ number is prime or not. \nHint: Use a while loop to iterate through all numbers\
    \ from 2 to n. \nHint: Use a boolean to check if a number is prime or not. \n\
    Hint: Use a while loop to iterate through all numbers from 2 to n. \nHint: Use\
    \ a boolean to check if a number is prime or not. \nHint: Use a while loop to\
    \ iterate through all numbers from 2 to n. \nHint: Use a boolean to check if a\
    \ number is prime or not. \nHint: Use a while loop to iterate through all numbers\
    \ from 2 to n. \nHint: Use a boolean to check if a number is prime or not. \n\
    Hint: Use a while loop to iterate through all numbers from 2 to n. \nHint: Use\
    \ a boolean to check if a number is prime or not. \nHint: Use a while loop to\
    \ iterate through all numbers from 2 to n. \nHint: Use a boolean to check if a\
    \ number is prime or not. \nHint: Use a while loop to iterate through all numbers\
    \ from 2 to n. \nHint: Use a boolean to check if a number is prime or not. \n\
    Hint: Use a while loop to iterate through all numbers from 2 to n. \nHint: Use\
    \ a boolean to check if a number is prime or not. \nHint: Use a while loop to\
    \ iterate through all numbers from 2 to n. \nHint: Use a boolean to check if a\
    \ number is prime or not. \nHint: Use a while loop to iterate through all numbers\
    \ from 2 to n. \nHint: Use a boolean to check if a number is prime or not. \n\
    Hint: Use \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpveo9q5b5.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpveo9q5b5.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps3ls9hpu.jl:42\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps3ls9hpu.jl:42\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq\
    \ + string(i)\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmputvy1mev.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmputvy1mev.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \" \"\n    for i = 1:n\n        str = str + i\n    end\n    return\
    \ str\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the numbers.\
    \ \nHint: use the reduce function.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2bruwqob.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2bruwqob.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nFor example, string_length(\"Hello\
    \ World\") should return 11.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuudnwwsx.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuudnwwsx.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function called string_sequence that returns\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkb3o9p98.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkb3o9p98.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = \"\"\n    \n    for i = 1:n\n        string_seq = string_seq\
    \ + i\n    end\n    \n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nHint: Use a for loop to iterate over all numbers\
    \ from 2 to n. \nHint: Use a while loop to iterate over all numbers from 2 to\
    \ n. \nHint: Use a boolean variable to keep track of whether a number is prime\
    \ or not. \nHint: Use a while loop to iterate over all numbers from 2 to n. \n\
    Hint: Use a boolean variable to keep track of whether a number is prime or not.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n. \nHint: Use\
    \ a boolean variable to keep track of whether a number is prime or not. \nHint:\
    \ Use a while loop to iterate over all numbers from 2 to n. \nHint: Use a boolean\
    \ variable to keep track of whether a number is prime or not. \nHint: Use a while\
    \ loop to iterate over all numbers from 2 to n. \nHint: Use a boolean variable\
    \ to keep track of whether a number is prime or not. \nHint: Use a while loop\
    \ to iterate over all numbers from 2 to n. \nHint: Use a boolean variable to keep\
    \ track of whether a number is prime or not. \nHint: Use a while loop to iterate\
    \ over all numbers from 2 to n. \nHint: Use a boolean variable to keep track of\
    \ whether a number is prime or not. \nHint: Use a while loop to iterate over all\
    \ numbers from 2 to n. \nHint: Use a boolean variable to keep track of whether\
    \ a number is prime or not. \nHint: Use a while loop to iterate over all numbers\
    \ from 2 to n. \nHint: Use a boolean variable to keep track of whether a number\
    \ is prime or not. \nHint: Use a while loop to iterate over all numbers from 2\
    \ to n. \nHint: Use a boolean variable to keep track of whether a number is prime\
    \ or not. \nHint: Use a while loop to iterate over all numbers from 2 to n. \n\
    Hint: Use a boolean variable to keep track of whether a number is prime or not.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n. \nHint: Use\
    \ a boolean variable to keep track of whether a number is prime or not. \nHint:\
    \ Use a while loop to iterate over all numbers from 2 to n. \nHint: Use a boolean\
    \ variable to keep track of whether a number is prime or not. \n\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkocdi7fj.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkocdi7fj.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + string(i)\n    end\n    return string_sequence\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 5\nWrite a function that takes a string as input and returns the string with\
    \ all the characters in lower case.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp50q9d07k.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp50q9d07k.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \" \"\n    for i in 0:n-1\n        str = str + string(i)\n    return\
    \ str\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question,\
    \ which is about how to do this in Julia.\n<|/ c |>\n<| c |>\nThe question is\
    \ about how to do this in Julia, not Python.\n<|/ c |>\n<| c |>\nThe question\
    \ is about how to do this in Julia, not Python.\n<|/ c |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvpiuc67b.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvpiuc67b.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + string(i)\n    end\n    return string_sequence\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ov4dlqq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0ov4dlqq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for x in 0:n\n        string_seq.append(x)\n \
    \   return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc0ki14mr.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc0ki14mr.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0..n-1\n        string_seq[i] = i\n \
    \   return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length()\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv2apaf7h.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv2apaf7h.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers in the vector.\nFor example, if the input vector\
    \ is [1,2,3,4,5], the output should be 15.\nHint: use the sum function.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmco5ufpz.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmco5ufpz.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + string(i)\n   \
    \ end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 5\nWrite a function which takes a number n and returns\
    \ the string \"n!\".\nHint: Use a for loop to iterate over all numbers from 1\
    \ to n.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcs5beuxv.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcs5beuxv.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + to_string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a string to a vector of integers. For example,\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0jsnzq_y.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0jsnzq_y.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp47j0gpwo.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp47j0gpwo.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp47j0gpwo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.1>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns a vector of strings containing the numbers in reverse order. For example,\
    \ if the input vector is [1,2,3,4,5], the output should be [\"5 4 3 2 1\"].\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm1ldkxo2.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm1ldkxo2.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n\
    \    return string\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp14zfjay1.jl:20\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp14zfjay1.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp14zfjay1.jl:19\ntest set: Error During Test at\
    \ /tmp/tmp14zfjay1.jl:21\n  Test threw exception\n  Expression: candidate(3) ==\
    \ \"0 1 2 3\"\n  MethodError: no method matching +(::String, ::Int64)\n  Closest\
    \ candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n    +(!Matched::Missing,\
    \ ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n   [1] string_sequence(::Int64)\
    \ at /tmp/tmp14zfjay1.jl:11\n   [2] top-level scope at /tmp/tmp14zfjay1.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp14zfjay1.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp14zfjay1.jl:22\n  Test threw exception\n  Expression: candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: no method matching +(::String,\
    \ ::Int64)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n    +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n\
    \    +(!Matched::Missing, ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n\
    \   [1] string_sequence(::Int64) at /tmp/tmp14zfjay1.jl:11\n   [2] top-level scope\
    \ at /tmp/tmp14zfjay1.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp14zfjay1.jl:19\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp14zfjay1.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for k in 0 .. n-1\n        string_seq[k] = str(k)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ first n prime numbers. \nHint: Use a for loop and a prime number test.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqlh0kfc7.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqlh0kfc7.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = n\n    do\n        string += i\n       \
    \ i += 1\n    done\n    \n    return string\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=2 |>\nThe easiest way is to use join:\n<code>\njulia> join(x->string(x),\
    \ 1:5)\n\"12345\"\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=1 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpsqpc1i5k.jl:11\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpsqpc1i5k.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of numbers and returns\
    \ the sum of the numbers in the array.\nHint: Use a for loop to iterate over the\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi2k47hw8.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi2k47hw8.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers in the vector.\nFor example,\
    \ if the input vector is [1,2,3,4,5], the function should return 15.\nHint: use\
    \ sum.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptb0ly4_y.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptb0ly4_y.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 7: Write a function that takes a vector of integers\
    \ and returns a string containing the elements of the vector separated by spaces.\n\
    Hint: Use a for loop to iterate over the elements of the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzncl1o_n.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzncl1o_n.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a number n and returns\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk6g94e36.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk6g94e36.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nThe function should take an Int argument n and\
    \ return a Vector of Ints.\nThe function should return nothing if n is less than\
    \ or equal to 0.\nThe function should return nothing if n is negative.\nThe function\
    \ should return nothing if n is greater than 100.\nThe function should return\
    \ nothing if n is NaN.\nThe function should return nothing if n is Inf.\nThe function\
    \ should return nothing if n is NaN.\nThe function should return nothing if n\
    \ is Inf.\nThe function should return nothing if n is NaN.\nThe function should\
    \ return nothing if n is Inf.\nThe function should return nothing if n is NaN.\n\
    The function should return nothing if n is Inf.\nThe function should return nothing\
    \ if n is NaN.\nThe function should return nothing if n is Inf.\nThe function\
    \ should return nothing if n is NaN.\nThe function should return nothing if n\
    \ is Inf.\nThe function should return nothing if n is NaN.\nThe function should\
    \ return nothing if n is Inf.\nThe function should return nothing if n is NaN.\n\
    The function should return nothing if n is Inf.\nThe function should return nothing\
    \ if n is NaN.\nThe function should return nothing if n is Inf.\nThe function\
    \ should return nothing if n is NaN.\nThe function should return nothing if n\
    \ is Inf.\nThe function should return nothing if n is NaN.\nThe function should\
    \ return nothing if n is Inf.\nThe function should return nothing if n is NaN.\n\
    The function should return nothing if n is Inf.\nThe function should return nothing\
    \ if n is NaN.\nThe function should return nothing if n is Inf.\nThe function\
    \ should return nothing if n is NaN.\nThe function should return nothing if n\
    \ is Inf.\nThe function should return nothing if n is NaN.\nThe function should\
    \ return nothing if n is Inf.\nThe function should return nothing if n is NaN.\n\
    The function should return nothing if n is Inf.\nThe function should return nothing\
    \ if n is NaN.\nThe function should return nothing if n is Inf.\nThe function\
    \ should return nothing if n is NaN.\nThe function should return nothing if n\
    \ is Inf.\nThe function should return nothing if \nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9gpgnfhw.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9gpgnfhw.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function named string_sequence that returns\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    The function should take a single argument named n and return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ return an error if n is not a positive integer.\nThe function should return\
    \ an error if n is less than 0.\nThe function should return an error if n is greater\
    \ than or equal to 0.\nThe function should return an error if n is not a positive\
    \ integer.\nThe function should return an error if n is less than 0.\nThe function\
    \ should return an error if n is greater than or equal to 0.\nThe function should\
    \ return an error if n is not a positive integer.\nThe function should return\
    \ an error if n is less than 0.\nThe function should return an error if n is greater\
    \ than or equal to 0.\nThe function should return an error if n is not a positive\
    \ integer.\nThe function should return an error if n is less than 0.\nThe function\
    \ should return an error if n is greater than or equal to 0.\nThe function should\
    \ return an error if n is not a positive integer.\nThe function should return\
    \ an error if n is less than 0.\nThe function should return an error if n is greater\
    \ than or equal to 0.\nThe function should return an error if n is not a positive\
    \ integer.\nThe function should return an error if n is less than 0.\nThe function\
    \ should return an error if n is greater than or equal to 0.\nThe function should\
    \ return an error if n is not a positive integer.\nThe function should return\
    \ an error if n is less than 0.\nThe function should return an error if n is greater\
    \ than or equal to 0.\nThe function should return an error if n is not a positive\
    \ integer.\nThe function should return an error if n is less than 0.\nThe function\
    \ should return an error if n is greater than or equal to 0.\nThe function should\
    \ return an error if n is not a positive integer.\nThe function should return\
    \ an error if n is less than 0.\nThe function should return an error if n is greater\
    \ than or equal to 0.\nThe function should return an error if n is not a positive\
    \ integer.\nThe function should return an error if n is less than 0.\nThe function\
    \ should return an error if n is greater than or equal to 0.\nThe function should\
    \ return an error if n is not a positive integer.\nThe function should return\
    \ an error if n is less than 0.\nThe function should return an error if n is greater\
    \ than or equal to 0.\nThe function should return an error if n is not a positive\
    \ integer.\nThe function should return an error if n\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3awhwujc.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3awhwujc.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns a string containing the first n numbers of the vector. For example,\
    \ string_vector([1,2,3,4,5]) should return \"1 2 3 4 5\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd2dggot6.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd2dggot6.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 1\nWrite a function that takes a\
    \ number as input and returns the string representation of that number in reverse\
    \ order. For example, if the input is 5, the function should return \"5 4 3 2\
    \ 1\"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyh67s70h.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyh67s70h.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq\
    \ + string(i)\n    end\n    \n    return string_seq\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqbb0fqns.jl:21\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpqbb0fqns.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqbb0fqns.jl:20\ntest set: Error During Test at\
    \ /tmp/tmpqbb0fqns.jl:22\n  Test threw exception\n  Expression: candidate(3) ==\
    \ \"0 1 2 3\"\n  MethodError: no method matching +(::String, ::String)\n  Closest\
    \ candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \  Stacktrace:\n   [1] string_sequence(::Int64) at /tmp/tmpqbb0fqns.jl:11\n  \
    \ [2] top-level scope at /tmp/tmpqbb0fqns.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqbb0fqns.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpqbb0fqns.jl:23\n  Test threw exception\n  Expression: candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: no method matching +(::String,\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] string_sequence(::Int64) at /tmp/tmpqbb0fqns.jl:11\n\
    \   [2] top-level scope at /tmp/tmpqbb0fqns.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqbb0fqns.jl:20\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqbb0fqns.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ numbers. \nThe function should also return the number of elements in the vector.\n\
    The function should also return the mean of the numbers in the vector.\nThe function\
    \ should also return the median of the numbers in the vector.\nThe function should\
    \ also return the mode of the numbers in the vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy3bhpi6_.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy3bhpi6_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = String[Int64]()\n    for i = 1:n\n        str = str + i\n    end\n\
    \    str\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nThe function string_sequence is now available in the Julia REPL.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz1yurvcb.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz1yurvcb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\" \n    else \n        string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.1>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector.\nHint: Use a for loop to\
    \ iterate over the vector and add up the integers in the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsafmn0ca.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsafmn0ca.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a for loop and a prime number test.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoyr7eg5c.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoyr7eg5c.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 1\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpizqiq39g.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpizqiq39g.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a number to a string and returns the string\
    \ in reverse order.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcdrpp0sh.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcdrpp0sh.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    \n    for i = 1:n\n        string = string + \"\
    \ \" + to_string(i)\n    end\n    \n    return string\nend\n</cell>\n<code language=julia-1.1>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the numbers. \nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ type of numbers.\nThe function should work for vectors of any type of numbers.\n\
    The function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpewx210vd.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpewx210vd.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n-1, 0, -1 do string_sequence = string_sequence\
    \ + string_sequence(i) end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nHint: Use length()\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7g27fcum.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7g27fcum.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    \n    for i = 1 to n do\n        string = string\
    \ + \" \" + i\n    end\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers squared. \nFor example,\
    \ \n>>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>>\
    \ square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n\
    [1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n\
    >>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n\
    [1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n\
    >>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n\
    [1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n\
    >>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n\
    [1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n\
    >>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n\
    [1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n\
    >>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n\
    [1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n\
    >>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n\
    [1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n\
    >>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n\
    [1,2,3]\n\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr6xf2u8h.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr6xf2u8h.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n   \
    \ end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwzz9jqy8.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpwzz9jqy8.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwzz9jqy8.jl:18\ntest set: Error During Test at\
    \ /tmp/tmpwzz9jqy8.jl:20\n  Test threw exception\n  Expression: candidate(3) ==\
    \ \"0 1 2 3\"\n  MethodError: no method matching +(::String, ::String)\n  Closest\
    \ candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \  Stacktrace:\n   [1] +(::String, ::String, ::Int64) at ./operators.jl:529\n\
    \   [2] string_sequence(::Int64) at /tmp/tmpwzz9jqy8.jl:10\n   [3] top-level scope\
    \ at /tmp/tmpwzz9jqy8.jl:20\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwzz9jqy8.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmpwzz9jqy8.jl:21\n  Test threw exception\n  Expression: candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: no method matching +(::String,\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] +(::String, ::String, ::Int64) at\
    \ ./operators.jl:529\n   [2] string_sequence(::Int64) at /tmp/tmpwzz9jqy8.jl:10\n\
    \   [3] top-level scope at /tmp/tmpwzz9jqy8.jl:21\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwzz9jqy8.jl:18\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwzz9jqy8.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the string with all the characters in lower case.\
    \ \nHint: Use lowercase()\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7n9yvc46.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7n9yvc46.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkkhsjr8c.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpkkhsjr8c.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkkhsjr8c.jl:18\ntest set: Error During Test at\
    \ /tmp/tmpkkhsjr8c.jl:20\n  Test threw exception\n  Expression: candidate(3) ==\
    \ \"0 1 2 3\"\n  MethodError: no method matching +(::String, ::String)\n  Closest\
    \ candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \  Stacktrace:\n   [1] string_sequence(::Int64) at /tmp/tmpkkhsjr8c.jl:10\n  \
    \ [2] top-level scope at /tmp/tmpkkhsjr8c.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkkhsjr8c.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmpkkhsjr8c.jl:21\n  Test threw exception\n  Expression: candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: no method matching +(::String,\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] string_sequence(::Int64) at /tmp/tmpkkhsjr8c.jl:10\n\
    \   [2] top-level scope at /tmp/tmpkkhsjr8c.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkkhsjr8c.jl:18\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkkhsjr8c.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + to_string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of characters in the string.\nHint: Use length()\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxqwi97wr.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxqwi97wr.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \n    \" Initialize a string variable with an empty string.\"\
    \n    \" Initialize a variable i to 0.\"\n    \" Initialize a variable j to 1.\"\
    \n    \" Initialize a variable k to n.\"\n    \" Initialize a variable l to n.\"\
    \n    \" Initialize a variable m to n.\"\n    \" Initialize a variable n to n.\"\
    \n    \" Initialize a variable o to n.\"\n    \" Initialize a variable p to n.\"\
    \n    \" Initialize a variable q to n.\"\n    \" Initialize a variable r to n.\"\
    \n    \" Initialize a variable s to n.\"\n    \" Initialize a variable t to n.\"\
    \n    \" Initialize a variable u to n.\"\n    \" Initialize a variable v to n.\"\
    \n    \" Initialize a variable w to n.\"\n    \" Initialize a variable x to n.\"\
    \n    \" Initialize a variable y to n.\"\n    \" Initialize a variable z to n.\"\
    \n    \" Initialize a variable a to n.\"\n    \" Initialize a variable b to n.\"\
    \n    \" Initialize a variable c to n.\"\n    \" Initialize a variable d to n.\"\
    \n    \" Initialize a variable e to n.\"\n    \" Initialize a variable f to n.\"\
    \n    \" Initialize a variable g to n.\"\n    \" Initialize a variable h to n.\"\
    \n    \" Initialize a variable i to n.\"\n    \" Initialize a variable j to n.\"\
    \n    \" Initialize a variable k to n.\"\n    \" Initialize a variable l to n.\"\
    \n    \" Initialize a variable m to n.\"\n    \" Initialize a variable n to n.\"\
    \n    \" Initialize a variable o to n.\"\n    \" Initialize a variable p to n.\"\
    \n    \" Initialize a variable q to n.\"\n    \" Initialize a variable r to n.\"\
    \n    \" Initialize a variable s to n.\"\n    \" Initialize a variable t to n.\"\
    \n    \" Initialize a variable u to n.\"\n    \" Initialize a variable v to n.\"\
    \n    \" Initialize a variable w to n.\"\n    \" Initialize a variable x to n.\"\
    \n    \" Initialize a variable y to n.\"\n    \" Initialize a variable z to n.\"\
    \n    \" Initialize a variable a to n.\"\n    \" Initialize a variable b to n.\"\
    \n    \" Initialize a variable c to n.\"\n    \" Initialize a variable d to n.\"\
    \n    \" Initialize a variable e to n.\"\n    \" \nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpur5njme1.jl:66\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpur5njme1.jl:66\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2xr9soto.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2xr9soto.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_sequence = \"\"\n    for i = 1:n\n        string_sequence =\
    \ string_sequence + \" \" + i\n    end\n    \n    return string_sequence\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in that string.\nHint: Use length()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpixvzz1lx.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpixvzz1lx.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppb6gt7v7.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppb6gt7v7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppb6gt7v7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in it.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmmneottd.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmmneottd.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n   \
    \     return \"0\"\n    else if n == 1\n        return \"1\"\n    else if n ==\
    \ 2\n        return \"1 2\"\n    else if n == 3\n        return \"1 2 3\"\n  \
    \  else if n == 4\n        return \"1 2 3 4\"\n    else if n == 5\n        return\
    \ \"1 2 3 4 5\"\n    else if n == 6\n        return \"1 2 3 4 5 6\"\n    else\
    \ if n == 7\n        return \"1 2 3 4 5 6 7\"\n    else if n == 8\n        return\
    \ \"1 2 3 4 5 6 7 8\"\n    else if n == 9\n        return \"1 2 3 4 5 6 7 8 9\"\
    \n    else if n == 10\n        return \"1 2 3 4 5 6 7 8 9 10\"\n    else if n\
    \ == 11\n        return \"1 2 3 4 5 6 7 8 9 10 11\"\n    else if n == 12\n   \
    \     return \"1 2 3 4 5 6 7 8 9 10 11 12\"\n    else if n == 13\n        return\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    else if n == 14\n        return \"1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13 14\"\n    else if n == 15\n        return \"1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15\"\n    else if n == 16\n        return \"1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n    else if n == 17\n        return \"1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"\n    else if n == 18\n        return\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n    else if n == 19\n    \
    \    return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n    else if n\
    \ == 20\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\
    \n    else if n == 21\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20 21\"\n    else if n == 22\n        return \"1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20 21 22\"\n    else if n == 23\n        return \"\
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"\n    else if n ==\
    \ 24\n        return \"1 2 3 4 5 6 7 8 \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4fwjyity.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4fwjyity.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6wfrk7d6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6wfrk7d6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n\
    </cell>\n<text>\nWrite a function that takes a string and returns the number of\
    \ characters in the string.\nHint: Use a for loop.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq79dvp6j.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq79dvp6j.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n-1 downto 1 do\n        string_sequence\
    \ = string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"1\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkoxy76n8.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkoxy76n8.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = n-1 downto 0 do\n        string = string + \"\
    \ \" + string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.1>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.1>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first n prime numbers. \n\
    Hint: Use a for loop to iterate from 2 to n inclusive.\nHint: Use a boolean array\
    \ to keep track of whether a number is prime or not.\nHint: Use a while loop to\
    \ iterate from 2 to n inclusive.\nHint: Use a while loop to iterate from 2 to\
    \ n inclusive.\nHint: Use a while loop to iterate from 2 to n inclusive.\nHint:\
    \ Use a while loop to iterate from 2 to n inclusive.\nHint: Use a while loop to\
    \ iterate from 2 to n inclusive.\nHint: Use a while loop to iterate from 2 to\
    \ n inclusive.\nHint: Use a while loop to iterate from 2 to n inclusive.\nHint:\
    \ Use a while loop to iterate from 2 to n inclusive.\nHint: Use a while loop to\
    \ iterate from 2 to n inclusive.\nHint: Use a while loop to iterate from 2 to\
    \ n inclusive.\nHint: Use a while loop to iterate from 2 to n inclusive.\nHint:\
    \ Use a while loop to iterate from 2 to n inclusive.\nHint: Use a while loop to\
    \ iterate from 2 to n inclusive.\nHint: Use a while loop to iterate from 2 to\
    \ n inclusive.\nHint: Use a while loop to iterate from 2 to n inclusive.\nHint:\
    \ Use a while loop to iterate from 2 to n inclusive.\nHint: Use a while loop to\
    \ iterate from 2 to n inclusive.\nHint: Use a while loop to iterate from 2 to\
    \ n inclusive.\nHint: Use a while loop to iterate from 2 to n inclusive.\nHint:\
    \ Use a while loop to iterate from 2 to n inclusive.\nHint: Use a while loop to\
    \ iterate from 2 to n inclusive.\nHint: Use a while loop to iterate from 2 to\
    \ n inclusive.\nHint: Use a while loop to iterate from 2 to n inclusive.\nHint:\
    \ Use a while loop to iterate from 2 to n inclusive.\nHint: Use a while loop to\
    \ iterate from 2 to n inclusive.\nHint: Use a while loop to iterate from 2 to\
    \ n inclusive.\nHint: Use a while loop to iterate from 2 to n inclusive.\nHint:\
    \ \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc12ejn_a.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc12ejn_a.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n  \
    \      return \"0\"\n    else\n        return string_sequence(n - 1) + \" \" +\
    \ (string_sequence(n) - 1)\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string.\nHint: Use a for loop to iterate\
    \ over the characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmouohd_x.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmouohd_x.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n\n        do\n            string_sequence\
    \ = string_sequence + \" \" + string(i)\n        done\n    return string_sequence\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp5_jidvpu.jl:10\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp5_jidvpu.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \n    \" Return an empty string if n is less than or equal\
    \ to 0.\"\n    if n <= 0\n        return \"\"\n    \n    \" Return an empty string\
    \ if n is greater than or equal to 10.\"\n    if n >= 10\n        return \"\"\n\
    \    \n    \" Return an empty string if n is less than or equal to 10.\"\n   \
    \ if n >= 10\n        return \"\"\n    \n    \" Return an empty string if n is\
    \ less than or equal to 10.\"\n    if n >= 10\n        return \"\"\n    \n   \
    \ \" Return an empty string if n is less than or equal to 10.\"\n    if n >= 10\n\
    \        return \"\"\n    \n    \" Return an empty string if n is less than or\
    \ equal to 10.\"\n    if n >= 10\n        return \"\"\n    \n    \" Return an\
    \ empty string if n is less than or equal to 10.\"\n    if n >= 10\n        return\
    \ \"\"\n    \n    \" Return an empty string if n is less than or equal to 10.\"\
    \n    if n >= 10\n        return \"\"\n    \n    \" Return an empty string if\
    \ n is less than or equal to 10.\"\n    if n >= 10\n        return \"\"\n    \n\
    \    \" Return an empty string if n is less than or equal to 10.\"\n    if n >=\
    \ 10\n        return \"\"\n    \n    \" Return an empty string if n is less than\
    \ or equal to 10.\"\n    if n >= 10\n        return \"\"\n    \n    \" Return\
    \ an empty string if n is less than or equal to 10.\"\n    if n >= 10\n      \
    \  return \"\"\n    \n    \" Return an empty string if n is less than or equal\
    \ to 10.\"\n    if n >= 10\n        return \"\"\n    \n    \" Return an empty\
    \ string if n is less than or equal to 10.\"\n    if n >= 10\n        return \"\
    \"\n    \n    \" Return an empty string if n is less than or equal to 10.\"\n\
    \    if n >= 10\n        return \"\"\n    \n    \" Return an empty string if n\
    \ is less than or equal to 10.\"\n    if n >= 10\n        return \"\"\n    \n\
    \    \" Return an empty string if n is less than or equal to 10.\"\n    if n >=\
    \ 10\n        return \"\"\n    \n    \" Return an empty string if n is less than\
    \ or equal to 10.\"\n    if n >= 10\n        return \"\"\n    \n    \" Return\
    \ an empty string if n is less than or equal to 10.\"\n    if n >= 10\n      \
    \  return \"\"\n    \n    \" Return an empty string if n is less than or equal\
    \ to 10.\"\n    if n >= 10\n        return \"\"\n    \n    \" Return an empty\
    \ string if n is less than or equal to 10.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprymg6su4.jl:96\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprymg6su4.jl:96\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\" \n    else \n        return string_sequence(n-1)\
    \ + \", \" + string_sequence(n) \nend \n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a recursive function.\nHint: Use a while loop.\nHint: Use a for\
    \ loop.\nHint: Use a while loop and a counter.\nHint: Use a for loop and a counter.\n\
    Hint: Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use \nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9t2pw5rv.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9t2pw5rv.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string with all\
    \ the characters in lower case.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr_7xxh5b.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr_7xxh5b.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns a string containing the numbers separated by commas.\ne.g. [1,2,3] ->\
    \ \"1, 2, 3\"\nHint: use the function string_sequence\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt1kzhytc.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt1kzhytc.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \n    \" Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzb25ccx4.jl:64\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzb25ccx4.jl:64\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = n\n        do\n            string_seq = string_seq\
    \ + string(i)\n        end\n    end\n    return string_seq\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(100000000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000000000000000000)\n\
    </cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9oetu_rt.jl:10\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp9oetu_rt.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_sequence = \" \"\n    for i = 1:n\n        string_sequence =\
    \ string_sequence + \" \" + i\n    end\n    \n    return string_sequence\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns a string containing the first n numbers of\
    \ a Fibonacci sequence. \nThe Fibonacci sequence is defined by the recurrence\
    \ relation:\n$$ Fn = F{n-1} + F_{n-2} $$\nwhere $F_0 = 0$ and $F_1 = 1$.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwnhk042a.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwnhk042a.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = String[]\n    for i = 1 to n do\n        string_sequence\
    \ = string_sequence @ [string(i)]\n    return string_sequence\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\nI wrote a function that will do what you want\
    \ (I think)\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpep7dq47h.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpep7dq47h.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else if n == 1\n        return \"1\"\
    \n    else\n        return string_sequence(n-1) + \", \" + string_sequence(n-2)\
    \ + \", \" + string_sequence(n-3) + \", \" + string_sequence(n-4) + \", \" + string_sequence(n-5)\
    \ \nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a number n and returns the number $2^n$.\
    \ For example, for n=5, the function should return $2^5$. Make sure you use recursion\
    \ to solve this problem.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3b801e9_.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3b801e9_.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ number n and returns the string \"nth term\" where n is an integer between 1\
    \ and 20.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4370drj9.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4370drj9.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for n in 0:n\n        string_seq += String(n)\n\
    \    return string_seq\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpixlnnvhe.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpixlnnvhe.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp40myl7le.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp40myl7le.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.1>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use an iterator to generate prime numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3fefnugq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3fefnugq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nThe function should take an input n and output a vector of prime numbers from\
    \ 0 to n-1.\nThe function should return nothing if n is less than 2.\nThe function\
    \ should return nothing if n is less than or equal to 0.\nThe function should\
    \ return nothing if n is greater than or equal to 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm1rzeaiz.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm1rzeaiz.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for x in 0:n\n        string_seq.append(x)\n \
    \   return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string.\nHint: Use length() function\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9hd0yile.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9hd0yile.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + string(i)\n    end\n    return string_sequence\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string as input and returns the string with\
    \ all the characters in lower case.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpedt7oluo.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpedt7oluo.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp25dyxl9n.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp25dyxl9n.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp25dyxl9n.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n\n        string_seq <- string_seq\
    \ + String(i)\n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nHint: Use length()\
    \ function\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkjxqo8nj.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkjxqo8nj.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \" \"\n    for i = 1:n\n        str = str + i\n    end\n    return\
    \ str\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n\
    <text>\nWrite a function that takes a string and returns the string with all the\
    \ characters in reverse order.\ne.g. \"hello\" => \"olleh\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvtr21azq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvtr21azq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nThe function should work for vectors of any\
    \ length.\nHint: use sum.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptlkzt0af.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptlkzt0af.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use a for loop to iterate over\
    \ the string.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpacjnucts.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpacjnucts.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + to_string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nThe function string_sequence is now available\
    \ in the Julia REPL.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1bvhktpr.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1bvhktpr.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = String[]()\n    for i = 1:n\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpud5aclkt.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpud5aclkt.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplq2auzt6.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplq2auzt6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplq2auzt6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n   \
    \ end\n    return string\n</code>\n<|/ a tags=julia,string |>\n<| c |>\n`string_sequence`\
    \ can be written more concisely as `join`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I was trying to be as close to the original as possible.\n<|/ c |>\n\
    <| a tags=julia,string |>\nIn Julia 1.5 you can use the string interpolation syntax:\n\
    <code>\njulia> \"Hello $world\"\n\"Hello world\"\n</code>\n<|/ a dscore=4 |>\n\
    <| c |>\nThis doesn't work for me. `julia> \"Hello $world\"\nERROR: syntax: invalid\
    \ expression\n in expression starting at line 1`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me either. `julia> \"Hello $world\"\nERROR: syntax: invalid expression\n\
    \ in expression starting at line 1`\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ me either. `julia> \"Hello $world\"\nERROR: syntax: invalid expression\n in\
    \ expression starting at line 1`\n<|/ c |>\n<| c |>\nThis doesn't work for me\
    \ either. `julia> \"Hello $world\"\nERROR: syntax: invalid expression\n in expression\
    \ starting at line 1`\n<|/ c |>\n<| c |>\nThis doesn't work for me either. `julia>\
    \ \"Hello $world\"\nERROR: syntax: invalid expression\n in expression starting\
    \ at line 1`\n<|/ c |>\n<| a dscore=4 |>\nIn Julia 1.5 you can use the string\
    \ interpolation syntax:\n<code>\njulia> \"Hello $world\"\n\"Hello world\"\n</code>\n\
    <|/ a tags=julia,string |>\n<| a dscore=4 |>\nIn Julia 1.5 you can use the string\
    \ interpolation syntax:\n<code>\njulia> \"Hello $world\"\n\"Hello world\"\n</code>\n\
    <|/ a tags=julia,string |>\n<| a dscore=3 |>\nIn Julia 1.5 you can use the string\
    \ interpolation syntax:\n<code>\njulia> \"Hello $world\"\n\"Hello world\"\n</code>\n\
    <|/ a tags=julia,string |>\n<| a dscore=3 |>\nIn Julia 1.5 you can use the string\
    \ interpolation syntax:\n<code>\njulia> \"Hello $world\"\n\"Hello world\"\n</code>\n\
    <|/ a tag\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxr4nmq2f.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxr4nmq2f.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = n\n    do\n        string += i\n        i += 1\n\
    \    done\n    return string\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0ksnbna5.jl:10\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp0ksnbna5.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptlqc59st.jl:20\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmptlqc59st.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptlqc59st.jl:19\ntest set: Error During Test at\
    \ /tmp/tmptlqc59st.jl:21\n  Test threw exception\n  Expression: candidate(3) ==\
    \ \"0 1 2 3\"\n  MethodError: no method matching +(::String, ::String)\n  Closest\
    \ candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \  Stacktrace:\n   [1] +(::String, ::String, ::Int64) at ./operators.jl:529\n\
    \   [2] string_sequence(::Int64) at /tmp/tmptlqc59st.jl:11\n   [3] top-level scope\
    \ at /tmp/tmptlqc59st.jl:21\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmptlqc59st.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmptlqc59st.jl:22\n  Test threw exception\n  Expression: candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: no method matching +(::String,\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] +(::String, ::String, ::Int64) at\
    \ ./operators.jl:529\n   [2] string_sequence(::Int64) at /tmp/tmptlqc59st.jl:11\n\
    \   [3] top-level scope at /tmp/tmptlqc59st.jl:22\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmptlqc59st.jl:19\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptlqc59st.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    \n    for i = 1:n\n        string = string + string(i)\n\
    \    \n    return string\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpljd47tfr.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpljd47tfr.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    if n == 0 \n        \" Return an empty string.\"\n     \
    \   return \"\"\n    \" Return string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    return \" \".(string_sequence(n-1))\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Hint: Use a for loop to iterate over the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp720nmedb.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp720nmedb.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings and\
    \ returns a vector of integers representing the number of times each string appears\
    \ in the vector.\nFor example, if the input vector is [\"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"] then the output\
    \ vector should be [2, 2, 2, 2, 2, 1, 1, 1].\nHint: Use a for loop to iterate\
    \ over the strings in the vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpewbji2xf.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpewbji2xf.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of strings as input and returns a vector of integers containing the number\
    \ of times each string appears in the input vector.\nFor example, if the input\
    \ vector is [\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"], the output vector should\
    \ be [1, 1, 2, 1, 1, 2].\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqwbl4zpv.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqwbl4zpv.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaulveduz.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpaulveduz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpaulveduz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = String[]\n    for i = 1 to n do\n        string_sequence\
    \ = string_sequence @ [String(i)]\n    return string_sequence\n</code>\n<|/ a\
    \ tags=julia |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsv9r_ggw.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsv9r_ggw.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq[i] = i\n    end\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of strings and returns a vector of integers representing the number of\
    \ times each string appears in the vector.\nFor example, if the input vector is\
    \ [\"a\", \"a\", \"b\", \"b\", \"c\"], then the output vector should be [1, 1,\
    \ 2, 1].\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9c4dzjh8.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9c4dzjh8.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nWrite a function that\
    \ takes a string and returns the number of characters in the string.\nWrite a\
    \ function that takes a string and returns the number of lines in the string.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are not spaces.\nWrite a function that takes a string and returns\
    \ the number of words in the string that are not spaces.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are not\
    \ spaces.\nWrite a function that takes a string and returns the number of lines\
    \ in the string that are not spaces.\nWrite a function that takes a string and\
    \ returns the number of words in the string that are not spaces.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are not spaces.\nWrite a function that takes a string and returns the number\
    \ of lines in the string that are not spaces.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are not spaces.\nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of lines in the string that are not spaces.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are not spaces.\nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of lines in the string that are not spaces.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are not spaces.\nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of lines in the string that are not spaces.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are not spaces.\nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of lines in the string that are not spaces.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are not spaces.\nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of lines in the string that are not spaces.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are not spaces.\nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of lines in the string that are not spaces.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are not spaces.\nWrite a\
    \ function that takes a string and returns the number of \nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpngiub61_.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpngiub61_.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0:n\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nHint: Use a for\
    \ loop to iterate over the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_u88up4l.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_u88up4l.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n <= 0\n        error(\"n must be positive\")\n    else if n > 0\n   \
    \     string_sequence(n - 1) + \" \" ++ string_sequence(n)\n    else\n       \
    \ error(\"n must be positive\")\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the numbers in the vector.\nFor example,\
    \ if the vector is [1,2,3,4,5], the function should return 15.\nHint: use the\
    \ reduce function.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyvomb4v_.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyvomb4v_.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n\n    do\n        string_sequence =\
    \ string_sequence + \" \" + string(i)\n    done\n    return string_sequence\n\
    </code>\n<|/ a |>\n<| c |>\nThis answer would be better if it explained what it\
    \ does and why it works.\n<|/ c |>\n<| a tags=julia |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpgx1ivoj1.jl:10\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpgx1ivoj1.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 1\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a for loop and a prime number generator to generate prime numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx0phc6mc.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx0phc6mc.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ number n and returns the string \"n\" repeated n times.\n>>> string_sequence(5)\n\
    '5'\n>>> string_sequence(10)\n'5 '\n>>> string_sequence(0)\n'0'\n>>> string_sequence(-1)\n\
    '-1'\n>>> string_sequence(-10)\n'-10'\n>>> string_sequence(-100)\n'-100'\n>>>\
    \ string_sequence(-1000)\n'-1000 '\n>>> string_sequence(-1000000000)\n'-1000000000'\n\
    >>> string_sequence(-1000000000000)\n'-1000000000000'\n>>> string_sequence(-1000000000000000)\n\
    '-1000000000000000'\n>>> string_sequence(-1000000000000000000)\n'-1000000000000000000'\n\
    >>> string_sequence(-100000000000000000000)\n'-100000000000000000000'\n>>> string_sequence(-10000000000000000000000)\n\
    '-10000000000000000000000'\n>>> string_sequence(-1000000000000000000000000)\n\
    '-1000000000000000000000000'\n>>> string_sequence(-100000000000000000000000000)\n\
    '-100000000000000000000000000'\n>>> string_sequence(-10000000000000000000000000000)\n\
    '-10000000000000000000000000000'\n>>> string_sequence(-1000000000000000000000000000000)\n\
    '-1000000000000000000000000000000'\n>>> string_sequence(-1000000000000000000000000000000000)\n\
    '-1000000000000000000000000000000000'\n>>> string_sequence(-10000000000000000000000000000000000000000)\n\
    '-100000000000000000000000000000000'\n>>> string_sequence(-1000000000000000000000000000000000000000)\n\
    '-1000000000000000000000000000000000'\n>>> string_sequence(-1000000000000000000000000000000000000000)\n\
    '-1000000000000000000000000000000000'\n>>> string_sequence(-100000000000000000000000000000000000000000)\n\
    '-1000000000000000000000000000000000'\n>>> string_sequence(-10000000000000000000000000000000000000000)\n\
    '-100000000000000000000000000000000'\n>>> string_sequence(-1000000000000000000000000000000000000000)\n\
    '-1000000000000000000000000000000000'\n>>> string_sequence(-1000000000000000000000000000000000000000)\n\
    '-1000000000000000000000000000000000'\n>>> string_sequence(-100000000000000000000000000000000000000000)\n\
    '-1000000000000000000000000000000000'\n>>> string_sequence(-10000000000000000000000000000000000000000)\n\
    '-100000000000000000000000000000000'\n>>> string_sequence(-1000000000000000000000000000000000000000)\n\
    '-1000000000000000000000000000000000'\n>>> string_sequence(-1000000000000000000000000000000000000000)\n\
    '-1000000000000000000000000000000000'\n>>> string_sequence(-100000000000000000000000000000000000000000)\n\
    '-1000000000000000000000000000000000'\n>>> string_sequence(-10000000000000000000000000000000000000000)\n\
    '-100000000000000000000000000000000'\n>>> string_sequence(-100000000000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpce48hm0z.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpce48hm0z.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string.\nHint: Use length() function\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_2y6wifj.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_2y6wifj.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return join(\" \",string_seq)\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. Write a test to see if it works.\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkwexju66.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkwexju66.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n  \
    \      return \"0\"\n    else\n        string_sequence(n - 1) + \" \" ++ string_sequence(n\
    \ - 1)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a number\
    \ n and returns the string \"n!\".\nFor example, string_sequence(3) should return\
    \ \"3!\".\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9c0lt7yj.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9c0lt7yj.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return join(string_seq,\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns a string with all the characters in lower case and\
    \ spaces replaced by underscores.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3owv8i1z.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3owv8i1z.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a number n and returns\
    \ the string \"n!\".\nWrite a function that takes a number n and returns the string\
    \ \"n!+n\"\nWrite a function that takes a number n and returns the string \"n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n!+n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n!+n!+n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n!+n!+n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n!+n!+n!+n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n!+n!+n!+n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n!+n!+n!+n!+n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n!\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfbuvgzu9.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfbuvgzu9.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a number to a string\
    \ and returns the string in reverse order. For example, convert_number(10) should\
    \ return \"010\".\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6wlu80_o.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6wlu80_o.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = n\n    do\n        string += i\n       \
    \ i += 1\n    done\n    return string\n</code>\n<|/ a |>\n<| c |>\nThis answer\
    \ does not explain what it does, and does not explain why it works. Please add\
    \ some explanation.\n<|/ c |>\n<| c |>\nI added some explanation.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp7g09jt0g.jl:11\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp7g09jt0g.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7t8d1xoh.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7t8d1xoh.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq += String(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.0>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_mchwx6e.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_mchwx6e.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    \n    for i = 1 to n do\n        string = string\
    \ + \" \" + i\n    \n    return string\n</code>\n<|/ a tags=julia,string |>\n\
    <| a dscore=2 |>\nIn Julia 1.5 you can use the string interpolation syntax to\
    \ achieve this easily:\n<code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4 5\"\n</code>\n\
    <|/ a tags=julia,string |>\n<| a dscore=2 |>\nIn Julia 1.5 you can use the string\
    \ interpolation syntax to achieve this easily:\n<code>\njulia> \"$(0:5)\"\n\"\
    0 1 2 3 4 5\"\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\n\
    In Julia 1.5 you can use the string interpolation syntax to achieve this easily:\n\
    <code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4 5\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.5 you can use the string interpolation syntax to achieve this\
    \ easily:\n<code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4 5\"\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can use the string interpolation\
    \ syntax to achieve this easily:\n<code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4 5\"\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can use\
    \ the string interpolation syntax to achieve this easily:\n<code>\njulia> \"$(0:5)\"\
    \n\"0 1 2 3 4 5\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\nIn Julia\
    \ 1.5 you can use the string interpolation syntax to achieve this easily:\n<code>\n\
    julia> \"$(0:5)\"\n\"0 1 2 3 4 5\"\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\nIn Julia 1.5 you can use the string interpolation syntax to achieve this\
    \ easily:\n<code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4 5\"\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can use the string interpolation\
    \ syntax to achieve this easily:\n<code>\njulia> \"$(0:5)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc0djjbip.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc0djjbip.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    \n    for i = 1 to n do\n        string = string\
    \ + \" \" + i\n    \n    return string\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwhan1iex.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwhan1iex.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv0ki_e62.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv0ki_e62.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n-1 do\n        string_seq[i] =\
    \ i\n    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of characters in it.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp_aya50m3.jl:9\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp_aya50m3.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = n\n    do\n        string += i\n       \
    \ i += 1\n    done\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ a string with all the characters in lower case.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3kek3hk9.jl:11\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp3kek3hk9.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for k in 0..n-1\n        string_sequence = string_sequence\
    \ + \" \" + string_sequence(k)\n    end\n    string_sequence\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprz2xwq4x.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprz2xwq4x.jl:14\n"
  exit_code: 1
  status: Exception
