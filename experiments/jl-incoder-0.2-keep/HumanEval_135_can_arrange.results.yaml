name: HumanEval_135_can_arrange
language: julia
results:
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27qzux2s.jl:19\nin expression starting at\
    \ /tmp/tmp27qzux2s.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr5i7y56d.jl:21\nin expression starting at\
    \ /tmp/tmpr5i7y56d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeklj8yfb.jl:19\nin expression starting at\
    \ /tmp/tmpeklj8yfb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    can_arrange([1,2,4,3,5]) = 3\n\
    \    can_arrange([1,2,3]) = -1\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_4692hq.jl:19\nin expression starting at\
    \ /tmp/tmp8_4692hq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe_z2njat.jl:19\nin expression starting at\
    \ /tmp/tmpe_z2njat.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmjtrytqr.jl:19\nin expression starting at\
    \ /tmp/tmpmjtrytqr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcqwkc8aa.jl:19\nin expression starting at\
    \ /tmp/tmpcqwkc8aa.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n\
    \        if arr[index] > arr[largest]\n            largest = arr[index]\n    \
    \        largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n\
    @assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of elements in a given array which are\ngreater than\
    \ or equal to the element immediately preceding it. If no\nsuch element exists\
    \ then return -1. The given array will not contain\nduplicate values.\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn7l8sppk.jl:21\nin expression starting at\
    \ /tmp/tmpn7l8sppk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] <= arr[largest]\n            largest = index\n         \
    \   largestIndex = index\n        else\n            break\n        end\n    end\n\
    \    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the array arr has all unique elements. \nThe\
    \ function should work for any array type.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe_8avitx.jl:23\nin expression starting at\
    \ /tmp/tmpe_8avitx.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns an array of all\
    \ possible permutations of the given array. For example, if the input was [1,2,3]\
    \ then the output would be [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppjzaffrm.jl:21\nin expression starting at\
    \ /tmp/tmppjzaffrm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] <= arr[largest]\n            largest = arr[index]\n    \
    \        largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_eltxtsk.jl:21\nin expression starting at\
    \ /tmp/tmp_eltxtsk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qy_21dk.jl:21\nin expression starting at\
    \ /tmp/tmp2qy_21dk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > arr[largest]\n\
    \            largest = i\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfet3voje.jl:19\nin expression starting at\
    \ /tmp/tmpfet3voje.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl4bq3t_x.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl4bq3t_x.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl4bq3t_x.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl4bq3t_x.jl:25\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl4bq3t_x.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl4bq3t_x.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl4bq3t_x.jl:26\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl4bq3t_x.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl4bq3t_x.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl4bq3t_x.jl:27\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl4bq3t_x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl4bq3t_x.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl4bq3t_x.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.5>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,3])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the largest index of\
    \ an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplzvcrl41.jl:19\nin expression starting at\
    \ /tmp/tmplzvcrl41.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the index of the element in the given array that is closest to the given\
    \ number in the following way:\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzbs_8h5x.jl:19\nin expression starting at\
    \ /tmp/tmpzbs_8h5x.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1z0ql4p.jl:19\nin expression starting at\
    \ /tmp/tmpg1z0ql4p.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjfmybw_u.jl:21\nin expression starting at\
    \ /tmp/tmpjfmybw_u.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    largestIndex = -1\n    for index in 2:length(arr)\n\
    \        if arr[index] > largest\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyk4s3zjx.jl:21\nin expression starting at\
    \ /tmp/tmpyk4s3zjx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_1wjq_q2.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_1wjq_q2.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_1wjq_q2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_1wjq_q2.jl:25\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_1wjq_q2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_1wjq_q2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_1wjq_q2.jl:26\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_1wjq_q2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_1wjq_q2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_1wjq_q2.jl:27\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_1wjq_q2.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_1wjq_q2.jl:23\ntest set: Error\
    \ During Test at /tmp/tmp_1wjq_q2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == -1\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] ge"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_1wjq_q2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl1qo_qto.jl:19\nin expression starting at\
    \ /tmp/tmpl1qo_qto.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptnxmiguw.jl:19\nin expression starting at\
    \ /tmp/tmptnxmiguw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for x in arr[2:end]\n        if x > largest\n  \
    \          largest = x\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the index of the element in\
    \ the given array which\n    has the smallest value. If there is no such element\
    \ then return -1.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t\
    @test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87r6qqa8.jl:19\nin expression starting at\
    \ /tmp/tmp87r6qqa8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the element\
    \ in the given array that is closest to the given value.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwr275siv.jl:19\nin expression starting at\
    \ /tmp/tmpwr275siv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times a given value occurs in an array. For example,\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27n68412.jl:19\nin expression starting at\
    \ /tmp/tmp27n68412.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the index of an element\
    \ in a sorted array\nGiven a sorted array arr of n integers, return the index\
    \ if it exists and -1 if it does not. \nThe array arr will not be empty and will\
    \ not contain duplicate values.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpher9xcm2.jl:19\nin expression starting at\
    \ /tmp/tmpher9xcm2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the index of the element in the array which has the largest value greater\
    \ than or equal to the element immediately preceding it. Return -1 if no such\
    \ element exists.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t\
    @test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpimaknmsp.jl:19\nin expression starting at\
    \ /tmp/tmpimaknmsp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_km37x1d.jl:21\nin expression starting at\
    \ /tmp/tmp_km37x1d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuskkkbtm.jl:19\nin expression starting at\
    \ /tmp/tmpuskkkbtm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nQuestion 3\nWrite a function that returns true if the given array\
    \ is sorted in ascending order.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpawqxty42.jl:19\nin expression starting at\
    \ /tmp/tmpawqxty42.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_lukj0m.jl:21\nin expression starting at\
    \ /tmp/tmp8_lukj0m.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = Int64(-1)\n    largest = arr[1] if arr[1] > largest else largest\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp8vfa_xyl.jl:10 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8vfa_xyl.jl:12\n\
    in expression starting at /tmp/tmp8vfa_xyl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pdw9yff.jl:21\nin expression starting at\
    \ /tmp/tmp7pdw9yff.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > arr[largest]\n\
    \            largest = i\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6z3ygi28.jl:19\nin expression starting at\
    \ /tmp/tmp6z3ygi28.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n\
    \        if arr[index] > arr[largest]\n            largest = arr[index]\n    \
    \        largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<text>\nQuestion 3\nWrite a function that returns the index of the\
    \ element in the given array that is closest to the given value. If no such element\
    \ exists then return -1. The given array will not contain duplicate values.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ca3hl25.jl:21\nin expression starting at\
    \ /tmp/tmp0ca3hl25.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.0>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.0>\n@time can_arrange([1,2,3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the index of the element in the given array\
    \ that is the\nlargest and also not greater than the element immediately preceding\
    \ it. Return -1\nif no such element exists.\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps5x1tssk.jl:19\nin expression starting at\
    \ /tmp/tmps5x1tssk.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjqqa8mbk.jl:21\nin expression starting at\
    \ /tmp/tmpjqqa8mbk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzdvyuy9s.jl:21\nin expression starting at\
    \ /tmp/tmpzdvyuy9s.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwfpmsysg.jl:26\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: -1 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwfpmsysg.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwfpmsysg.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpwfpmsysg.jl:27\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwfpmsysg.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwfpmsysg.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpwfpmsysg.jl:28\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: -1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwfpmsysg.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwfpmsysg.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpwfpmsysg.jl:29\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: -1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwfpmsysg.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwfpmsysg.jl:25\ntest set: Error\
    \ During Test at /tmp/tmpwfpmsysg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == -1\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwfpmsysg.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for x in arr[2:end]\n        if x <= largest\n \
    \           largest = x\n        else\n            break\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of times an element appears in an array.\
    \ For example, the number of times 3 appears in [1,2,3,4,3] is 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5mxauj42.jl:20\nin expression starting at\
    \ /tmp/tmp5mxauj42.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the number of unique elements in it. \nThe vector can contain duplicates.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_etmhjs.jl:19\nin expression starting at\
    \ /tmp/tmpy_etmhjs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the number of elements\
    \ in a vector which are not equal to zero.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5k1z9l6r.jl:19\nin expression starting at\
    \ /tmp/tmp5k1z9l6r.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the number of unique elements in the vector. \nIf there are multiple elements\
    \ that are the same, only count the element once.\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsg6yjaar.jl:19\nin expression starting at\
    \ /tmp/tmpsg6yjaar.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppeaafy78.jl:19\nin expression starting at\
    \ /tmp/tmppeaafy78.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n\
    \        if arr[index] <= arr[largest]\n            largest = arr[index]\n   \
    \         largestIndex = index\n        else\n            break\n        end\n\
    \    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2,\
    \ 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7qxe7f44.jl:23\nin expression starting at\
    \ /tmp/tmp7qxe7f44.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of elements in a vector that are greater than or equal to\
    \ some value.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwv55sxa7.jl:19\nin expression starting at\
    \ /tmp/tmpwv55sxa7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in a vector which are not equal to zero.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2,\
    \ 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb_zix1vu.jl:19\nin expression starting at\
    \ /tmp/tmpb_zix1vu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nQ: What is the largest index of an element which is not greater\
    \ than or equal to the element immediately preceding it?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3z69vbu0.jl:19\nin expression starting at\
    \ /tmp/tmp3z69vbu0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector and returns\
    \ the number of unique elements in the vector. \nThe vector will not contain duplicate\
    \ values.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv2_0m2p8.jl:19\nin expression starting at\
    \ /tmp/tmpv2_0m2p8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4ftuxqg.jl:21\nin expression starting at\
    \ /tmp/tmpd4ftuxqg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyy02m48t.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyy02m48t.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyy02m48t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyy02m48t.jl:25\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyy02m48t.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyy02m48t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyy02m48t.jl:26\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyy02m48t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyy02m48t.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyy02m48t.jl:27\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyy02m48t.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyy02m48t.jl:23\ntest set: Error\
    \ During Test at /tmp/tmpyy02m48t.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == -1\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] ge"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyy02m48t.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a vector which are greater than\nor equal to another given element. For example,\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_9ffu2ja.jl:19\nin expression starting at\
    \ /tmp/tmp_9ffu2ja.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.0>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the median of an array\n\
    The median is the value separating the higher half of a data set from the lower\
    \ half. \nThe median of a data set is the value separating the higher half of\
    \ a data set from the lower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the lower half. \nThe median of a data set\
    \ is the value separating the higher half of a data set from the lower half. \n\
    The median of a data set is the value separating the higher half of a data set\
    \ from the lower half. \nThe median of a data set is the value separating the\
    \ higher half of a data set from the lower half. \nThe median of a data set is\
    \ the value separating the higher half of a data set from the lower half. \nThe\
    \ median of a data set is the value separating the higher half of a data set from\
    \ the lower half. \nThe median of a data set is the value separating the higher\
    \ half of a data set from the lower half. \nThe median of a data set is the value\
    \ separating the higher half of a data set from the lower half. \nThe median of\
    \ a data set is the value separating the higher half of a data set from the lower\
    \ half. \nThe median of a data set is the value separating the higher half of\
    \ a data set from the lower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the lower half. \nThe median of a data set\
    \ is the value separating the higher half of a data set from the lower half. \n\
    The median of a data set is the value separating the higher half of a data set\
    \ from the lower half. \nThe median of a data set is the value separating the\
    \ higher half of a data set from the lower half. \nThe median of a data set is\
    \ the value separating the higher half of a data set from the lower half. \nThe\
    \ median of a data set is the value separating the higher half of a data set from\
    \ the lower half. \nThe median of a data set is the value separating the higher\
    \ half of a data set from the lower half. \nThe median of a data set is the value\
    \ separating the higher half of a data set from the lower half. \nThe median of\
    \ a data set is the value separating the higher half of a data set from the lower\
    \ half. \nThe median of a data set is the value separating the higher half of\
    \ a data set from the lower half. \nThe median of a data set is the value separating\
    \ the higher half of a data \nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx8g7sirt.jl:19\nin expression starting at\
    \ /tmp/tmpx8g7sirt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for x in arr[2:end]\n        if x > largest\n  \
    \          largest = x\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if the\
    \ given array contains no duplicates. \nThe given array will not contain duplicate\
    \ values.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmk576_az.jl:19\nin expression starting at\
    \ /tmp/tmpmk576_az.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n\
    @assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the array arr has all unique elements. \nIf it does not,\
    \ then return false. \nThe given array will not contain duplicate values.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2,\
    \ 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9l_1xhir.jl:21\nin expression starting at\
    \ /tmp/tmp9l_1xhir.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzvvati8x.jl:19\nin expression starting at\
    \ /tmp/tmpzvvati8x.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_fou7t89.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_fou7t89.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_fou7t89.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_fou7t89.jl:25\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_fou7t89.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_fou7t89.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_fou7t89.jl:26\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_fou7t89.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_fou7t89.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_fou7t89.jl:27\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_fou7t89.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_fou7t89.jl:23\ntest set: Error\
    \ During Test at /tmp/tmp_fou7t89.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == -1\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] ge"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_fou7t89.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4tbvd8s_.jl:19\nin expression starting at\
    \ /tmp/tmp4tbvd8s_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf348jtk1.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf348jtk1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf348jtk1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf348jtk1.jl:25\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf348jtk1.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf348jtk1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf348jtk1.jl:26\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf348jtk1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf348jtk1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf348jtk1.jl:27\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf348jtk1.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf348jtk1.jl:23\ntest set: Error\
    \ During Test at /tmp/tmpf348jtk1.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == -1\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] ge"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf348jtk1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] <= arr[largest]\n            largest = index\n        else\n\
    \            largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbib6zs0k.jl:22\nin expression starting at\
    \ /tmp/tmpbib6zs0k.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3rva7dxa.jl:19\nin expression starting at\
    \ /tmp/tmp3rva7dxa.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n      \
    \  if arr[i] > arr[largest]\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times an element appears in an array. \nThe given\
    \ array will not contain duplicate values.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6t6ly6or.jl:21\nin expression starting at\
    \ /tmp/tmp6t6ly6or.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n\
    \        if arr[index] > arr[largest]\n            largest = arr[index]\n    \
    \        largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the index of the\
    \ first element in a vector that is greater than or equal to the element immediately\
    \ preceding it. Return -1 if no such element exists.\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22g5vyvs.jl:21\nin expression starting at\
    \ /tmp/tmp22g5vyvs.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppews1fc1.jl:19\nin expression starting at\
    \ /tmp/tmppews1fc1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    largestIndex = 1\n    for index in 2:length(arr)\n\
    \        if arr[index] > largest\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzjyqtq5k.jl:21\nin expression starting at\
    \ /tmp/tmpzjyqtq5k.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsjulsost.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsjulsost.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsjulsost.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsjulsost.jl:25\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsjulsost.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsjulsost.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsjulsost.jl:26\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsjulsost.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsjulsost.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsjulsost.jl:27\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsjulsost.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsjulsost.jl:23\ntest set: Error\
    \ During Test at /tmp/tmpsjulsost.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == -1\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] ge"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsjulsost.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the index of the element\
    \ in the given array which has the largest value. The given array will not contain\
    \ duplicate values.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplv3y3mt0.jl:19\nin expression starting at\
    \ /tmp/tmplv3y3mt0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpufilpcpz.jl:19\nin expression starting at\
    \ /tmp/tmpufilpcpz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of elements in the\
    \ array which are not equal to its index.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps6kt1nr5.jl:19\nin expression starting at\
    \ /tmp/tmps6kt1nr5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given array\
    \ contains no duplicates.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo3mcgjrq.jl:19\nin expression starting at\
    \ /tmp/tmpo3mcgjrq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns true if the array\
    \ arr has all unique elements. \nIf it does not, then return false. \nThe given\
    \ array will not contain duplicate values.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpviiygcyf.jl:21\nin expression starting at\
    \ /tmp/tmpviiygcyf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp92j4_5m4.jl:19\nin expression starting at\
    \ /tmp/tmp92j4_5m4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcbgtdlte.jl:19\nin expression starting at\
    \ /tmp/tmpcbgtdlte.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp70rst449.jl:26\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: -1 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp70rst449.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp70rst449.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp70rst449.jl:27\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp70rst449.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp70rst449.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp70rst449.jl:28\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: -1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp70rst449.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp70rst449.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp70rst449.jl:29\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: -1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp70rst449.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp70rst449.jl:25\ntest set: Error\
    \ During Test at /tmp/tmp70rst449.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == -1\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp70rst449.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n      \
    \  if arr[i] > arr[largest]\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the given array contains\
    \ no duplicates.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t\
    @test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2vvn7f1p.jl:21\nin expression starting at\
    \ /tmp/tmp2vvn7f1p.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n      \
    \  if arr[i] > largest\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of unique elements\
    \ in a given array.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp67kcorqd.jl:21\nin expression starting at\
    \ /tmp/tmp67kcorqd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largest = arr[1]\n    for i in 2:length(arr)\n     \
    \   if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprh0a6vl9.jl:20\nin expression starting at\
    \ /tmp/tmprh0a6vl9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvu_fwd9e.jl:21\nin expression starting at\
    \ /tmp/tmpvu_fwd9e.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@time can_arrange(arr);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of unique elements in a given\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppwgzkuun.jl:19\nin expression starting at\
    \ /tmp/tmppwgzkuun.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an \nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppcdi8f0g.jl:19\nin expression starting at\
    \ /tmp/tmppcdi8f0g.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of elements in the\
    \ array which are not greater than or equal to the element immediately preceding\
    \ it. No duplicate values should be considered.\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptiso6aoq.jl:19\nin expression starting at\
    \ /tmp/tmptiso6aoq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largest = arr[1]\n    for i in 2:length(arr)\n     \
    \   if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfppo7g10.jl:20\nin expression starting at\
    \ /tmp/tmpfppo7g10.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.4>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the number of elements in the array which are not equal to its second\
    \ element. For example, if the array is [1,2,3,4,5] then your function should\
    \ return 3 because there are 3 elements in the array which are not equal to 2.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbtcx1qm5.jl:19\nin expression starting at\
    \ /tmp/tmpbtcx1qm5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiornzur8.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiornzur8.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiornzur8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiornzur8.jl:25\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiornzur8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiornzur8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiornzur8.jl:26\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiornzur8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiornzur8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiornzur8.jl:27\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiornzur8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiornzur8.jl:23\ntest set: Error\
    \ During Test at /tmp/tmpiornzur8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == -1\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] ge"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiornzur8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpki76gxmi.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpki76gxmi.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpki76gxmi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpki76gxmi.jl:25\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpki76gxmi.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpki76gxmi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpki76gxmi.jl:26\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpki76gxmi.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpki76gxmi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpki76gxmi.jl:27\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpki76gxmi.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpki76gxmi.jl:23\ntest set: Error\
    \ During Test at /tmp/tmpki76gxmi.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == -1\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] ge"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpki76gxmi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of unique elements\
    \ in a given array. \nThe function should work for both vectors and matrices.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm1aycuj7.jl:19\nin expression starting at\
    \ /tmp/tmpm1aycuj7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphbzp1uo4.jl:19\nin expression starting at\
    \ /tmp/tmphbzp1uo4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw1_2vlxw.jl:21\nin expression starting at\
    \ /tmp/tmpw1_2vlxw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n\
    @assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times the given element appears in an array. For\
    \ example, the number of times 5 appears in [1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3eh6aeq4.jl:21\nin expression starting at\
    \ /tmp/tmp3eh6aeq4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = Int64(-1)\n    largest = arr[1]\n    for x in arr[2:end]\n \
    \       if x <= largest\n            largest = x\n        else\n            break\n\
    \    end\n    return largest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplgt95iie.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplgt95iie.jl:1\n\
    in expression starting at /tmp/tmplgt95iie.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp7nwzl5q.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp7nwzl5q.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp7nwzl5q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp7nwzl5q.jl:25\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp7nwzl5q.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp7nwzl5q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp7nwzl5q.jl:26\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp7nwzl5q.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp7nwzl5q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp7nwzl5q.jl:27\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp7nwzl5q.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp7nwzl5q.jl:23\ntest set: Error\
    \ During Test at /tmp/tmpp7nwzl5q.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == -1\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] ge"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7nwzl5q.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = Int64(-1)\n    for x in arr\n        if x > largest\n      \
    \      largest = x\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in a vector that are less than a given value.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_l7qbfs.jl:19\nin expression starting at\
    \ /tmp/tmpk_l7qbfs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times an element\
    \ appears in an array. For example, the number of times 3 appears in [1,2,3,4,3,5,6,7,8,9]\
    \ would be 3. Do not use any built-in Julia functions.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5kubr399.jl:19\nin expression starting at\
    \ /tmp/tmp5kubr399.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the index of the element in the given array that is the\nlargest amongst\
    \ all the elements in the given array. If there are multiple elements with\nthe\
    \ largest value, then return any one of them. If there are no elements with the\n\
    largest value, then return -1.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppll5v8sw.jl:19\nin expression starting at\
    \ /tmp/tmppll5v8sw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for x in arr[2:end]\n        if x <= largest\n \
    \           largest = x\n        else\n            break\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns true if the array arr has all unique elements and false\
    \ otherwise. For example\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpav1jir8f.jl:20\nin expression starting at\
    \ /tmp/tmpav1jir8f.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in the array which are not equal to its \nindex.\
    \ For example, if the array is [1,2,3,4,5] then the function should return 3.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp551lsibq.jl:19\nin expression starting at\
    \ /tmp/tmp551lsibq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp02wu_81x.jl:19\nin expression starting at\
    \ /tmp/tmp02wu_81x.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times each element appears in an array.\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1krdsc37.jl:19\nin expression starting at\
    \ /tmp/tmp1krdsc37.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the element\
    \ in the array which is closest to the given value. If there are multiple elements\
    \ with the same distance then return the smallest index.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo3as_pq0.jl:19\nin expression starting at\
    \ /tmp/tmpo3as_pq0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkuu9kxdz.jl:19\nin expression starting at\
    \ /tmp/tmpkuu9kxdz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    largestIndex = 1\n    for index in 2:length(arr)\n\
    \        if arr[index] > largest\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6he2000d.jl:21\nin expression starting at\
    \ /tmp/tmp6he2000d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n\
    \        if arr[index] <= arr[largest]\n            largest = arr[index]\n   \
    \         largestIndex = index\n        else\n            break\n        end\n\
    \    end\n    return largestIndex\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the element in the given array that is closest to\
    \ the given value. If there are multiple elements with the same value then return\
    \ the index of the first one. For example, if the given array is [1,2,3,4,5] and\
    \ you call closest_index([1,2,3,4,5],3) then the function should return 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2,\
    \ 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe0micgpl.jl:23\nin expression starting at\
    \ /tmp/tmpe0micgpl.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpobsh1nph.jl:19\nin expression starting at\
    \ /tmp/tmpobsh1nph.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2m8yaww4.jl:19\nin expression starting at\
    \ /tmp/tmp2m8yaww4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjw84h0m.jl:21\nin expression starting at\
    \ /tmp/tmprjw84h0m.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times an element appears in an array. \nThe function should\
    \ work for both sorted and unsorted arrays.\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl0fx5vy2.jl:19\nin expression starting at\
    \ /tmp/tmpl0fx5vy2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the first index of\
    \ an element which is not greater than or equal to it\nWrite a function that returns\
    \ the index of the first element of an array which\nis not greater than or equal\
    \ to the element given as input. If such element does\nnot exist then return -1.\
    \ The given array will not contain duplicate values.\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcg5io5rr.jl:19\nin expression starting at\
    \ /tmp/tmpcg5io5rr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of times the given element appears in an array. For example,\
    \ the number of times 3 appears in [1,2,3,4,5,6,7,8,9] would be 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7xi2_tlm.jl:19\nin expression starting at\
    \ /tmp/tmp7xi2_tlm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times the given element appears in an array. For example,\
    \ the element 3 appears twice in the array [1,2,3,4,3,5,6].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinu696u1.jl:19\nin expression starting at\
    \ /tmp/tmpinu696u1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for x in arr[2:end]\n        if x <= largest\n \
    \           largest = x\n        else\n            return -1\n        end\n  \
    \  end\n    return largest\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the index of the element in the given array that is closest to\
    \ the given value. The given array will not contain duplicate values.\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5pftyk1p.jl:21\nin expression starting at\
    \ /tmp/tmp5pftyk1p.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for x in arr[2:end]\n        if x <= largest\n \
    \           largest = x\n        else\n            return -1\n        end\n  \
    \  end\n    return largest\nend\n</cell>\n<code language=julia-1.3>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of elements in a vector which are not equal\
    \ to zero.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjywhby21.jl:21\nin expression starting at\
    \ /tmp/tmpjywhby21.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsafuvxt9.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsafuvxt9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsafuvxt9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsafuvxt9.jl:25\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsafuvxt9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsafuvxt9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsafuvxt9.jl:26\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsafuvxt9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsafuvxt9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsafuvxt9.jl:27\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsafuvxt9.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsafuvxt9.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsafuvxt9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    largestIndex = 1\n    for index in 2:length(arr)\n\
    \        if arr[index] > largest\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the index of the element\
    \ in the given array that is closest to the given value. If no such element exists\
    \ then return -1. The given array will not contain duplicate values.\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_owu28gg.jl:21\nin expression starting at\
    \ /tmp/tmp_owu28gg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg58b8umf.jl:19\nin expression starting at\
    \ /tmp/tmpg58b8umf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70hk0pjz.jl:19\nin expression starting at\
    \ /tmp/tmp70hk0pjz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the array contains\
    \ any duplicates. \nWrite a function that returns true if the array contains any\
    \ duplicates. \nWrite a function that returns true if the array contains any duplicates.\
    \ \nWrite a function that returns true if the array contains any duplicates. \n\
    Write a function that returns true if the array contains any duplicates. \nWrite\
    \ a function that returns true if the array contains any duplicates. \nWrite a\
    \ function that returns true if the array contains any duplicates. \nWrite a function\
    \ that returns true if the array contains any duplicates. \nWrite a function that\
    \ returns true if the array contains any duplicates. \nWrite a function that returns\
    \ true if the array contains any duplicates. \nWrite a function that returns true\
    \ if the array contains any duplicates. \nWrite a function that returns true if\
    \ the array contains any duplicates. \nWrite a function that returns true if the\
    \ array contains any duplicates. \nWrite a function that returns true if the array\
    \ contains any duplicates. \nWrite a function that returns true if the array contains\
    \ any duplicates. \nWrite a function that returns true if the array contains any\
    \ duplicates. \nWrite a function that returns true if the array contains any duplicates.\
    \ \nWrite a function that returns true if the array contains any duplicates. \n\
    Write a function that returns true if the array contains any duplicates. \nWrite\
    \ a function that returns true if the array contains any duplicates. \nWrite a\
    \ function that returns true if the array contains any duplicates. \nWrite a function\
    \ that returns true if the array contains any duplicates. \nWrite a function that\
    \ returns true if the array contains any duplicates. \nWrite a function that returns\
    \ true if the array contains any duplicates. \nWrite a function that returns true\
    \ if the array contains any duplicates. \nWrite a function that returns true if\
    \ the array contains any duplicates. \nWrite a function that returns true if the\
    \ array contains any duplicates. \nWrite a function that returns true if the array\
    \ contains any duplicates. \nWrite a function that returns true if the array contains\
    \ any duplicates. \nWrite a function that returns true if the array contains any\
    \ duplicates. \nWrite a function that returns true if the array contains any duplicates.\
    \ \nWrite a function that returns true if the array contains any duplicates. \n\
    Write a function that returns true if the array contains any duplicates. \nWrite\
    \ a function that returns true if the array contains any duplicates. \nWrite a\
    \ function that returns true if the array contains any duplicates. \nWrite a function\
    \ that returns true if the array contains any duplicates. \nWrite a function that\
    \ returns true if the array contains any duplicates. \nWrite a function that returns\
    \ true if the array contains any duplicates. \nWrite a function that returns true\
    \ if the array contains any duplicate\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcs8mn7mr.jl:19\nin expression starting at\
    \ /tmp/tmpcs8mn7mr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeo79e2xs.jl:19\nin expression starting at\
    \ /tmp/tmpeo79e2xs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpatuw8hkk.jl:19\nin expression starting at\
    \ /tmp/tmpatuw8hkk.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a vector which are not greater than or equal to the element immediately preceding\
    \ it. \nIf no such element exists then return -1. \nThe given array will not contain\
    \ duplicate values.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcvkmya39.jl:19\nin expression starting at\
    \ /tmp/tmpcvkmya39.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2pgeqn4z.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2pgeqn4z.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2pgeqn4z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2pgeqn4z.jl:25\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2pgeqn4z.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2pgeqn4z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2pgeqn4z.jl:26\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2pgeqn4z.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2pgeqn4z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2pgeqn4z.jl:27\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2pgeqn4z.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2pgeqn4z.jl:23\ntest set: Error\
    \ During Test at /tmp/tmp2pgeqn4z.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == -1\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] ge"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2pgeqn4z.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n\
    @assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times the given element appears in an array. For\
    \ example, the number of times 5 appears in [1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpprdnnltd.jl:21\nin expression starting at\
    \ /tmp/tmpprdnnltd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Find all elements of a vector\
    \ which satisfy a predicate\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjniw9f2f.jl:19\nin expression starting at\
    \ /tmp/tmpjniw9f2f.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the element in\
    \ the given array that\nhas the largest value greater than or equal to the given\
    \ element. If no\nsuch element exists then return -1. The given array will not\
    \ contain\nduplicate values.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaw3qsvvj.jl:21\nin expression starting at\
    \ /tmp/tmpaw3qsvvj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp66nz_bm2.jl:19\nin expression starting at\
    \ /tmp/tmp66nz_bm2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the index of the\
    \ element in the given array which has the largest value.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2x9s6aw3.jl:21\nin expression starting at\
    \ /tmp/tmp2x9s6aw3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = Int64(-1) # initialize largest to -1\n    largest = arr[1] #\
    \ set largest to the second element\n    for i in 2:length(arr) # loop over the\
    \ rest of the elements\n        if arr[i] > largest # if the current element is\
    \ greater than the largest\n            largest = arr[i] # then set largest to\
    \ the current element\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in the array that are\ngreater than the given element.\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgqj8cjb.jl:20\nin expression starting at\
    \ /tmp/tmpwgqj8cjb.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ the element in the given array appears consecutively.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_3xa3r_5.jl:19\nin expression starting at\
    \ /tmp/tmp_3xa3r_5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for el in arr\n        if el > largest\n           \
    \ largest = el\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95iydxig.jl:19\nin expression starting at\
    \ /tmp/tmp95iydxig.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n\
    @assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of elements in a given array that are\nless than a given\
    \ value.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm9s_cqx7.jl:21\nin expression starting at\
    \ /tmp/tmpm9s_cqx7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    largestIndex = -1\n    for index in 2:length(arr)\n\
    \        if arr[index] > largest\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxg3tg2v.jl:21\nin expression starting at\
    \ /tmp/tmpvxg3tg2v.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given array contains all unique elements. \nFor example\
    \ [1,2,2,3] returns true.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm9qv1egj.jl:19\nin expression starting at\
    \ /tmp/tmpm9qv1egj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojg0salk.jl:19\nin expression starting at\
    \ /tmp/tmpojg0salk.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo5qb6b09.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo5qb6b09.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo5qb6b09.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo5qb6b09.jl:25\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo5qb6b09.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo5qb6b09.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo5qb6b09.jl:26\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo5qb6b09.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo5qb6b09.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo5qb6b09.jl:27\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo5qb6b09.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo5qb6b09.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo5qb6b09.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaap1siin.jl:21\nin expression starting at\
    \ /tmp/tmpaap1siin.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the array contains any\
    \ duplicates. For example:\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcm01ug9w.jl:19\nin expression starting at\
    \ /tmp/tmpcm01ug9w.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n      \
    \  if arr[i] > arr[largest]\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of elements in a\
    \ vector that are less than or equal to some given value.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptrc33auq.jl:21\nin expression starting at\
    \ /tmp/tmptrc33auq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpae0q13ke.jl:19\nin expression starting at\
    \ /tmp/tmpae0q13ke.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    largestIndex = -1\n    for index in 2:length(arr)\n\
    \        if arr[index] > largest\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpahpp3vrs.jl:21\nin expression starting at\
    \ /tmp/tmpahpp3vrs.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsj0ej6yl.jl:19\nin expression starting at\
    \ /tmp/tmpsj0ej6yl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in a vector which are less than a given value.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp618onxx3.jl:19\nin expression starting at\
    \ /tmp/tmp618onxx3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4i4cffd.jl:19\nin expression starting at\
    \ /tmp/tmpn4i4cffd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = Int64(-1)\n    for x in arr\n        if x > largest\n      \
    \      largest = x\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoq060f4v.jl:19\nin expression starting at\
    \ /tmp/tmpoq060f4v.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of elements in a vector which are\
    \ greater than or equal to some value.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd7qw1tsw.jl:19\nin expression starting at\
    \ /tmp/tmpd7qw1tsw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ec35s5l.jl:19\nin expression starting at\
    \ /tmp/tmp7ec35s5l.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp750qlmj6.jl:19\nin expression starting at\
    \ /tmp/tmp750qlmj6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@time can_arrange(arr)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in the array\
    \ which are not greater than or equal to the element immediately preceding it.\
    \ Return 0 if no such element exists.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu28ae53d.jl:19\nin expression starting at\
    \ /tmp/tmpu28ae53d.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzqg3ra28.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzqg3ra28.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzqg3ra28.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzqg3ra28.jl:25\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzqg3ra28.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzqg3ra28.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzqg3ra28.jl:26\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzqg3ra28.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzqg3ra28.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzqg3ra28.jl:27\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzqg3ra28.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzqg3ra28.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzqg3ra28.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nQuestion 3\nWrite a function that returns the number of times\
    \ an element appears in an array. \nThe given array will not contain duplicate\
    \ values.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2jxrf1uh.jl:19\nin expression starting at\
    \ /tmp/tmp2jxrf1uh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for x in arr[2:end]\n        if x > largest\n  \
    \          largest = x\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of elements in a\
    \ vector that are not equal to zero.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuzof0s4p.jl:19\nin expression starting at\
    \ /tmp/tmpuzof0s4p.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n      \
    \  if arr[i] > arr[largest]\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the index of the element\
    \ in the given array that\nhas the largest value less than or equal to the element\
    \ immediately preceding it.\nIf no such element exists then return -1. The given\
    \ array will not contain duplicate\nvalues.\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpct1nkojc.jl:21\nin expression starting at\
    \ /tmp/tmpct1nkojc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy8sqhi_k.jl:19\nin expression starting at\
    \ /tmp/tmpy8sqhi_k.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbmmeu91w.jl:19\nin expression starting at\
    \ /tmp/tmpbmmeu91w.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp98ajiqiu.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp98ajiqiu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp98ajiqiu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp98ajiqiu.jl:25\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp98ajiqiu.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp98ajiqiu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp98ajiqiu.jl:26\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp98ajiqiu.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp98ajiqiu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp98ajiqiu.jl:27\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp98ajiqiu.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp98ajiqiu.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp98ajiqiu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > arr[largest]\n\
    \            largest = i\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph54rvo0o.jl:19\nin expression starting at\
    \ /tmp/tmph54rvo0o.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1w_rxczt.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1w_rxczt.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1w_rxczt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1w_rxczt.jl:25\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1w_rxczt.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1w_rxczt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1w_rxczt.jl:26\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1w_rxczt.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1w_rxczt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1w_rxczt.jl:27\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1w_rxczt.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1w_rxczt.jl:23\ntest set: Error\
    \ During Test at /tmp/tmp1w_rxczt.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == -1\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] ge"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1w_rxczt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyxnr5k1c.jl:19\nin expression starting at\
    \ /tmp/tmpyxnr5k1c.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = Int64(-1)\n    for x in arr\n        if x > largest\n      \
    \      largest = x\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 2\nWrite a function that returns an array of\
    \ all possible permutations of the given array. \nThe given array will not contain\
    \ duplicate values.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph1cyg4g1.jl:19\nin expression starting at\
    \ /tmp/tmph1cyg4g1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    largestIndex = -1\n    for index in 2:length(arr)\n\
    \        if arr[index] > largest\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnjf6dvsx.jl:21\nin expression starting at\
    \ /tmp/tmpnjf6dvsx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in the array which are not greater than or equal\
    \ to the element immediately preceding it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphtat2o10.jl:19\nin expression starting at\
    \ /tmp/tmphtat2o10.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbij9knda.jl:19\nin expression starting at\
    \ /tmp/tmpbij9knda.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > largest\n\
    \            largest = i\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkfv8o9pp.jl:19\nin expression starting at\
    \ /tmp/tmpkfv8o9pp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n      \
    \  if arr[i] > arr[largest]\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the index of the element in the array that\
    \ is\nclosest to the given value. If no such element exists then return -1.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01b4zjzb.jl:21\nin expression starting at\
    \ /tmp/tmp01b4zjzb.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzwhnfo9q.jl:19\nin expression starting at\
    \ /tmp/tmpzwhnfo9q.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = Int64(-1)\n    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ an array of all positive integers less than or equal to $n$. \nFor example,\
    \ given $n=5$, your function should return [1,2,3,4,5]. \nThe function should\
    \ return an array of integers even if the input $n$ is not a positive integer.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpirgapjv1.jl:20\nin expression starting at\
    \ /tmp/tmpirgapjv1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\n4.3 Finding the median of a vector\nWrite a function that returns the\
    \ median of a vector. Your function should run in $O(n)$ time.\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84vnvtvu.jl:21\nin expression starting at\
    \ /tmp/tmp84vnvtvu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_zgzly2k.jl:19\nin expression starting at\
    \ /tmp/tmp_zgzly2k.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo799t5yp.jl:19\nin expression starting at\
    \ /tmp/tmpo799t5yp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<text>\nQ: What\
    \ is the largest index of an element which is not greater than or equal to the\
    \ element immediately preceding it?\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp914piuw3.jl:19\nin expression starting at\
    \ /tmp/tmp914piuw3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpch9efoqm.jl:19\nin expression starting at\
    \ /tmp/tmpch9efoqm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the number of ways\
    \ to arrange the elements of a given array\nWrite a function that takes an array\
    \ of integers and returns the number of ways to arrange the elements of the array\
    \ into groups of three or more.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcmclpfi4.jl:19\nin expression starting at\
    \ /tmp/tmpcmclpfi4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in the array which are not equal to its first element.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpea9iczzf.jl:19\nin expression starting at\
    \ /tmp/tmpea9iczzf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in the array which are not greater than or equal to the element immediately\
    \ preceding it. Return 0 if no such element exists.\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8qbf3nmx.jl:19\nin expression starting at\
    \ /tmp/tmp8qbf3nmx.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the array arr has all\
    \ unique elements. \nIf there are two or more equal elements, return false.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzlnv0ofz.jl:19\nin expression starting at\
    \ /tmp/tmpzlnv0ofz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptysmqeua.jl:19\nin expression starting at\
    \ /tmp/tmptysmqeua.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the number of times the given element appears in an array. For example,\
    \ the number of times the value 3 appears in [1,2,3,4,5,6,7,8,9,10] would be 3.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplud5t0ez.jl:19\nin expression starting at\
    \ /tmp/tmplud5t0ez.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the median of a vector\n\
    The median is the value separating the higher half of a data set from the lower\
    \ half. \nThe median of a data set is the value separating the higher half of\
    \ a data set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a \nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61ccaag5.jl:19\nin expression starting at\
    \ /tmp/tmp61ccaag5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of elements in a vector that are not equal to its index.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfw84vpo6.jl:19\nin expression starting at\
    \ /tmp/tmpfw84vpo6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmanus9zk.jl:21\nin expression starting at\
    \ /tmp/tmpmanus9zk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for x in arr[2:end]\n        if x > largest\n  \
    \          largest = x\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptnjj37ex.jl:19\nin expression starting at\
    \ /tmp/tmptnjj37ex.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu2c07k3x.jl:19\nin expression starting at\
    \ /tmp/tmpu2c07k3x.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of elements in the array which are not greater than or equal\
    \ to the element immediately preceding it. \nIf no such element exists then return\
    \ -1. \nThe given array will not contain duplicate values.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5kd7aqbn.jl:19\nin expression starting at\
    \ /tmp/tmp5kd7aqbn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largest = arr[1] if arr[1] > arr[2] else largest\n \
    \   largest = arr[2] if arr[2] > arr[1] else largest\n    largest = arr[1] if\
    \ arr[1] > arr[2] else largest\n    largest = arr[2] if arr[2] > arr[1] else largest\n\
    \    largest = arr[1] if arr[1] > arr[2] else largest\n    largest = arr[2] if\
    \ arr[2] > arr[1] else largest\n    largest = arr[1] if arr[1] > arr[2] else largest\n\
    \    largest = arr[2] if arr[2] > arr[1] else largest\n    largest = arr[1] if\
    \ arr[1] > arr[2] else largest\n    largest = arr[2] if arr[2] > arr[1] else largest\n\
    \    largest = arr[1] if arr[1] > arr[2] else largest\n    largest = arr[2] if\
    \ arr[2] > arr[1] else largest\n    largest = arr[1] if arr[1] > arr[2] else largest\n\
    \    largest = arr[2] if arr[2] > arr[1] else largest\n    largest = arr[1] if\
    \ arr[1] > arr[2] else largest\n    largest = arr[2] if arr[2] > arr[1] else largest\n\
    \    largest = arr[1] if arr[1] > arr[2] else largest\n    largest = arr[2] if\
    \ arr[2] > arr[1] else largest\n    largest = arr[1] if arr[1] > arr[2] else largest\n\
    \    largest = arr[2] if arr[2] > arr[1] else largest\n    largest = arr[1] if\
    \ arr[1] > arr[2] else largest\n    largest = arr[2] if arr[2] > arr[1] else largest\n\
    \    largest = arr[1] if arr[1] > arr[2] else largest\n    largest = arr[2] if\
    \ arr[2] > arr[1] else largest\n    largest = arr[1] if arr[1] > arr[2] else largest\n\
    \    largest = arr[2] if arr[2] > arr[1] else largest\n    largest = arr[1] if\
    \ arr[1] > arr[2] else largest\n    largest = arr[2] if arr[2] > arr[1] else largest\n\
    \    largest = arr[1] if arr[1] > arr[2] else largest\n    largest = arr[2] if\
    \ arr[2] > arr[1] else largest\n    largest = arr[1] if arr[1] > arr[2] else largest\n\
    \    largest = arr[2] if arr[2] > arr\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp1hi9n9xc.jl:10 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1hi9n9xc.jl:12\n\
    in expression starting at /tmp/tmp1hi9n9xc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given array\
    \ is sorted in ascending order.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprigy4u73.jl:19\nin expression starting at\
    \ /tmp/tmprigy4u73.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = Int64(-1)\n    for x in arr\n        if x > largest\n      \
    \      largest = x\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg6mbps7w.jl:19\nin expression starting at\
    \ /tmp/tmpg6mbps7w.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdq3u8nwm.jl:19\nin expression starting at\
    \ /tmp/tmpdq3u8nwm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > arr[largest]\n\
    \            largest = i\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.0>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if the\
    \ given array contains no duplicates.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvxtr8yb.jl:19\nin expression starting at\
    \ /tmp/tmplvxtr8yb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of times an element\
    \ appears in an array. \nThe function should work for both sorted and unsorted\
    \ arrays.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoi6apne5.jl:21\nin expression starting at\
    \ /tmp/tmpoi6apne5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a vector that are not equal to zero.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdo0rdfao.jl:19\nin expression starting at\
    \ /tmp/tmpdo0rdfao.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] >= arr[largest]\n            largest = arr[index]\n    \
    \        largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2fdfl_r_.jl:21\nin expression starting at\
    \ /tmp/tmp2fdfl_r_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n\
    \        if arr[index] <= arr[largest]\n            largest = arr[index]\n   \
    \         largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsr_9al6n.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [-1]\n  Stacktrace:\n   [1] getindex\n    \
    \ @ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpsr_9al6n.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsr_9al6n.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsr_9al6n.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpsr_9al6n.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [-1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] can_arrange(arr::Vector{Int64})\n     @ Main /tmp/tmpsr_9al6n.jl:14\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsr_9al6n.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsr_9al6n.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpsr_9al6n.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access\
    \ 9-element Vector{Int64} at index [-1]\n  Stacktrace:\n   [1] getindex\n    \
    \ @ ./array.jl:861 [inlined]\n   [2] can_arrange(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpsr_9al6n.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsr_9al6n.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsr_9al6n.jl:25\ntest set:\
    \ Error Du"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsr_9al6n.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4n30an3e.jl:19\nin expression starting at\
    \ /tmp/tmp4n30an3e.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = -1\n    for i in 1:length(arr)\n    \
    \    if arr[i] > largest\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of unique elements\
    \ in an array. For example,\n    given [1,2,2,3] return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvkoluyxz.jl:21\nin expression starting at\
    \ /tmp/tmpvkoluyxz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5x2fuur5.jl:19\nin expression starting at\
    \ /tmp/tmp5x2fuur5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times the element\
    \ 0 appears in an array. For example, [1,0,2,0,3,0] has two zeros.\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0xmp7tw1.jl:19\nin expression starting at\
    \ /tmp/tmp0xmp7tw1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu5kpuu2k.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu5kpuu2k.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu5kpuu2k.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu5kpuu2k.jl:25\n  Expression: candidate([1, 2, 4, 5]) == -1\n\
    \   Evaluated: 5 == -1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu5kpuu2k.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu5kpuu2k.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu5kpuu2k.jl:26\n  Expression: candidate([1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10]) == 2\n   Evaluated: 10 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu5kpuu2k.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu5kpuu2k.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu5kpuu2k.jl:27\n  Expression: candidate([4, 8, 5, 7, 3]) ==\
    \ 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu5kpuu2k.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu5kpuu2k.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu5kpuu2k.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns the largest index of an element which is not greater than or equal to\
    \ the element immediately preceding it. If\n    no such element exists then return\
    \ -1. The given array will not contain\n    duplicate values.\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx10kk44.jl:19\nin expression starting at\
    \ /tmp/tmpjx10kk44.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw60yv14d.jl:19\nin expression starting at\
    \ /tmp/tmpw60yv14d.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.5>\n@time can_arrange([1,2,3])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the index of the element in the given array that\
    \ is closest to the given value. If there are multiple such elements then return\
    \ the smallest index.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1u46e13j.jl:19\nin expression starting at\
    \ /tmp/tmp1u46e13j.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.5>\n@time can_arrange([1,2,3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of times the given element appears\
    \ in an array. \nThe given array will not contain duplicate values.\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0yobnrs_.jl:19\nin expression starting at\
    \ /tmp/tmp0yobnrs_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the number of elements\
    \ in a vector which are not equal to zero.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjoeaq0tg.jl:19\nin expression starting at\
    \ /tmp/tmpjoeaq0tg.jl:19\n"
  exit_code: 1
  status: SyntaxError
